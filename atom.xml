<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tarantula-7&#39;s Blog</title>
  <subtitle>My Body Knows It&#39;s Time to Say GoodBye... ---- Dear Basketball</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://durant35.github.io/"/>
  <updated>2017-02-02T15:02:38.380Z</updated>
  <id>http://durant35.github.io/</id>
  
  <author>
    <name>Tarantula-7</name>
    <email>1109197209@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo，md源文件内容修改预览页面刷新无效</title>
    <link href="http://durant35.github.io/2017/02/02/hexo-md%E6%BA%90%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E4%BF%AE%E6%94%B9%E9%A2%84%E8%A7%88%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%97%A0%E6%95%88/"/>
    <id>http://durant35.github.io/2017/02/02/hexo-md源文件内容修改预览页面刷新无效/</id>
    <published>2017-02-02T12:42:12.000Z</published>
    <updated>2017-02-02T15:02:38.380Z</updated>
    
    <content type="html"><![CDATA[<p>　　之前在 <strong>Window</strong> 下面通过 <strong>hexo s</strong> 启动本地服务器，通过浏览器预览，对md源文件的当前修改能够通过网页刷新出来。这段时间在 <strong>Linux</strong> 上部署，就一直出现刷新页面无效的情况，必须重新启动服务器才能刷新，有时甚至还需要通过 <strong>hexo g</strong> 重新解析源文件才能成功刷新。之前有段时间也以为是 <strong>Linux</strong> 对带有中文名称的md源文件支持不好的缘故，因为将那些不能成功刷新的源文件的文件名修改下，去掉所有的中文字符后，就可以刷新有效了。</p>
<p>　　不过，今天尝试了这个方法，居然不行了，不知道是不是因为升级了 <strong>Hexo</strong> 的缘故，不过，却发现了更有效的解决方法，可以不用考虑源文件文件名的问题。</p>
<a id="more"></a>
<p>　　解决办法很简单，就是通过使用 <strong>hexo generate</strong> 的 <strong>watch</strong> 参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g --watch</div></pre></td></tr></table></figure></p>
<p>　　开启 <strong>hexo generate</strong> 的实时监控，对当前修改的源文件进行实时解析，这样浏览器刷新预览的就是最新的源文件解析的结果了。<br>　　<br>　　注意：<br>　　+ 使用 <strong>Typora</strong>编辑器 <strong>Hexo</strong> 的md源文件进行编写，在上述操作中会有奇怪的现象，详见 <a href="https://github.com/hexojs/hexo/issues/2245">hexo server 运行时自动更新出错把页面文章全部清空</a>。<br>　　+ <strong>hexo s</strong> 命令好像默认是会自动开启 <strong>hexo generate</strong> 的实时监控，上述操作显得画蛇添足；不过，万一像我一样呢？可能你就需要尝试一下上面的命令了。<br>　　+ 笔者最后放弃了 <strong>Typora</strong>编辑器，也没选择安装 <strong>Markdown</strong> 预览插件的 <strong>Sublime Text</strong>，而是选择了<a href="https://remarkableapp.github.io/linux/download.html">Remarkable</a>，下载官网提供的.deb，按照下面命令即可安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i remarkable_*.deb</div><div class="line">$ sudo apt-get install -f</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　之前在 &lt;strong&gt;Window&lt;/strong&gt; 下面通过 &lt;strong&gt;hexo s&lt;/strong&gt; 启动本地服务器，通过浏览器预览，对md源文件的当前修改能够通过网页刷新出来。这段时间在 &lt;strong&gt;Linux&lt;/strong&gt; 上部署，就一直出现刷新页面无效的情况，必须重新启动服务器才能刷新，有时甚至还需要通过 &lt;strong&gt;hexo g&lt;/strong&gt; 重新解析源文件才能成功刷新。之前有段时间也以为是 &lt;strong&gt;Linux&lt;/strong&gt; 对带有中文名称的md源文件支持不好的缘故，因为将那些不能成功刷新的源文件的文件名修改下，去掉所有的中文字符后，就可以刷新有效了。&lt;/p&gt;
&lt;p&gt;　　不过，今天尝试了这个方法，居然不行了，不知道是不是因为升级了 &lt;strong&gt;Hexo&lt;/strong&gt; 的缘故，不过，却发现了更有效的解决方法，可以不用考虑源文件文件名的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术留档" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/"/>
    
      <category term="Hexo" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://durant35.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>RaspberryPi, Use an external wireless card(ComFast-WU855P)</title>
    <link href="http://durant35.github.io/2017/01/25/raspberry_using_an_external_wireless_card(CF-WU855P)/"/>
    <id>http://durant35.github.io/2017/01/25/raspberry_using_an_external_wireless_card(CF-WU855P)/</id>
    <published>2017-01-24T16:52:41.000Z</published>
    <updated>2017-02-03T07:00:54.057Z</updated>
    
    <content type="html"><![CDATA[<p>　　树莓派3已经自带无线网卡，这是一种极大的便捷，真正将树莓派变成躲在一个角落里，安静地搞事情的计算机。然而对于树莓派B+或者树莓派2，除了少数免驱的外接无线网卡外（树莓派系统已经自带了驱动），大多数外接无线网卡还是需要经过配置才能使用的，下面就介绍使用过的一款无线网卡（<a href="http://en.comfast.com.cn/product/WirelessAdapter/item-155.html">ComFast-WU855P</a>）的驱动配置过程，该无线网卡采用 <strong>REALTEK8192</strong> 高阶芯片（从<a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.1.JY6QbF&amp;id=37237024789&amp;cm_id=140105335569ed55e27b&amp;abbucket=6&amp;skuId=57539293852">淘宝</a>上了解到的，不知道对不对），这是一款常用的芯片，本文安装的驱动理论上对采用该芯片的无线网卡都是可用的。</p>
<a id="more"></a>
<h4 id="COMFAST-WU855P"><a href="#COMFAST-WU855P" class="headerlink" title="COMFAST-WU855P"></a>COMFAST-WU855P</h4><p>　　本文使用的是与下图这款无线网卡类似的 <strong>COMFAST </strong> 的一款无线网卡产品。</p>
<center><img src="/img/raspberrypi/COMFAST.jpg" width="320px"/></center>

<h4 id="以内核模块的形式编译安装RTL8192驱动"><a href="#以内核模块的形式编译安装RTL8192驱动" class="headerlink" title="以内核模块的形式编译安装RTL8192驱动"></a>以内核模块的形式编译安装RTL8192驱动</h4><blockquote>
<p>Reference：<a href="http://www.geek-workshop.com/thread-16077-1-1.html">树莓派2编译天猫魔盘驱动（8192eu）</a></p>
</blockquote>
<p>　　注意，下面的所有操作都是通过 <strong>ssh</strong> 直接在树莓派上进行构建，所以相对耗时。通过交叉编译环境进行构建则速度明显加快，不过配置交叉编译环境过程也不是那么简单，有兴趣的同学可以尝试一下。<br>　　具体的步骤如下：</p>
<ol>
<li><p>下载内核源代码，为编译 <strong>RTL8192</strong> 驱动模块做准备</p>
<ul>
<li>下载 <strong>rpi-source</strong> 程序</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/Workspace</div><div class="line">$ mkdir wireless &amp;&amp; <span class="built_in">cd</span> wireless</div><div class="line">$ wget https://raw.githubusercontent.com/notro/rpi-source/master/rpi-source</div><div class="line">$ chmod a+x rpi-source</div></pre></td></tr></table></figure>
<ul>
<li>运行 <strong>rpi-source</strong>，这个程序会根据当前内核信息去官方github上下载相应的源码，下载根据网络需要一些时间（我大概等了15分钟）。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./rpi-source</div></pre></td></tr></table></figure>
<ul>
<li>下载程序需要一些依赖，根据提示通过 <strong>apt-get</strong> 安装即可，</li>
</ul>
<blockquote>
<p>ERROR:<br><strong>bc is NOT installed. Needed by ‘make modules_prepare’. On Raspbian, run ‘sudo apt-get install bc’ to install it.</strong><br><strong>*** ncurses-devel is NOT installed. Needed by ‘make menuconfig’. On Raspbian sudo apt-get install libncurses5-dev</strong><br>　　<br>这里我就需要安装下面几个依赖：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install bc</div><div class="line">$ sudo apt-get install libncurses5-dev</div><div class="line">$ ./rpi-source</div></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>下载程序运行中间的部分打印信息如下：</li>
</ul>
<blockquote>
<p><strong>Saving to: ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e.tar.gz’</strong><br><strong>/home/pi/linux-fa     [          &lt;=&gt;   ] 129.96M  1.92MB/s   in 73s</strong><br><strong>2017-02-03 05:46:58 (1.79 MB/s) - ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e.tar.gz’ saved [136269962]</strong><br><strong>Unpack kernel source…</strong><br><strong>*** Create symlink: /home/pi/linux</strong><br><strong>*** Create /lib/modules/<ver>/{build,source} symlinks</strong><br><strong>*** Kernel source already installed: /home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e</strong></p>
</blockquote>
<p>因此会在 <strong>“~ 目录”</strong> 下看到（如下图），此外还创建了一些快捷方式，总之，就是为下一步编译内核模块做好准备。</p>
<center><img src="/img/raspberrypi/rpi-source_result.png" width="420px"/></center></li>
<li><p>获取 <strong>RTL8192</strong> 驱动源代码，构建并安装  <strong>RTL8192</strong> 内核模块</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/wireless</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/Mange/rtl8192eu-linux-driver.git</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="comment"># git clone https://github.com/pvaret/rtl8192cu-fixes.git</span></div><div class="line">$ <span class="built_in">cd</span> &lt;your-git-clone-driver&gt;</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<p>注：亲测两个仓库的代码都可以编译构建。</p>
<ul>
<li>可能会出现的问题</li>
</ul>
<blockquote>
<p>Makefile:616: arch/armv6l/Makefile: No such file or directory<br>make[1]: *** No rule to make target ‘arch/armv6l/Makefile’.  Stop.<br>make[1]: Leaving directory ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e’<br>Makefile:1335: recipe for target ‘modules’ failed<br>make: *** [modules] Error 2</p>
</blockquote>
<ul>
<li>解决的方法是，根据提示创建通过 <strong>arch/armv6l</strong> 到 <strong>arm</strong> 的软链接，</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># `uname -r`是uname -r命令返回的结果，会自适应到不同的内核版本</span></div><div class="line">$ <span class="built_in">cd</span> /lib/modules/`uname -r`/build</div><div class="line"><span class="comment"># 根据错误提示，参考博文是作 **arch/armv7l** 的软连接，我这里是 **arch/armv6l**</span></div><div class="line">$ ln -sf arm arch/armv6l</div></pre></td></tr></table></figure>
<ul>
<li>顺利进行编译构建（树莓派B+大约需要17分钟），然后安装到系统目录下：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> &lt;your-git-clone-driver&gt;</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
</li>
<li><p>加载  <strong>RTL8192</strong> 内核模块</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo modprobe 8192eu</div></pre></td></tr></table></figure>
<p>然后，插上USB无线网卡，<strong>ifconfig</strong> 或者 <strong>iwconfig</strong> 应该可以看到 <strong>wlan0</strong>，如下图：</p>
<center><img src="/img/raspberrypi/wireless_result.png" width="540px"/></center>

</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　树莓派3已经自带无线网卡，这是一种极大的便捷，真正将树莓派变成躲在一个角落里，安静地搞事情的计算机。然而对于树莓派B+或者树莓派2，除了少数免驱的外接无线网卡外（树莓派系统已经自带了驱动），大多数外接无线网卡还是需要经过配置才能使用的，下面就介绍使用过的一款无线网卡（&lt;a href=&quot;http://en.comfast.com.cn/product/WirelessAdapter/item-155.html&quot;&gt;ComFast-WU855P&lt;/a&gt;）的驱动配置过程，该无线网卡采用 &lt;strong&gt;REALTEK8192&lt;/strong&gt; 高阶芯片（从&lt;a href=&quot;https://detail.tmall.com/item.htm?spm=a230r.1.14.1.JY6QbF&amp;amp;id=37237024789&amp;amp;cm_id=140105335569ed55e27b&amp;amp;abbucket=6&amp;amp;skuId=57539293852&quot;&gt;淘宝&lt;/a&gt;上了解到的，不知道对不对），这是一款常用的芯片，本文安装的驱动理论上对采用该芯片的无线网卡都是可用的。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="RaspberryPi" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/RaspberryPi/"/>
    
    
  </entry>
  
  <entry>
    <title>RaspberryPi, enable ssh without UI</title>
    <link href="http://durant35.github.io/2017/01/25/raspberry_enable-ssh-without-UI/"/>
    <id>http://durant35.github.io/2017/01/25/raspberry_enable-ssh-without-UI/</id>
    <published>2017-01-24T16:48:58.000Z</published>
    <updated>2017-02-03T06:41:27.905Z</updated>
    
    <content type="html"><![CDATA[<p>　　可能是我写录的树莓派系统image有问题吧，小伙伴都说默认应该是打开22端口，支持ssh的；但是我做的几张SD卡的系统都是不打开的，我很纳闷，怀疑用的是假的镜像吧。前几次都发生在实验室，显示器，HDMI线应有尽有，启动系统，简单地通过界面在系统的 <strong>Preferences</strong> 中开启ssh端口即可。然而这一次，发生在家里（因为之前一直没空写个关于树莓派外置无线网卡驱动安装的教程，想着利用寒假回家弄一弄），家里哪有实验室那么好的环境，所以，甭想通过界面操作开启。</p>
<p>　　那究竟能不能通过直接修改SD卡里面的image文件内容，不用UI的方式，开启ssh端口呢？通过下面的捣鼓发现，这是可行的。</p>
<a id="more"></a> 
<h4 id="SD卡里面就保存着树莓派系统"><a href="#SD卡里面就保存着树莓派系统" class="headerlink" title="SD卡里面就保存着树莓派系统"></a>SD卡里面就保存着树莓派系统</h4><p>　　SD卡里面有两个分区，系统文件保存在非 <strong>boot</strong> 分区中，如下图：</p>
<center><img src="/img/raspberrypi/sd_card.png" width="480px"/></center><br>　　<strong>/usr/bin/raspi-config</strong> 就是树莓派<strong>Preferences</strong>操作对应的配置文件，我们用编辑器（Sublime-Text）打开该文件，<strong>CTRL+F</strong> 找到与 <strong>ssh</strong> 配置相关的部分，即下图显示的 <strong>do_ssh()</strong>。通过<strong>enable</strong>和<strong>start</strong>字段可以推测，该部分的两条命令应该是对应于界面操作里面勾选启用<strong>ssh</strong>对应的操作，通过这两条命令，应该可以开启系统的<strong>ssh</strong>端口！<br><br><center><img src="/img/raspberrypi/raspi-config.jpg" width="360px"/></center>

<h4 id="将开启端口命令自启动"><a href="#将开启端口命令自启动" class="headerlink" title="将开启端口命令自启动"></a>将开启端口命令自启动</h4><p>　　我的想法是，要不让这两条命令开机启动吧，看看上一步的猜测是不是真的有效。<strong>/etc/rc.local</strong> 是配置系统自启动的文件，我们将与开启<strong>ssh</strong>端口相关的两条命令添加到 <strong>exit 0</strong> 之前，如下图所示。</p>
<center><img src="/img/raspberrypi/rc.local.jpg" width="360px"/></center>

<h4 id="nmap来检测"><a href="#nmap来检测" class="headerlink" title="nmap来检测"></a>nmap来检测</h4><p>　　上面的操作真的能得偿所愿吗？我们需要验证一下，看能否<strong>ssh</strong>进去已经启动的树莓派系统。然而问题又来了，树莓派的<strong>ip</strong>是哪一个呀？很不幸，我的树莓派是插在小米3路由器，笔记本连着小米3路由器的无线网络，不过，小米3路由器是通过无线桥接到一个信号还不错，通过<strong>WiFi万能钥匙</strong> 破解出密码的不知道是邻居哪家里面的网。无线桥接，<strong>DHCP</strong>全都由桥接的路由器管理，小弟不才，撞不出人家的管理密码。咋办呢？这里介绍一个强大的工具，<strong><a href="http://blog.csdn.net/keepsmi1e/article/details/9370049">nmap</a></strong>。</p>
<p>　　通过下面的命令可以扫描出局域网内所有的ip地址（进行ping扫描，打印出对扫描做出响应的主机，这里通过笔记本的ip可以知道整个局域网是192.168.1.0网段）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nmap -sP 192.168.1.0/24</div></pre></td></tr></table></figure>
<p>　　然后，把树莓派一拔一插，对比前后两次打印的ip地址列表的情况，就能找出树莓派的ip地址了。</p>
<p>　　也可以通过 <strong>nmap</strong> 命令查看一台主机开放了哪些端口，如下图。    </p>
<center><img src="/img/raspberrypi/nmap4ssh.jpg" width="360px"/></center>

<p>　　树莓派确实把<strong>ssh</strong>端口开放了，直接<strong>ssh</strong>也能够顺利进入树莓派系统，问题解决了。</p>
<h4 id="还原自启动，即可大功告成"><a href="#还原自启动，即可大功告成" class="headerlink" title="还原自启动，即可大功告成"></a>还原自启动，即可大功告成</h4><p>　　有必要每次系统启动都去开放 <strong>ssh</strong> 端口吗？可能没这个必要，因为经过两条命令的操作后，应该会修改系统的一些变量或者状态位，这些操作应该不是掉电还原的，否则，在第一节中，关闭ssh端口就不需要额外的两条命令了吧。我们不妨再试试。</p>
<p>　　既可以直接在起来的系统中将自启动文件 <strong>/etc/rc.local</strong> 还原，当然也可以像第一节中那样，还是对SD卡的内容进行修改。</p>
<p>　　还原<strong>rc.local</strong>，再把SD卡插回去或者<strong>reboot</strong>系统，还是能够顺利通过<strong>ssh</strong>进入树莓派系统的，大功告成。    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　可能是我写录的树莓派系统image有问题吧，小伙伴都说默认应该是打开22端口，支持ssh的；但是我做的几张SD卡的系统都是不打开的，我很纳闷，怀疑用的是假的镜像吧。前几次都发生在实验室，显示器，HDMI线应有尽有，启动系统，简单地通过界面在系统的 &lt;strong&gt;Preferences&lt;/strong&gt; 中开启ssh端口即可。然而这一次，发生在家里（因为之前一直没空写个关于树莓派外置无线网卡驱动安装的教程，想着利用寒假回家弄一弄），家里哪有实验室那么好的环境，所以，甭想通过界面操作开启。&lt;/p&gt;
&lt;p&gt;　　那究竟能不能通过直接修改SD卡里面的image文件内容，不用UI的方式，开启ssh端口呢？通过下面的捣鼓发现，这是可行的。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="RaspberryPi" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/RaspberryPi/"/>
    
    
  </entry>
  
  <entry>
    <title>8 sort functions using python</title>
    <link href="http://durant35.github.io/2017/01/24/python_sort-Functions/"/>
    <id>http://durant35.github.io/2017/01/24/python_sort-Functions/</id>
    <published>2017-01-24T08:18:38.000Z</published>
    <updated>2017-02-02T07:15:24.072Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>libpcap, 32-bit&amp;64-bit</title>
    <link href="http://durant35.github.io/2016/10/10/linux_libpcap%2032-bit&amp;64-bit/"/>
    <id>http://durant35.github.io/2016/10/10/linux_libpcap 32-bit&amp;64-bit/</id>
    <published>2016-10-10T02:42:37.000Z</published>
    <updated>2016-10-10T07:30:43.225Z</updated>
    
    <content type="html"><![CDATA[<p>　情况是这样的，在之前讲过的回播 <strong>.pcap</strong> 数据的 <strong>Velodyne_player</strong> 程序中，需要调用 <strong>Winpcap</strong> (其实就是 <strong>libpcap</strong> 的 Win挫版) 的 API 解析 <strong>.pcap</strong> 数据，再通过 UDP 发送出去。我们的 <strong>Velodyne_player</strong> 是一个 <strong>Win32</strong> 的程序，显然调用的就是32位的 <strong>Winpcap</strong> 库的 API； 后来我们也移植了一个 <strong>.pcap</strong> 采集程序的 Linux 版本，结果，用该 Linux 版本采集程序采集到的 <strong>.pcap</strong> 数据却没办法用我们 Win 下的 <strong>Velodyne_player</strong> 回播。后来发现，我们的 Linux 版本的采集程序用的是64位的 <strong>libpcap</strong> 库(因为系统是64位的 Ubuntu16.04，默认安装的就是64位的 <strong>libpcap</strong> 库)，64位和32位的 <strong>libpcap</strong>，在时间戳上有很关键的区别，下面是开源的 <strong>pcap.h</strong> 中的声明:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line"> * Generic per-packet information, as supplied by libpcap.</div><div class="line"> *</div><div class="line"> * The time stamp can and should be a "struct timeval", regardless of</div><div class="line"> * whether your system supports 32-bit tv_sec in "struct timeval",</div><div class="line"> * 64-bit tv_sec in "struct timeval", or both if it supports both 32-bit</div><div class="line"> * and 64-bit applications.  The on-disk format of savefiles uses 32-bit</div><div class="line"> * tv_sec (and tv_usec); this structure is irrelevant to that.  32-bit</div><div class="line"> * and 64-bit versions of libpcap, even if they're on the same platform,</div><div class="line"> * should supply the appropriate version of "struct timeval", even if</div><div class="line"> * that's not what the underlying packet capture mechanism supplies.</div><div class="line"> */</span></div><div class="line"><span class="keyword">struct</span> pcap_pkthdr &#123;</div><div class="line">  <span class="keyword">struct</span> timeval ts;	<span class="comment">/* time stamp */</span></div><div class="line">  bpf_u_int32 caplen;	<span class="comment">/* length of portion present */</span></div><div class="line">  bpf_u_int32 len;	<span class="comment">/* length this packet (off wire) */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　对于上面遇到的问题，我们想到的解决办法是，移植的 Linux 版本采集程序生成32位的，而不是目前的64位。因为现在装的是64位的 <strong>libpcap</strong>(64位系统使然)，那接下来的问题便是，如何在64位的 <strong>Ubuntu16.04</strong> 上面安装32位的 <strong>libpcap</strong> 库，然后生成我们需要的32位数据采集程序(-m32 or -m64)。</p>
<h3 id="Generate-32-bit-exes-depending-on-libpcap"><a href="#Generate-32-bit-exes-depending-on-libpcap" class="headerlink" title="Generate 32-bit exes depending on libpcap"></a>Generate 32-bit exes depending on libpcap</h3><ol>
<li><p>64位系统默认安装的包都是64位的，所以，64位的 <strong>Ubuntu16.04</strong> 安装64位的 <strong>libpcap</strong> 库比较简单。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/347788/how-can-i-install-libpcap-header-files-on-ubuntu-12-04">How can I install libpcap header files on Ubuntu 12.04?</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ sudo apt-get install libpcap0.8 libpcap0.8-dev libpcap-dev</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>64位的 <strong>Ubuntu16.04</strong> 安装32位的 <strong>libpcap</strong> 库则比较麻烦一点。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/654079/libpcap-32-bit-on-64-bit-ubuntu">libpcap 32 bit on 64 bit Ubuntu</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># enable multiarch support for i386 architecture</span></div><div class="line">xxx@...$ sudo dpkg --add-architecture i386</div><div class="line"><span class="comment"># update the source </span></div><div class="line">xxx@...$ sudo apt-get update</div><div class="line"><span class="comment"># now, you can install the pcap library</span></div><div class="line">xxx@...$ sudo apt-get install libpcap0.8:i386 libpcap0.8-dev:i386 libpcap-dev:i386</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>装了32位的 <strong>libpcap</strong> 库，并不意味着你就能编译32位的，<strong>libpcap</strong> 应用程序，因为，64位系统默认并没有32位应用程序需要的基本库(诸如<strong>C/C++标准库</strong>)，所以需要安装好基本库环境。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/709893/14-04-01-32-bit-missing-g-64-bit-include-files-when-cross-compiling">14.04.01 32-bit: Missing g++ 64-bit include files when cross-compiling</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ sudo apt-get install g++-multilib</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>安装好32位的基本库，还有 <strong>libpcap</strong> 后，我们就能生成需要的32位程序了。步骤很简单，源代码不需要修改，在 <strong>CodeBlocks</strong> 中只需要在项目对应的 <strong>Build Option</strong> 中将 <strong>-m64</strong> 调整为 <strong>-m32</strong>；对于其他构建方式(如 <strong>cmake</strong>)，方法应该类似，核心都是 <strong>-m32</strong> 还是 <strong>-m64</strong> 作为构建参数。</p>
</li>
</ol>
<h3 id="Linux-下如何查看程序-库信息"><a href="#Linux-下如何查看程序-库信息" class="headerlink" title="Linux 下如何查看程序/库信息"></a>Linux 下如何查看程序/库信息</h3><p>1.查看导出信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xxx@...$ nm -D xxx.so/xxx.out</div><div class="line">xxx@...$ nm -g xxx.a</div><div class="line"><span class="comment"># or using objdump</span></div><div class="line">xxx@...$ objdump -tT xxx.so</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>nm [option]:</strong><br>-A 在每个符号信息的前面打印所在对象文件名称；<br>-C 输出demangle过了的符号名称；<br>-D 打印动态符号；<br>-l 使用对象文件中的调试信息打印出所在源文件及行号；<br>-n 按照地址/符号值来排序；<br>-u 打印出那些未定义的符号</p>
</blockquote>
<p>2.查看依赖库信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看动态依赖库信息</span></div><div class="line">xxx@...$ ldd xxx.so/xxx.out</div></pre></td></tr></table></figure></p>
<p>3.查看程序/库位数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ objdump <span class="_">-a</span> xxx.a/xxx.so/xxx.out</div></pre></td></tr></table></figure></p>
<blockquote>
<p>输出结果: elf32-i386或elf64-x86-64</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　情况是这样的，在之前讲过的回播 &lt;strong&gt;.pcap&lt;/strong&gt; 数据的 &lt;strong&gt;Velodyne_player&lt;/strong&gt; 程序中，需要调用 &lt;strong&gt;Winpcap&lt;/strong&gt; (其实就是 &lt;strong&gt;libpcap&lt;/strong&gt; 的 Win挫版) 的 API 解析 &lt;strong&gt;.pcap&lt;/strong&gt; 数据，再通过 UDP 发送出去。我们的 &lt;strong&gt;Velodyne_player&lt;/strong&gt; 是一个 &lt;strong&gt;Win32&lt;/strong&gt; 的程序，显然调用的就是32位的 &lt;strong&gt;Winpcap&lt;/strong&gt; 库的 API； 后来我们也移植了一个 &lt;strong&gt;.pcap&lt;/strong&gt; 采集程序的 Linux 版本，结果，用该 Linux 版本采集程序采集到的 &lt;strong&gt;.pcap&lt;/strong&gt; 数据却没办法用我们 Win 下的 &lt;strong&gt;Velodyne_player&lt;/strong&gt; 回播。后来发现，我们的 Linux 版本的采集程序用的是64位的 &lt;strong&gt;libpcap&lt;/strong&gt; 库(因为系统是64位的 Ubuntu16.04，默认安装的就是64位的 &lt;strong&gt;libpcap&lt;/strong&gt; 库)，64位和32位的 &lt;strong&gt;libpcap&lt;/strong&gt;，在时间戳上有很关键的区别，下面是开源的 &lt;strong&gt;pcap.h&lt;/strong&gt; 中的声明:&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Generic per-packet information, as supplied by libpcap.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * The time stamp can and should be a &quot;struct timeval&quot;, regardless of&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * whether your system supports 32-bit tv_sec in &quot;struct timeval&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 64-bit tv_sec in &quot;struct timeval&quot;, or both if it supports both 32-bit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * and 64-bit applications.  The on-disk format of savefiles uses 32-bit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * tv_sec (and tv_usec); this structure is irrelevant to that.  32-bit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * and 64-bit versions of libpcap, even if they&#39;re on the same platform,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * should supply the appropriate version of &quot;struct timeval&quot;, even if&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * that&#39;s not what the underlying packet capture mechanism supplies.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pcap_pkthdr &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval ts;	&lt;span class=&quot;comment&quot;&gt;/* time stamp */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bpf_u_int32 caplen;	&lt;span class=&quot;comment&quot;&gt;/* length of portion present */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bpf_u_int32 len;	&lt;span class=&quot;comment&quot;&gt;/* length this packet (off wire) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
      <category term="Linux" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/Linux/"/>
    
    
      <category term="pcap" scheme="http://durant35.github.io/tags/pcap/"/>
    
      <category term="Linux" scheme="http://durant35.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Key Word Engineering</title>
    <link href="http://durant35.github.io/2016/10/09/OverlappingSounds_Key%20Word%20Engineering/"/>
    <id>http://durant35.github.io/2016/10/09/OverlappingSounds_Key Word Engineering/</id>
    <published>2016-10-09T00:14:45.000Z</published>
    <updated>2017-01-30T02:55:27.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><a id="more"></a>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><blockquote>
<p><strong>DL</strong>: Deep Learning</p>
</blockquote>
<p><a href="http://www.cnblogs.com/linJie1930906722/p/5768669.html">http://www.cnblogs.com/linJie1930906722/p/5768669.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A&quot;&gt;&lt;/a&gt;A&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Key-words" scheme="http://durant35.github.io/tags/Key-words/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客主题Yelee迁移笔记(二)</title>
    <link href="http://durant35.github.io/2016/10/07/hexo_Yelee%20Migrant%20Note(2)/"/>
    <id>http://durant35.github.io/2016/10/07/hexo_Yelee Migrant Note(2)/</id>
    <published>2016-10-07T07:33:41.000Z</published>
    <updated>2016-10-07T07:50:00.209Z</updated>
    
    <content type="html"><![CDATA[<p>　本文记录了 <strong>Hexo</strong> 首页与归档博文排序如何自定义，想实现的功能是 <strong>index</strong> 按照修改日期排序，最近修改的文章置顶显示；<strong>Archives</strong> 归档则按照默认的创建时间前后排序。<br><a id="more"></a></p>
<blockquote>
<p>Reference: <a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/">解决Hexo置顶问题</a></p>
</blockquote>
<p>　Hexo 目录下的 <strong>node_modules</strong> 中存放跟 <strong>hexo generator</strong> 命令相关的 hexo 模块，其中 <strong>/hexo-generator-index/lib/generator.js</strong> 还有  <strong>/hexo-generator-archive/lib/generator.js</strong> 分别用于生成 <strong>index</strong> 和 <strong>Archives</strong> 归档页面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</div><div class="line"> </div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</div><div class="line"> </div><div class="line">  <span class="comment">//comment following 1 line</span></div><div class="line">  <span class="comment">//var posts = locals.posts.sort('-date');</span></div><div class="line"> </div><div class="line">  <span class="comment">//add following 5 lines </span></div><div class="line">  <span class="keyword">var</span> posts = locals.posts;</div><div class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> b.updated - a.updated;</div><div class="line">    <span class="comment">//return a.date - b.date;</span></div><div class="line">  &#125;);</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    <span class="attr">perPage</span>: config.index_generator.per_page,</div><div class="line">    <span class="attr">layout</span>: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    <span class="attr">format</span>: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">__index</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　本文记录了 &lt;strong&gt;Hexo&lt;/strong&gt; 首页与归档博文排序如何自定义，想实现的功能是 &lt;strong&gt;index&lt;/strong&gt; 按照修改日期排序，最近修改的文章置顶显示；&lt;strong&gt;Archives&lt;/strong&gt; 归档则按照默认的创建时间前后排序。&lt;br&gt;
    
    </summary>
    
      <category term="技术留档" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/"/>
    
      <category term="Hexo" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://durant35.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>初识ROS自主导航</title>
    <link href="http://durant35.github.io/2016/10/03/ROS_ROS_Navigation_GettingStarted/"/>
    <id>http://durant35.github.io/2016/10/03/ROS_ROS_Navigation_GettingStarted/</id>
    <published>2016-10-03T09:43:09.000Z</published>
    <updated>2016-10-03T13:32:46.531Z</updated>
    
    <content type="html"><![CDATA[<p>　　To add navigation to a robot, we need to launch 3 nodes:</p>
<blockquote>
<ul>
<li>map_server: to provide the static map {“*.yaml” &amp; “*.pgm”}, against which the robot will localize and plan.</li>
<li>amcl: to localize the robot against the static map.</li>
<li>move_base: to handle global planning and local control for the robot.</li>
</ul>
</blockquote>
<p>　　<strong>amcl</strong> 是移动机器人二维环境下的概率定位系统，它实现了自适应(或 <strong>kdl</strong> 采样)的 <strong>蒙特卡洛定位</strong> 方法，其中针对已有的地图使用 <strong>粒子滤波器</strong> 跟踪一个机器人的姿态。</p>
<p>　　<strong>move_base</strong> 提供了 ROS 导航的配置，运行，交互接口，主要包括两个部分：</p>
<blockquote>
<p>　(1) 全局路径规划：根据给定的目标位置进行总体路径的规划<br>　(2) 局部路径规划：根据附近的障碍物信息进行躲避路线规划<br><a id="more"></a></p>
</blockquote>
<h3 id="amcl"><a href="#amcl" class="headerlink" title="amcl"></a>amcl</h3><p>　　<font color="blue">amcl(Adaptive Monte Carlo Localization) —-&gt; pose(position, oriention) &lt;—- map 坐标系</font></p>
<blockquote>
<p>自主定位</p>
<ul>
<li>全局定位：通过测机器人的绝对未知来定位，定位的精度较高，并且可以用来修复局部定位的定位误差</li>
<li>局部定位：通过测量相对于机器人初始位置的距离和方向来确定当前的位姿，但随着时间的累计造成定位的误差较大，无法精确定位</li>
</ul>
</blockquote>
<p>　　AMCL maintains a set of poses, representing where it thinks the robot might be, each of these candidate pose has associated with a probability: higher-probability poses are more likely to be where the robot actually is.</p>
<p>　　<font color="green">When amcl first starts up, you have to give it the initial pose(position and oriention) of the robot as this is something amcl cannot figure out on its own.</font></p>
<p>　　As the robot moves around ,the sensor readings are compared to the readings that would be expected for each of the poses, according to the map:</p>
<blockquote>
<ul>
<li>consistent with the map, probablity <strong>↗</strong></li>
<li>inconsistent with the map, probablity <strong>↘</strong></li>
</ul>
</blockquote>
<p>　　Over time, candidate poses with very low probability go away, while those with high probability stick around.</p>
<h3 id="move-base"><a href="#move-base" class="headerlink" title="move_base"></a>move_base</h3><p>　在 ROS 的导航中，首先会通过全局路径规划，计算出机器人到目标位置的全局路线，这一功能是 <strong>navfn</strong> 这个包实现的。</p>
<blockquote>
<p>　<strong>navfn</strong> 通过 <strong>Dijkstra</strong> 最优路径的算法，计算 costmap 上的最小花费路径，作为机器人的全局路线。(将来在算法上应该还会加入 <strong>A*</strong> 算法)</p>
</blockquote>
<p>　本地的实时规划是利用 <strong>base_local_planner</strong> 包实现的，该包使用 <strong>Trajectory Rollout</strong> 和 <strong>Dynamic Window Approaches</strong> 算法计算每个周期内应该行驶的速度和角度(dx, dy, dtheta velocities)</p>
<blockquote>
<p>　<strong>base_local_planner</strong> 这个包通过地图数据，通过算法搜索到达目标的多条路径，利用一些评价标准(是否会撞到障碍物，所需要的时间等等)，选取最优的路径，并且计算所需要的实时速度和角度。<br>　<strong>Trajectory Rollout</strong> 和 <strong>Dynamic Window Approaches</strong> 算法的主要思路如下：<br>　(1) 采样机器人当前的状态(dx, dy, dtheta)<br>　(2) 针对每个采样速度，计算机器人以该速度行驶一段时间后的状态，得出一条行驶路线<br>　(3) 利用一些评价标准为多条路线打分<br>　(4) 根据打分，选择最优路线<br>　(5) 重复上面的过程</p>
</blockquote>
<p>　<strong>move_base</strong> 有一下几个重要的配置文件：</p>
<ul>
<li>costmap_common_params.yaml(通用代价地图参数):<blockquote>
<p> We define our laser to be an observation source, as a result, data published on the scan topic will be used to update the costmaps, both inserting obstacles(marking) and asserting free space(clearing).<br>　<font color="green">footprint; observation_source</font></p>
</blockquote>
</li>
<li>global_common_params.yaml(全局规划代价地图参数):<blockquote>
<p> Tell the global costmap to use a static map (to be provided by the map server) and that it should do its reasoning in the map frame, while it should consider the canonical(基底) frame of the robot to be base_link.<br>　<font color="green">global_frame; robot_base_frame; static_map</font></p>
</blockquote>
</li>
<li>local_common_params.yaml(局部规划代价地图参数):<blockquote>
<p> Tell the local costmap to use a small rolling window: the robot always remains at the center of the window, with obstacle data outside the window being discarded, and potentially reobserved later, as the robot moves.</p>
</blockquote>
</li>
</ul>
<h3 id="costmap-2d"><a href="#costmap-2d" class="headerlink" title="costmap_2d"></a>costmap_2d</h3><blockquote>
<ul>
<li>Provides an implementation of a 2D costmap that takes in sensor data from the world, builds a 2D or 3D occupancy grid od the data and inflates costs in a 2D costmap based on the occupancy grid and a user specificed radius.</li>
<li>Also provides support for map_server based intialization of a costmap, rolling window based costmaps, and parameter based subscription and configuration of sensor topics.</li>
</ul>
</blockquote>
<p>　　在 ROS 的导航中，<strong>costmap_2d</strong> 这个包主要负责根据传感器的信息建立和更新二维或三维的地图。ROS 的地图(costmap) 采用网格(grid)的形式，每个网格的值从 <strong>0~255</strong> 分为三种状态: 占有(有障碍物)，无用(空闲的)，未知。因此有五种状态：</p>
<blockquote>
<p>　(1) Lethal(致命的)：机器人中心与该网格的中心重合，此时机器人必然与障碍物冲突<br>　(2) Possibly circumscribed(外切)：网格的外切圆与机器人的轮廓外切，此时机器人相当于靠在障碍物附近，所以不一定冲突<br>　(3) Inscribed(内切)：网格外切圆与机器人的轮廓内切，此时的机器人必然与障碍物冲突<br>　(4) Free space(自由空间)：没有障碍物的空间<br>　(5) Unknown：未知的空间</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　To add navigation to a robot, we need to launch 3 nodes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;map_server: to provide the static map {“*.yaml” &amp;amp; “*.pgm”}, against which the robot will localize and plan.&lt;/li&gt;
&lt;li&gt;amcl: to localize the robot against the static map.&lt;/li&gt;
&lt;li&gt;move_base: to handle global planning and local control for the robot.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;strong&gt;amcl&lt;/strong&gt; 是移动机器人二维环境下的概率定位系统，它实现了自适应(或 &lt;strong&gt;kdl&lt;/strong&gt; 采样)的 &lt;strong&gt;蒙特卡洛定位&lt;/strong&gt; 方法，其中针对已有的地图使用 &lt;strong&gt;粒子滤波器&lt;/strong&gt; 跟踪一个机器人的姿态。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;move_base&lt;/strong&gt; 提供了 ROS 导航的配置，运行，交互接口，主要包括两个部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　(1) 全局路径规划：根据给定的目标位置进行总体路径的规划&lt;br&gt;　(2) 局部路径规划：根据附近的障碍物信息进行躲避路线规划&lt;br&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="ROS" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/ROS/"/>
    
    
      <category term="ROS" scheme="http://durant35.github.io/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>sudo, unable to resolve host</title>
    <link href="http://durant35.github.io/2016/10/03/linux_sudo_unable_to_resolve_host/"/>
    <id>http://durant35.github.io/2016/10/03/linux_sudo_unable_to_resolve_host/</id>
    <published>2016-10-03T02:42:07.000Z</published>
    <updated>2016-10-03T02:55:50.345Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Reference:<br>　<a href="http://askubuntu.com/questions/59458/error-message-when-i-run-sudo-unable-to-resolve-host-none">Error message when I run sudo: unable to resolve host (none)</a></p>
</blockquote>
<p>　现象是这样的。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...:~$ sudo <span class="literal">true</span></div><div class="line">sudo: unable to resolve host (...)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　解决的方法如下。</p>
<blockquote>
<p>Two things to check (assuming your machine is called my-machine, you can change this as appropriate):</p>
<ul>
<li>That the /etc/hostname file contains just the name of the machine.</li>
<li>That /etc/hosts has an entry for localhost. It should have something like:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1    localhost.localdomain localhost</div><div class="line">127.0.1.1    my-machine</div></pre></td></tr></table></figure>
</li>
</ul>
<p>If either of these files aren’t correct (since you can’t sudo), you may have to reboot the machine into recovery mode and make the modifications, then reboot to your usual environment.</p>
</blockquote>
<p>　我遇到的问题是，通过UI系统设置修改了机器名，<strong>/etc/hostname</strong> 是修改过来了，但是 <strong>/etc/hosts</strong> 中却还是保留了原来的机器名。<br>　这个问题，在使用 <strong>Networking-ROS</strong> 的运行过程中使得通过网络连接的分布式 <strong>master</strong> 和 <strong>slave</strong> 无法正常通讯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Reference:&lt;br&gt;　&lt;a href=&quot;http://askubuntu.com/questions/59458/error-message-when-i-run-sudo-unable-to-resolve-host-none&quot;&gt;Error message when I run sudo: unable to resolve host (none)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　现象是这样的。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;xxx@...:~$ sudo &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo: unable to resolve host (...)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://durant35.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ROS Basics</title>
    <link href="http://durant35.github.io/2016/10/02/ROS_ROS_Basics/"/>
    <id>http://durant35.github.io/2016/10/02/ROS_ROS_Basics/</id>
    <published>2016-10-02T13:18:03.000Z</published>
    <updated>2016-10-08T12:04:54.265Z</updated>
    
    <content type="html"><![CDATA[<p>　　ROS 基本概念以及经常使用的命令。</p>
<h3 id="ROS-文件系统"><a href="#ROS-文件系统" class="headerlink" title="ROS 文件系统"></a>ROS 文件系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取软件包有关信息</span></div><div class="line">xxx@...$ rospack find [package-name]</div><div class="line"><span class="comment"># 查看环境变量(ROS_PACKAGE_PATH)</span></div><div class="line">xxx@...$ <span class="built_in">export</span> | grep ROS</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="ROS-package"><a href="#ROS-package" class="headerlink" title="ROS package"></a>ROS package</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看一级依赖包信息，内容大致为 packages.xml 所示信息</span></div><div class="line">xxx@...$ rospack depends1 [package-name]</div><div class="line"></div><div class="line"><span class="comment"># catkin_make 构建，基于 cmake</span></div><div class="line">xxx@...$ catkin_make [make-targets] [-DCMAKE_INSTALL_PREFIX=xxx]</div></pre></td></tr></table></figure>
<h3 id="ROS-服务和参数"><a href="#ROS-服务和参数" class="headerlink" title="ROS 服务和参数"></a>ROS 服务和参数</h3><blockquote>
<p>服务是节点之间通讯的一种方式 {request –&gt; response}<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosservice list</div><div class="line">xxx@...$ rosservice <span class="built_in">type</span> [service-name]</div><div class="line">xxx@...$ rosservice call [service-name] [args]</div></pre></td></tr></table></figure></p>
<p>参数服务器操作<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosparam list</div><div class="line">xxx@...$ rosparam <span class="built_in">set</span>/get [param-name]</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="ROS-调试"><a href="#ROS-调试" class="headerlink" title="ROS 调试"></a>ROS 调试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun rqt_console rqt_console</div><div class="line"> </div><div class="line">xxx@...$ rosrun rqt_logger_level rqt_logger_level</div><div class="line"> </div><div class="line"><span class="comment"># 检查 ROS 系统</span></div><div class="line">xxx@...$ roswtf</div></pre></td></tr></table></figure>
<h3 id="ROS-节点"><a href="#ROS-节点" class="headerlink" title="ROS 节点"></a>ROS 节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前运行的 ROS 节点信息</span></div><div class="line">xxx@...$ rosnode list</div><div class="line"> </div><div class="line"><span class="comment"># 返回一个特定节点信息</span></div><div class="line">xxx@...$ rosnode info /&lt;node-name&gt;</div><div class="line"> </div><div class="line"><span class="comment"># 启动某个节点，需要明确该节点属于哪个package</span></div><div class="line">xxx@...$ rosrun [package-name] [node-name]</div><div class="line"> </div><div class="line"><span class="comment"># 在运行所有 ROS 程序节点前 master 节点必须先要运行起来</span></div><div class="line"><span class="comment"># roslaunch 会自动先启动 master 节点</span></div><div class="line">xxx@...$ roscore</div></pre></td></tr></table></figure>
<h3 id="ROS-话题"><a href="#ROS-话题" class="headerlink" title="ROS 话题"></a>ROS 话题</h3><p>　　<font color="blue">通过 <strong>rqt_graph</strong> 命令显示当前系统运行情况动态图，能准确了解系统的整体框架！</font><br>    <img src="/img/ROS/navigation_rqt_graph.png" /><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun rqt_graph rqt_graph</div></pre></td></tr></table></figure></p>
<p>　　其他的有关 ROS topic 的命令对于了解整个系统数据流向，数据信息(如频率，数据类型等)有极大的辅助作用！<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示某个话题上发布的数据</span></div><div class="line">xxx@...$ rostopic <span class="built_in">echo</span> /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 分别显示所有发布和订阅的话题及其类型的详细信息</span></div><div class="line">xxx@...$ rostopic list -v</div><div class="line"> </div><div class="line"><span class="comment"># 显示某个topic所有的发布节点和订阅节点</span></div><div class="line">xxx@...$ rostopic info /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据类型</span></div><div class="line">xxx@...$ rostopic <span class="built_in">type</span> /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 发布数据到topic</span></div><div class="line"><span class="comment">#  &#123;-1&#125; 发布一条消息后马上退出,option</span></div><div class="line"><span class="comment">#  &#123;-r ?&#125; 稳定频率?hz的命令流,option</span></div><div class="line">xxx@...$ rostopic pub &#123;-1&#125; /[topic] [msg_type] &#123;-r ?&#125; -- [args]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据发布频率</span></div><div class="line">xxx@...$ rostopic hz /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据变化图形</span></div><div class="line">xxx@...$ rosrun rqt_plot rqt_plot</div></pre></td></tr></table></figure></p>
<p>1.节点中如何按照一定频率发布 topic<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="keyword">double</span> frequency)</span></span>;</div><div class="line"><span class="keyword">while</span>(ros::ok())&#123;</div><div class="line">  ros::spinOnce();</div><div class="line">  loop_rate.sleep();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li><strong>ros::spin()</strong>　blocks until ros invokes a shutdown(频率与callback函数相关！！)</li>
<li><strong>ros::spinOnce()</strong> handles the event and return immediatey(可控频率！)</li>
</ul>
</blockquote>
<p>2.节点中如何订阅 topic<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ros::NodeHandle n;</div><div class="line">ros::Publisher pub = n.advertise(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;topic, </div><div class="line">       <span class="keyword">uint32_t</span> queue_size, <span class="keyword">bool</span> latch=<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>3.<font color="blue"><strong>消息调试可能的步骤!!!</strong></font><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rostopic list -v</div><div class="line">xxx@...$ rostopic info /&lt;topic-name&gt;</div><div class="line">xxx@...$ rosrun tf view_frame</div></pre></td></tr></table></figure></p>
<h3 id="使用-roslaunch"><a href="#使用-roslaunch" class="headerlink" title="使用 roslaunch"></a>使用 roslaunch</h3><p>　　启动定义在　<strong>launch</strong> 文件中的多个节点<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ roslaunch [package] [file-name.launch]</div></pre></td></tr></table></figure></p>
<p>　　<strong>roslaunch</strong> 在大型系统中的使用技巧</p>
<ol>
<li><p>高层次的 launch 文件应该简短，利用 <strong>include</strong> 指令将系统的组成部分和 <strong>ROS parameter</strong> 引用过来即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"$(find package-name)/.../..."</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>当一个给定类型的消息在不同的情况下发布在不同的 topic 上，可以使用 <strong>remapping</strong>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"topic-name"</span> <span class="attr">to</span>=<span class="string">"xxx"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>参数</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 声明和使用</div><div class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">value</span>=<span class="string">"xxx"</span>/&gt;</span></div><div class="line">$(arg name)</div><div class="line"># 通过*.yaml文件加载</div><div class="line">#  通过 ns 划分 namespace</div><div class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"*.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> [<span class="attr">ns</span>=<span class="string">"xxx"</span>] /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>launch 文件的重用以及参数覆盖(当前文件声明覆盖外部文件声明)应少用为妙。</p>
</li>
</ol>
<h3 id="tf-坐标变换树"><a href="#tf-坐标变换树" class="headerlink" title="tf 坐标变换树"></a>tf 坐标变换树</h3><p>　　<font color="blue"><strong>tf</strong> 变换树定义了不同坐标系之间的平移和旋转变换关系，通过 <strong>rqt_tf_tree</strong> 命令查看当前系统 <strong>tf 变换树</strong> 能够有效的对系统缺漏做出判断！</font><br>    <center><img src="/img/ROS/slam_tf_tree.png" width="640px"/></center><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看the tree of frame</span></div><div class="line">xxx@...$ rosrun rqt_tf_tree rqt_tf_tree</div><div class="line"><span class="comment"># 查看一对不同坐标间的变换</span></div><div class="line">xxx@...$ rosrun tf tf_echo [reference_frame] [target_frame]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>ROS 使用 <strong>tf</strong> 来决定机器人的位置和静态地图中的传感器数据，但是 <strong>tf</strong> 中没有机器人的速度信息，所以导航功能包要求机器人能够通过里程计信息源发布包含速度信息的里程计(数据类型: <strong>nav_msgs/Odometry</strong>), <strong>“/odom”</strong></p>
</blockquote>
<h3 id="rosbag-数据操作"><a href="#rosbag-数据操作" class="headerlink" title="rosbag 数据操作"></a>rosbag 数据操作</h3><ol>
<li><p>记录数据</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosbag record -o &lt;file-name&gt; /scan /tf /&lt;topic-name&gt;...</div><div class="line"><span class="comment"># CTRL+C to generate &lt;file-name&gt;.bag</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据仿真</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosbag play &lt;file-name&gt;.bag --clock</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="保存-SLAM-地图"><a href="#保存-SLAM-地图" class="headerlink" title="保存 SLAM 地图"></a>保存 SLAM 地图</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ roslaunch hector_slam_example hector_hokoyo.launch</div></pre></td></tr></table></figure>
<blockquote>
<p>Hector SLAM is running and the real-time map is constructing under map server</p>
</blockquote>
<p>　　建图完成后从 <strong>map server</strong> 获取地图数据，进行保存<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun map_server map_server <span class="_">-f</span> &lt;file-name&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>会在当前目录生成地图数据 <strong><file-name>.pgm</strong> 和 <strong><file-name>.yaml</strong><br>    <center><img src="/img/ROS/lab510.png" width="502px"/></center></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　ROS 基本概念以及经常使用的命令。&lt;/p&gt;
&lt;h3 id=&quot;ROS-文件系统&quot;&gt;&lt;a href=&quot;#ROS-文件系统&quot; class=&quot;headerlink&quot; title=&quot;ROS 文件系统&quot;&gt;&lt;/a&gt;ROS 文件系统&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取软件包有关信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xxx@...$ rospack find [package-name]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看环境变量(ROS_PACKAGE_PATH)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xxx@...$ &lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; | grep ROS&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="ROS" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/ROS/"/>
    
    
      <category term="ROS" scheme="http://durant35.github.io/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Embedded System 2016</title>
    <link href="http://durant35.github.io/2016/10/01/TACouses_Embedded_System_2016/"/>
    <id>http://durant35.github.io/2016/10/01/TACouses_Embedded_System_2016/</id>
    <published>2016-10-01T07:50:14.000Z</published>
    <updated>2016-10-09T07:29:58.695Z</updated>
    
    <content type="html"><![CDATA[<p>　　嵌入式系统实验课大概涉及的内容有以下几个部分:<br>    <center><img src="/img/TA-Cources/ES2016/dol_framework.png" width="640px"/></center><br>　　主体就涵盖了三条纵线一条横线，functional simulation，Hds simulation，analysis model 是三纵，如何通过三纵得到的数据迭代获取 application 和 architecture 的最佳 mapping 为一横。<br><a id="more"></a></p>
<blockquote>
<ol>
<li><p>DOL Framework的了解，入门编程，功能仿真<br>1.1 <strong><font color="green">DOL + systemC</font></strong><br>　Functional Simulation，包括分析，动手编程修改 example 模型<br>1.2 <strong><font color="green">MPARM + RTEMS OS</font></strong><br>　System Synthesis(Hds，硬件相关软件层)，mparm<br>1.3 <strong><font color="green">MATLAB + RTC/MPA</font></strong><br>　Analysis Model分析，MPA(<strong>Modular Performance Analysis</strong>)，获取当前 mapping 的各项参数，如: Backlog, Delay，用于迭代的back-annotation。</p>
</li>
<li><p>解决 <strong>Application</strong> 到 <strong>Architecture</strong> 的 <strong>Mapping</strong>: <strong>DES(Design Space Exploration)</strong> 探索，使用 <strong>EXPO</strong> 并进行数据分析。</p>
 <center><img src="/img/TA-Cources/ES2016/dse_cycle.png" width="420px"/></center>　</li>
<li>DeadLock 死锁问题</li>
<li>KPN 模型设计与分析</li>
</ol>
</blockquote>
<h3 id="D-istributed-O-peration-L-ayer"><a href="#D-istributed-O-peration-L-ayer" class="headerlink" title="D(istributed)O(peration)L(ayer)"></a><font color="green">D</font>(istributed)<font color="green">O</font>(peration)<font color="green">L</font>(ayer)</h3><blockquote>
<p><center><img src="/img/TA-Cources/ES2016/SHAPES.png" width="640px"/></center><br>上图描述了 <strong>DOL</strong> 的整体框架以及所使用的工具链<br>　VSP: Virtual SHAPES Platform</p>
<p><center><img src="/img/TA-Cources/ES2016/dol_basic_structure.png" width="520px"/></center><br>上图描述了 <strong>DOL</strong> 的整体流程：<br>　1). <strong>DOL Specification</strong>，包括 <code>*.c</code>, <code>*.h</code>, <code>*.xml</code> 定义的 <strong>application</strong>, <code>*.xml</code> 定义的 <strong>architecture</strong> 和 <strong>mapping</strong><br>　2). 自动化生成 SystemC 代码，并基于 SystemC 进行 <strong>Functional Simulation</strong><br>　3). 自动化生成 MPARM 平台上运行的二进制代码，进行 <strong>Cycle Accurate Simulation</strong><br>　4). 利用上述两种 Simulation 产生的 <strong>Log files</strong> 生成 <strong>MPA Model</strong>，进行 <strong>RTC</strong> 等相关分析</p>
<p><center><img src="/img/TA-Cources/ES2016/what_is_mapping.png" width="520px"/></center><br>接下来会介绍两种 <strong>DOL Software Synthesis</strong>:</p>
<ul>
<li>基于 <strong>SystemC</strong> 的功能仿真</li>
<li>基于 <strong>RTEMS(real-time executive for multiprocessor systems)</strong> 和 <strong>MPARM</strong> 的模拟仿真(Cycle Accurate Simulation)</li>
</ul>
</blockquote>
<p>1.DOL &amp; SystemC for <font color="green">Functional Simulation</font><br>    <center><img src="/img/TA-Cources/ES2016/dol_overview.png" width="420px"/></center></p>
<blockquote>
<p>Step 1: Flattening of the process network description</p>
<ul>
<li>Java class XMLFlattener, XMLFlattener creates a Java class that can generate the flattened XML file<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java dol.helper.flattener.XMLFlattener pn.xml Generator</div><div class="line">javac Generator.java</div><div class="line">java Generator.java &gt; flattened_pn.xml</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Step 2: Flattening of the generated XML file</p>
<ul>
<li>Flattened XML file <strong><font color="blue">— dotty —&gt;</font></strong> representation of the process network<br>　　To generate a network description displayable by dotty, use dol with the -D flag.<br>　　To specify the process network file, use the -P flag.<br>　　The -c flag is used to enable a basic consistency check of the process network，dol will check whether each port is connected to some channel, for instance<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java dol.main.Main -P flattened_pn.xml -D dotty_pn.dot -c</div><div class="line">dotty dotty_pn.dot</div></pre></td></tr></table></figure>
</li>
</ul>
<p><center><img src="/img/TA-Cources/ES2016/Hds_synthesis.png" width="420px"/></center></p>
<ul>
<li>Flattened XML file + C source code <strong><font color="blue">— dol —&gt;</font></strong> executable SystemC application<br>　　To generate the source code for an executable systemC application, use dol with the -H flag<br>　　dol will create a directory with the specified name containing all required source files for generating a systemC application, including a Makefile<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># copy *.c &amp; *.h</span></div><div class="line">cp <span class="variable">$sourcefiles</span> ./src</div><div class="line">java dol.main.Main -P flattened_pn.xml -H systemc -c</div><div class="line"><span class="built_in">cd</span> systemc/src</div><div class="line">make</div><div class="line">./sc_application</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li><font color="red">Assignment</font><br>　a. How to configure DOL environment in your computer?<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># check your system environment</span></div><div class="line">xxx@...:~$ sudo lsb_release <span class="_">-a</span></div><div class="line"> </div><div class="line"><span class="comment"># The requirements:</span></div><div class="line"><span class="comment">#  C/C++ environment: compiler, linker</span></div><div class="line"><span class="comment">#  Java environment: javac, java</span></div><div class="line"><span class="comment">#  Build environment: make, Ant (version 1.6.5 or greater)</span></div><div class="line"><span class="comment"># check your gcc</span></div><div class="line">xxx@...:~$ gcc -v</div><div class="line">xxx@...:~$ sudo apt-get install ant</div><div class="line"><span class="comment"># install Java environment</span></div><div class="line">xxx@...:~$ sudo apt-cache search openjdk-*</div><div class="line">xxx@...:~$ sudo apt-get install openjdk-&lt;your cache jdk version&gt;-jdk</div><div class="line"><span class="comment"># check installation success or not</span></div><div class="line">xxx@...:~$ java -version</div><div class="line"> </div><div class="line"><span class="comment"># 配置 DOL 依赖: SystemC</span></div><div class="line"><span class="comment"># SystemC environment (version 2.1 or greater)</span></div><div class="line"><span class="comment">#  File: systemc-2.3.1.tar</span></div><div class="line"><span class="comment">#  链接：http://www.accellera.org/downloads/standards/systemc/files</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> ~/Workspace/DOL</div><div class="line">xxx@...:~$ tar -zxvf systemc-2.3.1.tgz</div><div class="line">xxx@...:~$ rm systemc-2.3.1.tgz</div><div class="line"><span class="comment"># 1. Change to the top level directory (systemc-2.3.1)</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> ~/Workspace/DOL/systemc-2.3.1</div><div class="line">xxx@...:~$ <span class="built_in">pwd</span></div><div class="line"><span class="comment"># 2. Create a temporary directory, e.g.,</span></div><div class="line">xxx@...:~$ mkdir objdir</div><div class="line"><span class="comment"># 3. Change to the temporary directory, e.g.,</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> objdir</div><div class="line"><span class="comment"># 4. Configure the package for your system, e.g.,</span></div><div class="line">xxx@...:~$ ../configure CXX=g++ --disable-async-updates</div><div class="line"><span class="comment"># 5. Compile the package.</span></div><div class="line">xxx@...:~$ make</div><div class="line"><span class="comment"># 6. [option] verify the compiled package by testing the example suite.</span></div><div class="line">xxx@...:~$ make check</div><div class="line"><span class="comment"># 7. Install the package.</span></div><div class="line">xxx@...:~$ make install</div><div class="line"><span class="comment"># 8. You can now remove the temporary directory, .e.g,</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> ..</div><div class="line">xxx@...:~$ rm -rf objdir</div><div class="line"><span class="comment"># Alternatively, you can keep the temporary directory to allow you to:</span></div><div class="line"><span class="comment">#  a) Experiment with the examples.</span></div><div class="line"><span class="comment">#  b) Later uninstall the package. </span></div><div class="line"><span class="comment">#    To clean up the temporary directory, enter:</span></div><div class="line">xxx@...:~$ make clean</div><div class="line"><span class="comment">#    To uninstall the package, enter:</span></div><div class="line">xxx@...:~$ make uninstall</div><div class="line"> </div><div class="line"><span class="comment"># 配置 DOL</span></div><div class="line"><span class="comment">#  wget http://www.tik.ee.ethz.ch/~shapes/downloads/dol_ethz.zip</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> ~/Workspace/DOL</div><div class="line">xxx@...:~$ unzip dol_ethz.zip</div><div class="line">xxx@...:~$ rm dol_ethz.zip </div><div class="line"><span class="comment"># 修改 build_zip.xml 文件</span></div><div class="line">xxx@...:~$ vim build_zip.xml</div><div class="line"><span class="comment"># 找到下面这段话，修改成上面编译的 SystemC 所在的位置，</span></div><div class="line"><span class="comment">#  &lt;property name="systemc.inc" value="YYY/include"/&gt;</span></div><div class="line"><span class="comment">#  &lt;property name="systemc.lib" value="YYY/lib-linux/libsystemc.a"/&gt;</span></div><div class="line"><span class="comment"># 把YYY改成上面pwd的结果（注意，对于64位系统的机器，lib-linux要改成lib-linux64）</span></div><div class="line"><span class="comment"># 编译 DOL，若成功会显示 BUILD SUCCESSFUL</span></div><div class="line">xxx@...:~$ ant <span class="_">-f</span> build_zip.xml all</div><div class="line"><span class="comment"># 接着可以试试运行第一个例子</span></div><div class="line"><span class="comment"># 进入build/bin/mian路径下</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> build/bin/main</div><div class="line"><span class="comment"># 然后构建，运行第一个例子</span></div><div class="line">xxx@...:~$ ant <span class="_">-f</span> runexample.xml -Dnumber=1</div></pre></td></tr></table></figure>
</li>
</ul>
<font color="blue"><strong>Q&amp;A</strong></font>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">1.build_zip.xml无法保存</div><div class="line">Ans：sudo gedit build_zip.xml</div><div class="line"> </div><div class="line">2.最后一步build failed</div><div class="line">  出现在中文系统，在dol/build/bin/main下的runexample.xml 215-217行需要注释或者删掉</div><div class="line">Ans: 找到</div><div class="line"><span class="tag">&lt;<span class="name">tstamp</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">format</span> <span class="attr">property</span>=<span class="string">"touch.time"</span></div><div class="line">          <span class="attr">pattern</span>=<span class="string">"MM/dd/yyyy hh:mm aa"</span></div><div class="line">          <span class="attr">offset</span>=<span class="string">"-5"</span> <span class="attr">unit</span>=<span class="string">"second"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tstamp</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">touch</span> <span class="attr">datetime</span>=<span class="string">"$&#123;touch.time&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"example$&#123;number&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">touch</span>&gt;</span></div><div class="line">修改为：</div><div class="line"><span class="comment">&lt;!--     </div><div class="line">&lt;tstamp&gt;</div><div class="line">  &lt;format property="touch.time"</div><div class="line">          pattern="MM/dd/yyyy hh:mm aa"</div><div class="line">          offset="-5" unit="second"/&gt;</div><div class="line">&lt;/tstamp&gt;</div><div class="line">&lt;touch datetime="$&#123;touch.time&#125;"&gt;</div><div class="line">  &lt;fileset dir="example$&#123;number&#125;"/&gt;</div><div class="line">&lt;/touch&gt; </div><div class="line">--&gt;</span></div><div class="line"> </div><div class="line">3.make和ant有什么不一样</div><div class="line">Ans: MAKE是基于C语言；ant是基于Java语言</div><div class="line"> </div><div class="line">4.第一次build successful, 但是最后build failed</div><div class="line">Ans: 这个问题大致上是JAVA的问题</div><div class="line">  对于这个问题，安装JDK可以解决，sudo apt-get install openjdk-?-jdk可以解决</div><div class="line"> </div><div class="line">5.sudo apt-get install openjdk-?-jdk后，build还是有问题</div><div class="line">Ans: 可能因为安装了多个版本的JAVA，需要设置一下JAVA的环境变量</div><div class="line"> </div><div class="line">6.有人遇到pthread_mutex_tryloc,什么鬼的</div><div class="line">Ans: 表示摊手，因为在编译Systemc时，</div><div class="line">    sudo ../configure CXX=g++ --disable-async-updates，</div><div class="line">  这是systemc的相关设置，已经禁用了pthread。</div><div class="line">  如果按照上述语句configure还出现问题的，试试重新安装一遍。</div><div class="line"> </div><div class="line">7.PPT上最后一个图示可以画出来的吗？</div><div class="line">Ans：可以，在build/bin/main 的exmaple文件里有面个*.dot文件，双击就可以看到了</div><div class="line"> </div><div class="line">...</div></pre></td></tr></table></figure>
<p>　b. Analyze DOL framework by some example.<br>　c. Write your DOL Apps based on above analysis.</p>
<p>2.<font color="green">MPARM Simulation</font> with RTEMS OS<br>    <center><img src="/img/TA-Cources/ES2016/MPARM_simulation.png" width="540px"/></center></p>
<ul>
<li><font color="red">Assignment</font><br>　a. Configure and run MPARM simulation.<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Step1: Install requirement: MATLAB</span></div><div class="line"><span class="comment">#  安装MATLAB_R2014A</span></div><div class="line"><span class="comment"># 1. 步入ISO所在路径，sudo mount MATHWORKS_R2014A.iso MATLAB_R2014A/ 挂载MATHWORKS_R2014A.iso到MATLAB_R2014A</span></div><div class="line">x@.:~$ mkdir MATLAB_R2014A</div><div class="line">x@.:~$ sudo mount MATHWORKS_R2014A.iso MATLAB_R2014A/</div><div class="line"> </div><div class="line"><span class="comment"># 2. 启动安装</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> MATLAB_R2014A/</div><div class="line">x@.:~$ sudo ./install</div><div class="line"> </div><div class="line"><span class="comment"># 3. 选择是否在线安装时，选否，即 install manually without using the internet</span></div><div class="line"><span class="comment">#  让输入key，输入 12313-94680-65562-90832</span></div><div class="line"><span class="comment">#  文件安装路径选择依照自己习惯，一般为：/usr/local/</span></div><div class="line">x@.:~$ sudo umount -v MATLAB_R2014A/</div><div class="line">x@.:~$ sudo rm -rf MATLAB_R2014A/</div><div class="line"> </div><div class="line"><span class="comment"># 4. 步入  /usr/local/MATLAB/R2014a/bin， sudo ./matlab，即可启动 MATLAB，说明成功安装并破解</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin</div><div class="line">x@.:~$ sudo ./matlab</div><div class="line"> </div><div class="line"><span class="comment"># 5. 不使用Internet手动激活，使用：破解/Crack/license_405329_R2014a.lic文件</span></div><div class="line"><span class="comment">#  此外，将 破解/Crack/Linux/libmwservices.so 复制到 MATLAB/R2014a/bin/glnxa64/ （可能需要通过命令mv或者cp）</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> &lt;ISO所在路径&gt;</div><div class="line">x@.:~$ unzip MATHWORKS_R2014A_Crack.zip</div><div class="line">x@.:~$ sudo cp Crack/Linux/libmwservices.so /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin/glnxa64/</div><div class="line">x@.:~$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin</div><div class="line"><span class="comment">#  MATLAB已经破解，正常启动</span></div><div class="line">x@.:~$ sudo ./matlab</div><div class="line"> </div><div class="line"><span class="comment"># 6. 制作 MATLAB 快捷启动 (matlab-support)</span></div><div class="line"><span class="comment">#  sudo apt-get install matlab-support	按照要求填写目录即可</span></div><div class="line"><span class="comment">#  任意 Terminal下 键入命令：matlab 即可启动，如果报错，需要键入 sudo matlab</span></div><div class="line">x@.:~$ sudo apt-get install matlab-support</div><div class="line"><span class="comment"># Location of MATLAB installation(s): /usr/local/MATLAB/R2014a</span></div><div class="line"><span class="comment"># Authorized user for MATLAB: &lt;empty&gt;</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"> </div><div class="line"><span class="comment"># 7. [option]更改 MATLAB 默认文件夹</span></div><div class="line"><span class="comment">#  在 MATLAB 命令行键入 edit pathdef，在 pathdef.m 文件最末尾添加： cd 你要设置的默认目录 即可。</span></div><div class="line"><span class="comment"># 8. 配置RTC ToolBox 说明</span></div><div class="line"><span class="comment">#  链接: http://www.mpa.ethz.ch/Rtctoolbox/Download</span></div><div class="line"><span class="comment">#  rtc_toobox.zip is the same contents as tecsexperiments-2010-10-22-final/testbed/matlab/rtc</span></div><div class="line"><span class="comment"># Extract the downloaded zip package. The extracted directory will contain a directory called rtc.</span></div><div class="line"><span class="comment"># Copy or move the directory rtc to its final installation destination, e.g. to $MATLAB$/toolbox/rtc</span></div><div class="line">x@.:~$ sudo unzip rtc_toobox.zip <span class="_">-d</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/toolbox/</div><div class="line">x@.:~$ sudo matlab</div><div class="line"><span class="comment"># Open Matlab and change to the rtc directory:</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$MATLAB</span>$/toolbox/rtc</div><div class="line"><span class="comment"># Run:</span></div><div class="line">rtc_install</div><div class="line"><span class="comment"># Now you can start using the RTC Toolbox. To explore the functionality of the RTC Toolbox, try the following:</span></div><div class="line"><span class="built_in">help</span> rtc</div><div class="line"><span class="comment"># Uninstalling the Real-Time Calculus (RTC) Toolbox:</span></div><div class="line">rtc_uninstall</div><div class="line"><span class="comment"># You may now delete the directory $MATLAB$/toolbox/rtc </span></div><div class="line">x@.:~$ sudo rm -rf /usr/<span class="built_in">local</span>/MATLAB/R2014a/toolbox/rtc</div><div class="line"> </div><div class="line"><span class="comment"># Step2: Configure testbed environment</span></div><div class="line"><span class="comment"># 1. 修改 mparm/RTEMS-os/install-rtems/arm-rtems/arm_bare_bsp/Makefile.inc 中'prefix'和'exec_prefix'所对应的路径</span></div><div class="line"><span class="comment">#  修改为自己的 mparm 所在目录</span></div><div class="line">prefix = /home/khuang/work/mparm-haid/mparm/RTEMS-os/install-rtems</div><div class="line">exec_prefix = /home/khuang/work/mparm-haid/mparm/RTEMS-os/install-rtems/arm-rtems</div><div class="line"> </div><div class="line"><span class="comment"># 2. 修改 testbed/localjars/dol.properties 中'SYSTEMC_INC'和'SYSTEMC_LIB'所对应的路径</span></div><div class="line"><span class="comment">#  修改为自己 systemC 中 include 与 libsystemc.a 所对应的目录。</span></div><div class="line">SYSTEMC_INC = /home/khuang/work/shapes/systemC/include</div><div class="line">SYSTEMC_LIB = /home/khuang/work/shapes/systemC/lib-linux/libsystemc.a</div><div class="line"> </div><div class="line"><span class="comment"># 3. 在 testbed/localjars 中更新 jar 文件,使用命令 jar -uf dol.jar dol.properties</span></div><div class="line">x@.:~$ jar -uf dol.jar dol.properties</div><div class="line"> </div><div class="line"><span class="comment"># 4. 修改 testbed/build.xml 中'mparm.dir'所对应的路径为自己 mparm 所在路径</span></div><div class="line">&lt;property name=<span class="string">"mparm.dir"</span> location=<span class="string">"/home/khuang/work/mparm-haid/mparm/"</span>/&gt;</div><div class="line"> </div><div class="line"><span class="comment"># 5. 至此,就可以运行 testbed 了,在 testbed 目录下执行 ant,查看结果</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> ~/Workspace/tecsexperiments-2010-10-22-final/testbed</div><div class="line">x@.:~$ ant</div><div class="line"> </div><div class="line"><span class="comment"># 6. 调用MATLAB分析MPA</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> tecs</div><div class="line">x@.:~$ ./runmatlab.sh</div><div class="line"> </div><div class="line"><span class="comment"># 7. [option]修改 testbed/build.xml 中'source.dir',可以运行不同的测试样例,测试样例在tecs/examples 目录下。</span></div><div class="line">&lt;property name=<span class="string">"source.dir"</span> value=<span class="string">"tecs/examples/examplemjpegVSP-trigger"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<font color="blue"><strong>Q&amp;A</strong></font>

<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># MPARM工具是32位程序，通过查看链接情况解决依赖位数不匹配的问题</span></div><div class="line"><span class="comment">#  需要安装i386的C++标准库</span></div><div class="line"><span class="comment">#  参考链接: http://askubuntu.com/questions/709893/14-04-01-32-bit-missing-g-64-bit-include-files-when-cross-compiling</span></div><div class="line">x@.:~/Workspace/tecsexperiments-2010-10-22-final/mparm/swarm/bin$ ldd mpsim.x</div><div class="line">  linux-gate.so.1 =&gt;  (0xf7747000)</div><div class="line">  libstdc++.so.5 =&gt; not found</div><div class="line">  libm.so.6 =&gt; /lib/i386-linux-gnu/libm.so.6 (0xf76e8000)</div><div class="line">  libgcc_s.so.1 =&gt; /lib/i386-linux-gnu/libgcc_s.so.1 (0xf76ca000)</div><div class="line">  libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf751c000)</div><div class="line">  /lib/ld-linux.so.2 (0xf774a000)</div><div class="line"><span class="comment"># This is just a dependency package that resolves to g++-?-multilib for the default gcc/g++ version, </span></div><div class="line"><span class="comment">#  and in turn depends on lib64stdc++-?-dev (64-bit compilation on 32-bit) or libx32stdc++-?-dev (32-bit compilation on 64-bit)</span></div><div class="line"><span class="comment">#  it is these that contain the actual header files.</span></div><div class="line">x@.:~/Workspace/tecsexperiments-2010-10-22-final/mparm/swarm/bin$ sudo apt-get install g++-multilib</div></pre></td></tr></table></figure>
<p>　b. Analyze MPARM simulation log files to know about the whole process.</p>
<p>3.<font color="green">MPA Model</font></p>
<h3 id="DSE-EXPO"><a href="#DSE-EXPO" class="headerlink" title="DSE-EXPO"></a>DSE-EXPO</h3><h3 id="Dead-Lock"><a href="#Dead-Lock" class="headerlink" title="Dead Lock"></a>Dead Lock</h3><h3 id="K-ahn-P-rocess-N-etwork"><a href="#K-ahn-P-rocess-N-etwork" class="headerlink" title="K(ahn)P(rocess)N(etwork)"></a><font color="green">K</font>(ahn)<font color="green">P</font>(rocess)<font color="green">N</font>(etwork)</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　嵌入式系统实验课大概涉及的内容有以下几个部分:&lt;br&gt;    &lt;center&gt;&lt;img src=&quot;/img/TA-Cources/ES2016/dol_framework.png&quot; width=&quot;640px&quot;/&gt;&lt;/center&gt;&lt;br&gt;　　主体就涵盖了三条纵线一条横线，functional simulation，Hds simulation，analysis model 是三纵，如何通过三纵得到的数据迭代获取 application 和 architecture 的最佳 mapping 为一横。&lt;br&gt;
    
    </summary>
    
      <category term="TA Cources" scheme="http://durant35.github.io/categories/TA-Cources/"/>
    
    
  </entry>
  
  <entry>
    <title>从 VS 的 dumpbin 目录谈 x86、xi386、x86-64、amd64...</title>
    <link href="http://durant35.github.io/2016/09/17/hsw_%E4%BB%8EVS%E7%9A%84dumpbin%E7%9B%AE%E5%BD%95%E8%B0%88x86,i386,x86-64,amd64/"/>
    <id>http://durant35.github.io/2016/09/17/hsw_从VS的dumpbin目录谈x86,i386,x86-64,amd64/</id>
    <published>2016-09-17T11:54:00.000Z</published>
    <updated>2017-02-02T09:21:38.758Z</updated>
    
    <content type="html"><![CDATA[<p>　翻开 <strong>VS</strong> 的 <strong>dumpbin.exe</strong>、<strong>cl.exe</strong> 的存放目录，你会惊奇的发现，居然存在这么多个分支！<br>    <center><img src="/img/hsw/VS2013_dumpbin_dirs.png" width="640px"/></center><br>　　什么 <strong>amd64</strong>、<strong>amd64_arm</strong>、<strong>amd64_x86</strong>、<strong>arm</strong>、<strong>x86_amd64</strong>、<strong>x86_arm</strong>???<br><a id="more"></a></p>
<h2 id="故事的起源"><a href="#故事的起源" class="headerlink" title="故事的起源"></a>故事的起源</h2><blockquote>
<p>Refer: <a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/95a3ca96-e3a5-4b12-ab59-7d70df1df07b/clexe-and-directories-under-bin-host-targets?forum=vcgeneral">cl.exe and directories under bin, host, targets?</a><br>　In general, the format of the directory name is “host_target” so “amd64_arm” means that the compiler itself runs on x64 and it targets arm. “amd64” doesn’t follow the format but it should be obvious, it runs on and targets x64 bit. The compiler in the bin directory is a x86 only compiler.</p>
</blockquote>
<p>　原来，上面说来说去也就是这三个平台而已啦，<strong>amd64</strong>、<strong>arm</strong> 还有 <strong>x86</strong>。 <strong>amd64*</strong> 目录指代运行在 <strong>amd64</strong> (也就是64位机器) 上的构建系统，可用于生成 <strong>amd64</strong>、<strong>arm</strong> 还有 <strong>x86</strong> 平台目标代码；<strong>x86*</strong> 目录类似，至于 <strong>arm</strong> 目录，该平台的构建系统没用于生成 <strong>amd64</strong> 还有 <strong>x86</strong> 平台目标代码，而整个 <strong>…/VC/bin</strong> 目录下，则是 <strong>x86_x86</strong> 的构建系统。</p>
<h2 id="了解一些基本概念"><a href="#了解一些基本概念" class="headerlink" title="了解一些基本概念"></a>了解一些基本概念</h2><blockquote>
<p>Refer: <a href="http://blog.chinaunix.net/uid-25871104-id-3424668.html">x86/x86_64的一些基本概念 </a><br>　现在的 <strong>x86 CPU</strong> 在位数上有32/64 bit之分，在 <strong>ARCH(体系架构)</strong> 上又有 x86/x86_64/x64/i386/IA32/IA64/amd64，最近又新出来一个 x32，还好不是 ARCH，只是 <strong>ABI(应用程序二进制接口)</strong>，没有那么混乱。<br>　<br>　先说一下x86的这些arch，不要求很严格的话，基本上可以用下面的公式来表达：<br>　　<strong>x86 = i386 = IA32</strong><br>　　<strong>amd64 = x86_64 = x64 != IA64</strong><br>　其实这两个等式里很多都是别名，严格说的话，x86 的世界里只存在 <font color="green"><strong>x86/x86_64/IA64</strong></font> 三种架构。<br>　当年 <strong>AMD</strong> 先于 <strong>Intel</strong> 推出向下兼容的 amd64 CPU，而 <strong>Intel</strong> 推出的不兼容32位系统的 <font color="green"><strong>IA64</strong></font> 惨淡收场(被MS放了鸽子)，后来 <strong>Intel</strong> 在指令上支持了 <font color="green"><strong>amd64</strong></font>，不过不愿意叫 amd64，改了个名字 <font color="green"><strong>x86_64</strong></font>。<br>　<br>　再说 64bit/32bit 的兼容性问题：<br>　　现在的 64bit CPU实际上都做了兼容 32bit 的特殊设计，所以 64bit 的CPU上运行 32bit 的软件(包括kernel/app，driver除外)是没有问题。反过来，32bit 的 CPU 上运行 64bit 的软件是不可以的。<br>　<br>　最后说重点，64bit相比32bit的性能优势：<br>　　这里不考虑 64bit 硬件上运行 32bit 软件的这种过度方式。<br>　　从架构上来说，64bit 拥有 64bit 的 register 和 64bit 的 bus，在数据传输效率上比 32bit 要高不少；另外，64bit 地址总线的寻址空间突破了 4G 的限制。<br>　　所以，对于大内存，密集数据运算的应用场景，64bit 的优势是非常明显的。网上有一些 benchmark，这里不贴了。<br>　　但是，对于小内存系统，64bit 的 CPU 在某些状况下可能比 32bit CPU的效率更低。<br>　　因为 64bit 的 CPU 的地址是 64 位的，指针是 64 位的，编译生成的二进制文件更大，运行时占用的内存更多;另一方面，因为 64 位地址的问题，cache 中能存放的指令就更少，所以更容易导致 cache 的 miss。<br>　　所以在某些应用场景，64bit CPU 的更大的寻址空间，更快的数据传递，更快的浮点运算的特性，与其 64bit 的地址/指针所导致的cache miss的特性，始终并存。<br>　<br>　为了充分利用64的优势，又避免 64bit 地址导致的 cache miss 的问题，Intel 提出了 <font color="green"><strong>x32 ABI</strong></font> 的概念。<br>　　x32 不是一个 ARCH，是一个 ABI。<br>　　x32 可以充分的使用 64bit 硬件的 64bit 寄存器，64bit 总线，以及 64bit 新增的指令，从而获得更快的数据处理速度。<br>　　同时 x32 又使用 32bit 的地址/pointer，32bit 的 C 数据类型，因此 cache miss 并不会增加。<br>　　x32 是一个 ABI，其设计到的部分包括：kernel 的 support，toolchain 的 support，system lib 的 support。现在 kernel(from 3.4) 和 toolchain 的 support 都已经OK。</p>
</blockquote>
<h2 id="问题深入"><a href="#问题深入" class="headerlink" title="问题深入"></a>问题深入</h2><blockquote>
<p>Refer: <a href="http://downtoearthlinux.com/posts/x86-i386-x86-64-x64-and-amd64-oh-my/">x86, i386, x86-64, x64, and amd64? Oh My!</a><br>　<font color="green"><strong>x86</strong></font> instruction sets are found on 32-bit processors, <font color="green"><strong>x86-64</strong></font> instruction sets are found on 64-bit processors.  Therefore, to find your instruction set, you must figure out if you have a 32-bit or a 64-bit processor.<br>　<br>　It is common to find x86 called <font color="green"><strong>i386</strong></font>, or occasionally <font color="green"><strong>IA-32</strong></font>.  x86-64 is commonly called <font color="green"><strong>x64</strong></font> or <font color="green"><strong>amd64</strong></font>, and less often IA-32e, EM64T, or Intel64.<br>　Typically, knowing x86, i386, x86-64, x64, and amd64 is enough for downloading Linux.<br>　<br>　x86-64  =  64-bit  =  x64  =  amd64<br>　x86  =  32-bit  =  i386<br>　If your processor supports it, use x86-64.</p>
</blockquote>
<h2 id="回到问题开始"><a href="#回到问题开始" class="headerlink" title="回到问题开始"></a>回到问题开始</h2><blockquote>
<p>Refer: <a href="http://stackoverflow.com/questions/3508173/when-compiling-x64-code-whats-the-difference-between-x86-amd64-and-amd64">When compiling x64 code, what’s the difference between “x86_amd64” and “amd64”?</a><br>　<font color="blue"><strong>x64 on x86 (x64 cross-compiler)</strong></font><br>　　Allows you to create output files for x64. This version of cl.exe runs as a 32-bit process, native on an x86 machine and under WOW64 on a 64-bit Widows operating system.<br>　<font color="blue"><strong>x64 on x64</strong></font><br>　 Allows you to create output files for x64. This version of cl.exe runs as a native process on an x64 machine.<br>　<br>　 It has nothing to do with efficiency. The native and cross-compiler will both generate the same machine code. You will however gain some benefits by running a native 64-bit compiler process on a 64-bit workstation (larger registers, larger memory space, etc…)<br>　The native compiler will only run on an 64-bit copy of Windows, so if your workstation is 32-bit this compiler won’t even run.<br>　The cross-compiler is meant to run on x86 machines even though it will run on a 64-bit copy of Windows via WoW; however, there is no reason to do this.<br>　<br>　If you use x86_amd64, then you are typically developing on an x86 machine and you want to create x64 files that run natively on x64. You could also use this option on an x64 machine but your compiler will be running under WOW64 emulation.<br>　If you use AMD64, then you are developing on an x64 machine and you want to create x64 files that run natively on x64. The compiler is running natively in x64. This option is more efficient to build x64 programs.</p>
</blockquote>
<p>　　所以，假如你是 64 位系统(现在基本上是啦)，那么在配置 <strong>dumpbin</strong> 或者 <strong>cl</strong> 环境变量时，最好选择 <strong>host</strong> 为 <strong>amd64</strong> 的路径，即 <strong>amd64*</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　翻开 &lt;strong&gt;VS&lt;/strong&gt; 的 &lt;strong&gt;dumpbin.exe&lt;/strong&gt;、&lt;strong&gt;cl.exe&lt;/strong&gt; 的存放目录，你会惊奇的发现，居然存在这么多个分支！&lt;br&gt;    &lt;center&gt;&lt;img src=&quot;/img/hsw/VS2013_dumpbin_dirs.png&quot; width=&quot;640px&quot;/&gt;&lt;/center&gt;&lt;br&gt;　　什么 &lt;strong&gt;amd64&lt;/strong&gt;、&lt;strong&gt;amd64_arm&lt;/strong&gt;、&lt;strong&gt;amd64_x86&lt;/strong&gt;、&lt;strong&gt;arm&lt;/strong&gt;、&lt;strong&gt;x86_amd64&lt;/strong&gt;、&lt;strong&gt;x86_arm&lt;/strong&gt;???&lt;br&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="体系结构" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo博客主题Yelee迁移笔记</title>
    <link href="http://durant35.github.io/2016/09/16/hexo_%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98Yelee%E8%BF%81%E7%A7%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://durant35.github.io/2016/09/16/hexo_博客主题Yelee迁移笔记/</id>
    <published>2016-09-16T06:54:28.000Z</published>
    <updated>2016-11-12T10:21:23.629Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>References:</p>
<ul>
<li><a href="http://moxfive.coding.me/yelee/">Yelee 主题使用说明</a></li>
<li><a href="https://github.com/MOxFIVE/hexo-theme-yelee">Github: 简而不减 Hexo 双栏博客主题</a></li>
</ul>
</blockquote>
<p>　　<strong><a href="http://moxfive.xyz/">MOxFIVE</a></strong> 自定义的 <strong>Yelee</strong> 这个主题真的很好用，迁移之后我的几个体会是:<br>　　　a). 动态效果很酷炫，整个界面给人的感觉就很满意<br>　　　b). 添加多说评论栏是如此的简单<br>　　　c). 自带的站点、页面访问量统计，很不错<br>　　　d). 整个源码的框架似乎更合理了，你可以自己浏览一下源码，感同身受吧？</p>
<p>　　下面是本人将自己的博客主题迁移到 <strong>Yelee</strong> 的过程以及其中做的一些自定义适配。<br><a id="more"></a></p>
<h2 id="How-to-install-easy"><a href="#How-to-install-easy" class="headerlink" title="How to install? easy!"></a>How to install? easy!</h2><p>　　Follow <strong><a href="http://moxfive.xyz/">MOxFIVE</a></strong> 的 <a href="https://github.com/MOxFIVE/hexo-theme-yelee"><strong>Yelee</strong> Github 主页</a> 即可。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Installation</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</div><div class="line"> </div><div class="line"><span class="comment"># Change theme field in Hexo root's _config.yml file.</span></div><div class="line">theme: yelee</div></pre></td></tr></table></figure></p>
<h2 id="自定义头像"><a href="#自定义头像" class="headerlink" title="自定义头像"></a>自定义头像</h2><p>　　站点左上角的头像取自 <strong>yelee/source/img/avatar.png</strong>，其配置项在主题对应的 <strong>_config.yml</strong> 配置文件中的 <strong>Basic Setup</strong> 部分。两种方式，将原先的 <strong>avatar.png</strong> 做个备份，然后将自定义的头像存放到 <strong>yelee/source/img/</strong> 下，并命名为 <strong>avatar.png</strong>；修改配置文件中的 <strong>avatar:</strong> 项，自定义图片路径和名称，个人建议图片最好还是存放到 <strong>yelee/source/img/</strong> 下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Link to your avatar | 填写头像地址 &lt;theme-name&gt;/source/img</div><div class="line">avatar: /img/avatar.png</div></pre></td></tr></table></figure></p>
<h2 id="自定义站点小图标"><a href="#自定义站点小图标" class="headerlink" title="自定义站点小图标"></a>自定义站点小图标</h2><p>　　网址前面的图标，跟自定义头像相似。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Small icon of Your site | 站点小图标地址 &lt;theme-name&gt;/source/img</div><div class="line">favicon: /img/favicon.ico</div></pre></td></tr></table></figure></p>
<h2 id="自定义菜单栏"><a href="#自定义菜单栏" class="headerlink" title="自定义菜单栏"></a>自定义菜单栏</h2><blockquote>
<p>自定义menu<br>　自定义站点侧边栏中间的菜单项<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># &gt;&gt;&gt; Basic Setup | 基础设置 &lt;&lt;&lt;</div><div class="line"> </div><div class="line"># Header | 主菜单</div><div class="line">## About Page: `hexo <span class="keyword">new</span> page about`</div><div class="line">## Tags Cloud Page: `hexo <span class="keyword">new</span> page tags`</div><div class="line"># Header</div><div class="line">menu: </div><div class="line">  Home: /</div><div class="line">  All-lists: /archives</div><div class="line">  Contact: /Shengjie</div><div class="line">  About: /about</div></pre></td></tr></table></figure></p>
</blockquote>
<p>　</p>
<blockquote>
<p>自定义subnav<br>　自定义菜单项下方的图标导航栏，这里是想添加 <strong>开源中国</strong> 的一个图标快捷方式，相关代码在 <strong>…/source/css/_partial/customise/social-icon.styl</strong> 中。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">img-logo = "新浪微博" #ecc260 80,</div><div class="line">            "知乎" #0078d8 90,</div><div class="line">            "豆瓣" #06c611 88,</div><div class="line">            # add "OSChina"</div><div class="line">            "OSChina" white 88,</div><div class="line">            V2EX #e4cdb4 78,</div><div class="line">            TiddlyWiki #6283dd 82,</div><div class="line">            "简书" #e99888 82,</div><div class="line">            SegmentFault #018f56 80,</div><div class="line">            "网易云音乐" #e51e02 80,</div><div class="line">            "虾米音乐" #ff6a00 82,</div><div class="line">            CSDN red 82,</div><div class="line">            "博客园" #217ed4 95,</div><div class="line">            Plunker black 90,</div><div class="line">            LOFTER #316061 75,</div><div class="line">            Coding white 88,</div><div class="line">            bilibili #f589a0 100,</div><div class="line">            AcFun #fbc054 90,</div><div class="line">            niconico white 70,</div><div class="line">            Quora #b92b27 103</div><div class="line"> </div><div class="line">for i in img-logo</div><div class="line">    .&#123;i[0]&#125;</div><div class="line">        background url(root-url + '/img/' + i[0] + '.png') center no-repeat i[1]</div><div class="line">        background-size i[2] + "%"</div><div class="line">.GitHub</div><div class="line">    background url(//cdn.bootcss.com/logos/0.2.0/github-octocat.svg) no-repeat white</div><div class="line">    background-size 90%</div><div class="line">    background-position 50% 100%</div></pre></td></tr></table></figure></p>
</blockquote>
<p>　　添加 <strong>“OSChina” white 88,</strong> 一项，从下面的语句我们也可以看出，”OSChina”、white、88 分别对应于 i[0]、i[1]、i[2]，也就是图片名称、背景色、图片大小。所以需要将 <strong>OSChina</strong> 对应项的图片，即开源中国的Logo存放到 <strong>yelee/source/img/</strong> 下，并命名为 <strong>OSChina.png</strong>。<br>　　可以看出，<strong>Github</strong> 是独立开来的。此外，通过 <strong>.</strong> 操作符我们可以看出，这些都是 <strong>css</strong> 中定义的 <strong>类选择器</strong>。<br>　　完成这些之后，你就可以在主题配置文件中启动该图标导航栏。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Social info. Bar | 社交信息展示</div><div class="line">## Keep <span class="string">"mailto:"</span> in Email | 设置 Email 时保留 <span class="string">"mailto:"</span></div><div class="line">## Encrypt email 加密邮件地址 http:<span class="comment">//ctrlq.org/encode/</span></div><div class="line">## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件</div><div class="line">#<span class="meta"># https:<span class="comment">//github.com/hexojs/hexo-generator-feed</span></span></div><div class="line"> </div><div class="line">subnav:</div><div class="line">  新浪微博: <span class="string">"http://weibo.com/u/2911566017?refer_flag=1001030201_"</span></div><div class="line">  GitHub: <span class="string">"https://github.com/Durant35"</span></div><div class="line">  <span class="meta"># self-defined OSChina</span></div><div class="line">  OSChina: <span class="string">"https://my.oschina.net/love7zx/"</span></div></pre></td></tr></table></figure></p>
<h2 id="添加多说评论栏"><a href="#添加多说评论栏" class="headerlink" title="添加多说评论栏"></a>添加多说评论栏</h2><p>　　<strong>Yelee</strong> 添加多说评论栏是我遇到的自适配最简单的一个主题。此处默认你已经有多说账号了，没有的话，请到<a href="http://duoshuo.com/">多说官网</a>注册。添加多说评论栏只需要修改主题配置文件 <strong>Conments 评论系统</strong> 中的 <strong>duoshuo:</strong> 选项即可，<strong>&lt;your-duoshuo-shortname&gt;</strong> 既是多说后台管理的 id 名。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="section"># &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;</span></div><div class="line"><span class="section"># Chose ONE as your comment system and keep others disable.</span></div><div class="line"><span class="section"># 选一个作为网站评论系统，其他保持禁用。</span></div><div class="line"> </div><div class="line">preload_comment: true</div><div class="line"><span class="section">## false: 当点击评论条等区域时再加载评论模块</span></div><div class="line"><span class="section">## false: load comment's section until u click/hover on the bar/icon</span></div><div class="line"> </div><div class="line">show_count: true</div><div class="line"><span class="section">## 是否在主页文章标题旁显示评论数（多说、Disqus）</span></div><div class="line"><span class="section">## Add comment count after article title</span></div><div class="line"> </div><div class="line">disqus: </div><div class="line">  #on: true</div><div class="line">  shortname: </div><div class="line">  # https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-</div><div class="line">  # It is unnecessary to enable disqus here if </div><div class="line">  # you have set "disqus<span class="emphasis">_shortname" in your site's "_</span>config.yml" </div><div class="line"> </div><div class="line">duoshuo: </div><div class="line">  on: true</div><div class="line">  domain: <span class="xml"><span class="tag">&lt;<span class="name">your-duoshuo-shortname</span>&gt;</span></span></div><div class="line">  # 是否开启多说评论，http://duoshuo.com/create-site/</div><div class="line">  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分</div><div class="line">  # http://<span class="xml"><span class="tag">&lt;<span class="name">要填的部分</span>&gt;</span></span>.duoshuo.com (domain只填上<span class="xml"><span class="tag">&lt;&gt;</span></span>里的内容，不要填整个网址)</div></pre></td></tr></table></figure></p>
<h2 id="从繁体中文到简体中文"><a href="#从繁体中文到简体中文" class="headerlink" title="从繁体中文到简体中文"></a>从繁体中文到简体中文</h2><p>　　默认应该是繁体中文，你可以在站点配置文件(不是主题配置文件！！)中设置，站点配置位于 <strong>hexo</strong> 根目录下。对应的 <strong>language:</strong> 选项位于 <strong>…/yelee/languages/</strong> 下，都是一些 <strong>.yml</strong> 文件。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#language: zh-CN</span></div><div class="line"># Specifical language <span class="keyword">for</span> theme Yelee</div><div class="line">language: zh-Hans</div></pre></td></tr></table></figure></p>
<h2 id="自带统计特性"><a href="#自带统计特性" class="headerlink" title="自带统计特性"></a>自带统计特性</h2><blockquote>
<p>站点访问量统计<br>页面访问量统计</p>
</blockquote>
<h2 id="自定义阅读全文按钮显示内容"><a href="#自定义阅读全文按钮显示内容" class="headerlink" title="自定义阅读全文按钮显示内容"></a>自定义阅读全文按钮显示内容</h2><p>　　<strong>…/yelee/languages/&lt;your-language&gt;.yml</strong>，<strong>…/yelee/languages/</strong> 下是一些语言包对应的 <strong>.yml</strong> 文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># zh-Hans: Chinese (Simplified) 大陆简体</span></div><div class="line">index:</div><div class="line">  menu: 菜单</div><div class="line">  tags: 标签</div><div class="line">  friends: 友情链接</div><div class="line">  about: 关于我</div><div class="line">  more: more</div><div class="line">  copy: 复制</div></pre></td></tr></table></figure></p>
<h2 id="自定义分享栏"><a href="#自定义分享栏" class="headerlink" title="自定义分享栏"></a>自定义分享栏</h2><p>　　默认主题中每篇文章下方都自带分享栏，包括常见的分享到微博、QQ等，相关代码位于 <strong>…/layout/_partial/post/share.ejs</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"share"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.share.baidu</span>) &#123; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bdsharebuttonbox"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</div><div class="line">            &lt;a href="#" class="fa fa-twitter bds_twi" data-cmd="twi" title="分享到推特"&gt;&lt;/a&gt;</div><div class="line">        --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-weibo bds_tsina"</span> <span class="attr">data-cmd</span>=<span class="string">"tsina"</span> <span class="attr">title</span>=<span class="string">"分享到新浪微博"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-qq bds_sqq"</span> <span class="attr">data-cmd</span>=<span class="string">"sqq"</span> <span class="attr">title</span>=<span class="string">"分享给 QQ 好友"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-weixin bds_weixin"</span> <span class="attr">data-cmd</span>=<span class="string">"weixin"</span> <span class="attr">title</span>=<span class="string">"生成文章二维码"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-files-o bds_copy"</span> <span class="attr">data-cmd</span>=<span class="string">"copy"</span> <span class="attr">title</span>=<span class="string">"复制网址"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</div><div class="line">            &lt;a href="#" class="fa fa fa-envelope-o bds_mail" data-cmd="mail" title="通过邮件分享"&gt;&lt;/a&gt;</div><div class="line">        --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-share-alt bds_more"</span> <span class="attr">data-cmd</span>=<span class="string">"more"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="自定义版权信息"><a href="#自定义版权信息" class="headerlink" title="自定义版权信息"></a>自定义版权信息</h2><blockquote>
<p>References</p>
<ul>
<li><a href="http://moxfive.xyz/2016/01/10/hexo-post-version-control/">关联 GitHub, 让 Hexo 支持查看文章更新历史</a></li>
</ul>
</blockquote>
<p>　　默认主题每篇文章末尾都会有版权信息，相关代码在 <strong>…/yelee/layout/_partial/post/nav.ejs</strong>。<br>　　　a. 去除最末尾的许可协议说明<br>　　　b. 将文章作者信息与 <strong>.md</strong> 博文源文件关联<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"copyright"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.title</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- modify author information</div><div class="line">    &lt;p&gt;&lt;span&gt;&lt;%= __('copyright_info.author') %&gt;:...</div><div class="line">    --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.author</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=post.author%</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.date</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.date.format</span>("<span class="attr">YYYY-MM-DD</span>, <span class="attr">HH:mm:ss</span>") %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.updated</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.updated.format</span>("<span class="attr">YYYY-MM-DD</span>, <span class="attr">HH:mm:ss</span>") %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>...</div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.copy-path'</span>); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- not to show license information</div><div class="line">    &lt;p&gt;</div><div class="line">        &lt;span&gt;...</div><div class="line">    &lt;/p&gt;</div><div class="line">    --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>post.author</strong> 指代每篇 <strong>.md</strong> 文章开头的参数声明。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: hexo博客主题Yelee迁移笔记</div><div class="line">date: 2016-09-16 14:54:28</div><div class="line">categories: </div><div class="line"><span class="bullet">- </span>技术留档</div><div class="line"><span class="bullet">- </span>Hexo</div><div class="line">tags: Hexo</div><div class="line"><span class="section">author: &lt;author-name&gt;</div><div class="line">---</span></div></pre></td></tr></table></figure></p>
<h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类&amp;标签"></a>分类&amp;标签</h2><blockquote>
<p>References</p>
<ul>
<li><a href="http://moxfive.xyz/2015/10/25/hexo-tag-cloud/">《让 Hexo 自动生成 Tag Cloud 标签云页面》</a></li>
</ul>
</blockquote>
<p>　效果: <a href="http://durant35.github.io/tags">http://durant35.github.io/tags</a><br>　　1. 使用 Hexo 命令新建一个名为 tags 的页面<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure></p>
<p>　　2. 修改该页面 <strong><your-hexo-ws>/source/tags/index.md</strong><br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: 分类&amp;标签</div><div class="line"><span class="section">date: 2016-09-17 15:43:55</div><div class="line">---</span></div></pre></td></tr></table></figure></p>
<p>　　3. 分类&amp;标签页面相关的代码有 <strong>…/yelee/layout/_partial/page.ejs</strong>，通过 <strong>partial()</strong> 函数引入 <strong>…/yelee/layout/_partial/tag-cloud-page.ejs</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!-- 匹配页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.path</span> === <span class="string">"tags/index.html"</span>)&#123; %&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Tag Cloud Page --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">tag-cloud-page</span>') %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　 <strong>tag-cloud-page.ejs</strong> 代码如下，主要改变是根据需求调整分类的层数。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 显示分类 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_categories</span>(&#123;<span class="attr">depth:</span> <span class="attr">0</span>&#125;) %&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 显示标签 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tags"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">tagcloud</span>(&#123;</div><div class="line">        <span class="attr">min_font:</span> <span class="attr">16</span>, </div><div class="line">        <span class="attr">max_font:</span> <span class="attr">35</span>, </div><div class="line">        <span class="attr">amount:</span> <span class="attr">999</span>, </div><div class="line">        <span class="attr">color:</span> <span class="attr">true</span>, </div><div class="line">        <span class="attr">start_color:</span> '<span class="attr">gray</span>', </div><div class="line">        <span class="attr">end_color:</span> '<span class="attr">black</span>',</div><div class="line">    &#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></div><div class="line">    .category-list li&#123;</div><div class="line">        display: inline-block;</div><div class="line">        margin: 0 1em .5em 0;</div><div class="line">        padding: 4px;</div><div class="line">        border: 1px solid lightgray;</div><div class="line">        font-size: 1.2rem;</div><div class="line">    &#125;</div><div class="line">    .category-list a &#123; color: gray; &#125;</div><div class="line">    .category-list-item:hover a &#123;</div><div class="line">        color: gray;</div><div class="line">        text-decoration: none;</div><div class="line">    &#125;</div><div class="line">    .category-list-count &#123;</div><div class="line">        margin-left: 2px;</div><div class="line">        font-size: .9rem;</div><div class="line">    &#125;</div><div class="line">    .article-entry ul li:before&#123; display: none; &#125;</div><div class="line">    .article-inner &#123; text-align: center; &#125;</div><div class="line">    .tags &#123;</div><div class="line">        max-width: 42em;</div><div class="line">        margin: 2em auto;</div><div class="line">        margin-top: 0em;</div><div class="line">    &#125;</div><div class="line">    .tags a &#123;</div><div class="line">        margin-right: 1em;</div><div class="line">        line-height: 65px;</div><div class="line">        border-bottom: 1px solid gray;</div><div class="line">        white-space: nowrap;</div><div class="line">        transition: border-bottom .5s;</div><div class="line">    &#125;</div><div class="line">    .tags a:hover &#123;</div><div class="line">        border-bottom: 3px dotted gray;</div><div class="line">        text-decoration: none;</div><div class="line">    &#125;</div><div class="line">    #count &gt; span &#123;</div><div class="line">        margin: auto .2em;</div><div class="line">        font-weight: bold;</div><div class="line">    &#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Count tags and categories --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line">    $(<span class="string">'#count'</span>).appendTo(<span class="string">'.count'</span>);</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>list_categories()</strong> 和 <strong>tagcloud()</strong> 均为 <strong>hexo</strong> 的 API，可以参考这里 <a href="https://hexo.io/zh-cn/docs/helpers.html">API|hexo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://moxfive.coding.me/yelee/&quot;&gt;Yelee 主题使用说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MOxFIVE/hexo-theme-yelee&quot;&gt;Github: 简而不减 Hexo 双栏博客主题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;a href=&quot;http://moxfive.xyz/&quot;&gt;MOxFIVE&lt;/a&gt;&lt;/strong&gt; 自定义的 &lt;strong&gt;Yelee&lt;/strong&gt; 这个主题真的很好用，迁移之后我的几个体会是:&lt;br&gt;　　　a). 动态效果很酷炫，整个界面给人的感觉就很满意&lt;br&gt;　　　b). 添加多说评论栏是如此的简单&lt;br&gt;　　　c). 自带的站点、页面访问量统计，很不错&lt;br&gt;　　　d). 整个源码的框架似乎更合理了，你可以自己浏览一下源码，感同身受吧？&lt;/p&gt;
&lt;p&gt;　　下面是本人将自己的博客主题迁移到 &lt;strong&gt;Yelee&lt;/strong&gt; 的过程以及其中做的一些自定义适配。&lt;br&gt;
    
    </summary>
    
      <category term="技术留档" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/"/>
    
      <category term="Hexo" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://durant35.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>dumpbin 指南</title>
    <link href="http://durant35.github.io/2016/09/16/programPearls_dumpbin%E6%8C%87%E5%8D%97/"/>
    <id>http://durant35.github.io/2016/09/16/programPearls_dumpbin指南/</id>
    <published>2016-09-16T05:23:16.000Z</published>
    <updated>2016-09-17T13:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>近几个月的 <strong>Windows</strong> 高空作业让我发现，<strong>dumpbin</strong> 这个小工具往往能解决一些关键问题。目前发现并且使用过的这个小家伙的功能有:</p>
<ul>
<li>查看 DLL 动态链接库导入导出信息，解决动态链接库导出和可执行程序引用对接问题、程序缺失库问题</li>
<li>查看可执行程序的依赖库信息，解决各种程序运行时报错</li>
<li>查看程序、库位数信息，找到库引用位数不匹配等尴尬问题</li>
</ul>
</blockquote>
<p>　下面就来快速学习一下，怎么把这个小家伙用起来。<br><a id="more"></a></p>
<h2 id="配置-path"><a href="#配置-path" class="headerlink" title="配置 path"></a>配置 path</h2><p>　首先，<strong>DUMPBIN.EXE</strong> 程序可以在 <strong><your-VS>/VC/bin/</strong> 目录下找到(32位系统)，该路径下的 amd64 则用于64位系统，参考<a href="">从 VS 的 dumpbin 目录谈 x86、xi386、x86-64、amd64…</a>；对于 <strong>VC++6.0</strong> 则可以在安装目录的 <strong>/Bin/</strong> 目录下(中文版则是<strong>/VC98/Bin/</strong>) 找到。为了在 <strong>cmd命令行</strong> 里面方便使用，我们将其所在的全局路径加入到环境变量 <strong>Path</strong> 中，如下图。<br>    <center><img src="/img/RFID/01-01.png" width="1024px"/></center><br>　右键计算机，属性<strong>→</strong>高级系统配置<strong>→</strong>环境变量<strong>→</strong>双击系统变量中的 <strong>Path→</strong> 在变量值后面加上 <strong>DUMPBIN.EXE</strong> 程序所在全局路径。<strong>(<font color="red">注意：添加路径前需要有”；”隔开，因为变量值是通过”；”分隔的</font>)</strong>。</p>
<h2 id="查看-DLL-EXE-导入导出信息"><a href="#查看-DLL-EXE-导入导出信息" class="headerlink" title="查看 DLL/EXE 导入导出信息"></a>查看 <strong>DLL/EXE</strong> 导入导出信息</h2><p>　接下来我们就可以使用这个工具查看一个 <strong>DLL</strong> 提供的导出函数，(如下左图)。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dumpbin.exe -exports xxx.dll</div><div class="line">dumpbin.exe -exports xxx.exe</div></pre></td></tr></table></figure></p>
<p>　其中要注意的 <strong>“ordinal列”</strong> 列出的信息是导出函数的序号；<strong>“RVA列”</strong> 是一些地址值，也就是导出函数在 <strong>DLL</strong> 模块中的位置，通过该地址值可以在 <strong>DLL</strong> 中找到相应的函数；<strong>“name列”</strong> 是导出函数的名称，使用该 <strong>DLL</strong> 的程序通过该名称找到所需的 <strong>DLL</strong> 导出函数。<br>    <center><img src="/img/RFID/01-02.png" width="1024px"/></center><br>　还可以使用这个工具查看一个 <strong>可执行模块依赖的动态链接库信息</strong> 以及该 <strong>动态链接库中被可执行模块调用的函数</strong><br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dumpbin.exe -imports xxx.dll</div><div class="line">dumpbin.exe -imports xxx.exe</div></pre></td></tr></table></figure></p>
<p>　<strong>这里需要注意的是：一个可执行模块依赖的库函数名称必须与该动态链接库导出的函数名字相一致，因为可执行模块使用依赖的库函数名称来调用DLL中的函数，只有在二者相一致的情况下，可执行模块才能找到所需的DLL导出函数</strong>。因此客户端程序引用的函数符号名必须与 <strong>DLL</strong> 中的导出函数名称一致才能成功调用！</p>
<h2 id="查看-DLL-EXE-位数信息"><a href="#查看-DLL-EXE-位数信息" class="headerlink" title="查看 DLL/EXE 位数信息"></a>查看 <strong>DLL/EXE</strong> 位数信息</h2><p>　经常犯的一个错误是，构建运行的可执行程序，往往与系统位数保持一致，而现在系统通常都是 64位的；然而该可执行程序运行时需要的动态链接库却错误地绑定成 32位的依赖库了，这其实就是报错 <strong>入口不一致…</strong> 的主要原因。 我们可以通过 <strong>dumpbin</strong> 来查看我们生成的可执行程序的是多少位的，同时，使用上面介绍的 <strong>dumpbin.exe -imports xxx.exe</strong> 查看该可执行程序的依赖库信息，然后检查相关依赖库的位数是否有偏差。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dumpbin /headers  XXX.exe </div><div class="line">dumpbin /headers  XXX.dll</div></pre></td></tr></table></figure></p>
<p>　执行上述命令会打印出一些信息，在信息的最开始 <strong>FILE HEADER VALUES</strong> 字段中有 <strong>machine</strong> 字样，假如 machine 是 <font color="green"><strong>x64</strong></font> 或者 <font color="green"><strong>Unknown</strong></font> 说明该 dll/exe 是 64位的；<font color="green"><strong>i386</strong></font> 字样则通常是 32位的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近几个月的 &lt;strong&gt;Windows&lt;/strong&gt; 高空作业让我发现，&lt;strong&gt;dumpbin&lt;/strong&gt; 这个小工具往往能解决一些关键问题。目前发现并且使用过的这个小家伙的功能有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看 DLL 动态链接库导入导出信息，解决动态链接库导出和可执行程序引用对接问题、程序缺失库问题&lt;/li&gt;
&lt;li&gt;查看可执行程序的依赖库信息，解决各种程序运行时报错&lt;/li&gt;
&lt;li&gt;查看程序、库位数信息，找到库引用位数不匹配等尴尬问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;　下面就来快速学习一下，怎么把这个小家伙用起来。&lt;br&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
      <category term="工具链" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
    
    
      <category term="dumpbin" scheme="http://durant35.github.io/tags/dumpbin/"/>
    
  </entry>
  
  <entry>
    <title>Win/Linux下操作ini配置文件(DIY)</title>
    <link href="http://durant35.github.io/2016/09/08/programPearls_Win&amp;Linux%E4%B8%8B%E6%93%8D%E4%BD%9Cini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6(DIY)/"/>
    <id>http://durant35.github.io/2016/09/08/programPearls_Win&amp;Linux下操作ini配置文件(DIY)/</id>
    <published>2016-09-08T03:59:37.000Z</published>
    <updated>2016-09-08T04:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　待续…&lt;/p&gt;

    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
    
      <category term="文件操作" scheme="http://durant35.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
      <category term="ini" scheme="http://durant35.github.io/tags/ini/"/>
    
  </entry>
  
  <entry>
    <title>Win/Linux下基本文件操作</title>
    <link href="http://durant35.github.io/2016/09/08/programPearls_Win&amp;Linux%E4%B8%8B%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://durant35.github.io/2016/09/08/programPearls_Win&amp;Linux下基本文件操作/</id>
    <published>2016-09-08T03:58:53.000Z</published>
    <updated>2016-09-08T04:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　待续…&lt;/p&gt;

    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
    
      <category term="文件操作" scheme="http://durant35.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Win/Linux下操作ini配置文件(API)</title>
    <link href="http://durant35.github.io/2016/09/08/programPearls_Win&amp;Linux%20Operate%20ini%20configuration%20files(API)/"/>
    <id>http://durant35.github.io/2016/09/08/programPearls_Win&amp;Linux Operate ini configuration files(API)/</id>
    <published>2016-09-08T03:54:32.000Z</published>
    <updated>2016-11-12T10:26:04.696Z</updated>
    
    <content type="html"><![CDATA[<p>　我们的程序常常需要从配置文件中获取参数，一方面，用户关于程序的自定义配置往往就存储在配置文件中，自定义配置的适配与保存就转化为对配置文件的读写操作；另一方面，也是本文编写的由来，那就是将有关程序中核心算法的参数提取到配置文件，方便算法参数的调试(只要调整配置文件，无需修改程序源码，更无需重新构建)。<br>　<strong>.ini</strong> 文件作为典型的配置文件，其文件存储的内容基本上是一些参数的 <strong>Key-Value</strong> 形式，此外就是一些所谓的属性段，多个对同一方面参数进行描述的 <strong>键值对</strong> 可以归纳为一个 <strong>Section</strong>。<br>　下面，是 <strong>Win/Linux</strong> 下如何通过不同的 API 实现对 <strong>*.ini</strong> 配置文件读写操作的整理。<br><a id="more"></a></p>
<h3 id="Linux-using-Glib-API"><a href="#Linux-using-Glib-API" class="headerlink" title="Linux, using Glib API"></a>Linux, using Glib API</h3><blockquote>
<p>Reference: </p>
<ul>
<li><a href="https://developer.gnome.org/glib/stable/glib-Key-value-file-parser.html">Key-value file parser: Key-value file parser — parses .ini-like config files</a></li>
</ul>
</blockquote>
<p>　Linux 下我们通过使用 <strong>Glib API</strong> 操作 <strong>.ini</strong> 文件，具体流程包括安装 <strong>Glib</strong> 库，加载 <strong>ini</strong> 文件，通过 <strong>Key</strong> 读写键值对，最后再卸载文件。</p>
<p><font color="FFAAAA"><strong>1. </strong></font>Configure Runtime Environment<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ sudo apt-get install libglib2.0-dev</div></pre></td></tr></table></figure></p>
<p>　Install <strong>glib-2.0</strong> and <font color="blue">add it as a link library</font> for build option.</p>
<p><font color="FFAAAA"><strong>2. </strong></font>Create File Handler</p>
<blockquote>
<p>APIs:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">GKeyFile* <span class="title">g_key_file_new</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">gboolean <span class="title">g_key_file_load_from_file</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                        <span class="keyword">const</span> gchar *file,</div><div class="line">                        GKeyFileFlags flags,</div><div class="line">                        GError **error)</span></span>;</div><div class="line">flags: G_KEY_FILE_NONE </div><div class="line">     | G_KEY_FILE_KEEP_COMMENTS </div><div class="line">     | G_KEY_FILE_KEEP_TRANSLATIONS</div></pre></td></tr></table></figure></p>
<p>Examples:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>		<span class="comment">// for fprintf&amp;stderr</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>		<span class="comment">// for EXIT_FAILURE</span></span></div><div class="line"> </div><div class="line"><span class="comment">// get Gkeyfile</span></div><div class="line">GKeyFile* viewer_ini = g_key_file_new();</div><div class="line">GError **error = <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (!g_key_file_load_from_file(viewer_ini, <span class="string">"velodyne.ini"</span>, </div><div class="line">                			G_KEY_FILE_NONE, error))&#123;</div><div class="line">    <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"Could not read config file\n"</span>);</div><div class="line">    <span class="keyword">return</span> EXIT_FAILURE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><font color="FFAAAA"><strong>3. </strong></font>Read/Write Parameters from/to File<br>　我们选用常用的数据类型，<strong>integer</strong>, <strong>double</strong>, <strong>string</strong>, <strong>boolean</strong>。</p>
<blockquote>
<p>APIs:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function">gint <span class="title">g_key_file_get_integer</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       GError **error)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_set_integer</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       gint value)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">gdouble <span class="title">g_key_file_get_double</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       GError **error)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_set_double</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       gdouble value)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">gchar* <span class="title">g_key_file_get_string</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       GError **error)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_set_string</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       <span class="keyword">const</span> gchar *<span class="built_in">string</span>)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">gboolean <span class="title">g_key_file_get_boolean</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       GError **error)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_set_boolean</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       gboolean value)</span></span>;</div></pre></td></tr></table></figure></p>
<p>Examples:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># velodyne.ini</span></div><div class="line"><span class="section">[CfgGlobal]</span></div><div class="line"><span class="attr">GroundZ</span>=-<span class="number">192</span></div><div class="line"><span class="attr">CarLength</span>=<span class="number">469</span></div><div class="line"><span class="attr">CarWidth</span>=<span class="number">185</span></div><div class="line"><span class="attr">CarHeight</span>=<span class="number">172</span></div><div class="line"><span class="attr">Threshold</span>=<span class="number">0.820000</span></div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// *.cpp</span></div><div class="line">cfg.cfgGlobal.GroundZ =</div><div class="line">    g_key_file_get_integer(viewer_ini, <span class="string">"CfgGlobal"</span>, <span class="string">"GroundZ"</span>, error);</div><div class="line">cfg.cfgGlobal.ThresholdMinRad =</div><div class="line">    g_key_file_get_double(viewer_ini, <span class="string">"CfgGlobal"</span>, <span class="string">"Threshold"</span>, error);</div><div class="line"> </div><div class="line">g_key_file_set_integer(viewer_ini, <span class="string">"CfgGlobal"</span>, <span class="string">"GroundZ"</span>, </div><div class="line">                                              cfg.cfgGlobal.GroundZ);</div><div class="line">g_key_file_set_double(viewer_ini, <span class="string">"CfgGlobal"</span>, <span class="string">"ThresholdMinRad"</span>, </div><div class="line">                                              cfg.cfgGlobal.Threshold);</div></pre></td></tr></table></figure>
</blockquote>
<p><font color="FFAAAA"><strong>4. </strong></font>Free File Handler</p>
<blockquote>
<p>API:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_free</span> <span class="params">(GKeyFile *key_file)</span></span>;</div></pre></td></tr></table></figure></p>
<p>Example:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g_key_file_free (glib_keyfile);</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="Windows-using-Winbase-API"><a href="#Windows-using-Winbase-API" class="headerlink" title="Windows, using Winbase API"></a>Windows, using Winbase API</h3><p>　Windows 下我们使用 <strong>Winbase.h</strong> 提供的 API 操作 <strong>.ini</strong> 文件，与 Linux 下使用 <strong>Glib API</strong> 最大的不同是，不存在配置文件的加载，卸载流程，不过每次读写参数时都需要传递操作文件所需要的文件名；此外，支持的数据类型也比较少(似乎就只有 <strong>Int</strong> 和 <strong>String</strong>)，写操作更是只有 <strong>String</strong> 数据类型。<br>　下面是简单功能的基本实现。</p>
<blockquote>
<p>APIs:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT WINAPI <span class="title">GetPrivateProfileInt</span><span class="params">(</div><div class="line">  _In_ LPCTSTR lpAppName,</div><div class="line">  _In_ LPCTSTR lpKeyName,</div><div class="line">  _In_ INT     nDefault,</div><div class="line">  _In_ LPCTSTR lpFileName</div><div class="line">)</span></span>;</div><div class="line"><span class="function">DWORD WINAPI <span class="title">GetPrivateProfileString</span><span class="params">(</div><div class="line">  _In_  LPCTSTR lpAppName,</div><div class="line">  _In_  LPCTSTR lpKeyName,</div><div class="line">  _In_  LPCTSTR lpDefault,</div><div class="line">  _Out_ LPTSTR  lpReturnedString,</div><div class="line">  _In_  DWORD   nSize,</div><div class="line">  _In_  LPCTSTR lpFileName</div><div class="line">)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">BOOL WINAPI <span class="title">WritePrivateProfileString</span><span class="params">(</div><div class="line">  _In_ LPCTSTR lpAppName,</div><div class="line">  _In_ LPCTSTR lpKeyName,</div><div class="line">  _In_ LPCTSTR lpString,</div><div class="line">  _In_ LPCTSTR lpFileName</div><div class="line">)</span></span>;</div></pre></td></tr></table></figure></p>
<p>Examples:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for GetPrivateProfileInt&amp;Get/WritePrivateProfileString</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winbase.h&gt;</span></span></div><div class="line"><span class="comment">// for _snprintf</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">// for atof</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">char</span> buf[<span class="number">64</span>];</div><div class="line"><span class="keyword">char</span> defaultVal[<span class="number">64</span>];</div><div class="line"> </div><div class="line">cfg.cfgGlobal.GroundZ =</div><div class="line">        GetPrivateProfileInt(<span class="string">"CfgGlobal"</span>, <span class="string">"GroundZ"</span>, g_DefaultGlobalCfg.GroundZ, <span class="string">"velodyne.ini"</span>);</div><div class="line"> </div><div class="line">_snprintf(defaultVal, <span class="keyword">sizeof</span>(defaultVal), <span class="string">"%f"</span>, g_DefaultGlobalCfg.Threshold);</div><div class="line">GetPrivateProfileString(<span class="string">"CfgGlobal"</span>, <span class="string">"Threshold"</span>, defaultVal, buf, <span class="keyword">sizeof</span>(buf), <span class="string">"velodyne.ini"</span>);</div><div class="line">cfg.cfgGlobal.Threshold = (<span class="keyword">double</span>)atof(buf);</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">char</span> val[<span class="number">64</span>];</div><div class="line">_snprintf(val, <span class="keyword">sizeof</span>(val), <span class="string">"%d"</span>, cfg.cfgGlobal.GroundZ);</div><div class="line">WritePrivateProfileString(<span class="string">"CfgGlobal"</span>, <span class="string">"GroundZ"</span>, val, <span class="string">"velodyne.ini"</span>);</div><div class="line"> </div><div class="line">_snprintf(val, <span class="keyword">sizeof</span>(val), <span class="string">"%.6f"</span>, cfg.cfgGlobal.Threshold);</div><div class="line">WritePrivateProfileString(<span class="string">"CfgGlobal"</span>, <span class="string">"Threshold"</span>, val, <span class="string">"velodyne.ini"</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<p><font color="red"><strong>注意： </strong></font></p>
<blockquote>
<ul>
<li>GetPrivateProfileInt 和 GetPrivateProfileString 都需要传递缺省值，而且每一次都需要制定对应的配置文件；假如成功找到对应的参数键，返回对应的值，否则返回传进去的缺省值。</li>
<li>对于 <strong>Int</strong>，<strong>String</strong> 除外的数据类型，通过 <strong>GetPrivateProfileString</strong> 获取参数键对应的值，不过返回的值是参数值对应的字符串，需要再通过 <strong>atof</strong>，<strong>atoi</strong>，<strong>atol</strong> 转为对应的数据类型。</li>
<li>关于键值对保存到配置文件，只有 <strong>WritePrivateProfileString</strong> 这种字符串数据类型，需要通过 <strong>_snprintf</strong> 将要保存的参数数据类型转为字符串格式再进行保存。 <strong>_snprintf</strong> 的格式说明和 <strong>printf</strong> 基本相同。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　我们的程序常常需要从配置文件中获取参数，一方面，用户关于程序的自定义配置往往就存储在配置文件中，自定义配置的适配与保存就转化为对配置文件的读写操作；另一方面，也是本文编写的由来，那就是将有关程序中核心算法的参数提取到配置文件，方便算法参数的调试(只要调整配置文件，无需修改程序源码，更无需重新构建)。&lt;br&gt;　&lt;strong&gt;.ini&lt;/strong&gt; 文件作为典型的配置文件，其文件存储的内容基本上是一些参数的 &lt;strong&gt;Key-Value&lt;/strong&gt; 形式，此外就是一些所谓的属性段，多个对同一方面参数进行描述的 &lt;strong&gt;键值对&lt;/strong&gt; 可以归纳为一个 &lt;strong&gt;Section&lt;/strong&gt;。&lt;br&gt;　下面，是 &lt;strong&gt;Win/Linux&lt;/strong&gt; 下如何通过不同的 API 实现对 &lt;strong&gt;*.ini&lt;/strong&gt; 配置文件读写操作的整理。&lt;br&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
    
      <category term="文件操作" scheme="http://durant35.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
      <category term="ini" scheme="http://durant35.github.io/tags/ini/"/>
    
  </entry>
  
  <entry>
    <title>使用 select 函数实现更为精确的延时</title>
    <link href="http://durant35.github.io/2016/09/08/programPearls_precise%20delay%20using%20select/"/>
    <id>http://durant35.github.io/2016/09/08/programPearls_precise delay using select/</id>
    <published>2016-09-08T03:51:14.000Z</published>
    <updated>2016-10-08T03:55:10.883Z</updated>
    
    <content type="html"><![CDATA[<h3 id="select-初识"><a href="#select-初识" class="headerlink" title="select 初识"></a>select 初识</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(</div><div class="line">  _In_    <span class="keyword">int</span>                  nfds,         <span class="comment">// 忽略,仅是为了与Berkeley套接字兼容</span></div><div class="line">  _Inout_ fd_set               *readfds,     <span class="comment">// 指向一个套接字集合,用来检查其可读性</span></div><div class="line">  _Inout_ fd_set               *writefds,    <span class="comment">// 指向一个套接字集合,用来检查其可写性</span></div><div class="line">  _Inout_ fd_set               *exceptfds,   <span class="comment">// 指向一个套接字集合,用来检查错误</span></div><div class="line">  _In_    <span class="keyword">const</span> <span class="keyword">struct</span> timeval *timeout      <span class="comment">// 指定此函数等待的最长时间,如果为NULL,则最长时间为无限大</span></div><div class="line">)</span></span>;</div><div class="line"> </div><div class="line">返回值: </div><div class="line">  函数调用成功，返回发生网络事件的所有套接字数量的总和</div><div class="line">  如果超时返回<span class="number">0</span>，代表在描述词状态改变前已超过timeout时间;</div><div class="line">  当有错误发生时则返回SOCKET_ERROR(<span class="number">-1</span>).</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>select 包含三个 Socket 队列，分别代表： readfds，检查可读性，writefds，检查可写性，exceptfds，例外数据。</li>
<li>timeout 是 select 函数的返回时间。timeout 参数控制 select 完成的时间。若 <font color="blue">timeout 参数为空指针，则 select 将一直阻塞到有一个描述字满足条件</font>，否则的话，timeout 指向一个 timeval 结构，其中指定了 select 调用在返回前等待多长时间。如果 timeval 为 {0,0}，则 select 立即返回，这可用于探询所选套接口的状态，如果处于这种状态，则 select 调用可认为是非阻塞的，且一切适用于非阻塞调用的假设都适用于它。</li>
</ul>
<blockquote>
<p>Windows 下有关 <strong>select</strong> 函数使用的 APIs:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> timeval &#123;</div><div class="line">    <span class="keyword">long</span> tv_sec;  <span class="comment">// 秒</span></div><div class="line">    <span class="keyword">long</span> tv_usec; <span class="comment">// 微秒</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> fd_set &#123;</div><div class="line">    u_int fd_count;                 <span class="comment">// 下面数组的大小</span></div><div class="line">    SOCKET fd_array[FD_SETSIZE];    <span class="comment">// 套接字句柄数组</span></div><div class="line">&#125; fd_set;</div><div class="line"> </div><div class="line">FD_ZERO(*fd_set);       <span class="comment">// 初始化 fd_set 为空集合。集合在使用前应该总是清空</span></div><div class="line">FD_CLR(fd, *fd_set);    <span class="comment">// 从 fd_set 移除套接字 fd</span></div><div class="line">FD_ISSET(fd, *fd_set);  <span class="comment">// 检查 fd 是不是 fd_set 的成员，如果是返回 TRUE</span></div><div class="line">FD_SET(fd, *fd_set);    <span class="comment">// 添加套接字 fd 到集合 fd_set</span></div><div class="line"><span class="comment">/**************************************************************************/</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>　例如，我们想要检查一个套接字是否有数据需要(可以)接收，我们可以把套接字句柄加入可读性检查队列中，然后调用 select，如果，该套接字没有数据需要(可以)接收， select 函数会把该套接字从可读性检查队列中删除掉，所以我们只要检查该套接字句柄是否还存在于可读性队列中，就可以知道到底有没有数据需要(可以)接收了。<br>    <center><img src="/img/programPearls/socket/select_queue.png" /></center></p>
<h3 id="When-Readable-When-Writable"><a href="#When-Readable-When-Writable" class="headerlink" title="When Readable? When Writable?"></a>When Readable? When Writable?</h3><blockquote>
<p>下面是摘自 <strong>Microsoft</strong> 官网的 API<a href="https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms740141(v=vs.85).aspx">[select function]</a> 说明</p>
<ul>
<li>The parameter readfds identifies the sockets that are to be checked for readability. </li>
</ul>
<p>　If the socket is currently in the listen state, it will be marked as readable if an incoming connection request has been received such that an accept is guaranteed to complete without blocking.<br>　<font color="blue">假如已调用了 listen，而且一个连接正在建立，那么 accept 函数调用会成功，accept 之前，用于监听的 socket 是可读的</font>。<br>　For other sockets, readability means that queued data is available for reading such that a call to recv, WSARecv, WSARecvFrom, or recvfrom is guaranteed not to block.<br>　<font color="blue">对于其他不是用于监听的 Socket，有数据可以读入，则是可读的</font>。</p>
<ul>
<li>The parameter writefds identifies the sockets that are to be checked for writability.<br>　If a socket is processing a connect call (nonblocking), a socket is writeable if the connection establishment successfully completes.<br>　<font color="blue">如果已完成了对一个非阻塞 connect 调用的处理，连接能够成功就是可写</font>。<br>　If the socket is not processing a connect call, writability means a send, sendto, or WSASendto are guaranteed to succeed.<br>　<font color="blue">对于其他不是调用 connect 的 Socket，可以发出数据就是可写的</font>。</li>
</ul>
</blockquote>
<p>　相信你看完官网的说明之后会对 <font color="blue">什么 Socket 可读？什么 Socket 可写</font> 更加捉摸不透(即使有注解)。下面是个人关于这方面的理解，其实所谓可读可写，可以借用 <strong>Linux 一切皆文件</strong> 的思想，任何一个 Socket，其实就是一个文件句柄，当连接建立起来，显然，关于连接两端的 Socket，都是可写的；收发两端均没有数据发送时，关于连接两端的 Socket，都是不可读的；当有一端有数据发送，另一端对应的 Socket 则是可读的。我们借用之前的 <strong>三次握手</strong> 建立连接流程图作进一步解释。<br>    <center><img src="/img/programPearls/socket/establish_3_way_handshake.jpg" /></center><br>　通过设置非阻塞属性，可以实现 <strong>connect</strong>，<strong>accept</strong> 非阻塞调用。上图的阻塞阶段可以理解为无需阻塞了，而变成类似下面的代码流程通过 <strong>select</strong> 函数检测连接状态变化。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>       rwCount;</div><div class="line">fd_set    rSSet, wSSet;</div><div class="line">SOCKET    listenSoc, connectSoc;</div><div class="line"> </div><div class="line"><span class="comment">// listenSoc: bind, listen</span></div><div class="line"> </div><div class="line"><span class="comment">// connectSoc: connect</span></div><div class="line"> </div><div class="line">rwCount = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (rwCount &lt; <span class="number">2</span>)&#123;</div><div class="line">  <span class="comment">// listen socket 可读，connect socket 可写 说明建立连接了</span></div><div class="line">  rdSSet.fd_count = <span class="number">1</span>;</div><div class="line">  rdSSet.fd_array[<span class="number">0</span>] = listenSoc;</div><div class="line">  wrSSet.fd_count = <span class="number">1</span>;</div><div class="line">  wrSSet.fd_array[<span class="number">0</span>] = connectSoc;</div><div class="line">  rwCount = select(<span class="number">0</span>, &amp;rdSSet, &amp;wrSSet, <span class="literal">NULL</span>, &amp;tv);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// listenSoc: accept</span></div></pre></td></tr></table></figure></p>
<p>　在非阻塞的状态下，Server 依次通过 <strong>bind</strong>，<strong>listen</strong> 创建队列，监听客户端的连接。Client 通过 <strong>connect</strong> 与 Server 建立连接，并获得该连接对应 Socket 句柄；Server 端的监听队列则保留了与该连接对应的 Socket，通过 <strong>accept</strong> 获取该连接对应的 Socket 句柄。在此之后，Client，Server 两端便可通过与建立的连接对应的 Socket 实现通讯。</p>
<blockquote>
<p><font color="red">总结:</font></p>
<ul>
<li>通过 select 模式，实现了监听 socket 的 accept 和客户端的 read 之间，以及各个客户端之间的 read，可以不用一直阻塞在那，而是在有相应事件的时候再进行阻塞处理，把 accept 和 read 两个长阻塞转化为 select 一个长阻塞。</li>
<li>使用 select 的好处是程序能够在单个线程内同时处理多个套接字连接，这避免了阻塞模式下的线程膨胀问题。</li>
</ul>
</blockquote>
<h3 id="Using-Select-for-Delay"><a href="#Using-Select-for-Delay" class="headerlink" title="Using Select for Delay"></a>Using Select for Delay</h3><p>　从上面的描述中我们可以看到，当 <strong>select</strong> 检测的 socket 状态没有发生改变时，假如设置了 timeout 时间，则会一直阻塞直到 timeout 时间到。利用 <strong>select</strong> 实现 delay 正是利用这样的原理。不难想象，我们需要先创建一些 socket，然后让用于实现 delay 的 select 检测 socket 处于某种状态(不可读或者不可写)，然后通过 select 去检测该不可达状态，最终 select 超时来实现准确的 delay。<br>　下面通过我们项目中一个实际应用 <strong>Velodyne_player</strong> 作进一步说明。<br>    <center><img src="/img/programPearls/socket/Velodyne_player.png" width="520px"/></center></p>
<blockquote>
<ul>
<li><strong>Velodyne_player</strong> 是一个 <strong>.pcap</strong> 文件回播程序，实现的功能是，32线 <strong>Velodyne-HDL-32E</strong> 激光雷达采集的数据是 <strong>UDP</strong> 的数据包，通过 <strong>.pcap</strong> 文件保存；在日后的线下算法调试中通过 <strong>Velodyne_player</strong> 进行回播，解析采集的 <strong>.pcap</strong> 文件，然后通过 <strong>UDP</strong> 的方式发送，模拟 <strong>Velodyne-HDL-32E</strong> 激光雷达数据采集过程。</li>
<li><strong>.pcap</strong> 文件中每一个数据包均带有时间戳，数据按帧(激光雷达一周扫描的数据为一帧)播放，所以可以获取每一帧的起始时间戳，进而获取每一帧的时间间隔。<strong>Velodyne_player</strong> 中我们通过计算当前帧与起始帧的时间间隔，然后利用系统时间，将其转化为系统绝对时间。接下来，问题就便成同步当前机器时间与播放帧系统绝对时间：<br>　　1). 当前帧绝对时间滞后于机器时间，将当前帧数据立即发送<br>　　2). 当前帧绝对时间超前于机器时间，通过 select 延迟超前的时间，再将当前帧数据发送出去</li>
</ul>
</blockquote>
<p>　<font color="#FF8888">1.</font> 首先，需要创建用于 <strong>select</strong> 检测的，我们可以判断所处状态的 socket。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// include needed MFC library hearder files</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span>   <span class="comment">// for mostly socket operation</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glib.h&gt;</span>		<span class="comment">// for g_get_current_time</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>	ARBITRARY_START_PORT	11000</span></div><div class="line"> </div><div class="line"><span class="keyword">static</span> LONG	LastSocket = ARBITRARY_START_PORT;</div><div class="line"> </div><div class="line"><span class="comment">/**</div><div class="line"> * Debug function: message box for print tempory data</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printFunc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* info, <span class="keyword">int</span> status)</span></span>&#123;</div><div class="line">  CString tmp = <span class="string">" = "</span>;</div><div class="line">  CString str;</div><div class="line">  str.Format(<span class="string">"%d"</span>, status);</div><div class="line">  MessageBox(<span class="literal">NULL</span>, info + tmp + str, <span class="string">""</span>, <span class="literal">NULL</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * 静态函数会被自动分配在一个一直使用的存储区，直到退出应用程序实例，避免了调用函数时压栈出栈，速度快很多</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcm_internal_pipe_create</span><span class="params">(<span class="keyword">int</span> filedes[<span class="number">2</span>])</span></span>&#123;</div><div class="line">  <span class="keyword">int</span>             status, SocOpt, rwCount, nPort;</div><div class="line">  <span class="keyword">short</span>           Port;</div><div class="line">  <span class="comment">// readability&amp;writability check socket set</span></div><div class="line">  fd_set          rdSSet, wrSSet;</div><div class="line">  SOCKET          listenSoc, acceptSoc, connectSoc;</div><div class="line">  sockaddr_in     listen_addr, connect_addr;</div><div class="line">  timeval         tv;</div><div class="line">  <span class="comment">/*</div><div class="line">   * listenSoc: 服务器端的socket</div><div class="line">   * connectSoc: 客户端的socket</div><div class="line">   */</span></div><div class="line">  listenSoc = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">  connectSoc = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line"> </div><div class="line">  listen_addr.sin_family = AF_INET;</div><div class="line">  listen_addr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</div><div class="line">  <span class="comment">/*</div><div class="line">   * This loop ensures that we pick up an UNUSED port. If anything else used this port,</div><div class="line">   *  the entire lcm notification system melts down. The assumption is that we can't bind</div><div class="line">   *  to an address in use once the SO_EXCLUSIVEADDRUSE has been set. If this isn't true, </div><div class="line">   *  another method will need to be implemented.</div><div class="line">   */</span></div><div class="line">  <span class="keyword">do</span>&#123;</div><div class="line">    nPort = InterlockedIncrement(&amp;LastSocket);      <span class="comment">// Make sure we're using unique port</span></div><div class="line">    <span class="keyword">if</span> (nPort &gt; <span class="number">65500</span>)&#123;                             <span class="comment">// Wrapping, reset the port #</span></div><div class="line">      InterlockedCompareExchange(&amp;LastSocket, ARBITRARY_START_PORT, nPort);</div><div class="line">    &#125;</div><div class="line">    Port = (<span class="keyword">short</span>)nPort;</div><div class="line">    listen_addr.sin_port = htons(Port);</div><div class="line"></div><div class="line">    SocOpt = <span class="number">1</span>;</div><div class="line">    status = setsockopt(listenSoc, SOL_SOCKET, SO_EXCLUSIVEADDRUSE, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;SocOpt, <span class="keyword">sizeof</span>(SocOpt));</div><div class="line">    <span class="keyword">if</span> (status)</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    status = bind(listenSoc, (LPSOCKADDR)&amp;listen_addr, <span class="keyword">sizeof</span>(listen_addr));</div><div class="line">  &#125; <span class="keyword">while</span> (status != <span class="number">0</span>);</div><div class="line">  <span class="comment">/*</div><div class="line">   * 1. 非阻塞方式连接</div><div class="line">   *   设置非阻塞方式连接(http://blog.csdn.net/ludw508/article/details/8565203)</div><div class="line">   *     对于阻塞的套接字：0表示正确，SOCKET_ERROR表示错误</div><div class="line">   *     对于非阻塞套接字，不能立刻判断连接是否完成。函数会返回SOCKET_ERROR，但这并不表示出错</div><div class="line">   * 2. 请求队列只能允许一个客户端请求</div><div class="line">   */</span></div><div class="line">  SocOpt = <span class="number">1</span>;</div><div class="line">  status = ioctlsocket(listenSoc, FIONBIO, (u_long *)&amp;SocOpt);</div><div class="line">  status = listen(listenSoc, <span class="number">1</span>);</div><div class="line"> </div><div class="line">  connect_addr.sin_family = AF_INET;</div><div class="line">  connect_addr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</div><div class="line">  connect_addr.sin_port = htons(Port);</div><div class="line">  </div><div class="line">  SocOpt = <span class="number">1</span>;</div><div class="line">  status = ioctlsocket(connectSoc, FIONBIO, (u_long *)&amp;SocOpt);</div><div class="line">  <span class="keyword">if</span> (SOCKET_ERROR == status)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">  status = connect(connectSoc, (LPSOCKADDR)&amp;connect_addr, <span class="keyword">sizeof</span>(connect_addr));</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">   * 使用 select 函数来决定连接请求的完成，通过查看套接字是否可写</div><div class="line">   */</span></div><div class="line">  rwCount = <span class="number">0</span>;</div><div class="line">  tv.tv_sec = <span class="number">0</span>;</div><div class="line">  tv.tv_usec = <span class="number">20</span> * <span class="number">1000</span>;</div><div class="line">  <span class="keyword">while</span> (rwCount &lt; <span class="number">2</span>)&#123;</div><div class="line">    rdSSet.fd_count = <span class="number">1</span>;</div><div class="line">    rdSSet.fd_array[<span class="number">0</span>] = connectSoc;</div><div class="line">    wrSSet.fd_count = <span class="number">1</span>;</div><div class="line">    wrSSet.fd_array[<span class="number">0</span>] = listenSoc;</div><div class="line">    rwCount = select(<span class="number">0</span>, &amp;wrSSet, &amp;rdSSet, <span class="literal">NULL</span>, &amp;tv);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __TEST__</span></div><div class="line">    printFunc(<span class="string">"rwCount ="</span>, rwCount);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Both sockets are ready now to complete the connection.</span></div><div class="line"> </div><div class="line">  <span class="keyword">int</span> addr_len = <span class="keyword">sizeof</span>(listen_addr);</div><div class="line">  acceptSoc = accept(listenSoc, (LPSOCKADDR)&amp;listen_addr, &amp;addr_len);</div><div class="line"> </div><div class="line">  <span class="comment">// Restore the sockets to blocking (default behavior).</span></div><div class="line">  SocOpt = <span class="number">0</span>;</div><div class="line">  status = ioctlsocket(connectSoc, FIONBIO, (u_long *)&amp;SocOpt);</div><div class="line">  status = ioctlsocket(acceptSoc, FIONBIO, (u_long *)&amp;SocOpt);</div><div class="line"> </div><div class="line">  filedes[<span class="number">0</span>] = (<span class="keyword">int</span>)connectSoc;</div><div class="line">  filedes[<span class="number">1</span>] = (<span class="keyword">int</span>)acceptSoc;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><font color="red">分析:</font></p>
<ul>
<li>结合前一节关于可读性，可写性的解释，结合上面具体的代码，调用 <strong>lcm_internal_pipe_create</strong> 获得 <strong>connect</strong> 和 <strong>accept</strong> 返回的 socket 句柄，两个 socket 是通过 listen socket 建立的连接的两端，连接成功建立，二者都是可写的；连接中没有任何一方发送数据，故二者都是不可读的。</li>
<li>此外，用于建立连接的  listen socket，因为他的 listen 队列大小为 1，所以，最终该 socket 是不可写的；因为调用 <strong>accept</strong> 后，监听队列被取空，所以该监听 socket 也是不可读的。</li>
<li><strong>lcm_internal_pipe_create</strong> 必须是静态函数，这样该函数的所有变量会被自动分配在一个一直使用的存储区，直到退出应用程序实例，保证 socket 句柄一直存在，一直有效。</li>
</ul>
</blockquote>
<p>　<font color="#FF8888">2.</font> 开启 <strong>gthread</strong> 线程按帧为单位获取激光雷达数据包，并以 <strong>UDP</strong> 的方式发送出去。为了更准确的模拟激光雷达帧数据的播放时间，通过 <strong>select</strong> 实现恰当的延时，保证帧与帧之间播放的时间间隔，每一帧播放的时间与实际情况相符。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line"> * Glib time control functions</div><div class="line"> * struct timeval: glib Structure used in select() call</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> int64_t <span class="title">timevalToInt64</span><span class="params">(<span class="keyword">struct</span> timeval tv)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> (<span class="keyword">int64_t</span>)tv.tv_sec * <span class="number">1000000</span> + tv.tv_usec;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> int64_t <span class="title">timestamp_now</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  GTimeVal tv;</div><div class="line">  g_get_current_time(&amp;tv);</div><div class="line">  <span class="keyword">return</span> (<span class="keyword">int64_t</span>)tv.tv_sec * <span class="number">1000000</span> + tv.tv_usec;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcm_internal_pipe_close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> closesocket((SOCKET)fd);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * gthread线程函数</div><div class="line"> *  1. 通过NextEvent从.pcap文件获取下一帧激光数据</div><div class="line"> *  2. 通过select的准确timeout，同步播放时刻与抓包时间戳</div><div class="line"> *  3. 通过PublishEvent通过UDP发送出去，提供给Velodyne_viewer使用</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">timer_thread_func</span><span class="params">(<span class="keyword">void</span>* user)</span></span>&#123;</div><div class="line">  VeloPlayer* velo_player = <span class="keyword">reinterpret_cast</span>&lt;VeloPlayer*&gt; (user);</div><div class="line"> </div><div class="line">  <span class="keyword">int64_t</span> abstime;</div><div class="line">  <span class="keyword">int64_t</span> now;</div><div class="line">  <span class="keyword">int64_t</span> starttime;</div><div class="line">  <span class="keyword">int64_t</span> startabstime;</div><div class="line">  <span class="keyword">struct</span> timeval sleep_tv;</div><div class="line"> </div><div class="line">  <span class="keyword">int64_t</span> sleep_utime;</div><div class="line">  fd_set fds;</div><div class="line">  <span class="keyword">int</span> timer_pipe[<span class="number">2</span>];</div><div class="line">  TRACE(<span class="string">"timer_thread_func \n"</span>);</div><div class="line">  <span class="keyword">if</span> (lcm_internal_pipe_create(timer_pipe) != <span class="number">0</span>)&#123;</div><div class="line">    TRACE(<span class="string">"lcm_internal_pipe_create failed\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">int</span> status = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  startabstime = timestamp_now();</div><div class="line"> </div><div class="line">  velo_player-&gt;NextEvent();</div><div class="line">  starttime = timevalToInt64(velo_player-&gt;m_currentTime);</div><div class="line"> </div><div class="line">  <span class="keyword">while</span> (velo_player-&gt;m_exitThread == <span class="number">0</span>)&#123;</div><div class="line">    velo_player-&gt;NextEvent();</div><div class="line">    abstime = timevalToInt64(velo_player-&gt;m_currentTime) - starttime + startabstime;</div><div class="line">    <span class="keyword">if</span> (abstime &lt; <span class="number">0</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line">    now = timestamp_now();</div><div class="line">    <span class="keyword">if</span> (abstime &gt;now)&#123;</div><div class="line">      sleep_utime = abstime - now;</div><div class="line">      sleep_tv.tv_sec = sleep_utime / <span class="number">1000000</span>;</div><div class="line">      sleep_tv.tv_usec = sleep_utime % <span class="number">1000000</span>;</div><div class="line"> </div><div class="line">      <span class="comment">// sleep until the next timed message, or until an abort message</span></div><div class="line">      <span class="comment">/*</div><div class="line">       * select: 2rd parameter readfds identifies the sockets that are to be checked for readability</div><div class="line">       */</span></div><div class="line">      FD_ZERO(&amp;fds);</div><div class="line">      FD_SET(timer_pipe[<span class="number">0</span>], &amp;fds);</div><div class="line">      <span class="comment">/*</div><div class="line">       * 测试可读性 可写性</div><div class="line">       *  velo_player-&gt;timer_pipe[0/1]: connect socket/accept socket </div><div class="line">       *   已完成一个非阻塞connect的连接(可写)</div><div class="line">       *   没有数据可以接收(不可读 阻塞到超时，超时时间sleep_tv)</div><div class="line">       */</span></div><div class="line">      <span class="comment">//#define _SELECT_TEST_</span></div><div class="line">      <span class="comment">//#define _SELECT_WRITE_TEST_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SELECT_WRITE_TEST_</span></div><div class="line">      status = select(<span class="number">0</span>, <span class="number">0</span>, &amp;fds, <span class="literal">NULL</span>, &amp;sleep_tv);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">      status = select(<span class="number">0</span>, &amp;fds, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;sleep_tv);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SELECT_TEST_</span></div><div class="line">      <span class="keyword">int</span> error = WSAGetLastError();</div><div class="line">      printFunc(<span class="string">"status ="</span>, status);</div><div class="line">      printFunc(<span class="string">"error ="</span>, error);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">      <span class="comment">// select timed out</span></div><div class="line">      <span class="keyword">if</span> (!status)&#123;</div><div class="line">        velo_player-&gt;PublishEvent();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        TRACE(<span class="string">"0 != status %d %d\n"</span>, status, WSAGetLastError());</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">if</span> (abstime &lt; now)</div><div class="line">        TRACE(<span class="string">"abstime &lt; now %ld\n"</span>, now - abstime);</div><div class="line">      velo_player-&gt;PublishEvent();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  TRACE(<span class="string">"Thread stoped! \n"</span>);</div><div class="line">  <span class="keyword">if</span> (timer_pipe[<span class="number">0</span>] &gt;= <span class="number">0</span>)</div><div class="line">    lcm_internal_pipe_close(timer_pipe[<span class="number">0</span>]);</div><div class="line">  <span class="keyword">if</span> (timer_pipe[<span class="number">1</span>] &gt;= <span class="number">0</span>)</div><div class="line">    lcm_internal_pipe_close(timer_pipe[<span class="number">1</span>]);</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>References: </p>
<ul>
<li><a href="http://www.cnblogs.com/ranjiewen/p/5618620.html">Winsock IO模型之select模型</a></li>
<li><a href="http://www.cnblogs.com/XiaoG/archive/2010/08/11/1823581.html">解决Linux Socket select总是返回1的问题</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;select-初识&quot;&gt;&lt;a href=&quot;#select-初识&quot; class=&quot;headerlink&quot; title=&quot;select 初识&quot;&gt;&lt;/a&gt;select 初识&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _In_    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;                  nfds,         &lt;span class=&quot;comment&quot;&gt;// 忽略,仅是为了与Berkeley套接字兼容&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Inout_ fd_set               *readfds,     &lt;span class=&quot;comment&quot;&gt;// 指向一个套接字集合,用来检查其可读性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Inout_ fd_set               *writefds,    &lt;span class=&quot;comment&quot;&gt;// 指向一个套接字集合,用来检查其可写性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _Inout_ fd_set               *exceptfds,   &lt;span class=&quot;comment&quot;&gt;// 指向一个套接字集合,用来检查错误&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  _In_    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval *timeout      &lt;span class=&quot;comment&quot;&gt;// 指定此函数等待的最长时间,如果为NULL,则最长时间为无限大&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;返回值: &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  函数调用成功，返回发生网络事件的所有套接字数量的总和&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  如果超时返回&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;，代表在描述词状态改变前已超过timeout时间;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  当有错误发生时则返回SOCKET_ERROR(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;).&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
    
      <category term="Socket" scheme="http://durant35.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>瞎谈Socket编程(三) Win/Linux下的UDP编程</title>
    <link href="http://durant35.github.io/2016/09/08/linux_%E7%9E%8E%E8%B0%88Socket%E7%BC%96%E7%A8%8B_3/"/>
    <id>http://durant35.github.io/2016/09/08/linux_瞎谈Socket编程_3/</id>
    <published>2016-09-08T01:59:58.000Z</published>
    <updated>2016-11-12T10:28:51.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h2><p>　　<strong>UDP Socket</strong> 编程中服务器端流程与 <strong>TCP</strong> 相似, 只是不需要通过 <strong>listen()</strong> 和 <strong>accept()</strong> 监听和等待客户端请求，直接通过 <strong>sendto()</strong> 和 <strong>recvfrom()</strong> 和客户端进行读写操作。<br><a id="more"></a></p>
<blockquote>
<p>server.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> socklen_t int</span></div><div class="line">    <span class="comment">// Win socket dynamic library</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Wsock32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> _snprintf snprintf</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> INVALID_SOCKET (-1)</span></div><div class="line">    <span class="comment">// Linux kernel socket calling</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> closesocket close</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// WIN32</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>     <span class="comment">// for memset</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFLEN 512</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NPACK 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2368</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">struct</span> sockaddr_in sockaddr_server, sockaddr_client;</div><div class="line">  <span class="keyword">int</span> sockfd;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">char</span> recv_buf[BUFLEN];</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">  <span class="comment">// Loading &amp; initializing winsock</span></div><div class="line">  WSADATA wsa;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nInitializing Winsock..."</span>);</div><div class="line">  <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa) != <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Failed. Error Code : %d"</span>, WSAGetLastError());</div><div class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">  &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Initialized.\n"</span>);</div><div class="line">  <span class="comment">// 1. Creating socket, no-connection way, datagram</span></div><div class="line">  <span class="keyword">if</span> ((sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == INVALID_SOCKET&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"fail to create socket...\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Configuring server ip port, etc</span></div><div class="line">  <span class="built_in">memset</span>((<span class="keyword">char</span> *)&amp;sockaddr_server, <span class="number">0</span>, <span class="keyword">sizeof</span>(sockaddr_server));</div><div class="line">  sockaddr_me.sin_family = AF_INET;</div><div class="line">  sockaddr_me.sin_port = htons(PORT);</div><div class="line">  sockaddr_me.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class="line">  <span class="comment">// 2. Binding server's socket with ip and port </span></div><div class="line">  <span class="keyword">if</span> (bind(sockfd, (sockaddr *)&amp;sockaddr_server, <span class="keyword">sizeof</span>(sockaddr_server)) == <span class="number">-1</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"bind error...\n"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">socklen_t</span> sockaddr_client_len = <span class="keyword">sizeof</span>(sockaddr_client);</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NPACK; i++) &#123;</div><div class="line">    <span class="comment">// 3. Receiving data from client</span></div><div class="line">    <span class="keyword">if</span> (recvfrom(sockfd, buf, BUFLEN, <span class="number">0</span>, </div><div class="line">      (sockaddr *)&amp;sockaddr_client, &amp;sockaddr_client_len) == <span class="number">-1</span>)&#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"recvfrom error...\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Received packet from %s:%d\nData: %s\n\n"</span>,</div><div class="line">      inet_ntoa(sockaddr_client.sin_addr), ntohs(sockaddr_client.sin_port), buf);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 4. Closing server's socket after transceiving </span></div><div class="line">  closesocket(sockfd);</div><div class="line">#ifdef WIN32</div><div class="line">  <span class="comment">// Unloading win socket dynamic library</span></div><div class="line">  WSACleanup();</div><div class="line">#endif</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h2><p>　　<strong>UDP Socket</strong> 编程客户端流程与服务器端相比更为简单，无需进行绑定操作，直接通过服务器端的ip、端口等信息， 使用 <strong>sendto()/recvfrom()</strong> 进行数据发送和接收操作。</p>
<blockquote>
<p>client.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> socklen_t int</span></div><div class="line">    <span class="comment">// Win socket dynamic library</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Wsock32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> _snprintf snprintf</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> INVALID_SOCKET (-1)</span></div><div class="line">    <span class="comment">// Linux kernel socket calling</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> closesocket close</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// WIN32</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>     <span class="comment">// for memset</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFLEN 512</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NPACK 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2368</span></div><div class="line"><span class="comment">// Server's ip address which is pingable</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SRV_IP <span class="meta-string">"127.0.0.1"</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">struct</span> sockaddr_in sockaddr_server;</div><div class="line">  <span class="keyword">int</span> sockfd;</div><div class="line">  <span class="keyword">char</span> buf[BUFLEN];</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">  WSADATA wsa;</div><div class="line">  <span class="comment">// Loading &amp; initializing winsock</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nInitialising Winsock..."</span>);</div><div class="line">  <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa) != <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Failed. Error Code : %d"</span>, WSAGetLastError());</div><div class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Initialised.\n"</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="comment">// 1. Creating socket, no-connection way, datagram</span></div><div class="line">  <span class="keyword">if</span> ((sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == INVALID_SOCKET)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Configuring server ip address, port, etc for client</span></div><div class="line">  <span class="built_in">memset</span>((<span class="keyword">char</span> *)&amp;sockaddr_server, <span class="number">0</span>, <span class="keyword">sizeof</span>(sockaddr_server));</div><div class="line">  sockaddr_server.sin_family = AF_INET;</div><div class="line">  sockaddr_server.sin_port = htons(PORT);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">  sockaddr_server.sin_addr.S_un.S_addr = inet_addr(SRV_IP);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  sockaddr_server.sin_addr.s_addr = inet_addr(SRV_IP);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">   </div><div class="line">  <span class="comment">// 2. Sending/Receiving data to/from client</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i&lt;NPACK; i++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Sending packet %d\n"</span>, i);</div><div class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"This is packet %d\n"</span>, i);</div><div class="line">    <span class="keyword">if</span> (sendto(sockfd, buf, BUFLEN, <span class="number">0</span>, </div><div class="line">      (<span class="keyword">struct</span> sockaddr *) &amp;sockaddr_server, <span class="keyword">sizeof</span>(sockaddr_server)) == <span class="number">-1</span>)</div><div class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"sendto error\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 3. Closing client's socket after transceiving</span></div><div class="line">  closesocket(sockfd);</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">  <span class="comment">// Unloading win socket dynamic library</span></div><div class="line">  WSACleanup();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Server端&quot;&gt;&lt;a href=&quot;#Server端&quot; class=&quot;headerlink&quot; title=&quot;Server端&quot;&gt;&lt;/a&gt;Server端&lt;/h2&gt;&lt;p&gt;　　&lt;strong&gt;UDP Socket&lt;/strong&gt; 编程中服务器端流程与 &lt;strong&gt;TCP&lt;/strong&gt; 相似, 只是不需要通过 &lt;strong&gt;listen()&lt;/strong&gt; 和 &lt;strong&gt;accept()&lt;/strong&gt; 监听和等待客户端请求，直接通过 &lt;strong&gt;sendto()&lt;/strong&gt; 和 &lt;strong&gt;recvfrom()&lt;/strong&gt; 和客户端进行读写操作。&lt;br&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
      <category term="Linux" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/Linux/"/>
    
    
      <category term="Linux" scheme="http://durant35.github.io/tags/Linux/"/>
    
      <category term="Socket" scheme="http://durant35.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>git几步走</title>
    <link href="http://durant35.github.io/2016/07/26/tool_git%E5%87%A0%E6%AD%A5%E8%B5%B0/"/>
    <id>http://durant35.github.io/2016/07/26/tool_git几步走/</id>
    <published>2016-07-26T00:47:07.000Z</published>
    <updated>2016-11-12T10:04:57.275Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>第一步:</strong> <strong>github.com</strong> 上添加新仓库 “Create New Repository”</p>
<p>　　<strong>第二步:</strong> 本地关联远程库.添加后，远程库的名字就是 <strong>origin</strong>，这是 <strong>Git</strong> 默认的叫法，也可以改成别的，但是 <strong>origin</strong> 这个名字一看就知道是远程库。<br>　　　<font color="green"><strong>git remote add origin <a href="https://github.com/Durant35/[Repository">https://github.com/Durant35/[Repository</a> Name].git</strong></font></p>
<p>　　把本地库的内容推送到远程，用 <strong>git push</strong> 命令，实际上是把当前分支 <strong>master</strong> 推送到远程。<br>　　由于远程库是空的，我们第一次推送 <strong>master</strong> 分支时，加上了 <strong>-u</strong> 参数，<strong>Git</strong> 不但会把本地的 <strong>master</strong> 分支内容推送的远程新的 <strong>master</strong> 分支，还会把本地的 <strong>master</strong> 分支和远程的 <strong>master</strong> 分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>　　　<font color="green"><strong>git push -u origin master</strong></font></p>
<p>　　把本地 <strong>master</strong> 分支的最新修改推送至 <strong>GitHub</strong>！<br>　　　<font color="green"><strong>git push origin master</strong></font><br><a id="more"></a></p>
<p>　　<strong>第三步：</strong> 查看改变<br>　　查看本地文件夹改变<br>　　　<font color="green"><strong>git status</strong></font><br>　　查看本地文件改变<br>　　　<font color="green"><strong>git diff “file name”</strong></font><br>　　查看本地与远程库区别<br>　　　<font color="green"><strong>git diff master origin</strong></font></p>
<p>　　<strong>第四步:</strong> 文件/文件夹创建、编写<br>　　　<font color="green"><strong>git add “file name”</strong></font>　　　　# 创建<br>　　　<font color="green"><strong>git rm “file name”    </strong></font>　　　　 # 删除<br>　　　<font color="green"><strong>git add .    </strong></font>　　　　 　　　 　# git add all files changed</p>
<p>　　<strong>第五步:</strong> 先本地提交，后远程提交<br>　　　<font color="green"><strong>git commit -m “messages”</strong></font><br>　　　<font color="green"><strong>git push origin master</strong></font></p>
<p>　　<strong>第六步:</strong> <strong>git</strong> 版本回退<br>　　　(注意 <strong>hard</strong> 前面是两个<strong>“-“</strong>)<br>　　　<font color="green"><strong>git reset –hard commit_id</strong></font></p>
<p>　　1) <strong>HEAD</strong> 指向的版本就是当前版本<br>　　2) <strong>commit_id</strong> 通过以下命令获取<br>　　　<font color="green"><strong>git log</strong></font>　　　 查看提交历史    –&gt; 回退到过去哪个版本<br>　　　<font color="green"><strong>git reflog</strong></font>　　查看命令历史     –&gt; 回到未来的哪个版本</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;第一步:&lt;/strong&gt; &lt;strong&gt;github.com&lt;/strong&gt; 上添加新仓库 “Create New Repository”&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;第二步:&lt;/strong&gt; 本地关联远程库.添加后，远程库的名字就是 &lt;strong&gt;origin&lt;/strong&gt;，这是 &lt;strong&gt;Git&lt;/strong&gt; 默认的叫法，也可以改成别的，但是 &lt;strong&gt;origin&lt;/strong&gt; 这个名字一看就知道是远程库。&lt;br&gt;　　　&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;git remote add origin &lt;a href=&quot;https://github.com/Durant35/[Repository&quot;&gt;https://github.com/Durant35/[Repository&lt;/a&gt; Name].git&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;　　把本地库的内容推送到远程，用 &lt;strong&gt;git push&lt;/strong&gt; 命令，实际上是把当前分支 &lt;strong&gt;master&lt;/strong&gt; 推送到远程。&lt;br&gt;　　由于远程库是空的，我们第一次推送 &lt;strong&gt;master&lt;/strong&gt; 分支时，加上了 &lt;strong&gt;-u&lt;/strong&gt; 参数，&lt;strong&gt;Git&lt;/strong&gt; 不但会把本地的 &lt;strong&gt;master&lt;/strong&gt; 分支内容推送的远程新的 &lt;strong&gt;master&lt;/strong&gt; 分支，还会把本地的 &lt;strong&gt;master&lt;/strong&gt; 分支和远程的 &lt;strong&gt;master&lt;/strong&gt; 分支关联起来，在以后的推送或者拉取时就可以简化命令。&lt;br&gt;　　　&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;git push -u origin master&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;　　把本地 &lt;strong&gt;master&lt;/strong&gt; 分支的最新修改推送至 &lt;strong&gt;GitHub&lt;/strong&gt;！&lt;br&gt;　　　&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;git push origin master&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术留档" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/"/>
    
      <category term="小工具" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://durant35.github.io/tags/git/"/>
    
  </entry>
  
</feed>
