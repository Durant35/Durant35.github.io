<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tarantula-7&#39;s Blog</title>
  <subtitle>My Body Knows It&#39;s Time to Say GoodBye... ---- Dear Basketball</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://durant35.github.io/"/>
  <updated>2017-03-11T03:03:07.409Z</updated>
  <id>http://durant35.github.io/</id>
  
  <author>
    <name>Tarantula-7</name>
    <email>1109197209@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法设计与分析[0003] 一道阿里巴巴面试题（2017） </title>
    <link href="http://durant35.github.io/2017/03/10/Algorithms_An%20Alibaba%20Interview%20Question/"/>
    <id>http://durant35.github.io/2017/03/10/Algorithms_An Alibaba Interview Question/</id>
    <published>2017-03-10T06:00:22.000Z</published>
    <updated>2017-03-11T03:03:07.409Z</updated>
    
    <content type="html"><![CDATA[<p>　本周的 part 是 <strong>Divide and Conquer（分而治之）</strong>。<br><a id="more"></a></p>
<h4 id="169-Majority-Element"><a href="#169-Majority-Element" class="headerlink" title="169. Majority Element "></a><a href="https://leetcode.com/problems/majority-element/?tab=Description">169. Majority Element </a></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　本周的 part 是 &lt;strong&gt;Divide and Conquer（分而治之）&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
      <category term="Algorithm" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://durant35.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析[0002] Divide and Conquer——FFT（快速傅里叶变换）</title>
    <link href="http://durant35.github.io/2017/03/04/Algorithms_FFT/"/>
    <id>http://durant35.github.io/2017/03/04/Algorithms_FFT/</id>
    <published>2017-03-04T06:00:22.000Z</published>
    <updated>2017-03-12T09:45:24.552Z</updated>
    
    <content type="html"><![CDATA[<p>　本文介绍 <strong>Divide and Conquer（分而治之）</strong> 的一种典型算法，<strong>FFT</strong>（快速傅里叶变换）。</p>
<h3 id="DFT"><a href="#DFT" class="headerlink" title="DFT"></a>DFT</h3><p>DFT：$X[k] = \sum_{n=0}^{N-1} x[n] e^{-j \frac{2 \pi k}{N} n}, k = 0, 1, 2, …, N-1$</p>
<ul>
<li>for each k: <strong>N</strong> complex mults, <strong>N-1</strong> complex adds</li>
<li>$e^{-j \frac{2 \pi k}{N} n}$ 预计算并保存在计算机中</li>
<li>$O(N^2)$ computations for direct <strong>DFT</strong> $\Longrightarrow$ $O(N log_2 N)$ for <strong>FFT</strong><a id="more"></a>
<h3 id="FFT-算法原理"><a href="#FFT-算法原理" class="headerlink" title="FFT 算法原理"></a>FFT 算法原理</h3>　做出如下定义：$W_N = e^{-j \frac{2 \pi}{N}}$，则：$W_N^{kn} = e^{-j \frac{2 \pi k}{N} n}$，具有如下性质：</li>
</ul>
<ol>
<li>$W_N^{kN} = e^{-j 2 \pi k } = 1$</li>
<li>复共轭对称：$W_N^{k(N-n)} = W_N^{-kn)} = (W_N^{kn})^{*}$</li>
<li>周期性：$W_N^{kn} = W_N^{k(N+n))} = W_N^{(k+N)n}$</li>
</ol>
<p>　假设 $N = 2^m$，separate $x[n]$ into even and odd-indexed subsequences<br>　$ X[k] = \sum_{n=0}^{N-1} x[n] W_N^{kn} =  \sum_{n \in even} x[n] W_N^{kr} + \sum_{n \in odd} x[n] W_N^{kr} $<br>　$ X[k] = \sum_{r=0}^{\frac{N}{2}-1} x[2r] W_N^{k 2r} +  \sum_{r=0}^{\frac{N}{2}-1} x[2r+1] W_N^{k(2r+1)} $<br>　　　$ = \sum_{r=0}^{\frac{N}{2}-1} x[2r] (W_N^2)^{kr} +  W_N^k \sum_{r=0}^{\frac{N}{2}-1} x[2r+1] (W_N^2)^{kr} $<br>　But：$W_N^2 = e^{-j \frac{2 \pi}{N} 2} = e^{-j \frac{2 \pi}{\frac{N}{2}}} = W_{\frac{N}{2}}$<br>　$ X[k] = \sum_{r=0}^{\frac{N}{2}-1} x[2r] W_{\frac{N}{2}}^{kr} +  W_N^k \sum_{r=0}^{\frac{N}{2}-1} x[2r+1] W_{\frac{N}{2}}^{kr} $<br>　　　$ = X_e[k]  + W_N^k X_o[k]$<br>　其中，$X_e[k]$：N/2 DFT of even samples，$X_o[k]$：N/2 DFT of odd samples，$X[k] \Rightarrow$ sum of 2 N/2 point DFTs<br>　<br>　举$N=8$作为一个例子，根据上述的思路进行一次二分，如下图：</p>
<center><img src="/img/Algorithms/0002_FFT complexity 1.png" width="720px"/></center><br>　左边按照普通的 <strong>DFT</strong> 计算（$O(n^2)$的时间复杂度）得到$x_e[0…3]$和$x_o[0…3]$，需要$(\frac{N}{2})^2·2$ 次乘法；$W_8^{0…7}$ 的预计算需要 $N$ 次乘法；最后的 $X[0…7]$ 的计算每一项都需要一次乘法，总共需要 $N$ 次乘法。故通过一次二分得出的计算复杂度估计为 $\frac{N^2}{2} + N$<br><center><img src="/img/Algorithms/0002_FFT complexity 2.png" width="720px"/></center><br>　按照这种思路，继续二分下去（如下图），得到 <strong>FFT</strong> 算法的最终时间复杂度：$O(N log_2 N)$<br><center><img src="/img/Algorithms/0002_FFT diagram(N=8).png" width="800px"/></center>

<h3 id="FFT算法实现"><a href="#FFT算法实现" class="headerlink" title="FFT算法实现"></a>FFT算法实现</h3><ul>
<li>源代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// FFT.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> M_PI  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI 3.14159265358979323846  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1024*16</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VALUE_MAX 1000</span></div><div class="line"> </div><div class="line"><span class="comment">// define a complex structure</span></div><div class="line"><span class="keyword">struct</span> Complex_&#123;  </div><div class="line">    <span class="keyword">double</span> real;  </div><div class="line">    <span class="keyword">double</span> imagin;  </div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Complex_ Complex;</div><div class="line"><span class="comment">// define complex computation: add/subtract/multiply</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Complex_Add</span><span class="params">(Complex* src1, Complex* src2, Complex* dst)</span></span>&#123;  </div><div class="line">    dst-&gt;real = src1-&gt;real + src2-&gt;real;  </div><div class="line">    dst-&gt;imagin = src1-&gt;imagin + src2-&gt;imagin;  </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Complex_Sub</span><span class="params">(Complex* src1, Complex* src2, Complex* dst)</span></span>&#123;  </div><div class="line">    dst-&gt;real = src1-&gt;real - src2-&gt;real;  </div><div class="line">    dst-&gt;imagin = src1-&gt;imagin - src2-&gt;imagin;  </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Complex_Multiply</span><span class="params">(Complex* src1, Complex* src2, Complex* dst)</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> r1 = <span class="number">0.0</span>, r2 = <span class="number">0.0</span>;  </div><div class="line">    <span class="keyword">double</span> i1 = <span class="number">0.0</span>, i2 = <span class="number">0.0</span>;</div><div class="line">    r1 = src1-&gt;real;  </div><div class="line">    i1 = src1-&gt;imagin;  </div><div class="line">    r2 = src2-&gt;real;  </div><div class="line">    i2 = src2-&gt;imagin;</div><div class="line">    dst-&gt;real = r1*r2 - i1*i2;</div><div class="line">    dst-&gt;imagin = i1*r2 + r1*i2;  </div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">// get W_N^k  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getWN</span><span class="params">(<span class="keyword">double</span> k, <span class="keyword">double</span> N, Complex* dst)</span></span>&#123;  </div><div class="line">    <span class="keyword">double</span> x = <span class="number">2.0</span>*M_PI*k/N;  </div><div class="line">    dst-&gt;real = <span class="built_in">cos</span>(x);</div><div class="line">    dst-&gt;imagin = -<span class="built_in">sin</span>(x);  </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// input generator</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_generator</span><span class="params">(<span class="keyword">double</span>* data, <span class="keyword">int</span>  n)</span></span>&#123;  </div><div class="line">    srand((<span class="keyword">int</span>)time(<span class="number">0</span>));  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;SIZE; i++)&#123;  </div><div class="line">        data[i] = rand()%VALUE_MAX;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,data[i]);  </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * normal DFT algorithm, with O(n^2) complexity</div><div class="line"> */</span> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFT</span><span class="params">(<span class="keyword">double</span>* src, Complex* dst, <span class="keyword">int</span> size)</span> </span>&#123; </div><div class="line">    <span class="keyword">clock_t</span> start, end; </div><div class="line">    start = clock(); </div><div class="line">    <span class="comment">// 2 cycle, each with step of 1, size n, so O(n*n)</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;size; m++)&#123; </div><div class="line">        <span class="keyword">double</span> real = <span class="number">0.0</span>;  </div><div class="line">        <span class="keyword">double</span> imagin = <span class="number">0.0</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;size; n++)&#123;  </div><div class="line">            <span class="keyword">double</span> x = M_PI*<span class="number">2</span>*m*n;  </div><div class="line">            real += src[n]*<span class="built_in">cos</span>(x/size);  </div><div class="line">            imagin += src[n]*(-<span class="built_in">sin</span>(x/size));  </div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        dst[m].imagin = imagin;  </div><div class="line">        dst[m].real = real;  </div><div class="line">        <span class="keyword">if</span>(imagin &gt;= <span class="number">0.0</span>)</div><div class="line">        	<span class="built_in">printf</span>(<span class="string">"%lf+%lfj\n"</span>, real, imagin); </div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lf%lfj\n"</span>, real, imagin);</div><div class="line">    &#125; </div><div class="line">    end = clock(); </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"DFT use time :%lf for Datasize of:%d\n"</span>,(<span class="keyword">double</span>)(end-start)/CLOCKS_PER_SEC, size); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">IDFT</span><span class="params">(Complex* src, Complex* dst, <span class="keyword">int</span> size)</span> </span>&#123; </div><div class="line">    <span class="keyword">clock_t</span> start, end; </div><div class="line">    start = clock(); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;size; m++) &#123; </div><div class="line">        <span class="keyword">double</span> real = <span class="number">0.0</span>;  </div><div class="line">        <span class="keyword">double</span> imagin = <span class="number">0.0</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;size; n++) &#123;  </div><div class="line">            <span class="keyword">double</span> x = M_PI*<span class="number">2</span>*m*n/size;  </div><div class="line">            real += src[n].real*<span class="built_in">cos</span>(x)-src[n].imagin*<span class="built_in">sin</span>(x);  </div><div class="line">            imagin += src[n].real*<span class="built_in">sin</span>(x)+src[n].imagin*<span class="built_in">cos</span>(x);  </div><div class="line">               </div><div class="line">        &#125;  </div><div class="line">        real /= SIZE;  </div><div class="line">        imagin /= SIZE;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(dst != <span class="literal">NULL</span>)&#123;  </div><div class="line">            dst[m].real = real;  </div><div class="line">            dst[m].imagin = imagin;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span>(imagin &gt;= <span class="number">0.0</span>)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lf+%lfj\n"</span>, real, imagin);  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lf%lfj\n"</span>, real, imagin);  </div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    end=clock();  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"IDFT use time :%lfs for Datasize of:%d\n"</span>, (<span class="keyword">double</span>)(end-start)/CLOCKS_PER_SEC,size); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// define FFT initialization data, remapping</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FFT_remap</span><span class="params">(<span class="keyword">double</span>* src, <span class="keyword">int</span> N)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span>(N == <span class="number">1</span>) </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line"> </div><div class="line">    <span class="keyword">double</span>* temp = (<span class="keyword">double</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>)*N); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) </div><div class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)  </div><div class="line">            temp[i/<span class="number">2</span>] = src[i];  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            temp[(N+i)/<span class="number">2</span>] = src[i];</div><div class="line"> </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) </div><div class="line">        src[i] = temp[i];</div><div class="line"> </div><div class="line">    <span class="built_in">free</span>(temp);</div><div class="line"> </div><div class="line">    FFT_remap(src, N/<span class="number">2</span>); </div><div class="line">    FFT_remap(src+N/<span class="number">2</span>, N/<span class="number">2</span>);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">double</span>* src, Complex* dst, <span class="keyword">int</span> N)</span></span>&#123; </div><div class="line">    FFT_remap(src, N);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) </div><div class="line">    	<span class="built_in">printf</span>(<span class="string">"%lf\n"</span>, src[i]);</div><div class="line"> </div><div class="line">    <span class="keyword">clock_t</span> start, end; </div><div class="line">    start = clock(); </div><div class="line">    <span class="keyword">int</span> n = N;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"> </div><div class="line">    <span class="comment">// get number of stage</span></div><div class="line">    <span class="keyword">int</span> stage = <span class="number">0</span>; </div><div class="line">    <span class="keyword">while</span>(n /= <span class="number">2</span>) &#123; </div><div class="line">        stage++;  </div><div class="line">    &#125;</div><div class="line">    n = stage; </div><div class="line">    <span class="keyword">if</span>(N != (<span class="number">1</span>&lt;&lt;n)) </div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line"> </div><div class="line">    Complex* src_complex = (Complex*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Complex)*N);</div><div class="line">    <span class="keyword">if</span>(src_complex == <span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123; </div><div class="line">        src_complex[i].real = src[i];  </div><div class="line">        src_complex[i].imagin = <span class="number">0</span>;  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123; </div><div class="line">        k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++) &#123; </div><div class="line">            <span class="keyword">if</span>((j/(<span class="number">1</span>&lt;&lt;i))%<span class="number">2</span> == <span class="number">1</span>) &#123;  </div><div class="line">                Complex WNk;  </div><div class="line">                getWN(k, N, &amp;WNk);</div><div class="line"> </div><div class="line">                Complex_Multiply(&amp;src_complex[j], &amp;WNk, &amp;src_complex[j]);  </div><div class="line">                k += <span class="number">1</span>&lt;&lt;(k-i<span class="number">-1</span>);</div><div class="line">                Complex temp;  </div><div class="line">                <span class="keyword">int</span> neighbour = j-(<span class="number">1</span>&lt;&lt;(i));  </div><div class="line">                temp.real = src_complex[neighbour].real;  </div><div class="line">                temp.imagin = src_complex[neighbour].imagin;  </div><div class="line">                Complex_Add(&amp;temp, &amp;src_complex[j], &amp;src_complex[neighbour]);  </div><div class="line">                Complex_Sub(&amp;temp, &amp;src_complex[j], &amp;src_complex[j]);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">                k = <span class="number">0</span>;  </div><div class="line">        &#125;  </div><div class="line">       </div><div class="line">    &#125; </div><div class="line">     </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">   		<span class="keyword">if</span>(src_complex[i].imagin &gt;= <span class="number">0.0</span>) &#123; </div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%lf+%lfj\n"</span>, src_complex[i].real, src_complex[i].imagin); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> </div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%lf%lfj\n"</span>, src_complex[i].real, src_complex[i].imagin);	</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">    dst[i].imagin = src_complex[i].imagin;  </div><div class="line">    dst[i].real = src_complex[i].real;  </div><div class="line">  &#125;</div><div class="line">    end = clock();</div><div class="line"> </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"FFT use time :%lfs for Datasize of:%d\n"</span>,(<span class="keyword">double</span>)(end-start)/CLOCKS_PER_SEC, N); </div><div class="line">       </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123; </div><div class="line">    <span class="keyword">double</span> input[SIZE]; </div><div class="line">    Complex dst[SIZE]; </div><div class="line">    input_generator(input, SIZE); </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">    DFT(input, dst, SIZE);</div><div class="line"> </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>); </div><div class="line">    FFT(input, dst, SIZE);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　</p>
<ul>
<li>编译构建<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gcc -o FFT FFT.cpp -lm</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　</p>
<ul>
<li>测试结果<blockquote>
<p>DFT use time :33.963164 for Datasize of:16384<br>FFT use time :0.090624s for Datasize of:16384</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　本文介绍 &lt;strong&gt;Divide and Conquer（分而治之）&lt;/strong&gt; 的一种典型算法，&lt;strong&gt;FFT&lt;/strong&gt;（快速傅里叶变换）。&lt;/p&gt;
&lt;h3 id=&quot;DFT&quot;&gt;&lt;a href=&quot;#DFT&quot; class=&quot;headerlink&quot; title=&quot;DFT&quot;&gt;&lt;/a&gt;DFT&lt;/h3&gt;&lt;p&gt;DFT：$X[k] = \sum_{n=0}^{N-1} x[n] e^{-j \frac{2 \pi k}{N} n}, k = 0, 1, 2, …, N-1$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for each k: &lt;strong&gt;N&lt;/strong&gt; complex mults, &lt;strong&gt;N-1&lt;/strong&gt; complex adds&lt;/li&gt;
&lt;li&gt;$e^{-j \frac{2 \pi k}{N} n}$ 预计算并保存在计算机中&lt;/li&gt;
&lt;li&gt;$O(N^2)$ computations for direct &lt;strong&gt;DFT&lt;/strong&gt; $\Longrightarrow$ $O(N log_2 N)$ for &lt;strong&gt;FFT&lt;/strong&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
      <category term="Algorithm" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://durant35.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析[0001] Divide and Conquer </title>
    <link href="http://durant35.github.io/2017/02/26/Algorithms_Divide%20and%20Conquer/"/>
    <id>http://durant35.github.io/2017/02/26/Algorithms_Divide and Conquer/</id>
    <published>2017-02-26T06:00:22.000Z</published>
    <updated>2017-02-26T06:56:45.425Z</updated>
    
    <content type="html"><![CDATA[<p>　本周的 part 是 <strong>Divide and Conquer（分而治之）</strong>。<br><a id="more"></a></p>
<h4 id="169-Majority-Element"><a href="#169-Majority-Element" class="headerlink" title="169. Majority Element "></a><a href="https://leetcode.com/problems/majority-element/?tab=Description">169. Majority Element </a></h4><ul>
<li>Level: Easy</li>
<li>Description<blockquote>
<p>　Given an array of size n, find the <strong>majority element</strong>. The <strong>majority element</strong> is the element that appears more than $⌊ n/2 ⌋$ times.<br>　You may assume that the array is non-empty and the majority element always exist in the array.</p>
</blockquote>
</li>
<li>解题思路<ul>
<li><strong>Majority Element</strong>: A majority element in an array A[] of size n is an element that appears more than n/2 times（显然，只有唯一一个）</li>
<li>可以通过构造 size 为 n 的向量表计数每个数字出现的次数（$O(n)$ 线性时间复杂度），在计数过程中，一旦发现 $count &gt; n/2$ 即可返回，该数字即为要找的 <strong>Majority Element</strong></li>
<li>细想发现，使用数组构建的向量表，通过下标直接访问的方式，必须满足一个前提条件：n 个元素必须 $\in [0, n)$，所以感觉需要维护两个 size 为 n 的数组，一个保存出现的数字 $elements[0…n)$，另一个是对应的计数 $count[0…n)$，但是这样问题就出现了：在一遍遍历计数每个数字出现的次数过程中，为了找到对应的 $count[0…n)$ 下标，需要对  $elements[0…n)$ 进行查找</li>
<li>考虑了以上的情况，决定使用 C++ 中的 <strong>map</strong> 字典来实现上述的想法，避免手动维护这样一个字典功能带来的低效率和繁琐工作量（毕竟是 Easy）</li>
</ul>
</li>
<li>Solution &amp; Analysis<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="number">1</span> == nums.size()) &#123;</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; table;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator table_iter = table.end();</div><div class="line"> </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter=nums.begin(); iter!=nums.end(); iter++)&#123;</div><div class="line">            <span class="keyword">if</span>(table.end() == table.find(*iter))&#123;</div><div class="line">                table.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(*iter, <span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                table[*iter]++;</div><div class="line">                <span class="keyword">if</span>(table[*iter] &gt; nums.size()/<span class="number">2</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> (*iter);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　<font color="green">Accepted</font>，不过耗时：<strong>38ms</strong>，应该有更高效的方式。</p>
<ul>
<li>补充<ul>
<li>有一种算法：<a href="http://www.cs.utexas.edu/~moore/best-ideas/mjrty/">A Linear Time Majority Vote Algorithm</a> ，其思路如下<blockquote>
<ol>
<li>Initialize index and count of majority element:  majorityElement = 0, count = 0</li>
<li>Loop for n = 0 to size – 1<br>　(c)If count == 0<br>　　majorityElement = a[n]<br>　　count = 1<br>　(b)If majorityElement == a[n]<br>　　count++<br>　(b)Else<br>　　count–;</li>
<li>Return majorityElement</li>
</ol>
</blockquote>
</li>
<li>代码实现如下，其时间复杂度只有：13 ms，大大降低了<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>, n, majorityElement;</div><div class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; numsSize; n++) &#123;</div><div class="line">  <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</div><div class="line">      majorityElement = nums[n];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (nums[n] == majorityElement) &#123;</div><div class="line">      count++;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">      count--;</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">    count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; numsSize; n++)&#123;</div><div class="line">  <span class="keyword">if</span> (nums[n] == majorityElement) &#123;</div><div class="line">      count++;</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (count &gt; numsSize/<span class="number">2</span>)&#123;</div><div class="line">  <span class="keyword">return</span> majorityElement;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>+ </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　本周的 part 是 &lt;strong&gt;Divide and Conquer（分而治之）&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
      <category term="Algorithm" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://durant35.github.io/tags/Algorithm/"/>
    
      <category term="leetcode" scheme="http://durant35.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Digital Image Process</title>
    <link href="http://durant35.github.io/2017/02/04/cv_Digital-Image-Process(pg_2016)/"/>
    <id>http://durant35.github.io/2017/02/04/cv_Digital-Image-Process(pg_2016)/</id>
    <published>2017-02-04T09:53:31.000Z</published>
    <updated>2017-02-20T06:06:07.637Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Books：<a href="http://durant35.github.io/pdf/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86(%E5%86%88%E8%90%A8%E9%9B%B7%E6%96%AF)%E4%B8%AD%E8%AF%91%E7%AC%AC%E4%B8%89%E7%89%88.pdf" alt="数字图像处理（冈萨雷斯）">数字图像处理（冈萨雷斯）</a><br>Codes：<a href="https://github.com/Durant35/Courses/tree/master/dip">https://github.com/Durant35/Courses/tree/master/dip</a></p>
</blockquote>
<h3 id="第2章-数字图像基础"><a href="#第2章-数字图像基础" class="headerlink" title="第2章 数字图像基础"></a>第2章 数字图像基础</h3><ul>
<li>取样和量化</li>
<li>空间和灰度分辨率<ul>
<li>空间分辨率：空间分辨率是图像在单位面积内像素的个数，表示了图像的空间细节分辨能力</li>
<li>灰度分辨率：灰度分辨率指的是在纯黑和纯白之间灰度级别的多少，指的是图像对灰度变化细节的分辨能力<a id="more"></a></li>
</ul>
</li>
<li>图像内插</li>
<li>像素间的一些基本关系<ul>
<li>$N_4(p)$；$N_8(p) = N_4(p) + N_D(p)$（对角像素） 4领域/8领域</li>
<li>距离度量 $D_e(p, q)$<ul>
<li>城市街区距离：$p(x, y)$；$q(s, t)$；$D_4(p, q) = |x-s| + |y-t|$</li>
<li>棋盘距离：$p(x, y)$；$q(s, t)$；$D_4(p, q) = |x-s| + |y-t|$</li>
<li>邻接性：</li>
<li>4 邻接；8邻接：二义性（像素到另一个像素有多条路径）</li>
<li>m 邻接：p是q的m邻接，首先p，q具有V中的数值；<br>-（i）p在$N_4(q)$中或<br>-（ii）p在$N_D(q)$且$N_4(p)∩N_4(q)$中没有V值（为空或不为空但没有V值）</li>
</ul>
</li>
<li>Path：从一个像素到另一个像素的一个像素序列<ul>
<li>4-path：一个路径上的相邻像素互为4邻接</li>
<li>8-path：一个路径上的相邻像素互为8-neighbors</li>
<li>闭合通路：一个有限区域的边界形成一条闭合通路</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第6章-彩色图像处理"><a href="#第6章-彩色图像处理" class="headerlink" title="第6章 彩色图像处理"></a>第6章 彩色图像处理</h3><ul>
<li>人眼对彩色的敏感程度要远远高于对灰度级别的敏感程度</li>
<li>CMY/CMYK（青色 深红色 黄色 黑色）$\begin{bmatrix} C\\ M \\Y \end{bmatrix} = \begin{bmatrix} 1 \\1 \\1\end{bmatrix} - \begin{bmatrix} R \\G \\B\end{bmatrix}$</li>
<li>HSI（色调 饱和度 强度）<ul>
<li>色调，饱和度和强度<ul>
<li>色调（Hue）：与光波的波长有关，它表示人的感官对不同颜色的感受</li>
<li>饱和度（Saturation）：表示颜色的纯度，纯光谱色是完全饱和的</li>
<li>强度（Intensity）：颜色的明亮程度</li>
</ul>
</li>
<li>强度轴：$(0, 0, 0) \rightarrow (1, 1, 1) $</li>
<li>色调平面<ul>
<li>$强度轴 + 彩色点 \Rightarrow 三角面$</li>
<li>$R(0°) \rightarrow G(120°) \rightarrow B(240°)$</li>
</ul>
</li>
<li>饱和度（纯度）<ul>
<li>纯色被白光稀释的程度</li>
<li>以与强度轴的距离为函数</li>
</ul>
</li>
<li>$RGB \rightarrow HSI$　RGB归一化到$[0, 1]$<ul>
<li>$ H[0, 360] = \begin{cases} \theta, &amp;B \leq G \cr 360 - \theta, &amp;B \gt G \end{cases} $，其中$ \theta = arccos\{\frac{\frac{1}{2}[(R-G)+(R-B])}{[(R-G)^2 + (R-B)(G-B)]^\frac{1}{2}} \}$</li>
<li>$ S[0, 1] = 1 - \frac{3}{R+G+B}[min(R, G, B)] $，纯色值为 1</li>
<li>$ I[0, 1] = \frac{1}{3}(R + G + B) $，黑色值为 0/白色值为 1</li>
</ul>
</li>
<li>$HSI \rightarrow RGB$　$H[0, 360]; S[0, 1]; I[0, 1]$<ul>
<li>$ 0° \leq H \le 120°，\begin{cases} B = I(1-S) \cr R = I[1 + \frac{ScosH}{cos(60° - H)}] \cr G = 3I - (R+B) \end{cases} $</li>
<li>$ 120° \leq H \le 240°，H = H - 120°，\begin{cases} R = I(1-S) \cr G = I[1 + \frac{ScosH}{cos(60° - H)}] \cr B = 3I - (R+G) \end{cases} $</li>
<li>$ 240° \leq H \le 360°，H = H - 240°，\begin{cases} G = I(1-S) \cr B = I[1 + \frac{ScosH}{cos(60° - H)}] \cr R = 3I - (G+B) \end{cases} $</li>
</ul>
</li>
<li>HSI 模型更符合人眼对颜色的解释，该模型可以在彩色图像中从携带的彩色信息中将色度信息（色调和饱和度）和强度信息的分量分开</li>
</ul>
</li>
<li>伪彩色：基于一种指定的规则对灰度值赋以颜色的处理<ul>
<li>一幅单色图像<center><img src="/img/CV/dip/PseudoColorProcessing_single.png" width="360px"/></center></li>
<li>多幅单色图像<center><img src="/img/CV/dip/PseudoColorProcessing_multiple.png" width="420px"/></center></li>
</ul>
</li>
<li>全彩色图像：全彩色传感器采集的图像<br>$ \begin{cases} 分别处理每一个向量 \cr 直接处理彩色像素 \end{cases} \Longleftarrow[条件] \begin{cases} ①处理必须对于向量和标量都可用 \cr ②对向量的每一个分量的操作对于其他分量必须是独立的 \end{cases} $</li>
<li>独立于设备的彩色模型：<code>CIEL*a*b*</code>（亮度；红减绿；绿减蓝）<ul>
<li>没有可直接显示的格式（需要变换到另外的彩色空间），但其色域包括整个可见光谱，并可以准确地表示任何显示设备，打印设备或输入设备的颜色</li>
<li>通常的彩色显设备是不能显示自然界所有颜色，仅限于该显示器的三原色所构成的三角形内，不能完全覆盖整个色度图</li>
</ul>
</li>
<li>色调范围（主调类型）：颜色强度的基本分布<ul>
<li>高主调：高（亮）强度处</li>
<li>中主调</li>
<li>低主调：低（暗）亮度处</li>
</ul>
</li>
<li>单独对彩色图像的分量进行直方图均衡通常是不明智的，应当均匀地展开这种彩色灰度，而保持彩色本身（即色调）不变$ \Rightarrow $ 转换到HSI彩色空间进行直方图处理</li>
<li>彩色图像的噪声内容在每个彩色通道中具有相同的特性，但噪声对不同的彩色通道所造成的影响不同</li>
<li>彩色图像平滑<ul>
<li>领域平均平滑可以在每个彩色平面的基础上执行，其结果与使用RGB彩色向量执行平均效果是相同的</li>
</ul>
</li>
<li>彩色图像锐化<ul>
<li>一个向量的拉普拉斯被定义为一个向量，其分量等于输入向量的各个标量分量的拉普拉斯</li>
</ul>
</li>
</ul>
<h3 id="第3章-灰度变换与空间滤波"><a href="#第3章-灰度变换与空间滤波" class="headerlink" title="第3章 灰度变换与空间滤波"></a>第3章 灰度变换与空间滤波</h3><ul>
<li>空间域 vs 变换域<ul>
<li>空间域：直接以图像中的像素操作为基础</li>
<li>空间域处理$ \begin{cases} 灰度变换：在图像的单个像素上操作，主要以对比度/阈值处理为目的（图像增强/图像分割） \cr 空间滤波：图像中每一个像素的领域处理 \end{cases} $</li>
<li>变换域：先把一幅图像变换到变换域，在变换域中进行处理，然后反变换把处理的结果返回到空间域</li>
</ul>
</li>
<li>点处理技术 vs 领域处理技术</li>
<li>图像增强<ul>
<li>对图像进行加工，使其结果对于特定的应用比原始图像更合适的一种处理</li>
<li>“特定”：面向问题，没有通用的“理论”；效果没办法量化</li>
</ul>
</li>
<li>基本的灰度变换函数<ul>
<li>图像反转<ul>
<li>$ S = L - 1 - r，（r \in [0, L-1]）$</li>
<li>增强嵌入在一幅图像的暗区域中的白色或灰色细节，特别是当黑色面积在尺寸上占主导地位时</li>
</ul>
</li>
<li>对数变换<ul>
<li>$ S = clog(1+r)，（c为常数，r \geq 0） $</li>
<li>扩展图像中的暗像素的值，同时压缩更高灰度级的值 $\Longleftrightarrow$ 反对数</li>
<li>压缩像素值变化较大的图像的动态范围，如傅里叶频谱$（0，10^6）\Longrightarrow$ 图像显示系统通常不能如实地再现如此大的范围</li>
</ul>
</li>
<li>幂律（伽马）变换<ul>
<li>$ S = cr^{\gamma}，（c，\gamma为正常数） $</li>
<li>参数性质<ul>
<li>$ \gamma \gt 1 $，（越大越）扩展高灰度级值（亮部的细节）</li>
<li>$ \gamma \lt 1 $，（越小越）扩展低灰度级值（暗部的细节）</li>
</ul>
</li>
<li>有些计算机系统内置部分伽马校正，因为计算机屏幕内部自带伽马校正，改变伽马值不仅会改变亮度，而且会改变彩色图像中的 R，G，B 比率<ul>
<li>整体偏暗的对比度增强</li>
<li>“冲淡”外观的灰度级压缩</li>
</ul>
</li>
</ul>
</li>
<li>分阶级性变换函数<ul>
<li>对比度拉伸：特定灰度级范围斜率变化大（低于 k 的灰度级更暗，高于 k 的灰度级更亮）</li>
<li>灰度级分层：特定灰度级范围的亮度进行不同赋值（例如二值化）</li>
<li>比特平面分层<ul>
<li>$ \begin{cases} 高阶比特：视觉上很重要的大部分数据 \cr 低阶比特：更精细的灰度细节 \end{cases} $ $\Longrightarrow$ 图像压缩：4个高阶比特平面将允许我们从可接受的细节来重建原图像</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>直方图处理<ul>
<li>概述<ul>
<li>灰度级范围为$[0, L-1]$的数字图像的直方图：$h(r_k) = n_k$，$r_k$ 是第 k 级灰度值，$n_k$ 是 $r_k$ 的像素个数</li>
<li>归一化：$p(r_k) = \frac{n_k}{MN}$，灰度级 $r_k$ 在图像中出现的概率</li>
<li>图像的直方图反映了图像的明暗程度以及对比强度，对比度适中的图像通常具有均匀分布的直方图<ul>
<li>低对比度图像具有较窄的直方图，且集中于灰度级的中部；高对比度图像中直方图的分量覆盖了很宽的灰度级范围，而且像素的分布没有太不均匀</li>
<li>若一幅图像的像素倾向于占据整个可能灰度级并且分布均匀，则该图像会有高对比度的外观并展示灰色调的较大变化</li>
</ul>
</li>
</ul>
</li>
<li>直方图均衡化<ul>
<li>直方图均衡化变换（直方图线性变换）<br>　　$ S_k = T(r_k) = (L-1) \sum_{j=0}^k p_r(r_j) = \frac{L-1}{MN}  \sum_{j=0}^k n_j，k=0, 1, 2, 3, …, L-1$</li>
<li>“自动的”：因为图像有相同的内容，直方图均衡导致的对比度增强足以补偿图像在视觉上难以区分灰度级的差别</li>
</ul>
</li>
<li>直方图匹配（直方图规定化）<ul>
<li>Histogram Matching（Specification）：是指对一副图像进行变换，使其直方图与另一幅图像的直方图或特定函数形式的直方图匹配；是用户处理图像后，产生特殊直方图的方法</li>
<li>步骤<ol>
<li>计算直方图 $p_r(r)$，获取直方图均衡变换 $S_k$，把 $S_k$ 四舍五入到 $[0, L-1]$ 范围内的整数</li>
<li>计算变换函数：$G(z_q) = (L-1) \sum_{i=0}^{q} p_z(z_i)$，其中 $q=0, 1, 2, 3, …, L-1$，$p_z(z_i)$ 是规定的直方图</li>
<li>把 G 的值四舍五入到 $[0, L-1]$ 范围整数，存储在查找表中</li>
<li>满足最接近 $S_k$ 的 $G(z_q)$ 的 $z_q$ 值即为直方图规定化后的像素值（当满足给定的 $S_k$ 的 $z_q$ 值多于一个时，选择最小的 $z_q$ 值）</li>
</ol>
</li>
</ul>
</li>
<li>局部直方图均衡化：增强小区域的细节</li>
<li>在图像增强中使用直方图统计<ul>
<li>统计量<ul>
<li>平均灰度：$m = \sum_{i=0}^{L-1} r_i p(r_i)$ 或（取样均值）$m = \frac{1}{MN} \sum_{x=0}^{M-1} \sum_{y=0}^{N-1} f(x, y)$</li>
<li>灰度方差：$\mu_2(r) = \sum_{i=0}^{L-1} (r_i - m)^2 p(r_i)$ 或（取样方差）$\sigma^2 = \frac{1}{MN} \sum_{x=0}^{M-1} \sum_{y=0}^{N-1} [f(x, y) - m]^2$</li>
<li>n阶矩：$\mu_{n}(r) = \sum_{i=0}^{L-1} (r_i - m)^n p(r_i)$</li>
</ul>
</li>
<li>根据统计量判断<ul>
<li>判断一个区域在点 $(x, y)$ 是暗还是亮：$m_{S_{xy}} \leq km_G$，其中 $m_{S_{xy}}$ 为局部平均灰度，$m_G$ 为全局均值</li>
<li>判断一个区域的对比度是否可作为低对比度区域：$k_1 \sigma_G \leq \sigma_{S_{xy}} \leq k_2 \sigma_G$（标准差为 0 的区域需排除）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>空间滤波（线性空间滤波器；非线性空间滤波器）<ul>
<li>一个邻域（典型的是一个较小的矩形；奇数尺寸，最小 $3x3$）</li>
<li>对该邻域包围的图像像素执行的预定义操作<ul>
<li>一个 mxn 的滤波器 $\omega(x, y), m=2a+1, n=2b+1$</li>
<li>操作：$g(x, y) = \sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)f(x+s, y+t) $（一般空间滤波器旋转180°后保持不变）</li>
</ul>
</li>
</ul>
</li>
<li>相关 vs 卷积<ul>
<li>1D<ul>
<li>要求：n 必须满足 $g(n)$ 完全滑过 $f(n)$</li>
<li>卷积需要将 $g(n)$ 旋转180°（怎么补零？）$ \Longleftarrow \begin{cases} 卷积：(f \otimes g)[n] = \sum_{m=0}^{N-1} f(m)g(n-m)  \cr 相关：(f \circ g)[n] = \sum_{m=0}^{N-1} f(m)g(n+m) \end{cases} $</li>
</ul>
</li>
<li>2D<ul>
<li>对所有位移变量 x 和 y 求值，以便 $\omega$ 的所有元素访问 $f$ 的每一个像素</li>
<li>$ \Longrightarrow \begin{cases}  卷积：\omega (x, y) \otimes f(x, y) =  \sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)f(x-s, y-t) \cr  相关：\omega (x, y) \circ f(x, y) =  \sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)f(x+s, y+t)  \end{cases} $</li>
</ul>
</li>
</ul>
</li>
<li>平滑空间滤波器：用于模糊处理 $\Rightarrow$ 降低噪声<ul>
<li>平滑线性滤波器（均值滤波器）：响应是包含在滤波器模板邻域内的像素的简单平均值</li>
<li>降低了图像灰度的“尖锐”变化，比如典型的随机噪声就由灰度级急剧变化组成</li>
<li>图像边缘也是由图像灰度尖锐变化带来的特性 $\Rightarrow$ 边缘模糊的负面效应</li>
</ul>
</li>
<li>盒状滤波器 vs 加权平均<ul>
<li>随着距中心点的距离的增加而减小系数值的加权策略 $\Rightarrow$ 降低模糊<br>　　$g(x, y) = \frac{\sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)f(x+s, y+t)}{\sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)}$</li>
<li>空间均值处理：模糊图像，较小物体的灰度与背景混在一起，较大物体变得像“斑点”而易于检测</li>
</ul>
</li>
<li>统计排序（非线性）滤波器<ul>
<li>响应以滤波器包围的区域中所包含像素的排序为基础，使用统计排序结果决定的值代替中心像素的值</li>
<li>中值滤波器 最大值滤波器</li>
</ul>
</li>
<li>锐化空间滤波器：突出灰度的过渡部分<ul>
<li>$ \begin{cases}  图像模糊：通过在空间域用像素邻域平均法实现 \Rightarrow 积分 \cr  锐化可以用空间微分来实现 \Rightarrow 增强边缘和其它突变（如噪声），而削弱灰度变化缓慢的区域 \end{cases} $<center><img src="/img/CV/dip/Grayscale_changes.png" width="540px"/></center></li>
<li>微分<ul>
<li>一阶微分：$\frac{\partial f}{\partial x} = f(x+1) - f(x)$，用到下一个点，“预测未来”</li>
<li>二阶微分：$\frac{\partial^2 f}{\partial^2 x} = f(x+1) + f(x-1) - 2f(x)$</li>
<li>数字图像中的边缘在灰度上常常类似于斜坡过渡，一阶微分会产生较粗的边缘，二阶微分产生由零分开的一个像素宽的双边缘。二阶微分在增强细节方面要比一阶微分好的多，适合锐化图像</li>
</ul>
</li>
<li>拉普拉斯算子：$\nabla^2 f = \frac{\partial^2 f}{\partial^2 x} + \frac{\partial^2 f}{\partial^2 y}$<ul>
<li>是一个各向同性滤波器：响应与作用的图像的突变方向无关；将原图像旋转后进行滤波处理给出的结果与先滤波再旋转的结果相同</li>
<li>$\nabla^2 f(x, y) = f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1) - 4f(x, y)$</li>
<li>上面公式只是四种算子中的一个<br>　　$\begin{bmatrix} 0 &amp; 1 &amp; 0 \\  1 &amp; -4 &amp; 1 \\  0 &amp; 1 &amp; 0 \end{bmatrix}$ $\begin{bmatrix} 1 &amp; 1 &amp; 1 \\  1 &amp; -8 &amp; 1 \\  1 &amp; 1 &amp; 1 \end{bmatrix}$ $\begin{bmatrix} 0 &amp; -1 &amp; 0 \\  -1 &amp; 4 &amp; -1 \\  0 &amp; -1 &amp; 0 \end{bmatrix}$ $\begin{bmatrix} -1 &amp; -1 &amp; -1 \\  -1 &amp; 8 &amp; -1 \\  -1 &amp; -1 &amp; -1 \end{bmatrix}$</li>
<li>输入图像 $f(x, y)$，锐化后的图像 $g(x, y)$：$g(x, y) = f(x, y) + c[\nabla^2 f(x, y)]$，c 的符号与中心系数 $[f(x, y)]$ 的符号相反<ol>
<li>任意阶微分都是线性操作，$\nabla^2 f(x, y)$ 也是一个线性算子</li>
<li>将原图像和拉普拉斯图像叠加，可以复原背景特性并保持拉普拉斯锐化处理的结果（强调灰度的突变，并不强调灰度缓慢变化的区域）</li>
<li>通过拉普拉斯变换增强了图像中灰度突变处的对比度，使图像中的细节部分得到了增强，并良好地保留了图像的基本色调</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>非锐化掩蔽<ul>
<li>从原图像中减去一幅非锐化（平滑/模糊过的）图像 $\bar{f}(x, y) \leftarrow$ 高斯滤波器模糊</li>
<li>非锐化模板：$g_{mask}(x, y) = f(x, y) - \bar{f}(x, y)$</li>
<li>$g(x, y) =  f(x, y) + k * g_{mask}(x, y)$<ul>
<li>$k = 1$：非锐化掩蔽</li>
<li>$k \gt 1$：高提升滤波</li>
</ul>
</li>
</ul>
</li>
<li>梯度与 Sobel 算子<ul>
<li>梯度<ul>
<li>$\nabla f = grad(f) = \begin{bmatrix} \frac{\partial f}{\partial x} \\ \frac{\partial f}{\partial y} \end{bmatrix}$</li>
<li>$\nabla f $ 为向量，幅度值 $M(x, y) = mag(\nabla f) = \sqrt{g_x^2 + g_y^2}$，不是线性算子，因为做了平方和平方根操作</li>
<li>$\Longrightarrow M(x, y) ≈|g_x| + |g_y|$，仍保留灰度的相对变化，虽然通常丢失了方向性</li>
</ul>
</li>
<li>Sobel 算子<ul>
<li>$M(x, y) ≈|(z_7 + 2z_8 + z_9) - (z_1 + 2z_2 + z_3)| + |(z_3 + 2z_6 + z_9) - (z_1 + 2z_4 + z_7)|$</li>
<li>矩阵形式：$\begin{bmatrix} z_1 &amp; z_2 &amp; z_3 \\  z_4 &amp; z_5 &amp; z_6 \\  z_7 &amp; z_8 &amp; z_9 \end{bmatrix}$ $\begin{bmatrix} -1 &amp; -2 &amp; -1 \\  0 &amp; 0 &amp; 0 \\  1 &amp; 2 &amp; 1 \end{bmatrix}$ $\begin{bmatrix} -1 &amp; 0 &amp; 1 \\  -2 &amp; 0 &amp; 2 \\  -1 &amp; 0 &amp; 1 \end{bmatrix}$</li>
</ul>
</li>
</ul>
</li>
<li>应用多种互补的图像增强技术<ol>
<li><font color="green">拉普拉斯操作</font>作为一种二阶微分算子在图像细节增强方面，它是最好的，但这会导致产生比梯度操作更多的噪声</li>
<li><font color="green">梯度操作（Sobel 算子）</font>对噪声和小细节响应要比拉普拉斯变换操作的响应弱，而且可以通过<font color="green">均值滤波器</font>进行平滑而进一步降低</li>
<li>拉普拉斯图像与平滑处理后的梯度图像相乘，<font color="green">乘积</font>会保留灰度变化强烈区域的细节，同时降低灰度变化相对平坦区域的噪声</li>
<li>具有重要边缘内容的梯度图像，边缘要比拉普拉斯图像突出，乘积的关键目的：强边缘的优势和可见噪声的减少</li>
<li>锐化/平滑过程从感知方法上没有影响图像灰度的动态变化，通过<font color="green">幂律变换</font>可以增大锐化后图像的动态范围</li>
</ol>
</li>
</ul>
<h3 id="第4章-频率域滤波"><a href="#第4章-频率域滤波" class="headerlink" title="第4章 频率域滤波"></a>第4章 频率域滤波</h3><ul>
<li>一维连续<ul>
<li>傅里叶变换对<br>$ F(\mu) = \zeta\{f(t)\} = \int_{-\infty}^{\infty} f(t) e^{-j2\pi \mu t}\, dt$<br>$ f(t) = \zeta^{-1}\{F(\mu)\} = \int_{-\infty}^{\infty} F(\mu) e^{j2\pi \mu t}\, d\mu$</li>
<li>卷积<br>$ f(t) \bigotimes h(t) = \int_{-\infty}^{\infty} f(\tau) h(t- \tau) \, d\tau = F(\mu)H(\mu) = \sum_{n=-\infty}^{\infty}f(n\Delta T)h(t - n\Delta T)$</li>
</ul>
</li>
<li>一维离散<ul>
<li>$f(t)$ 的 M 个样本组成集合 $\{f_n\} = f(x)$</li>
<li>$M$ 个复数离散值的傅里叶变换样本集合 ${f_m} = F(\mu)$<br>$ F(\mu) = \sum_{x=0}^{M-1} f(x) e^{-j2\pi \frac{\mu x}{M} }，\mu = 0, 1, 2, …, M-1$<br>$ f(x) = \frac{1}{M}\sum_{\mu =0}^{M-1} F(\mu) e^{j2\pi \frac{\mu x}{M} }，x = 0, 1, 2, …, M-1$</li>
</ul>
</li>
<li>二维<ul>
<li>连续<br>$ F(\mu, \nu) = \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} f(x, y) e^{-j2\pi(\mu t + \nu z)}\, dt\, dz$<br>$ f(t, z) = \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} F(\mu, \nu) e^{j2\pi(\mu t + \nu z)}\, d\mu \, d\nu$</li>
<li>离散<br>$ F(\mu, \nu) = \sum_{x=0}^{M-1} \sum_{y=0}^{N-1} f(x, y) e^{-j2\pi(\frac{\mu x}{M} + \frac{\nu y}{N})}$<br>$ f(x, y) = \frac{1}{MN}\sum_{\mu =0}^{M-1} \sum_{\nu =0}^{N-1} F(\mu, \nu) e^{j2\pi(\frac{\mu x}{M} + \frac{\nu y}{N})}$</li>
</ul>
</li>
<li>使用DFT时，图像和滤波器的大小必须相同<ol>
<li>$MxN$ 的图像 $f$</li>
<li>进行 $PxQ$ 填充成 $f_p$（$P\geq2M-1, Q\geq2N-1$）</li>
<li>$(-1)^{x+y}$ 乘以 $f_p$</li>
<li>$f_p$ 的傅里叶变换（DFT）生成 $F_p$</li>
<li>滤波器扩容成 $PxQ$，关于中心对称化后生成 $H(u, v)$</li>
<li>$H(u, v)F_p \Rightarrow G(u, v)$</li>
<li>计算 $G(u, v)$ 的 IDFT，得到 $\zeta^{-1}[G(u, v)]$</li>
<li>处理后得到图像 $g_p = \{ real[\zeta^{-1}[G(u, v)]] \}(-1)^{x+y}$</li>
<li>裁剪 $g_p$ 的前 M 行和前 N 列得到最终的结果</li>
</ol>
</li>
<li>空间模板 [转换]$\Longrightarrow$ 频率域滤波器 $H(u, v)$<ol>
<li>$h(x, y)$ 扩充成 $h_p(x, y)$</li>
<li>$(-1)^{x+y}$ 乘以 $h_p(x, y)$ 以便频率域滤波器“中心化”</li>
<li>计算上述结果的 DFT</li>
<li>滤波器 $H(u, v)$ 必须是纯虚函数，将得到的 DFT 实部置零</li>
<li>$H(u, v)$ 等于 $(-1)^{x+y}$ 乘以上述结果，隐含着 $h(x, y)$ 被移到 $h_p(x, y)$ 的中心</li>
</ol>
</li>
<li>傅里叶频谱<ul>
<li>傅里叶频谱中心点对应于空间域的平均灰度或背景灰度</li>
<li>从中心点离开，低频信息对应慢变化的分量，如大体轮廓，背景等平滑部分</li>
<li>进一步离开中心点，较高频率对应变化越来越快的灰度级，如边缘，细节，噪声</li>
</ul>
</li>
</ul>
<h3 id="第5章-图像复原与重建"><a href="#第5章-图像复原与重建" class="headerlink" title="第5章 图像复原与重建"></a>第5章 图像复原与重建</h3><ul>
<li>图像退化/复原过程的模型<ul>
<li>$G(u, v) = H(u, v)F(u, v) + N(u, v)$<center><img src="/img/CV/dip/restoration_model.png" width="580px"/></center></li>
</ul>
</li>
<li>图像增强 vs 图像复原<ul>
<li>图像增强主要是一个主观过程，首要目标是处理图像，使其比原始图像更适合于特定应用，如对比度增强</li>
<li>图像复原大部分过程是一个客观过程，利用退化现象的先验知识来重建或复原被退化的原始图像</li>
</ul>
</li>
<li>噪声模型<ul>
<li>高斯噪声<br><center><img src="/img/CV/dip/Noise_Gaussian.png" width="780px"/></center><ul>
<li>去噪：均值，中点</li>
</ul>
</li>
<li>瑞利噪声<br><center><img src="/img/CV/dip/Noise_Rayleigh.png" width="620px"/></center><ul>
<li>近似歪斜，比较胖</li>
<li>去噪：</li>
</ul>
</li>
<li>伽马噪声<br><center><img src="/img/CV/dip/Noise_Gamma.png" width="640px"/></center><ul>
<li>比较尖</li>
<li>去噪：</li>
</ul>
</li>
<li>指数噪声<br><center><img src="/img/CV/dip/Noise_Exp.png" width="580px"/></center><ul>
<li>去噪：</li>
</ul>
</li>
<li>均匀噪声<br><center><img src="/img/CV/dip/Noise_Uniform.png" width="580px"/></center><ul>
<li>去噪：中点</li>
</ul>
</li>
<li>脉冲噪声<br><center><img src="/img/CV/dip/Noise_Impulse.png" width="540px"/></center><ul>
<li>去噪：谐波均值，逆谐波均值，中值，最大值/最小值</li>
</ul>
</li>
<li>周期噪声<ul>
<li>傅里叶共轭点，近似圆</li>
<li>去噪：低通，带通……</li>
</ul>
</li>
<li>如何获取$ N(u, v) $？<ul>
<li>在图像的平坦区域取一小块自图像做直方图，与已有的噪声模型作对比</li>
</ul>
</li>
</ul>
</li>
<li>常见滤波器降噪情况<ul>
<li>高斯或者均匀随机噪声 $ \Longleftarrow  \begin{cases} 均值滤波平滑一幅图像中的局部变化，虽然模糊了结果，但降低了噪声 \cr 几何均值丢失的图像细节更少 \end{cases} $ </li>
<li>谐波均值对盐噪声较好，不适用于椒噪声，善于处理像高斯噪声</li>
<li>逆谐波均值，$ Q \gt 0 $，椒噪声；$ Q \lt 0 $，盐噪声；$ Q = 0 $为算数均值滤波</li>
<li>中值滤波器：比相同尺寸的线性平滑滤波器引起的模糊更小，在存在单极或双极脉冲噪声（椒噪声 and/or 盐噪声）的情况下，尤其有效</li>
<li>最大值降椒噪声，最小值降盐噪声</li>
<li>中点滤波器对于随机分布噪声工作得最好（高斯/均匀）</li>
</ul>
</li>
<li>高斯噪声和椒盐噪声混合的情况<ol>
<li>修正的阿尔法均值滤波器，降噪方面更好</li>
<li>算术均值和几何均值由于脉冲噪声的存在并没有起到良好的作用</li>
<li>使用中值滤波器重复地进行处理$\Longrightarrow$会使得图像变模糊，细节损失<br>$\Longrightarrow$ 自适应中值滤波器：<br><center><img src="/img/CV/dip/AdaptiveMidianFilter.png" width="580px"/></center><ul>
<li>A层确保$Z_{med}（Z_{min} \lt Z_{med} \lt Z_{max}）$ 不是脉冲，B层确保$Z_{xy}（Z_{min} \lt Z_{xy} \lt Z_{max}）$不是脉冲</li>
<li>动态增大窗口</li>
<li>不改变“中心灰度级”，减少图像中的失真</li>
<li>去除椒盐噪声（脉冲噪声），平滑其他非脉冲噪声，并减少诸如物体边界细化或粗化等失真</li>
</ul>
</li>
<li>自适应局部降噪降噪：$\hat{f}(x, y) = g(x, y) \frac{ \sigma^2_{\eta} }{ \sigma^2_L }[g(x, y) - m_L]$<ul>
<li>参数说明<ul>
<li>滤波器作用于局部区域$S_{xy}$</li>
<li>$\sigma^2_{\eta}$ ：污染 $f(x, y)$ 以形成 $g(x, y)$ 的噪声的方差</li>
<li>$m_L$ ：$S_{xy}$中像素的局部均值</li>
<li>$\sigma^2_L$ ：$S_{xy}$中像素的局部方差</li>
</ul>
</li>
<li>计算结果为局部均值或保留原始像素</li>
<li>高局部方差与边缘相关，因此能够保护边缘</li>
</ul>
</li>
</ol>
</li>
<li>逆滤波存在的问题<br>$$ \hat{F}(u, v) = F(u, v) + \frac{N(u, v)}{H(u, v)} $$<ul>
<li>$H(u, v)$ 为零或为非常小的值</li>
<li>解决问题的一种方法是限制滤波的频率，使其接近于频谱原点</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Books：&lt;a href=&quot;http://durant35.github.io/pdf/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86(%E5%86%88%E8%90%A8%E9%9B%B7%E6%96%AF)%E4%B8%AD%E8%AF%91%E7%AC%AC%E4%B8%89%E7%89%88.pdf&quot; alt=&quot;数字图像处理（冈萨雷斯）&quot;&gt;数字图像处理（冈萨雷斯）&lt;/a&gt;&lt;br&gt;Codes：&lt;a href=&quot;https://github.com/Durant35/Courses/tree/master/dip&quot;&gt;https://github.com/Durant35/Courses/tree/master/dip&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第2章-数字图像基础&quot;&gt;&lt;a href=&quot;#第2章-数字图像基础&quot; class=&quot;headerlink&quot; title=&quot;第2章 数字图像基础&quot;&gt;&lt;/a&gt;第2章 数字图像基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;取样和量化&lt;/li&gt;
&lt;li&gt;空间和灰度分辨率&lt;ul&gt;
&lt;li&gt;空间分辨率：空间分辨率是图像在单位面积内像素的个数，表示了图像的空间细节分辨能力&lt;/li&gt;
&lt;li&gt;灰度分辨率：灰度分辨率指的是在纯黑和纯白之间灰度级别的多少，指的是图像对灰度变化细节的分辨能力
    
    </summary>
    
      <category term="CV" scheme="http://durant35.github.io/categories/CV/"/>
    
      <category term="dip" scheme="http://durant35.github.io/categories/CV/dip/"/>
    
    
      <category term="CV" scheme="http://durant35.github.io/tags/CV/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令小纸条</title>
    <link href="http://durant35.github.io/2017/02/04/linux_Linux%E5%91%BD%E4%BB%A4%E5%B0%8F%E7%BA%B8%E6%9D%A1/"/>
    <id>http://durant35.github.io/2017/02/04/linux_Linux命令小纸条/</id>
    <published>2017-02-04T07:20:59.000Z</published>
    <updated>2017-02-14T06:51:12.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="压缩-解压"><a href="#压缩-解压" class="headerlink" title="压缩/解压"></a>压缩/解压</h3><ul>
<li><strong>tar</strong> 压缩</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar -zcvf dst.tar.gz /src-dir</div></pre></td></tr></table></figure>
<ul>
<li><strong>tar</strong> 解压</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar -xvf src.tar.gz</div></pre></td></tr></table></figure>
<ul>
<li><strong>zip</strong> 压缩<a id="more"></a></li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ zip -r dst.zip /src-dir</div></pre></td></tr></table></figure>
<ul>
<li><strong>zip</strong> 解压</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ unzip src.zip <span class="_">-d</span> .</div></pre></td></tr></table></figure>
<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><ul>
<li><strong>scp</strong> 上传</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp -rp host-path-src user@remote:/path-dst</div></pre></td></tr></table></figure>
<ul>
<li><strong>scp</strong> 下载</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp -r user@remote:/path-src host-path-dst</div></pre></td></tr></table></figure>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ul>
<li>查看进程信息（如：<strong>PID</strong>）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ps -aux [| grep key-word]</div></pre></td></tr></table></figure>
<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><ul>
<li><strong>端口</strong> 占用情况</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ netstat -anp [| grep target-port]</div></pre></td></tr></table></figure>
<ul>
<li>查看监听端口<center><img src="/img/programPearls/linux/netstat.jpg" alt="netstat" width="720px"/></center>

</li>
</ul>
<h3 id="挂载-解挂"><a href="#挂载-解挂" class="headerlink" title="挂载/解挂"></a>挂载/解挂</h3><ul>
<li>解挂</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo umount <span class="_">-l</span> mount-dir</div></pre></td></tr></table></figure>
<ul>
<li>挂载</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看挂载设备 /dev/sd?</span></div><div class="line">$ sudo fdisk <span class="_">-l</span></div><div class="line"><span class="comment"># 需要时创建挂载点</span></div><div class="line">$ mkdir mount-point-dir</div><div class="line"><span class="comment"># 挂载设备</span></div><div class="line">$ sudo mount /dev/sd? mount-point-dir</div></pre></td></tr></table></figure>
<h3 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h3><ul>
<li>文件名查找</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find <span class="string">"name-string"</span> find-path</div></pre></td></tr></table></figure>
<ul>
<li>文件内容查找</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ grep -r -i <span class="string">"content-string"</span> find-path</div></pre></td></tr></table></figure>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li>批量重命名（<strong>*.cpp</strong>全部变成<strong>*.c</strong>）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># "\" 指代相同内容</span></div><div class="line">$ rename -v s/\.cpp/\.c/ *</div></pre></td></tr></table></figure>
<h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ul>
<li>内核版本信息</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ uname -r</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;压缩-解压&quot;&gt;&lt;a href=&quot;#压缩-解压&quot; class=&quot;headerlink&quot; title=&quot;压缩/解压&quot;&gt;&lt;/a&gt;压缩/解压&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tar&lt;/strong&gt; 压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ tar -zcvf dst.tar.gz /src-dir&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tar&lt;/strong&gt; 解压&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ tar -xvf src.tar.gz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;zip&lt;/strong&gt; 压缩
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
      <category term="Linux" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/Linux/"/>
    
    
      <category term="CMD" scheme="http://durant35.github.io/tags/CMD/"/>
    
      <category term="Linux" scheme="http://durant35.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>vim几步走</title>
    <link href="http://durant35.github.io/2017/02/04/tool_vim%E5%87%A0%E6%AD%A5%E8%B5%B0/"/>
    <id>http://durant35.github.io/2017/02/04/tool_vim几步走/</id>
    <published>2017-02-04T06:07:18.000Z</published>
    <updated>2017-02-06T09:10:23.491Z</updated>
    
    <content type="html"><![CDATA[<p>　通过 <strong>sudo apt-get install vim</strong> 即可安装 <strong>vim</strong>，也能通过 <a href="https://github.com/amix/vimrc">vimrc</a> 之类安装大神们的各种自适配的高级 <strong>vim</strong>。<br>　本文旨在记录开发过程中用过的 <strong>vim</strong> 操作。　　<br><a id="more"></a></p>
<blockquote>
<p>Reference: <a href="http://www.cnblogs.com/wsine/p/5517005.html">Wsnie’s Linux之Vim学习</a></p>
</blockquote>
<h3 id="一般模式下的常见操作"><a href="#一般模式下的常见操作" class="headerlink" title="一般模式下的常见操作"></a>一般模式下的常见操作</h3><ul>
<li>光标移动</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">j或down方向键</td>
<td style="text-align:center">向下移动一个字符</td>
</tr>
<tr>
<td style="text-align:center">k或up方向键</td>
<td style="text-align:center">向上移动一个字符</td>
</tr>
<tr>
<td style="text-align:center">h或left方向键</td>
<td style="text-align:center">向左移动一个字符</td>
</tr>
<tr>
<td style="text-align:center">l或right方向键</td>
<td style="text-align:center">向右移动一个字符</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+f或PageUp键</td>
<td style="text-align:center">屏幕向前移动一页</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+b或PageDown键</td>
<td style="text-align:center">屏幕向后移动一页</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">向后移动一个词</td>
</tr>
<tr>
<td style="text-align:center">e</td>
<td style="text-align:center">向前移动一个词</td>
</tr>
<tr>
<td style="text-align:center">e</td>
<td style="text-align:center">向后移动一个词到词尾</td>
</tr>
<tr>
<td style="text-align:center">ge</td>
<td style="text-align:center">向前移动一个词到词头</td>
</tr>
<tr>
<td style="text-align:center">g_</td>
<td style="text-align:center">到本行最后一个不是blank字符的位置</td>
</tr>
<tr>
<td style="text-align:center">0或Shift+6</td>
<td style="text-align:center">移动到行首</td>
</tr>
<tr>
<td style="text-align:center">$或Shift+4</td>
<td style="text-align:center">移动到行尾</td>
</tr>
<tr>
<td style="text-align:center">gg</td>
<td style="text-align:center">移动到首行</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">移动到尾行</td>
</tr>
<tr>
<td style="text-align:center">nG</td>
<td style="text-align:center">移动到第n行</td>
</tr>
</tbody>
</table>
<ul>
<li>增删改查</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">向后删除一个字符</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">向前删除一个字符</td>
</tr>
<tr>
<td style="text-align:center">dd</td>
<td style="text-align:center">删除/剪切当前所在的行</td>
</tr>
<tr>
<td style="text-align:center">ndd</td>
<td style="text-align:center">删除/剪切当前行及其之后的共n行</td>
</tr>
<tr>
<td style="text-align:center">dw</td>
<td style="text-align:center">向后删除一个词</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:center">在当前字符前插入，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">在当前字符后插入，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">I</td>
<td style="text-align:center">在当前行的行首插入，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">在当前行的行尾插入，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:center">在当前行的下一行插入新的一行，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">O</td>
<td style="text-align:center">在当前行的上一行插入新的一行，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">再输入一个字符，向后替换一个字符</td>
</tr>
<tr>
<td style="text-align:center">R</td>
<td style="text-align:center">连续输入字符，向后连续替换字符，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">yy</td>
<td style="text-align:center">复制当前行</td>
</tr>
<tr>
<td style="text-align:center">nyy</td>
<td style="text-align:center">在当前行开始，向下复制n行</td>
</tr>
<tr>
<td style="text-align:center">np</td>
<td style="text-align:center">在当前行开始，向下粘贴已经复制的内容n次</td>
</tr>
<tr>
<td style="text-align:center">P</td>
<td style="text-align:center">在当前行开始，向上粘贴已经复制的内容</td>
</tr>
<tr>
<td style="text-align:center">v</td>
<td style="text-align:center">进入选定模式，移动光标选定字符，可复制剪切删除，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:center">还原上一步的操作</td>
</tr>
</tbody>
</table>
<h3 id="命令模式下的常见操作"><a href="#命令模式下的常见操作" class="headerlink" title="命令模式下的常见操作"></a>命令模式下的常见操作</h3><table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/word</td>
<td style="text-align:center">向后搜索字符串word，按n继续搜索</td>
</tr>
<tr>
<td style="text-align:center">?word</td>
<td style="text-align:center">向前搜索字符串word，按n继续搜索</td>
</tr>
<tr>
<td style="text-align:center">:w</td>
<td style="text-align:center">保存文本</td>
</tr>
<tr>
<td style="text-align:center">:q</td>
<td style="text-align:center">退出</td>
</tr>
<tr>
<td style="text-align:center">:q!</td>
<td style="text-align:center">放弃修改，强制退出</td>
</tr>
<tr>
<td style="text-align:center">:wq</td>
<td style="text-align:center">保存并退出</td>
</tr>
</tbody>
</table>
<h3 id="我的典型操作"><a href="#我的典型操作" class="headerlink" title="我的典型操作"></a>我的典型操作</h3><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0y$</td>
<td style="text-align:center">拷贝当前行</td>
</tr>
<tr>
<td style="text-align:center">ye</td>
<td style="text-align:center">从当前位置拷贝到本单词的最后一个字符</td>
</tr>
<tr>
<td style="text-align:center">gU</td>
<td style="text-align:center">变大写</td>
</tr>
<tr>
<td style="text-align:center">gu</td>
<td style="text-align:center">变小写</td>
</tr>
<tr>
<td style="text-align:center">在 Insert 模式下，你可以输入一个词的开头，按如下组合键，ctrl+x ctrl+n 或者 ctrl+x ctrl+p</td>
<td style="text-align:center">自动补齐</td>
</tr>
<tr>
<td style="text-align:center">v<strong>→</strong>d/y<strong>→</strong>p</td>
<td style="text-align:center">剪切/复制粘贴</td>
</tr>
</tbody>
</table>
<h3 id="第三方参考"><a href="#第三方参考" class="headerlink" title="第三方参考"></a>第三方参考</h3><ul>
<li>RiHui-Song’s Blog 的 <a href="https://rh-song.github.io/2016/07/15/vim/#more">本文意在记录vim的使用以及相关的配置</a><ul>
<li>在linux下vim中文出现乱码问题</li>
<li>vim：MarkDown preview</li>
<li>vim添加markdown语法高亮</li>
</ul>
</li>
<li><a href="http://coolshell.cn/articles/5426.html">简明 VIM 练级攻略</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　通过 &lt;strong&gt;sudo apt-get install vim&lt;/strong&gt; 即可安装 &lt;strong&gt;vim&lt;/strong&gt;，也能通过 &lt;a href=&quot;https://github.com/amix/vimrc&quot;&gt;vimrc&lt;/a&gt; 之类安装大神们的各种自适配的高级 &lt;strong&gt;vim&lt;/strong&gt;。&lt;br&gt;　本文旨在记录开发过程中用过的 &lt;strong&gt;vim&lt;/strong&gt; 操作。　　&lt;br&gt;
    
    </summary>
    
      <category term="技术留档" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/"/>
    
      <category term="小工具" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://durant35.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Summer-trainning in July, 2016</title>
    <link href="http://durant35.github.io/2017/02/04/TACourses_Summer-trainning-in-July,2016/"/>
    <id>http://durant35.github.io/2017/02/04/TACourses_Summer-trainning-in-July,2016/</id>
    <published>2017-02-04T03:21:01.000Z</published>
    <updated>2017-02-04T06:05:48.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>摘自 <a href="https://rh-song.github.io/2016/07/18/Summer-training/#more">RiHui-Song’s Blog：Summer-training</a></p>
</blockquote>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>　本文主要记录SMIE最后一次初级实训学习的主要内容。包括了大概是三个阶段：</p>
<ul>
<li>准备阶段：学习测量仪器，回顾C语言编程；</li>
<li>熟悉阶段：在FPGA上运行HelloWorld，开发小应用，如跑马灯等，最后还了解了uc/os这样一个实时操作系统；</li>
<li>开发阶段：使用PWM波以及H桥控制车轮，使用超声模块控制让小车感知外界状况，从而进行控制，最后可以使用PID控制理论优化小车的控制。<a id="more"></a>
</li>
</ul>
<h3 id="学习仪器"><a href="#学习仪器" class="headerlink" title="学习仪器"></a>学习仪器</h3><ul>
<li>学会使用示波器，可以用来观察从ADC，PWM波等等信号。</li>
<li>学会使用万用表测电压，电阻，电流。<center><img src="/img/TA-Cources/Summer-training2016/Oscilloscope.png" width="420px"/></center>

</li>
</ul>
<h3 id="回顾c语言编程"><a href="#回顾c语言编程" class="headerlink" title="回顾c语言编程"></a>回顾c语言编程</h3><ul>
<li>条件判断</li>
<li>循环：for loop &amp; while loop</li>
<li>数组：<ul>
<li>使用下标访问</li>
<li>使用指针访问</li>
</ul>
</li>
<li>函数使用：<ul>
<li>递归</li>
<li>迭代</li>
</ul>
</li>
<li>链表：<ul>
<li>结构体声明和使用</li>
<li>指针使用</li>
<li>链表结构和基本操作</li>
</ul>
</li>
<li>位操作<ul>
<li>位操作将十进制表示成二进制数</li>
<li>位操作实现某一位的反转，或者某一位不变其它位反转等</li>
</ul>
</li>
</ul>
<h3 id="C语言进阶"><a href="#C语言进阶" class="headerlink" title="C语言进阶"></a>C语言进阶</h3><ul>
<li>使用header file，source file以及main file。尝试尽可能的复用。</li>
<li>C语言与安全性<ul>
<li>数组越界</li>
<li>判断逻辑不全</li>
<li>变量没有初始化</li>
<li>内存泄露</li>
<li>没有考虑非法输入</li>
</ul>
</li>
</ul>
<h3 id="FPGA编程"><a href="#FPGA编程" class="headerlink" title="FPGA编程"></a>FPGA编程</h3><ul>
<li>FPGA：DE0-Nano board<center><img src="/img/TA-Cources/Summer-training2016/DE0-Nano.jpg" width="340px"/></center></li>
<li>使用自带软件测试FPGA完好</li>
<li>在FPGA上运行HelloWorld工程</li>
<li>实现LED Sliding Pattern（闪烁模式之类）</li>
<li>使用中断<ul>
<li>中断的原理和运行机制</li>
</ul>
</li>
</ul>
<h3 id="FPGA上编程进阶"><a href="#FPGA上编程进阶" class="headerlink" title="FPGA上编程进阶"></a>FPGA上编程进阶</h3><ul>
<li>在IDE：eclipse上进行Debug</li>
<li>ADC:<ul>
<li>FPDA上有一个ADC的硬件模块</li>
</ul>
</li>
</ul>
<h3 id="PWM-Pulse-Width-Modulation"><a href="#PWM-Pulse-Width-Modulation" class="headerlink" title="PWM(Pulse Width Modulation)"></a>PWM(Pulse Width Modulation)</h3><ul>
<li>Duty cycle 占空比<center><img src="/img/TA-Cources/Summer-training2016/what_is_PWM.png"  width="640px"/></center></li>
<li>Why PWM?<ul>
<li>Digital voltage control: 只能控制1和0</li>
<li>需要最大电压的x%则让占空比为x%</li>
</ul>
</li>
<li>产生PWM的方法：<ul>
<li>软件方法<ul>
<li>使用计数器</li>
<li>使用中断？</li>
</ul>
</li>
<li>硬件方法<ul>
<li>Hardware PWM IP &lt;– NIOS core</li>
<li>moto_setting(),能产生2个PWM波</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="H桥"><a href="#H桥" class="headerlink" title="H桥"></a>H桥</h3><ul>
<li>低电流做控制，产生大电流去驱动电机</li>
<li>PWM波控制H桥驱动电机，使小车前进，后退，转弯等<center><img src="/img/TA-Cources/Summer-training2016/H-Bridge.png"  width="720px"/></center>

</li>
</ul>
<h3 id="超声模块"><a href="#超声模块" class="headerlink" title="超声模块"></a>超声模块</h3><ul>
<li>超声模块是：KS103<br><center><img src="/img/TA-Cources/Summer-training2016/KS103.png"  width="360px"/></center><ul>
<li>VCC: Power Pin</li>
<li>SDA/TX: data pin in I2C bus/TX pin in uart bus</li>
<li>SCL/RX: clock pin in I2C bus/RX pin in uart bus</li>
<li>GND: power ground pin</li>
<li>Mode: Select the communication mode.<ul>
<li>High Level(VCC): I2C</li>
<li>Low Level (GND): Uart</li>
</ul>
</li>
</ul>
</li>
<li>使用流程：<center><img src="/img/TA-Cources/Summer-training2016/how_to_use_KS103.png"  width="480px"/></center></li>
<li>接线：<ul>
<li>使用Uart模式：<ul>
<li>超声TX接入FPGA的RX，超声的RX接入FPGA的TX</li>
</ul>
</li>
<li>使用I2C模式：<ul>
<li>data pin &amp; clock pin</li>
</ul>
</li>
</ul>
</li>
<li>编程时的端口查找：<ul>
<li>结合QSF文件以及FPGA用户手册</li>
</ul>
</li>
</ul>
<h3 id="uc-OS-实时嵌入式操作系统"><a href="#uc-OS-实时嵌入式操作系统" class="headerlink" title="uc/OS 实时嵌入式操作系统"></a>uc/OS 实时嵌入式操作系统</h3><ul>
<li>以上都是bare metal hardware（裸跑）上编程，然后编译我们需要的程序</li>
<li>如果需要完成复杂的多任务，可以考虑跑在一个操作系统上（嵌入式操作系统，如uc/OS）<ul>
<li>多任务（线程）</li>
<li>信号量</li>
<li>临界区访问<center><img src="/img/TA-Cources/Summer-training2016/uc-OS.png"  width="480px"/></center>

</li>
</ul>
</li>
</ul>
<h3 id="PID控制"><a href="#PID控制" class="headerlink" title="PID控制"></a>PID控制</h3><ul>
<li>p：比例系数，I：积分系数，D：微分系数</li>
<li>使用PI控制，因为高阶噪声，所以不使用D</li>
<li>如下图，其中e(t) = r(t) - y(t)<center><img src="/img/TA-Cources/Summer-training2016/PID.png"  width="480px"/></center>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘自 &lt;a href=&quot;https://rh-song.github.io/2016/07/18/Summer-training/#more&quot;&gt;RiHui-Song’s Blog：Summer-training&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;p&gt;　本文主要记录SMIE最后一次初级实训学习的主要内容。包括了大概是三个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备阶段：学习测量仪器，回顾C语言编程；&lt;/li&gt;
&lt;li&gt;熟悉阶段：在FPGA上运行HelloWorld，开发小应用，如跑马灯等，最后还了解了uc/os这样一个实时操作系统；&lt;/li&gt;
&lt;li&gt;开发阶段：使用PWM波以及H桥控制车轮，使用超声模块控制让小车感知外界状况，从而进行控制，最后可以使用PID控制理论优化小车的控制。
    
    </summary>
    
      <category term="TA Cources" scheme="http://durant35.github.io/categories/TA-Cources/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo，md源文件内容修改预览页面刷新无效</title>
    <link href="http://durant35.github.io/2017/02/02/hexo-md%E6%BA%90%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E4%BF%AE%E6%94%B9%E9%A2%84%E8%A7%88%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%97%A0%E6%95%88/"/>
    <id>http://durant35.github.io/2017/02/02/hexo-md源文件内容修改预览页面刷新无效/</id>
    <published>2017-02-02T12:42:12.000Z</published>
    <updated>2017-02-02T15:02:38.380Z</updated>
    
    <content type="html"><![CDATA[<p>　　之前在 <strong>Window</strong> 下面通过 <strong>hexo s</strong> 启动本地服务器，通过浏览器预览，对md源文件的当前修改能够通过网页刷新出来。这段时间在 <strong>Linux</strong> 上部署，就一直出现刷新页面无效的情况，必须重新启动服务器才能刷新，有时甚至还需要通过 <strong>hexo g</strong> 重新解析源文件才能成功刷新。之前有段时间也以为是 <strong>Linux</strong> 对带有中文名称的md源文件支持不好的缘故，因为将那些不能成功刷新的源文件的文件名修改下，去掉所有的中文字符后，就可以刷新有效了。</p>
<p>　　不过，今天尝试了这个方法，居然不行了，不知道是不是因为升级了 <strong>Hexo</strong> 的缘故，不过，却发现了更有效的解决方法，可以不用考虑源文件文件名的问题。</p>
<a id="more"></a>
<p>　　解决办法很简单，就是通过使用 <strong>hexo generate</strong> 的 <strong>watch</strong> 参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g --watch</div></pre></td></tr></table></figure></p>
<p>　　开启 <strong>hexo generate</strong> 的实时监控，对当前修改的源文件进行实时解析，这样浏览器刷新预览的就是最新的源文件解析的结果了。<br>　　<br>　　注意：<br>　　+ 使用 <strong>Typora</strong>编辑器 <strong>Hexo</strong> 的md源文件进行编写，在上述操作中会有奇怪的现象，详见 <a href="https://github.com/hexojs/hexo/issues/2245">hexo server 运行时自动更新出错把页面文章全部清空</a>。<br>　　+ <strong>hexo s</strong> 命令好像默认是会自动开启 <strong>hexo generate</strong> 的实时监控，上述操作显得画蛇添足；不过，万一像我一样呢？可能你就需要尝试一下上面的命令了。<br>　　+ 笔者最后放弃了 <strong>Typora</strong>编辑器，也没选择安装 <strong>Markdown</strong> 预览插件的 <strong>Sublime Text</strong>，而是选择了<a href="https://remarkableapp.github.io/linux/download.html">Remarkable</a>，下载官网提供的.deb，按照下面命令即可安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i remarkable_*.deb</div><div class="line">$ sudo apt-get install -f</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　之前在 &lt;strong&gt;Window&lt;/strong&gt; 下面通过 &lt;strong&gt;hexo s&lt;/strong&gt; 启动本地服务器，通过浏览器预览，对md源文件的当前修改能够通过网页刷新出来。这段时间在 &lt;strong&gt;Linux&lt;/strong&gt; 上部署，就一直出现刷新页面无效的情况，必须重新启动服务器才能刷新，有时甚至还需要通过 &lt;strong&gt;hexo g&lt;/strong&gt; 重新解析源文件才能成功刷新。之前有段时间也以为是 &lt;strong&gt;Linux&lt;/strong&gt; 对带有中文名称的md源文件支持不好的缘故，因为将那些不能成功刷新的源文件的文件名修改下，去掉所有的中文字符后，就可以刷新有效了。&lt;/p&gt;
&lt;p&gt;　　不过，今天尝试了这个方法，居然不行了，不知道是不是因为升级了 &lt;strong&gt;Hexo&lt;/strong&gt; 的缘故，不过，却发现了更有效的解决方法，可以不用考虑源文件文件名的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术留档" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/"/>
    
      <category term="Hexo" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://durant35.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>RaspberryPi, Use an external wireless card(ComFast-WU855P)</title>
    <link href="http://durant35.github.io/2017/01/25/raspberry_using_an_external_wireless_card(CF-WU855P)/"/>
    <id>http://durant35.github.io/2017/01/25/raspberry_using_an_external_wireless_card(CF-WU855P)/</id>
    <published>2017-01-24T16:52:41.000Z</published>
    <updated>2017-02-03T07:00:54.057Z</updated>
    
    <content type="html"><![CDATA[<p>　　树莓派3已经自带无线网卡，这是一种极大的便捷，真正将树莓派变成躲在一个角落里，安静地搞事情的计算机。然而对于树莓派B+或者树莓派2，除了少数免驱的外接无线网卡外（树莓派系统已经自带了驱动），大多数外接无线网卡还是需要经过配置才能使用的，下面就介绍使用过的一款无线网卡（<a href="http://en.comfast.com.cn/product/WirelessAdapter/item-155.html">ComFast-WU855P</a>）的驱动配置过程，该无线网卡采用 <strong>REALTEK8192</strong> 高阶芯片（从<a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.1.JY6QbF&amp;id=37237024789&amp;cm_id=140105335569ed55e27b&amp;abbucket=6&amp;skuId=57539293852">淘宝</a>上了解到的，不知道对不对），这是一款常用的芯片，本文安装的驱动理论上对采用该芯片的无线网卡都是可用的。</p>
<a id="more"></a>
<h4 id="COMFAST-WU855P"><a href="#COMFAST-WU855P" class="headerlink" title="COMFAST-WU855P"></a>COMFAST-WU855P</h4><p>　　本文使用的是与下图这款无线网卡类似的 <strong>COMFAST </strong> 的一款无线网卡产品。</p>
<center><img src="/img/raspberrypi/COMFAST.jpg" width="320px"/></center>

<h4 id="以内核模块的形式编译安装RTL8192驱动"><a href="#以内核模块的形式编译安装RTL8192驱动" class="headerlink" title="以内核模块的形式编译安装RTL8192驱动"></a>以内核模块的形式编译安装RTL8192驱动</h4><blockquote>
<p>Reference：<a href="http://www.geek-workshop.com/thread-16077-1-1.html">树莓派2编译天猫魔盘驱动（8192eu）</a></p>
</blockquote>
<p>　　注意，下面的所有操作都是通过 <strong>ssh</strong> 直接在树莓派上进行构建，所以相对耗时。通过交叉编译环境进行构建则速度明显加快，不过配置交叉编译环境过程也不是那么简单，有兴趣的同学可以尝试一下。<br>　　具体的步骤如下：</p>
<ol>
<li><p>下载内核源代码，为编译 <strong>RTL8192</strong> 驱动模块做准备</p>
<ul>
<li>下载 <strong>rpi-source</strong> 程序</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/Workspace</div><div class="line">$ mkdir wireless &amp;&amp; <span class="built_in">cd</span> wireless</div><div class="line">$ wget https://raw.githubusercontent.com/notro/rpi-source/master/rpi-source</div><div class="line">$ chmod a+x rpi-source</div></pre></td></tr></table></figure>
<ul>
<li>运行 <strong>rpi-source</strong>，这个程序会根据当前内核信息去官方github上下载相应的源码，下载根据网络需要一些时间（我大概等了15分钟）。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./rpi-source</div></pre></td></tr></table></figure>
<ul>
<li>下载程序需要一些依赖，根据提示通过 <strong>apt-get</strong> 安装即可，</li>
</ul>
<blockquote>
<p>ERROR:<br><strong>bc is NOT installed. Needed by ‘make modules_prepare’. On Raspbian, run ‘sudo apt-get install bc’ to install it.</strong><br><strong>*** ncurses-devel is NOT installed. Needed by ‘make menuconfig’. On Raspbian sudo apt-get install libncurses5-dev</strong><br>　　<br>这里我就需要安装下面几个依赖：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install bc</div><div class="line">$ sudo apt-get install libncurses5-dev</div><div class="line">$ ./rpi-source</div></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>下载程序运行中间的部分打印信息如下：</li>
</ul>
<blockquote>
<p><strong>Saving to: ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e.tar.gz’</strong><br><strong>/home/pi/linux-fa     [          &lt;=&gt;   ] 129.96M  1.92MB/s   in 73s</strong><br><strong>2017-02-03 05:46:58 (1.79 MB/s) - ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e.tar.gz’ saved [136269962]</strong><br><strong>Unpack kernel source…</strong><br><strong>*** Create symlink: /home/pi/linux</strong><br><strong>*** Create /lib/modules/<ver>/{build,source} symlinks</strong><br><strong>*** Kernel source already installed: /home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e</strong></p>
</blockquote>
<p>因此会在 <strong>“~ 目录”</strong> 下看到（如下图），此外还创建了一些快捷方式，总之，就是为下一步编译内核模块做好准备。</p>
<center><img src="/img/raspberrypi/rpi-source_result.png" width="420px"/></center></li>
<li><p>获取 <strong>RTL8192</strong> 驱动源代码，构建并安装  <strong>RTL8192</strong> 内核模块</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/wireless</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/Mange/rtl8192eu-linux-driver.git</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="comment"># git clone https://github.com/pvaret/rtl8192cu-fixes.git</span></div><div class="line">$ <span class="built_in">cd</span> &lt;your-git-clone-driver&gt;</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<p>注：亲测两个仓库的代码都可以编译构建。</p>
<ul>
<li>可能会出现的问题</li>
</ul>
<blockquote>
<p>Makefile:616: arch/armv6l/Makefile: No such file or directory<br>make[1]: *** No rule to make target ‘arch/armv6l/Makefile’.  Stop.<br>make[1]: Leaving directory ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e’<br>Makefile:1335: recipe for target ‘modules’ failed<br>make: *** [modules] Error 2</p>
</blockquote>
<ul>
<li>解决的方法是，根据提示创建通过 <strong>arch/armv6l</strong> 到 <strong>arm</strong> 的软链接，</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># `uname -r`是uname -r命令返回的结果，会自适应到不同的内核版本</span></div><div class="line">$ <span class="built_in">cd</span> /lib/modules/`uname -r`/build</div><div class="line"><span class="comment"># 根据错误提示，参考博文是作 **arch/armv7l** 的软连接，我这里是 **arch/armv6l**</span></div><div class="line">$ ln -sf arm arch/armv6l</div></pre></td></tr></table></figure>
<ul>
<li>顺利进行编译构建（树莓派B+大约需要17分钟），然后安装到系统目录下：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> &lt;your-git-clone-driver&gt;</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
</li>
<li><p>加载  <strong>RTL8192</strong> 内核模块</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo modprobe 8192eu</div></pre></td></tr></table></figure>
<p>然后，插上USB无线网卡，<strong>ifconfig</strong> 或者 <strong>iwconfig</strong> 应该可以看到 <strong>wlan0</strong>，如下图：</p>
<center><img src="/img/raspberrypi/wireless_result.png" width="540px"/></center>

</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　树莓派3已经自带无线网卡，这是一种极大的便捷，真正将树莓派变成躲在一个角落里，安静地搞事情的计算机。然而对于树莓派B+或者树莓派2，除了少数免驱的外接无线网卡外（树莓派系统已经自带了驱动），大多数外接无线网卡还是需要经过配置才能使用的，下面就介绍使用过的一款无线网卡（&lt;a href=&quot;http://en.comfast.com.cn/product/WirelessAdapter/item-155.html&quot;&gt;ComFast-WU855P&lt;/a&gt;）的驱动配置过程，该无线网卡采用 &lt;strong&gt;REALTEK8192&lt;/strong&gt; 高阶芯片（从&lt;a href=&quot;https://detail.tmall.com/item.htm?spm=a230r.1.14.1.JY6QbF&amp;amp;id=37237024789&amp;amp;cm_id=140105335569ed55e27b&amp;amp;abbucket=6&amp;amp;skuId=57539293852&quot;&gt;淘宝&lt;/a&gt;上了解到的，不知道对不对），这是一款常用的芯片，本文安装的驱动理论上对采用该芯片的无线网卡都是可用的。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="RaspberryPi" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/RaspberryPi/"/>
    
    
  </entry>
  
  <entry>
    <title>RaspberryPi, enable ssh without UI</title>
    <link href="http://durant35.github.io/2017/01/25/raspberry_enable-ssh-without-UI/"/>
    <id>http://durant35.github.io/2017/01/25/raspberry_enable-ssh-without-UI/</id>
    <published>2017-01-24T16:48:58.000Z</published>
    <updated>2017-02-03T06:41:27.905Z</updated>
    
    <content type="html"><![CDATA[<p>　　可能是我写录的树莓派系统image有问题吧，小伙伴都说默认应该是打开22端口，支持ssh的；但是我做的几张SD卡的系统都是不打开的，我很纳闷，怀疑用的是假的镜像吧。前几次都发生在实验室，显示器，HDMI线应有尽有，启动系统，简单地通过界面在系统的 <strong>Preferences</strong> 中开启ssh端口即可。然而这一次，发生在家里（因为之前一直没空写个关于树莓派外置无线网卡驱动安装的教程，想着利用寒假回家弄一弄），家里哪有实验室那么好的环境，所以，甭想通过界面操作开启。</p>
<p>　　那究竟能不能通过直接修改SD卡里面的image文件内容，不用UI的方式，开启ssh端口呢？通过下面的捣鼓发现，这是可行的。</p>
<a id="more"></a> 
<h4 id="SD卡里面就保存着树莓派系统"><a href="#SD卡里面就保存着树莓派系统" class="headerlink" title="SD卡里面就保存着树莓派系统"></a>SD卡里面就保存着树莓派系统</h4><p>　　SD卡里面有两个分区，系统文件保存在非 <strong>boot</strong> 分区中，如下图：</p>
<center><img src="/img/raspberrypi/sd_card.png" width="480px"/></center><br>　　<strong>/usr/bin/raspi-config</strong> 就是树莓派<strong>Preferences</strong>操作对应的配置文件，我们用编辑器（Sublime-Text）打开该文件，<strong>CTRL+F</strong> 找到与 <strong>ssh</strong> 配置相关的部分，即下图显示的 <strong>do_ssh()</strong>。通过<strong>enable</strong>和<strong>start</strong>字段可以推测，该部分的两条命令应该是对应于界面操作里面勾选启用<strong>ssh</strong>对应的操作，通过这两条命令，应该可以开启系统的<strong>ssh</strong>端口！<br><br><center><img src="/img/raspberrypi/raspi-config.jpg" width="360px"/></center>

<h4 id="将开启端口命令自启动"><a href="#将开启端口命令自启动" class="headerlink" title="将开启端口命令自启动"></a>将开启端口命令自启动</h4><p>　　我的想法是，要不让这两条命令开机启动吧，看看上一步的猜测是不是真的有效。<strong>/etc/rc.local</strong> 是配置系统自启动的文件，我们将与开启<strong>ssh</strong>端口相关的两条命令添加到 <strong>exit 0</strong> 之前，如下图所示。</p>
<center><img src="/img/raspberrypi/rc.local.jpg" width="360px"/></center>

<h4 id="nmap来检测"><a href="#nmap来检测" class="headerlink" title="nmap来检测"></a>nmap来检测</h4><p>　　上面的操作真的能得偿所愿吗？我们需要验证一下，看能否<strong>ssh</strong>进去已经启动的树莓派系统。然而问题又来了，树莓派的<strong>ip</strong>是哪一个呀？很不幸，我的树莓派是插在小米3路由器，笔记本连着小米3路由器的无线网络，不过，小米3路由器是通过无线桥接到一个信号还不错，通过<strong>WiFi万能钥匙</strong> 破解出密码的不知道是邻居哪家里面的网。无线桥接，<strong>DHCP</strong>全都由桥接的路由器管理，小弟不才，撞不出人家的管理密码。咋办呢？这里介绍一个强大的工具，<strong><a href="http://blog.csdn.net/keepsmi1e/article/details/9370049">nmap</a></strong>。</p>
<p>　　通过下面的命令可以扫描出局域网内所有的ip地址（进行ping扫描，打印出对扫描做出响应的主机，这里通过笔记本的ip可以知道整个局域网是192.168.1.0网段）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nmap -sP 192.168.1.0/24</div></pre></td></tr></table></figure>
<p>　　然后，把树莓派一拔一插，对比前后两次打印的ip地址列表的情况，就能找出树莓派的ip地址了。</p>
<p>　　也可以通过 <strong>nmap</strong> 命令查看一台主机开放了哪些端口，如下图。    </p>
<center><img src="/img/raspberrypi/nmap4ssh.jpg" width="360px"/></center>

<p>　　树莓派确实把<strong>ssh</strong>端口开放了，直接<strong>ssh</strong>也能够顺利进入树莓派系统，问题解决了。</p>
<h4 id="还原自启动，即可大功告成"><a href="#还原自启动，即可大功告成" class="headerlink" title="还原自启动，即可大功告成"></a>还原自启动，即可大功告成</h4><p>　　有必要每次系统启动都去开放 <strong>ssh</strong> 端口吗？可能没这个必要，因为经过两条命令的操作后，应该会修改系统的一些变量或者状态位，这些操作应该不是掉电还原的，否则，在第一节中，关闭ssh端口就不需要额外的两条命令了吧。我们不妨再试试。</p>
<p>　　既可以直接在起来的系统中将自启动文件 <strong>/etc/rc.local</strong> 还原，当然也可以像第一节中那样，还是对SD卡的内容进行修改。</p>
<p>　　还原<strong>rc.local</strong>，再把SD卡插回去或者<strong>reboot</strong>系统，还是能够顺利通过<strong>ssh</strong>进入树莓派系统的，大功告成。    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　可能是我写录的树莓派系统image有问题吧，小伙伴都说默认应该是打开22端口，支持ssh的；但是我做的几张SD卡的系统都是不打开的，我很纳闷，怀疑用的是假的镜像吧。前几次都发生在实验室，显示器，HDMI线应有尽有，启动系统，简单地通过界面在系统的 &lt;strong&gt;Preferences&lt;/strong&gt; 中开启ssh端口即可。然而这一次，发生在家里（因为之前一直没空写个关于树莓派外置无线网卡驱动安装的教程，想着利用寒假回家弄一弄），家里哪有实验室那么好的环境，所以，甭想通过界面操作开启。&lt;/p&gt;
&lt;p&gt;　　那究竟能不能通过直接修改SD卡里面的image文件内容，不用UI的方式，开启ssh端口呢？通过下面的捣鼓发现，这是可行的。&lt;/p&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="RaspberryPi" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/RaspberryPi/"/>
    
    
  </entry>
  
  <entry>
    <title>8 sort functions using python</title>
    <link href="http://durant35.github.io/2017/01/24/python_sort-Functions/"/>
    <id>http://durant35.github.io/2017/01/24/python_sort-Functions/</id>
    <published>2017-01-24T08:18:38.000Z</published>
    <updated>2017-02-02T07:15:24.072Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>libpcap, 32-bit&amp;64-bit</title>
    <link href="http://durant35.github.io/2016/10/10/linux_libpcap%2032-bit&amp;64-bit/"/>
    <id>http://durant35.github.io/2016/10/10/linux_libpcap 32-bit&amp;64-bit/</id>
    <published>2016-10-10T02:42:37.000Z</published>
    <updated>2016-10-10T07:30:43.225Z</updated>
    
    <content type="html"><![CDATA[<p>　情况是这样的，在之前讲过的回播 <strong>.pcap</strong> 数据的 <strong>Velodyne_player</strong> 程序中，需要调用 <strong>Winpcap</strong> (其实就是 <strong>libpcap</strong> 的 Win挫版) 的 API 解析 <strong>.pcap</strong> 数据，再通过 UDP 发送出去。我们的 <strong>Velodyne_player</strong> 是一个 <strong>Win32</strong> 的程序，显然调用的就是32位的 <strong>Winpcap</strong> 库的 API； 后来我们也移植了一个 <strong>.pcap</strong> 采集程序的 Linux 版本，结果，用该 Linux 版本采集程序采集到的 <strong>.pcap</strong> 数据却没办法用我们 Win 下的 <strong>Velodyne_player</strong> 回播。后来发现，我们的 Linux 版本的采集程序用的是64位的 <strong>libpcap</strong> 库(因为系统是64位的 Ubuntu16.04，默认安装的就是64位的 <strong>libpcap</strong> 库)，64位和32位的 <strong>libpcap</strong>，在时间戳上有很关键的区别，下面是开源的 <strong>pcap.h</strong> 中的声明:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line"> * Generic per-packet information, as supplied by libpcap.</div><div class="line"> *</div><div class="line"> * The time stamp can and should be a "struct timeval", regardless of</div><div class="line"> * whether your system supports 32-bit tv_sec in "struct timeval",</div><div class="line"> * 64-bit tv_sec in "struct timeval", or both if it supports both 32-bit</div><div class="line"> * and 64-bit applications.  The on-disk format of savefiles uses 32-bit</div><div class="line"> * tv_sec (and tv_usec); this structure is irrelevant to that.  32-bit</div><div class="line"> * and 64-bit versions of libpcap, even if they're on the same platform,</div><div class="line"> * should supply the appropriate version of "struct timeval", even if</div><div class="line"> * that's not what the underlying packet capture mechanism supplies.</div><div class="line"> */</span></div><div class="line"><span class="keyword">struct</span> pcap_pkthdr &#123;</div><div class="line">  <span class="keyword">struct</span> timeval ts;	<span class="comment">/* time stamp */</span></div><div class="line">  bpf_u_int32 caplen;	<span class="comment">/* length of portion present */</span></div><div class="line">  bpf_u_int32 len;	<span class="comment">/* length this packet (off wire) */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　对于上面遇到的问题，我们想到的解决办法是，移植的 Linux 版本采集程序生成32位的，而不是目前的64位。因为现在装的是64位的 <strong>libpcap</strong>(64位系统使然)，那接下来的问题便是，如何在64位的 <strong>Ubuntu16.04</strong> 上面安装32位的 <strong>libpcap</strong> 库，然后生成我们需要的32位数据采集程序(-m32 or -m64)。</p>
<h3 id="Generate-32-bit-exes-depending-on-libpcap"><a href="#Generate-32-bit-exes-depending-on-libpcap" class="headerlink" title="Generate 32-bit exes depending on libpcap"></a>Generate 32-bit exes depending on libpcap</h3><ol>
<li><p>64位系统默认安装的包都是64位的，所以，64位的 <strong>Ubuntu16.04</strong> 安装64位的 <strong>libpcap</strong> 库比较简单。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/347788/how-can-i-install-libpcap-header-files-on-ubuntu-12-04">How can I install libpcap header files on Ubuntu 12.04?</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ sudo apt-get install libpcap0.8 libpcap0.8-dev libpcap-dev</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>64位的 <strong>Ubuntu16.04</strong> 安装32位的 <strong>libpcap</strong> 库则比较麻烦一点。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/654079/libpcap-32-bit-on-64-bit-ubuntu">libpcap 32 bit on 64 bit Ubuntu</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># enable multiarch support for i386 architecture</span></div><div class="line">xxx@...$ sudo dpkg --add-architecture i386</div><div class="line"><span class="comment"># update the source </span></div><div class="line">xxx@...$ sudo apt-get update</div><div class="line"><span class="comment"># now, you can install the pcap library</span></div><div class="line">xxx@...$ sudo apt-get install libpcap0.8:i386 libpcap0.8-dev:i386 libpcap-dev:i386</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>装了32位的 <strong>libpcap</strong> 库，并不意味着你就能编译32位的，<strong>libpcap</strong> 应用程序，因为，64位系统默认并没有32位应用程序需要的基本库(诸如<strong>C/C++标准库</strong>)，所以需要安装好基本库环境。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/709893/14-04-01-32-bit-missing-g-64-bit-include-files-when-cross-compiling">14.04.01 32-bit: Missing g++ 64-bit include files when cross-compiling</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ sudo apt-get install g++-multilib</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>安装好32位的基本库，还有 <strong>libpcap</strong> 后，我们就能生成需要的32位程序了。步骤很简单，源代码不需要修改，在 <strong>CodeBlocks</strong> 中只需要在项目对应的 <strong>Build Option</strong> 中将 <strong>-m64</strong> 调整为 <strong>-m32</strong>；对于其他构建方式(如 <strong>cmake</strong>)，方法应该类似，核心都是 <strong>-m32</strong> 还是 <strong>-m64</strong> 作为构建参数。</p>
</li>
</ol>
<h3 id="Linux-下如何查看程序-库信息"><a href="#Linux-下如何查看程序-库信息" class="headerlink" title="Linux 下如何查看程序/库信息"></a>Linux 下如何查看程序/库信息</h3><p>1.查看导出信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xxx@...$ nm -D xxx.so/xxx.out</div><div class="line">xxx@...$ nm -g xxx.a</div><div class="line"><span class="comment"># or using objdump</span></div><div class="line">xxx@...$ objdump -tT xxx.so</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>nm [option]:</strong><br>-A 在每个符号信息的前面打印所在对象文件名称；<br>-C 输出demangle过了的符号名称；<br>-D 打印动态符号；<br>-l 使用对象文件中的调试信息打印出所在源文件及行号；<br>-n 按照地址/符号值来排序；<br>-u 打印出那些未定义的符号</p>
</blockquote>
<p>2.查看依赖库信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看动态依赖库信息</span></div><div class="line">xxx@...$ ldd xxx.so/xxx.out</div></pre></td></tr></table></figure></p>
<p>3.查看程序/库位数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ objdump <span class="_">-a</span> xxx.a/xxx.so/xxx.out</div></pre></td></tr></table></figure></p>
<blockquote>
<p>输出结果: elf32-i386或elf64-x86-64</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　情况是这样的，在之前讲过的回播 &lt;strong&gt;.pcap&lt;/strong&gt; 数据的 &lt;strong&gt;Velodyne_player&lt;/strong&gt; 程序中，需要调用 &lt;strong&gt;Winpcap&lt;/strong&gt; (其实就是 &lt;strong&gt;libpcap&lt;/strong&gt; 的 Win挫版) 的 API 解析 &lt;strong&gt;.pcap&lt;/strong&gt; 数据，再通过 UDP 发送出去。我们的 &lt;strong&gt;Velodyne_player&lt;/strong&gt; 是一个 &lt;strong&gt;Win32&lt;/strong&gt; 的程序，显然调用的就是32位的 &lt;strong&gt;Winpcap&lt;/strong&gt; 库的 API； 后来我们也移植了一个 &lt;strong&gt;.pcap&lt;/strong&gt; 采集程序的 Linux 版本，结果，用该 Linux 版本采集程序采集到的 &lt;strong&gt;.pcap&lt;/strong&gt; 数据却没办法用我们 Win 下的 &lt;strong&gt;Velodyne_player&lt;/strong&gt; 回播。后来发现，我们的 Linux 版本的采集程序用的是64位的 &lt;strong&gt;libpcap&lt;/strong&gt; 库(因为系统是64位的 Ubuntu16.04，默认安装的就是64位的 &lt;strong&gt;libpcap&lt;/strong&gt; 库)，64位和32位的 &lt;strong&gt;libpcap&lt;/strong&gt;，在时间戳上有很关键的区别，下面是开源的 &lt;strong&gt;pcap.h&lt;/strong&gt; 中的声明:&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Generic per-packet information, as supplied by libpcap.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * The time stamp can and should be a &quot;struct timeval&quot;, regardless of&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * whether your system supports 32-bit tv_sec in &quot;struct timeval&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 64-bit tv_sec in &quot;struct timeval&quot;, or both if it supports both 32-bit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * and 64-bit applications.  The on-disk format of savefiles uses 32-bit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * tv_sec (and tv_usec); this structure is irrelevant to that.  32-bit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * and 64-bit versions of libpcap, even if they&#39;re on the same platform,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * should supply the appropriate version of &quot;struct timeval&quot;, even if&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * that&#39;s not what the underlying packet capture mechanism supplies.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pcap_pkthdr &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval ts;	&lt;span class=&quot;comment&quot;&gt;/* time stamp */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bpf_u_int32 caplen;	&lt;span class=&quot;comment&quot;&gt;/* length of portion present */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  bpf_u_int32 len;	&lt;span class=&quot;comment&quot;&gt;/* length this packet (off wire) */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程珠玑" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/"/>
    
      <category term="Linux" scheme="http://durant35.github.io/categories/%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91/Linux/"/>
    
    
      <category term="Linux" scheme="http://durant35.github.io/tags/Linux/"/>
    
      <category term="pcap" scheme="http://durant35.github.io/tags/pcap/"/>
    
  </entry>
  
  <entry>
    <title>Key Word Engineering</title>
    <link href="http://durant35.github.io/2016/10/09/OverlappingSounds_Key%20Word%20Engineering/"/>
    <id>http://durant35.github.io/2016/10/09/OverlappingSounds_Key Word Engineering/</id>
    <published>2016-10-09T00:14:45.000Z</published>
    <updated>2017-02-03T08:06:26.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><blockquote>
<p><strong>AI</strong>（Artificial Intelligence），人工智能<br><strong>ATM</strong>（asynchronous transfer mode），异步传输模式<br><strong>ARPA</strong>（Advanced Research Projects Agency），（美国国防部）高级研究计划署<br><strong>AR</strong>（augmented reality），增强实现<br><strong>ADSL</strong>（Asymmetrical Dingital Subscriber Loop），非对称数字用户环线<a id="more"></a><br>acoustic coupler，声音耦合器<br>Active Directory，活动目录<br>affinity，绑定<br>affinity group，地缘组<br>agent，代理<br>agent-based interface，代理人界面<br>agility，敏捷性<br>air waves，无线电波<br>algorithm，算法<br>analog，模拟的<br>animation，动画<br>annotation，注解，注释<br>answering machine，电话应答机<br>antenna，天线<br>application pool，应用程序池<br>architecture decay，架构腐坏<br>ARPAnet，ARPA网<br>aspect ratio，屏幕高宽比<br>atomic opreation，原子操作<br>atomic transaction，原子事务<br>atomicity，原子性<br>authentication，身份验证<br>authorization，授权<br>automation，自动化<br>autonomous，独立性<br>availability，可用性<br>availability set，可用性集</p>
</blockquote>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><blockquote>
<p><strong>bps</strong>（bits per second），比特/秒<br><strong>BS</strong>（browser-server），浏览器-服务器<br>backpane，底板<br>backward compatibility，向后兼容性<br>bandwidth，带宽<br>bar code，条形码<br>baseline，准线<br>baud，波特<br>bit，比特<br>bitnik，比特族<br>bottleneck，瓶颈<br>broadcast，（无线电或电视）广播<br>bug，缺陷<br>built-in，内置的，内建的；嵌入的；内置<br>business layer，业务层<br>business intelligence，商业智能<br>byte，字节</p>
</blockquote>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><blockquote>
<p><strong>CC</strong>（carbon copy），复写本，副本；抄送<br><strong>CPU</strong>（Central Processing Unit），中央处理器<br><strong>CA</strong>（Certificate Authority），证书认证机构<br><strong>CS</strong>（client-server），客户端-服务器<br><strong>CRT</strong>（cathode ray tube），阴极射线管<br>Cache/Caching，缓存<br>call stack，调用堆栈<br>carriage return，回车<br>cell，单元<br>certificate，（数字）证书<br>channel，信道，频道<br>character，字符<br>check in，签入<br>check out，签出<br>chip，芯片<br>cipher，密码<br>claim，声明<br>clone，克隆，复制<br>cloud computing，云计算<br>cloud service，云服务<br>cluster，集群<br>clustered index，聚集索引<br>coaxial cable，同轴电缆<br>command，命令<br>command prompt，命令行提示<br>commingled bits，混合的比特<br>communication，通信<br>community，社区<br>committed，已提交（的）<br>compatibility，兼容性<br>comcurrency，并发<br>concurrency mode，并发模式<br>conditional compilation，条件编译<br>conditional compilation statement，条件编译语句<br>configuration，配置，设置<br>connection string，连接字符串<br>consistenct，一致性<br>constructor，构造函数<br>container，容器<br>context，上下文<br>continuous integration，持续集成<br>contribute，贡献<br>Contributor License Agreement，贡献者许可协议<br>convert，转换<br>cookie，Cookie<br>corruption，损毁<br>crash，（程序）崩溃<br>crash dump，故障转储<br>crytography，密码术<br>cursor，光标<br>cybraian，电脑族<br>cyberspace，电脑空间</p>
</blockquote>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><blockquote>
<p><strong>DL</strong>（Deep Learning），深度学习<br><strong>DM</strong>（data mining），数据挖掘<br><strong>DI</strong>（dependenct injection），依赖注入<br>dashboard，仪表盘<br>data layer，数据层<br>data integrity，数据完整性<br>deployment，部署<br>derives from 继承<br>diagnostics，诊断<br>directive，指令<br>discussion forum，论坛<br>distributed system，分布式系统<br>dummy function，虚构函数<br>durability，持久性</p>
</blockquote>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><blockquote>
<p><strong>EAP</strong>（Early Assessment Program），早期评估版本<br>Egress，流出<br>elasticity，弹性<br>entity，实体<br>erosion，侵蚀<br>exception handling，异常处理<br>explanatory figures，图示</p>
</blockquote>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><blockquote>
<p><strong>FDD</strong>（Floopy Disk Drive），软盘<br>failover，容错转移<br>failure domain，故障域<br>fat client，胖客户端<br>follow up，跟进<br>foreign key，外键<br>forward，转发<br>full-duplex，全双工<br><strong>FPP</strong>（Full Packaged Product），零售版</p>
</blockquote>
<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><blockquote>
<p>Geo-Replication，地域复制<br>Geo Redundant，地域冗余</p>
</blockquote>
<h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><blockquote>
<p><strong>HDD</strong>（Hard Disk Drive），硬盘<br>handle，句柄<br>High Avaliability，高可用性<br>Homogeneous，同质化<br>Horizontal Scale，水平缩放<br>Hosting，宿主<br>Hybrid Cloud，混合云</p>
</blockquote>
<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><blockquote>
<p><strong>Iaas</strong>（Infrastructure as a Service），设施即服务<br>Idempotent Operation，幂等操作<br>Identity Provider，身份提供方<br>image，镜像<br>ingesting，摄取<br>ingress，流入<br>input endpoint，输入端点<br>Instance InputEndpoint，实例输入端点<br>Intercept，截取<br>Internal Endpoint，内部端点<br>Isolation，隔离性</p>
</blockquote>
<h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><blockquote>
</blockquote>
<h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><blockquote>
</blockquote>
<h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><blockquote>
<p>Legacy system，遗留系统<br>license，许可证<br>lifetime，生命周期<br>linked resource，链接的资源<br>load-balancing，负载平衡<br>load balancer，负载平衡器<br>log，日志<br>loose coupling，松耦合</p>
</blockquote>
<h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><blockquote>
<p>Mainframe，主机<br>Maintainability，可维护性<br>Management Key，管理密钥<br>Media Service，媒体服务<br>Merge，合并<br>Metadata，元数据<br>Middleware，中间件<br>Mobile Service，移动服务<br>Mock Object，模拟对象<br>Multitenancy，多租户<br>Multitier Architecture，多层体系结构<br>Multi-factor Authentication，多重验证</p>
</blockquote>
<h3 id="N"><a href="#N" class="headerlink" title="N"></a>N</h3><blockquote>
<p>Namespace，命名空间，名称空间<br>Non-clustered Index，非聚集索引<br>node，节点<br>normalize，规格化，归一化<br>notification hub，通知中心<br>N-Tier，N 层（结构）</p>
</blockquote>
<h3 id="O"><a href="#O" class="headerlink" title="O"></a>O</h3><blockquote>
<p>On-demand (media)，点播（媒体）<br>Optimistic Concurrency，乐观并发控制<br>Overview，概览<br>over-post，过度提交</p>
</blockquote>
<h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><blockquote>
<p><strong>Paas</strong>（Platform as a Service），平台即服务<br>partition，分区<br>Pay as You Go，即用即付<br>peek，查看<br>performance counter，性能计数器<br>Pessimistic Concurrency，悲观并发控制<br>Point-to-Site，点到站点<br>polling，轮询<br>presentation layer，表现层<br>private cloud，私有云<br>priority queue，优先级队列<br>probe，探测器<br>process，进程<br>production，生产（环境）<br>protocol，协议<br>proxy，代理<br>public cloud，公有云<br>push，推送</p>
</blockquote>
<h3 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h3><blockquote>
<p>Quota，配额</p>
</blockquote>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><blockquote>
<p>Rack，机架<br>real-time，即时、实时<br>Redundancy，冗余<br>Redundant，冗余（的）<br>Refactor，重构<br>relay，中继<br>Relevancy，适切性<br>Reliability，可靠性<br>Relying Party，依赖方<br>Repository，存储库；仓储；仓库<br>request pipeline，请求管道<br>reserved，专属<br>reverse proxy module，反向代理模块<br>retail，零售版<br>Rich Client，丰富客户端<br>Ripple Effect，涟漪效应<br>Rolling Upgrade，滚动升级<br>round-robin，轮流（分配）；轮叫<br>round-tripping，还原；回传；往返，往返切换<br>router，路由器</p>
</blockquote>
<h3 id="S"><a href="#S" class="headerlink" title="S"></a>S</h3><blockquote>
<p><strong>Saas</strong>（Software as a Service），软件即服务<br><strong>SSL</strong>（Security Socket Layer），安全套接层<br><strong>SLA</strong>（Service Level Agreement），服务水平协议<br>Scalability，缩放性<br>Scale，缩放<br>Scale Out，向外缩放<br>Scale Up，向上缩放<br>Schema (database)，架构（数据）<br>Schema (xml)，架构（xml）<br>Security Token，安全令牌<br>Self-signed Certificate，自签名证书<br>Serializable，可序列化<br>Server Affinity，服务器绑定<br>Service Bus，服务总线<br>Service Contract，服务合同<br>Service Provider，服务提供方<br>Shopping cart，购物车<br>Signature，签名<br>snapshot，快照<br>Staging，过渡（环境）<br>Sticky Session，黏性会话<br>Stickyness，黏性；黏度<br>Sign in，登录<br>Sign out，注销<br>Site-to-Site，站点到站点<br>Storage Account，存储账户<br>Subnet，子网<br>Sub-region，子地域<br>Subscription，订阅</p>
</blockquote>
<h3 id="T"><a href="#T" class="headerlink" title="T"></a>T</h3><blockquote>
<p>Tenant，租户<br>Terminus，端点<br>Thin Client，瘦客户端<br>Thread Pool，线程池<br>Thread Starvation，线程饥荒<br>Throttle，节流；限速<br>Timestamp，时间戳<br>Throughput，吞吐量<br>Topology，拓扑结构<br>Token，令牌<br>(Code) Tracing，（代码）追踪<br>Transaction，事务<br>Transient Error，瞬时错误</p>
</blockquote>
<h3 id="U"><a href="#U" class="headerlink" title="U"></a>U</h3><blockquote>
<p>Ubiquitous Computing，普存计算<br>under-post，提交不足<br>Unit test，单元测试<br>Uncommitted，未提交（的）<br>Update Domain，更新域</p>
</blockquote>
<h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><blockquote>
<p><strong>VOL</strong> 或 <strong>VLO</strong>（Volume Licensing for Organizations），团体批量许可证；大量采购授权合约<br>Vertical Scale，垂直缩放<br>VIP，虚拟 IP（或不译）<br>VIP Swap，VIP 交换<br>Virtual Network，虚拟网络<br>Virtual Machine，虚拟机</p>
</blockquote>
<h3 id="W"><a href="#W" class="headerlink" title="W"></a>W</h3><blockquote>
<p><strong>WMI</strong>（Windows Management Instrumentation），Windows 管理规范<br><strong>WINS</strong>（Windows Internet Name Service），Windows Internet 命名服务<br>Wearable Device，可穿戴设备<br>Web Role，网站角色<br>Web Service，网络服务<br>Web Sites，网站<br>wireless communication，无线通讯<br>Worker Role，辅助角色<br>Workflow，工作流<br>workgroup，工作组</p>
</blockquote>
<h3 id="X"><a href="#X" class="headerlink" title="X"></a>X</h3><blockquote>
<p><strong>XOR</strong>（Exclusive OR），异或<br>X.509v3 certificate，X.509 证书</p>
</blockquote>
<h3 id="Y"><a href="#Y" class="headerlink" title="Y"></a>Y</h3><blockquote>
</blockquote>
<h3 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h3><blockquote>
<p>Zero-downtime Upgrade，零停机升级<br>zip disk，压缩磁盘<br>zone，区域<br>zone list，区域列表<br>zone transfer，区域传送</p>
</blockquote>
<p>　　</p>
<blockquote>
<p><strong>References:</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/linJie1930906722/p/5768669.html">计算机专业术语对照</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A&quot;&gt;&lt;/a&gt;A&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AI&lt;/strong&gt;（Artificial Intelligence），人工智能&lt;br&gt;&lt;strong&gt;ATM&lt;/strong&gt;（asynchronous transfer mode），异步传输模式&lt;br&gt;&lt;strong&gt;ARPA&lt;/strong&gt;（Advanced Research Projects Agency），（美国国防部）高级研究计划署&lt;br&gt;&lt;strong&gt;AR&lt;/strong&gt;（augmented reality），增强实现&lt;br&gt;&lt;strong&gt;ADSL&lt;/strong&gt;（Asymmetrical Dingital Subscriber Loop），非对称数字用户环线
    
    </summary>
    
    
      <category term="Key-words" scheme="http://durant35.github.io/tags/Key-words/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客主题Yelee迁移笔记(二)</title>
    <link href="http://durant35.github.io/2016/10/07/hexo_Yelee%20Migrant%20Note(2)/"/>
    <id>http://durant35.github.io/2016/10/07/hexo_Yelee Migrant Note(2)/</id>
    <published>2016-10-07T07:33:41.000Z</published>
    <updated>2016-10-07T07:50:00.209Z</updated>
    
    <content type="html"><![CDATA[<p>　本文记录了 <strong>Hexo</strong> 首页与归档博文排序如何自定义，想实现的功能是 <strong>index</strong> 按照修改日期排序，最近修改的文章置顶显示；<strong>Archives</strong> 归档则按照默认的创建时间前后排序。<br><a id="more"></a></p>
<blockquote>
<p>Reference: <a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/">解决Hexo置顶问题</a></p>
</blockquote>
<p>　Hexo 目录下的 <strong>node_modules</strong> 中存放跟 <strong>hexo generator</strong> 命令相关的 hexo 模块，其中 <strong>/hexo-generator-index/lib/generator.js</strong> 还有  <strong>/hexo-generator-archive/lib/generator.js</strong> 分别用于生成 <strong>index</strong> 和 <strong>Archives</strong> 归档页面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</div><div class="line"> </div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</div><div class="line"> </div><div class="line">  <span class="comment">//comment following 1 line</span></div><div class="line">  <span class="comment">//var posts = locals.posts.sort('-date');</span></div><div class="line"> </div><div class="line">  <span class="comment">//add following 5 lines </span></div><div class="line">  <span class="keyword">var</span> posts = locals.posts;</div><div class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> b.updated - a.updated;</div><div class="line">    <span class="comment">//return a.date - b.date;</span></div><div class="line">  &#125;);</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    <span class="attr">perPage</span>: config.index_generator.per_page,</div><div class="line">    <span class="attr">layout</span>: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    <span class="attr">format</span>: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">__index</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　本文记录了 &lt;strong&gt;Hexo&lt;/strong&gt; 首页与归档博文排序如何自定义，想实现的功能是 &lt;strong&gt;index&lt;/strong&gt; 按照修改日期排序，最近修改的文章置顶显示；&lt;strong&gt;Archives&lt;/strong&gt; 归档则按照默认的创建时间前后排序。&lt;br&gt;
    
    </summary>
    
      <category term="技术留档" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/"/>
    
      <category term="Hexo" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://durant35.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>初识ROS自主导航</title>
    <link href="http://durant35.github.io/2016/10/03/ROS_ROS_Navigation_GettingStarted/"/>
    <id>http://durant35.github.io/2016/10/03/ROS_ROS_Navigation_GettingStarted/</id>
    <published>2016-10-03T09:43:09.000Z</published>
    <updated>2016-10-03T13:32:46.531Z</updated>
    
    <content type="html"><![CDATA[<p>　　To add navigation to a robot, we need to launch 3 nodes:</p>
<blockquote>
<ul>
<li>map_server: to provide the static map {“*.yaml” &amp; “*.pgm”}, against which the robot will localize and plan.</li>
<li>amcl: to localize the robot against the static map.</li>
<li>move_base: to handle global planning and local control for the robot.</li>
</ul>
</blockquote>
<p>　　<strong>amcl</strong> 是移动机器人二维环境下的概率定位系统，它实现了自适应(或 <strong>kdl</strong> 采样)的 <strong>蒙特卡洛定位</strong> 方法，其中针对已有的地图使用 <strong>粒子滤波器</strong> 跟踪一个机器人的姿态。</p>
<p>　　<strong>move_base</strong> 提供了 ROS 导航的配置，运行，交互接口，主要包括两个部分：</p>
<blockquote>
<p>　(1) 全局路径规划：根据给定的目标位置进行总体路径的规划<br>　(2) 局部路径规划：根据附近的障碍物信息进行躲避路线规划<br><a id="more"></a></p>
</blockquote>
<h3 id="amcl"><a href="#amcl" class="headerlink" title="amcl"></a>amcl</h3><p>　　<font color="blue">amcl(Adaptive Monte Carlo Localization) —-&gt; pose(position, oriention) &lt;—- map 坐标系</font></p>
<blockquote>
<p>自主定位</p>
<ul>
<li>全局定位：通过测机器人的绝对未知来定位，定位的精度较高，并且可以用来修复局部定位的定位误差</li>
<li>局部定位：通过测量相对于机器人初始位置的距离和方向来确定当前的位姿，但随着时间的累计造成定位的误差较大，无法精确定位</li>
</ul>
</blockquote>
<p>　　AMCL maintains a set of poses, representing where it thinks the robot might be, each of these candidate pose has associated with a probability: higher-probability poses are more likely to be where the robot actually is.</p>
<p>　　<font color="green">When amcl first starts up, you have to give it the initial pose(position and oriention) of the robot as this is something amcl cannot figure out on its own.</font></p>
<p>　　As the robot moves around ,the sensor readings are compared to the readings that would be expected for each of the poses, according to the map:</p>
<blockquote>
<ul>
<li>consistent with the map, probablity <strong>↗</strong></li>
<li>inconsistent with the map, probablity <strong>↘</strong></li>
</ul>
</blockquote>
<p>　　Over time, candidate poses with very low probability go away, while those with high probability stick around.</p>
<h3 id="move-base"><a href="#move-base" class="headerlink" title="move_base"></a>move_base</h3><p>　在 ROS 的导航中，首先会通过全局路径规划，计算出机器人到目标位置的全局路线，这一功能是 <strong>navfn</strong> 这个包实现的。</p>
<blockquote>
<p>　<strong>navfn</strong> 通过 <strong>Dijkstra</strong> 最优路径的算法，计算 costmap 上的最小花费路径，作为机器人的全局路线。(将来在算法上应该还会加入 <strong>A*</strong> 算法)</p>
</blockquote>
<p>　本地的实时规划是利用 <strong>base_local_planner</strong> 包实现的，该包使用 <strong>Trajectory Rollout</strong> 和 <strong>Dynamic Window Approaches</strong> 算法计算每个周期内应该行驶的速度和角度(dx, dy, dtheta velocities)</p>
<blockquote>
<p>　<strong>base_local_planner</strong> 这个包通过地图数据，通过算法搜索到达目标的多条路径，利用一些评价标准(是否会撞到障碍物，所需要的时间等等)，选取最优的路径，并且计算所需要的实时速度和角度。<br>　<strong>Trajectory Rollout</strong> 和 <strong>Dynamic Window Approaches</strong> 算法的主要思路如下：<br>　(1) 采样机器人当前的状态(dx, dy, dtheta)<br>　(2) 针对每个采样速度，计算机器人以该速度行驶一段时间后的状态，得出一条行驶路线<br>　(3) 利用一些评价标准为多条路线打分<br>　(4) 根据打分，选择最优路线<br>　(5) 重复上面的过程</p>
</blockquote>
<p>　<strong>move_base</strong> 有一下几个重要的配置文件：</p>
<ul>
<li>costmap_common_params.yaml(通用代价地图参数):<blockquote>
<p> We define our laser to be an observation source, as a result, data published on the scan topic will be used to update the costmaps, both inserting obstacles(marking) and asserting free space(clearing).<br>　<font color="green">footprint; observation_source</font></p>
</blockquote>
</li>
<li>global_common_params.yaml(全局规划代价地图参数):<blockquote>
<p> Tell the global costmap to use a static map (to be provided by the map server) and that it should do its reasoning in the map frame, while it should consider the canonical(基底) frame of the robot to be base_link.<br>　<font color="green">global_frame; robot_base_frame; static_map</font></p>
</blockquote>
</li>
<li>local_common_params.yaml(局部规划代价地图参数):<blockquote>
<p> Tell the local costmap to use a small rolling window: the robot always remains at the center of the window, with obstacle data outside the window being discarded, and potentially reobserved later, as the robot moves.</p>
</blockquote>
</li>
</ul>
<h3 id="costmap-2d"><a href="#costmap-2d" class="headerlink" title="costmap_2d"></a>costmap_2d</h3><blockquote>
<ul>
<li>Provides an implementation of a 2D costmap that takes in sensor data from the world, builds a 2D or 3D occupancy grid od the data and inflates costs in a 2D costmap based on the occupancy grid and a user specificed radius.</li>
<li>Also provides support for map_server based intialization of a costmap, rolling window based costmaps, and parameter based subscription and configuration of sensor topics.</li>
</ul>
</blockquote>
<p>　　在 ROS 的导航中，<strong>costmap_2d</strong> 这个包主要负责根据传感器的信息建立和更新二维或三维的地图。ROS 的地图(costmap) 采用网格(grid)的形式，每个网格的值从 <strong>0~255</strong> 分为三种状态: 占有(有障碍物)，无用(空闲的)，未知。因此有五种状态：</p>
<blockquote>
<p>　(1) Lethal(致命的)：机器人中心与该网格的中心重合，此时机器人必然与障碍物冲突<br>　(2) Possibly circumscribed(外切)：网格的外切圆与机器人的轮廓外切，此时机器人相当于靠在障碍物附近，所以不一定冲突<br>　(3) Inscribed(内切)：网格外切圆与机器人的轮廓内切，此时的机器人必然与障碍物冲突<br>　(4) Free space(自由空间)：没有障碍物的空间<br>　(5) Unknown：未知的空间</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　To add navigation to a robot, we need to launch 3 nodes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;map_server: to provide the static map {“*.yaml” &amp;amp; “*.pgm”}, against which the robot will localize and plan.&lt;/li&gt;
&lt;li&gt;amcl: to localize the robot against the static map.&lt;/li&gt;
&lt;li&gt;move_base: to handle global planning and local control for the robot.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;strong&gt;amcl&lt;/strong&gt; 是移动机器人二维环境下的概率定位系统，它实现了自适应(或 &lt;strong&gt;kdl&lt;/strong&gt; 采样)的 &lt;strong&gt;蒙特卡洛定位&lt;/strong&gt; 方法，其中针对已有的地图使用 &lt;strong&gt;粒子滤波器&lt;/strong&gt; 跟踪一个机器人的姿态。&lt;/p&gt;
&lt;p&gt;　　&lt;strong&gt;move_base&lt;/strong&gt; 提供了 ROS 导航的配置，运行，交互接口，主要包括两个部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　(1) 全局路径规划：根据给定的目标位置进行总体路径的规划&lt;br&gt;　(2) 局部路径规划：根据附近的障碍物信息进行躲避路线规划&lt;br&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="ROS" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/ROS/"/>
    
    
      <category term="ROS" scheme="http://durant35.github.io/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>sudo, unable to resolve host</title>
    <link href="http://durant35.github.io/2016/10/03/linux_sudo_unable_to_resolve_host/"/>
    <id>http://durant35.github.io/2016/10/03/linux_sudo_unable_to_resolve_host/</id>
    <published>2016-10-03T02:42:07.000Z</published>
    <updated>2016-10-03T02:55:50.345Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Reference:<br>　<a href="http://askubuntu.com/questions/59458/error-message-when-i-run-sudo-unable-to-resolve-host-none">Error message when I run sudo: unable to resolve host (none)</a></p>
</blockquote>
<p>　现象是这样的。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...:~$ sudo <span class="literal">true</span></div><div class="line">sudo: unable to resolve host (...)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　解决的方法如下。</p>
<blockquote>
<p>Two things to check (assuming your machine is called my-machine, you can change this as appropriate):</p>
<ul>
<li>That the /etc/hostname file contains just the name of the machine.</li>
<li>That /etc/hosts has an entry for localhost. It should have something like:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1    localhost.localdomain localhost</div><div class="line">127.0.1.1    my-machine</div></pre></td></tr></table></figure>
</li>
</ul>
<p>If either of these files aren’t correct (since you can’t sudo), you may have to reboot the machine into recovery mode and make the modifications, then reboot to your usual environment.</p>
</blockquote>
<p>　我遇到的问题是，通过UI系统设置修改了机器名，<strong>/etc/hostname</strong> 是修改过来了，但是 <strong>/etc/hosts</strong> 中却还是保留了原来的机器名。<br>　这个问题，在使用 <strong>Networking-ROS</strong> 的运行过程中使得通过网络连接的分布式 <strong>master</strong> 和 <strong>slave</strong> 无法正常通讯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Reference:&lt;br&gt;　&lt;a href=&quot;http://askubuntu.com/questions/59458/error-message-when-i-run-sudo-unable-to-resolve-host-none&quot;&gt;Error message when I run sudo: unable to resolve host (none)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　现象是这样的。&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;xxx@...:~$ sudo &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo: unable to resolve host (...)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://durant35.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ROS Basics</title>
    <link href="http://durant35.github.io/2016/10/02/ROS_ROS_Basics/"/>
    <id>http://durant35.github.io/2016/10/02/ROS_ROS_Basics/</id>
    <published>2016-10-02T13:18:03.000Z</published>
    <updated>2017-03-06T02:05:46.883Z</updated>
    
    <content type="html"><![CDATA[<p>　　ROS 基本概念以及经常使用的命令。</p>
<h3 id="ROS-文件系统"><a href="#ROS-文件系统" class="headerlink" title="ROS 文件系统"></a>ROS 文件系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取软件包有关信息</span></div><div class="line">xxx@...$ rospack find [package-name]</div><div class="line"><span class="comment"># 查看环境变量(ROS_PACKAGE_PATH)</span></div><div class="line">xxx@...$ <span class="built_in">export</span> | grep ROS</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="ROS-package"><a href="#ROS-package" class="headerlink" title="ROS package"></a>ROS package</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看一级依赖包信息，内容大致为 packages.xml 所示信息</span></div><div class="line">xxx@...$ rospack depends1 [package-name]</div><div class="line"></div><div class="line"><span class="comment"># catkin_make 构建，基于 cmake</span></div><div class="line">xxx@...$ catkin_make [make-targets] [-DCMAKE_INSTALL_PREFIX=xxx]</div></pre></td></tr></table></figure>
<h3 id="ROS-服务和参数"><a href="#ROS-服务和参数" class="headerlink" title="ROS 服务和参数"></a>ROS 服务和参数</h3><blockquote>
<p>服务是节点之间通讯的一种方式 {request –&gt; response}<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosservice list</div><div class="line">xxx@...$ rosservice <span class="built_in">type</span> [service-name]</div><div class="line">xxx@...$ rosservice call [service-name] [args]</div></pre></td></tr></table></figure></p>
<p>参数服务器操作<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosparam list</div><div class="line">xxx@...$ rosparam <span class="built_in">set</span>/get [param-name]</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="ROS-调试"><a href="#ROS-调试" class="headerlink" title="ROS 调试"></a>ROS 调试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun rqt_console rqt_console</div><div class="line"> </div><div class="line">xxx@...$ rosrun rqt_logger_level rqt_logger_level</div><div class="line"> </div><div class="line"><span class="comment"># 检查 ROS 系统</span></div><div class="line">xxx@...$ roswtf</div></pre></td></tr></table></figure>
<h3 id="ROS-节点"><a href="#ROS-节点" class="headerlink" title="ROS 节点"></a>ROS 节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前运行的 ROS 节点信息</span></div><div class="line">xxx@...$ rosnode list</div><div class="line"> </div><div class="line"><span class="comment"># 返回一个特定节点信息</span></div><div class="line">xxx@...$ rosnode info /&lt;node-name&gt;</div><div class="line"> </div><div class="line"><span class="comment"># 启动某个节点，需要明确该节点属于哪个package</span></div><div class="line">xxx@...$ rosrun [package-name] [node-name]</div><div class="line"> </div><div class="line"><span class="comment"># 在运行所有 ROS 程序节点前 master 节点必须先要运行起来</span></div><div class="line"><span class="comment"># roslaunch 会自动先启动 master 节点</span></div><div class="line">xxx@...$ roscore</div></pre></td></tr></table></figure>
<h3 id="ROS-话题"><a href="#ROS-话题" class="headerlink" title="ROS 话题"></a>ROS 话题</h3><p>　　<font color="blue">通过 <strong>rqt_graph</strong> 命令显示当前系统运行情况动态图，能准确了解系统的整体框架！</font><br>    <img src="/img/ROS/navigation_rqt_graph.png" /><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun rqt_graph rqt_graph</div></pre></td></tr></table></figure></p>
<p>　　其他的有关 ROS topic 的命令对于了解整个系统数据流向，数据信息(如频率，数据类型等)有极大的辅助作用！<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示某个话题上发布的数据</span></div><div class="line">xxx@...$ rostopic <span class="built_in">echo</span> /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 分别显示所有发布和订阅的话题及其类型的详细信息</span></div><div class="line">xxx@...$ rostopic list -v</div><div class="line"> </div><div class="line"><span class="comment"># 显示某个topic所有的发布节点和订阅节点</span></div><div class="line">xxx@...$ rostopic info /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据类型</span></div><div class="line">xxx@...$ rostopic <span class="built_in">type</span> /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 发布数据到topic</span></div><div class="line"><span class="comment">#  &#123;-1&#125; 发布一条消息后马上退出,option</span></div><div class="line"><span class="comment">#  &#123;-r ?&#125; 稳定频率?hz的命令流,option</span></div><div class="line">xxx@...$ rostopic pub &#123;-1&#125; /[topic] [msg_type] &#123;-r ?&#125; -- [args]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据发布频率</span></div><div class="line">xxx@...$ rostopic hz /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据变化图形</span></div><div class="line">xxx@...$ rosrun rqt_plot rqt_plot</div></pre></td></tr></table></figure></p>
<p>1.节点中如何按照一定频率发布 topic<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="keyword">double</span> frequency)</span></span>;</div><div class="line"><span class="keyword">while</span>(ros::ok())&#123;</div><div class="line">  ros::spinOnce();</div><div class="line">  loop_rate.sleep();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li><strong>ros::spin()</strong>　blocks until ros invokes a shutdown(频率与callback函数相关！！)</li>
<li><strong>ros::spinOnce()</strong> handles the event and return immediatey(可控频率！)</li>
</ul>
</blockquote>
<p>2.节点中如何订阅 topic<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ros::NodeHandle n;</div><div class="line">ros::Publisher pub = n.advertise(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;topic, </div><div class="line">       <span class="keyword">uint32_t</span> queue_size, <span class="keyword">bool</span> latch=<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>3.<font color="blue"><strong>消息调试可能的步骤!!!</strong></font><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rostopic list -v</div><div class="line">xxx@...$ rostopic info /&lt;topic-name&gt;</div><div class="line">xxx@...$ rosrun tf view_frame</div></pre></td></tr></table></figure></p>
<h3 id="使用-roslaunch"><a href="#使用-roslaunch" class="headerlink" title="使用 roslaunch"></a>使用 roslaunch</h3><p>　　启动定义在　<strong>launch</strong> 文件中的多个节点<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ roslaunch [package] [file-name.launch]</div></pre></td></tr></table></figure></p>
<p>　　<strong>roslaunch</strong> 在大型系统中的使用技巧</p>
<ol>
<li><p>高层次的 launch 文件应该简短，利用 <strong>include</strong> 指令将系统的组成部分和 <strong>ROS parameter</strong> 引用过来即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"$(find package-name)/.../..."</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>当一个给定类型的消息在不同的情况下发布在不同的 topic 上，可以使用 <strong>remapping</strong>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"topic-name"</span> <span class="attr">to</span>=<span class="string">"xxx"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>参数</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 声明和使用</div><div class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">value</span>=<span class="string">"xxx"</span>/&gt;</span></div><div class="line">$(arg name)</div><div class="line"># 通过*.yaml文件加载</div><div class="line">#  通过 ns 划分 namespace</div><div class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"*.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> [<span class="attr">ns</span>=<span class="string">"xxx"</span>] /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>launch 文件的重用以及参数覆盖(当前文件声明覆盖外部文件声明)应少用为妙。</p>
</li>
</ol>
<h3 id="tf-坐标变换树"><a href="#tf-坐标变换树" class="headerlink" title="tf 坐标变换树"></a>tf 坐标变换树</h3><p>　　<font color="blue"><strong>tf</strong> 变换树定义了不同坐标系之间的平移和旋转变换关系，通过 <strong>rqt_tf_tree</strong> 命令查看当前系统 <strong>tf 变换树</strong> 能够有效的对系统缺漏做出判断！</font><br>    <center><img src="/img/ROS/slam_tf_tree.png" width="640px"/></center><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看the tree of frame</span></div><div class="line">xxx@...$ rosrun rqt_tf_tree rqt_tf_tree</div><div class="line"><span class="comment"># 查看一对不同坐标间的变换</span></div><div class="line">xxx@...$ rosrun tf tf_echo [reference_frame] [target_frame]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>ROS 使用 <strong>tf</strong> 来决定机器人的位置和静态地图中的传感器数据，但是 <strong>tf</strong> 中没有机器人的速度信息，所以导航功能包要求机器人能够通过里程计信息源发布包含速度信息的里程计(数据类型: <strong>nav_msgs/Odometry</strong>), <strong>“/odom”</strong></p>
</blockquote>
<h3 id="rosbag-数据操作"><a href="#rosbag-数据操作" class="headerlink" title="rosbag 数据操作"></a>rosbag 数据操作</h3><ol>
<li><p>记录数据</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosbag record -o &lt;file-name&gt; /scan /tf /&lt;topic-name&gt;...</div><div class="line"><span class="comment"># CTRL+C to generate &lt;file-name&gt;.bag</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据仿真</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosbag play &lt;file-name&gt;.bag --clock</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="保存-SLAM-地图"><a href="#保存-SLAM-地图" class="headerlink" title="保存 SLAM 地图"></a>保存 SLAM 地图</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ roslaunch hector_slam_example hector_hokoyo.launch</div></pre></td></tr></table></figure>
<blockquote>
<p>Hector SLAM is running and the real-time map is constructing under map server</p>
</blockquote>
<p>　　建图完成后从 <strong>map server</strong> 获取地图数据，进行保存<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun map_server map_saver <span class="_">-f</span> &lt;file-name&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>会在当前目录生成地图数据 <strong><file-name>.pgm</strong> 和 <strong><file-name>.yaml</strong><br>    <center><img src="/img/ROS/lab510.png" width="502px"/></center></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　ROS 基本概念以及经常使用的命令。&lt;/p&gt;
&lt;h3 id=&quot;ROS-文件系统&quot;&gt;&lt;a href=&quot;#ROS-文件系统&quot; class=&quot;headerlink&quot; title=&quot;ROS 文件系统&quot;&gt;&lt;/a&gt;ROS 文件系统&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 获取软件包有关信息&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xxx@...$ rospack find [package-name]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 查看环境变量(ROS_PACKAGE_PATH)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xxx@...$ &lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; | grep ROS&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="ROS" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/ROS/"/>
    
    
      <category term="ROS" scheme="http://durant35.github.io/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Embedded System 2016</title>
    <link href="http://durant35.github.io/2016/10/01/TACouses_Embedded_System_2016/"/>
    <id>http://durant35.github.io/2016/10/01/TACouses_Embedded_System_2016/</id>
    <published>2016-10-01T07:50:14.000Z</published>
    <updated>2016-10-09T07:29:58.695Z</updated>
    
    <content type="html"><![CDATA[<p>　　嵌入式系统实验课大概涉及的内容有以下几个部分:<br>    <center><img src="/img/TA-Cources/ES2016/dol_framework.png" width="640px"/></center><br>　　主体就涵盖了三条纵线一条横线，functional simulation，Hds simulation，analysis model 是三纵，如何通过三纵得到的数据迭代获取 application 和 architecture 的最佳 mapping 为一横。<br><a id="more"></a></p>
<blockquote>
<ol>
<li><p>DOL Framework的了解，入门编程，功能仿真<br>1.1 <strong><font color="green">DOL + systemC</font></strong><br>　Functional Simulation，包括分析，动手编程修改 example 模型<br>1.2 <strong><font color="green">MPARM + RTEMS OS</font></strong><br>　System Synthesis(Hds，硬件相关软件层)，mparm<br>1.3 <strong><font color="green">MATLAB + RTC/MPA</font></strong><br>　Analysis Model分析，MPA(<strong>Modular Performance Analysis</strong>)，获取当前 mapping 的各项参数，如: Backlog, Delay，用于迭代的back-annotation。</p>
</li>
<li><p>解决 <strong>Application</strong> 到 <strong>Architecture</strong> 的 <strong>Mapping</strong>: <strong>DES(Design Space Exploration)</strong> 探索，使用 <strong>EXPO</strong> 并进行数据分析。</p>
 <center><img src="/img/TA-Cources/ES2016/dse_cycle.png" width="420px"/></center>　</li>
<li>DeadLock 死锁问题</li>
<li>KPN 模型设计与分析</li>
</ol>
</blockquote>
<h3 id="D-istributed-O-peration-L-ayer"><a href="#D-istributed-O-peration-L-ayer" class="headerlink" title="D(istributed)O(peration)L(ayer)"></a><font color="green">D</font>(istributed)<font color="green">O</font>(peration)<font color="green">L</font>(ayer)</h3><blockquote>
<p><center><img src="/img/TA-Cources/ES2016/SHAPES.png" width="640px"/></center><br>上图描述了 <strong>DOL</strong> 的整体框架以及所使用的工具链<br>　VSP: Virtual SHAPES Platform</p>
<p><center><img src="/img/TA-Cources/ES2016/dol_basic_structure.png" width="520px"/></center><br>上图描述了 <strong>DOL</strong> 的整体流程：<br>　1). <strong>DOL Specification</strong>，包括 <code>*.c</code>, <code>*.h</code>, <code>*.xml</code> 定义的 <strong>application</strong>, <code>*.xml</code> 定义的 <strong>architecture</strong> 和 <strong>mapping</strong><br>　2). 自动化生成 SystemC 代码，并基于 SystemC 进行 <strong>Functional Simulation</strong><br>　3). 自动化生成 MPARM 平台上运行的二进制代码，进行 <strong>Cycle Accurate Simulation</strong><br>　4). 利用上述两种 Simulation 产生的 <strong>Log files</strong> 生成 <strong>MPA Model</strong>，进行 <strong>RTC</strong> 等相关分析</p>
<p><center><img src="/img/TA-Cources/ES2016/what_is_mapping.png" width="520px"/></center><br>接下来会介绍两种 <strong>DOL Software Synthesis</strong>:</p>
<ul>
<li>基于 <strong>SystemC</strong> 的功能仿真</li>
<li>基于 <strong>RTEMS(real-time executive for multiprocessor systems)</strong> 和 <strong>MPARM</strong> 的模拟仿真(Cycle Accurate Simulation)</li>
</ul>
</blockquote>
<p>1.DOL &amp; SystemC for <font color="green">Functional Simulation</font><br>    <center><img src="/img/TA-Cources/ES2016/dol_overview.png" width="420px"/></center></p>
<blockquote>
<p>Step 1: Flattening of the process network description</p>
<ul>
<li>Java class XMLFlattener, XMLFlattener creates a Java class that can generate the flattened XML file<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java dol.helper.flattener.XMLFlattener pn.xml Generator</div><div class="line">javac Generator.java</div><div class="line">java Generator.java &gt; flattened_pn.xml</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Step 2: Flattening of the generated XML file</p>
<ul>
<li>Flattened XML file <strong><font color="blue">— dotty —&gt;</font></strong> representation of the process network<br>　　To generate a network description displayable by dotty, use dol with the -D flag.<br>　　To specify the process network file, use the -P flag.<br>　　The -c flag is used to enable a basic consistency check of the process network，dol will check whether each port is connected to some channel, for instance<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java dol.main.Main -P flattened_pn.xml -D dotty_pn.dot -c</div><div class="line">dotty dotty_pn.dot</div></pre></td></tr></table></figure>
</li>
</ul>
<p><center><img src="/img/TA-Cources/ES2016/Hds_synthesis.png" width="420px"/></center></p>
<ul>
<li>Flattened XML file + C source code <strong><font color="blue">— dol —&gt;</font></strong> executable SystemC application<br>　　To generate the source code for an executable systemC application, use dol with the -H flag<br>　　dol will create a directory with the specified name containing all required source files for generating a systemC application, including a Makefile<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># copy *.c &amp; *.h</span></div><div class="line">cp <span class="variable">$sourcefiles</span> ./src</div><div class="line">java dol.main.Main -P flattened_pn.xml -H systemc -c</div><div class="line"><span class="built_in">cd</span> systemc/src</div><div class="line">make</div><div class="line">./sc_application</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li><font color="red">Assignment</font><br>　a. How to configure DOL environment in your computer?<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># check your system environment</span></div><div class="line">xxx@...:~$ sudo lsb_release <span class="_">-a</span></div><div class="line"> </div><div class="line"><span class="comment"># The requirements:</span></div><div class="line"><span class="comment">#  C/C++ environment: compiler, linker</span></div><div class="line"><span class="comment">#  Java environment: javac, java</span></div><div class="line"><span class="comment">#  Build environment: make, Ant (version 1.6.5 or greater)</span></div><div class="line"><span class="comment"># check your gcc</span></div><div class="line">xxx@...:~$ gcc -v</div><div class="line">xxx@...:~$ sudo apt-get install ant</div><div class="line"><span class="comment"># install Java environment</span></div><div class="line">xxx@...:~$ sudo apt-cache search openjdk-*</div><div class="line">xxx@...:~$ sudo apt-get install openjdk-&lt;your cache jdk version&gt;-jdk</div><div class="line"><span class="comment"># check installation success or not</span></div><div class="line">xxx@...:~$ java -version</div><div class="line"> </div><div class="line"><span class="comment"># 配置 DOL 依赖: SystemC</span></div><div class="line"><span class="comment"># SystemC environment (version 2.1 or greater)</span></div><div class="line"><span class="comment">#  File: systemc-2.3.1.tar</span></div><div class="line"><span class="comment">#  链接：http://www.accellera.org/downloads/standards/systemc/files</span></div><div class="line">xxx@...:&lt;sub&gt;$ <span class="built_in">cd</span> &lt;/sub&gt;/Workspace/DOL</div><div class="line">xxx@...:~$ tar -zxvf systemc-2.3.1.tgz</div><div class="line">xxx@...:~$ rm systemc-2.3.1.tgz</div><div class="line"><span class="comment"># 1. Change to the top level directory (systemc-2.3.1)</span></div><div class="line">xxx@...:&lt;sub&gt;$ <span class="built_in">cd</span> &lt;/sub&gt;/Workspace/DOL/systemc-2.3.1</div><div class="line">xxx@...:~$ <span class="built_in">pwd</span></div><div class="line"><span class="comment"># 2. Create a temporary directory, e.g.,</span></div><div class="line">xxx@...:~$ mkdir objdir</div><div class="line"><span class="comment"># 3. Change to the temporary directory, e.g.,</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> objdir</div><div class="line"><span class="comment"># 4. Configure the package for your system, e.g.,</span></div><div class="line">xxx@...:~$ ../configure CXX=g++ --disable-async-updates</div><div class="line"><span class="comment"># 5. Compile the package.</span></div><div class="line">xxx@...:~$ make</div><div class="line"><span class="comment"># 6. [option] verify the compiled package by testing the example suite.</span></div><div class="line">xxx@...:~$ make check</div><div class="line"><span class="comment"># 7. Install the package.</span></div><div class="line">xxx@...:~$ make install</div><div class="line"><span class="comment"># 8. You can now remove the temporary directory, .e.g,</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> ..</div><div class="line">xxx@...:~$ rm -rf objdir</div><div class="line"><span class="comment"># Alternatively, you can keep the temporary directory to allow you to:</span></div><div class="line"><span class="comment">#  a) Experiment with the examples.</span></div><div class="line"><span class="comment">#  b) Later uninstall the package. </span></div><div class="line"><span class="comment">#    To clean up the temporary directory, enter:</span></div><div class="line">xxx@...:~$ make clean</div><div class="line"><span class="comment">#    To uninstall the package, enter:</span></div><div class="line">xxx@...:~$ make uninstall</div><div class="line"> </div><div class="line"><span class="comment"># 配置 DOL</span></div><div class="line"><span class="comment">#  wget http://www.tik.ee.ethz.ch/~shapes/downloads/dol_ethz.zip</span></div><div class="line">xxx@...:&lt;sub&gt;$ <span class="built_in">cd</span> &lt;/sub&gt;/Workspace/DOL</div><div class="line">xxx@...:~$ unzip dol_ethz.zip</div><div class="line">xxx@...:~$ rm dol_ethz.zip </div><div class="line"><span class="comment"># 修改 build_zip.xml 文件</span></div><div class="line">xxx@...:~$ vim build_zip.xml</div><div class="line"><span class="comment"># 找到下面这段话，修改成上面编译的 SystemC 所在的位置，</span></div><div class="line"><span class="comment">#  &lt;property name="systemc.inc" value="YYY/include"/&gt;</span></div><div class="line"><span class="comment">#  &lt;property name="systemc.lib" value="YYY/lib-linux/libsystemc.a"/&gt;</span></div><div class="line"><span class="comment"># 把YYY改成上面pwd的结果（注意，对于64位系统的机器，lib-linux要改成lib-linux64）</span></div><div class="line"><span class="comment"># 编译 DOL，若成功会显示 BUILD SUCCESSFUL</span></div><div class="line">xxx@...:~$ ant <span class="_">-f</span> build_zip.xml all</div><div class="line"><span class="comment"># 接着可以试试运行第一个例子</span></div><div class="line"><span class="comment"># 进入build/bin/mian路径下</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> build/bin/main</div><div class="line"><span class="comment"># 然后构建，运行第一个例子</span></div><div class="line">xxx@...:~$ ant <span class="_">-f</span> runexample.xml -Dnumber=1</div></pre></td></tr></table></figure>
</li>
</ul>
<font color="blue"><strong>Q&amp;A</strong></font>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">1.build_zip.xml无法保存</div><div class="line">Ans：sudo gedit build_zip.xml</div><div class="line"> </div><div class="line">2.最后一步build failed</div><div class="line">  出现在中文系统，在dol/build/bin/main下的runexample.xml 215-217行需要注释或者删掉</div><div class="line">Ans: 找到</div><div class="line"><span class="tag">&lt;<span class="name">tstamp</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">format</span> <span class="attr">property</span>=<span class="string">"touch.time"</span></div><div class="line">          <span class="attr">pattern</span>=<span class="string">"MM/dd/yyyy hh:mm aa"</span></div><div class="line">          <span class="attr">offset</span>=<span class="string">"-5"</span> <span class="attr">unit</span>=<span class="string">"second"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tstamp</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">touch</span> <span class="attr">datetime</span>=<span class="string">"$&#123;touch.time&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"example$&#123;number&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">touch</span>&gt;</span></div><div class="line">修改为：</div><div class="line"><span class="comment">&lt;!--     </div><div class="line">&lt;tstamp&gt;</div><div class="line">  &lt;format property="touch.time"</div><div class="line">          pattern="MM/dd/yyyy hh:mm aa"</div><div class="line">          offset="-5" unit="second"/&gt;</div><div class="line">&lt;/tstamp&gt;</div><div class="line">&lt;touch datetime="$&#123;touch.time&#125;"&gt;</div><div class="line">  &lt;fileset dir="example$&#123;number&#125;"/&gt;</div><div class="line">&lt;/touch&gt; </div><div class="line">--&gt;</span></div><div class="line"> </div><div class="line">3.make和ant有什么不一样</div><div class="line">Ans: MAKE是基于C语言；ant是基于Java语言</div><div class="line"> </div><div class="line">4.第一次build successful, 但是最后build failed</div><div class="line">Ans: 这个问题大致上是JAVA的问题</div><div class="line">  对于这个问题，安装JDK可以解决，sudo apt-get install openjdk-?-jdk可以解决</div><div class="line"> </div><div class="line">5.sudo apt-get install openjdk-?-jdk后，build还是有问题</div><div class="line">Ans: 可能因为安装了多个版本的JAVA，需要设置一下JAVA的环境变量</div><div class="line"> </div><div class="line">6.有人遇到pthread_mutex_tryloc,什么鬼的</div><div class="line">Ans: 表示摊手，因为在编译Systemc时，</div><div class="line">    sudo ../configure CXX=g++ --disable-async-updates，</div><div class="line">  这是systemc的相关设置，已经禁用了pthread。</div><div class="line">  如果按照上述语句configure还出现问题的，试试重新安装一遍。</div><div class="line"> </div><div class="line">7.PPT上最后一个图示可以画出来的吗？</div><div class="line">Ans：可以，在build/bin/main 的exmaple文件里有面个*.dot文件，双击就可以看到了</div><div class="line"> </div><div class="line">...</div></pre></td></tr></table></figure>
<p>　b. Analyze DOL framework by some example.<br>　c. Write your DOL Apps based on above analysis.</p>
<p>2.<font color="green">MPARM Simulation</font> with RTEMS OS<br>    <center><img src="/img/TA-Cources/ES2016/MPARM_simulation.png" width="540px"/></center></p>
<ul>
<li><font color="red">Assignment</font><br>　a. Configure and run MPARM simulation.<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Step1: Install requirement: MATLAB</span></div><div class="line"><span class="comment">#  安装MATLAB_R2014A</span></div><div class="line"><span class="comment"># 1. 步入ISO所在路径，sudo mount MATHWORKS_R2014A.iso MATLAB_R2014A/ 挂载MATHWORKS_R2014A.iso到MATLAB_R2014A</span></div><div class="line">x@.:~$ mkdir MATLAB_R2014A</div><div class="line">x@.:~$ sudo mount MATHWORKS_R2014A.iso MATLAB_R2014A/</div><div class="line"> </div><div class="line"><span class="comment"># 2. 启动安装</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> MATLAB_R2014A/</div><div class="line">x@.:~$ sudo ./install</div><div class="line"> </div><div class="line"><span class="comment"># 3. 选择是否在线安装时，选否，即 install manually without using the internet</span></div><div class="line"><span class="comment">#  让输入key，输入 12313-94680-65562-90832</span></div><div class="line"><span class="comment">#  文件安装路径选择依照自己习惯，一般为：/usr/local/</span></div><div class="line">x@.:~$ sudo umount -v MATLAB_R2014A/</div><div class="line">x@.:~$ sudo rm -rf MATLAB_R2014A/</div><div class="line"> </div><div class="line"><span class="comment"># 4. 步入  /usr/local/MATLAB/R2014a/bin， sudo ./matlab，即可启动 MATLAB，说明成功安装并破解</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin</div><div class="line">x@.:~$ sudo ./matlab</div><div class="line"> </div><div class="line"><span class="comment"># 5. 不使用Internet手动激活，使用：破解/Crack/license_405329_R2014a.lic文件</span></div><div class="line"><span class="comment">#  此外，将 破解/Crack/Linux/libmwservices.so 复制到 MATLAB/R2014a/bin/glnxa64/ （可能需要通过命令mv或者cp）</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> &lt;ISO所在路径&gt;</div><div class="line">x@.:~$ unzip MATHWORKS_R2014A_Crack.zip</div><div class="line">x@.:~$ sudo cp Crack/Linux/libmwservices.so /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin/glnxa64/</div><div class="line">x@.:~$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin</div><div class="line"><span class="comment">#  MATLAB已经破解，正常启动</span></div><div class="line">x@.:~$ sudo ./matlab</div><div class="line"> </div><div class="line"><span class="comment"># 6. 制作 MATLAB 快捷启动 (matlab-support)</span></div><div class="line"><span class="comment">#  sudo apt-get install matlab-support	按照要求填写目录即可</span></div><div class="line"><span class="comment">#  任意 Terminal下 键入命令：matlab 即可启动，如果报错，需要键入 sudo matlab</span></div><div class="line">x@.:~$ sudo apt-get install matlab-support</div><div class="line"><span class="comment"># Location of MATLAB installation(s): /usr/local/MATLAB/R2014a</span></div><div class="line"><span class="comment"># Authorized user for MATLAB: &lt;empty&gt;</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"> </div><div class="line"><span class="comment"># 7. [option]更改 MATLAB 默认文件夹</span></div><div class="line"><span class="comment">#  在 MATLAB 命令行键入 edit pathdef，在 pathdef.m 文件最末尾添加： cd 你要设置的默认目录 即可。</span></div><div class="line"><span class="comment"># 8. 配置RTC ToolBox 说明</span></div><div class="line"><span class="comment">#  链接: http://www.mpa.ethz.ch/Rtctoolbox/Download</span></div><div class="line"><span class="comment">#  rtc_toobox.zip is the same contents as tecsexperiments-2010-10-22-final/testbed/matlab/rtc</span></div><div class="line"><span class="comment"># Extract the downloaded zip package. The extracted directory will contain a directory called rtc.</span></div><div class="line"><span class="comment"># Copy or move the directory rtc to its final installation destination, e.g. to $MATLAB$/toolbox/rtc</span></div><div class="line">x@.:~$ sudo unzip rtc_toobox.zip <span class="_">-d</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/toolbox/</div><div class="line">x@.:~$ sudo matlab</div><div class="line"><span class="comment"># Open Matlab and change to the rtc directory:</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$MATLAB</span>$/toolbox/rtc</div><div class="line"><span class="comment"># Run:</span></div><div class="line">rtc_install</div><div class="line"><span class="comment"># Now you can start using the RTC Toolbox. To explore the functionality of the RTC Toolbox, try the following:</span></div><div class="line"><span class="built_in">help</span> rtc</div><div class="line"><span class="comment"># Uninstalling the Real-Time Calculus (RTC) Toolbox:</span></div><div class="line">rtc_uninstall</div><div class="line"><span class="comment"># You may now delete the directory $MATLAB$/toolbox/rtc </span></div><div class="line">x@.:~$ sudo rm -rf /usr/<span class="built_in">local</span>/MATLAB/R2014a/toolbox/rtc</div><div class="line"> </div><div class="line"><span class="comment"># Step2: Configure testbed environment</span></div><div class="line"><span class="comment"># 1. 修改 mparm/RTEMS-os/install-rtems/arm-rtems/arm_bare_bsp/Makefile.inc 中'prefix'和'exec_prefix'所对应的路径</span></div><div class="line"><span class="comment">#  修改为自己的 mparm 所在目录</span></div><div class="line">prefix = /home/khuang/work/mparm-haid/mparm/RTEMS-os/install-rtems</div><div class="line">exec_prefix = /home/khuang/work/mparm-haid/mparm/RTEMS-os/install-rtems/arm-rtems</div><div class="line"> </div><div class="line"><span class="comment"># 2. 修改 testbed/localjars/dol.properties 中'SYSTEMC_INC'和'SYSTEMC_LIB'所对应的路径</span></div><div class="line"><span class="comment">#  修改为自己 systemC 中 include 与 libsystemc.a 所对应的目录。</span></div><div class="line">SYSTEMC_INC = /home/khuang/work/shapes/systemC/include</div><div class="line">SYSTEMC_LIB = /home/khuang/work/shapes/systemC/lib-linux/libsystemc.a</div><div class="line"> </div><div class="line"><span class="comment"># 3. 在 testbed/localjars 中更新 jar 文件,使用命令 jar -uf dol.jar dol.properties</span></div><div class="line">x@.:~$ jar -uf dol.jar dol.properties</div><div class="line"> </div><div class="line"><span class="comment"># 4. 修改 testbed/build.xml 中'mparm.dir'所对应的路径为自己 mparm 所在路径</span></div><div class="line">&lt;property name=<span class="string">"mparm.dir"</span> location=<span class="string">"/home/khuang/work/mparm-haid/mparm/"</span>/&gt;</div><div class="line"> </div><div class="line"><span class="comment"># 5. 至此,就可以运行 testbed 了,在 testbed 目录下执行 ant,查看结果</span></div><div class="line">x@.:&lt;sub&gt;$ <span class="built_in">cd</span> &lt;/sub&gt;/Workspace/tecsexperiments-2010-10-22-final/testbed</div><div class="line">x@.:~$ ant</div><div class="line"> </div><div class="line"><span class="comment"># 6. 调用MATLAB分析MPA</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> tecs</div><div class="line">x@.:~$ ./runmatlab.sh</div><div class="line"> </div><div class="line"><span class="comment"># 7. [option]修改 testbed/build.xml 中'source.dir',可以运行不同的测试样例,测试样例在tecs/examples 目录下。</span></div><div class="line">&lt;property name=<span class="string">"source.dir"</span> value=<span class="string">"tecs/examples/examplemjpegVSP-trigger"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<font color="blue"><strong>Q&amp;A</strong></font>

<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># MPARM工具是32位程序，通过查看链接情况解决依赖位数不匹配的问题</span></div><div class="line"><span class="comment">#  需要安装i386的C++标准库</span></div><div class="line"><span class="comment">#  参考链接: http://askubuntu.com/questions/709893/14-04-01-32-bit-missing-g-64-bit-include-files-when-cross-compiling</span></div><div class="line">x@.:~/Workspace/tecsexperiments-2010-10-22-final/mparm/swarm/bin$ ldd mpsim.x</div><div class="line">  linux-gate.so.1 =&gt;  (0xf7747000)</div><div class="line">  libstdc++.so.5 =&gt; not found</div><div class="line">  libm.so.6 =&gt; /lib/i386-linux-gnu/libm.so.6 (0xf76e8000)</div><div class="line">  libgcc_s.so.1 =&gt; /lib/i386-linux-gnu/libgcc_s.so.1 (0xf76ca000)</div><div class="line">  libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf751c000)</div><div class="line">  /lib/ld-linux.so.2 (0xf774a000)</div><div class="line"><span class="comment"># This is just a dependency package that resolves to g++-?-multilib for the default gcc/g++ version, </span></div><div class="line"><span class="comment">#  and in turn depends on lib64stdc++-?-dev (64-bit compilation on 32-bit) or libx32stdc++-?-dev (32-bit compilation on 64-bit)</span></div><div class="line"><span class="comment">#  it is these that contain the actual header files.</span></div><div class="line">x@.:~/Workspace/tecsexperiments-2010-10-22-final/mparm/swarm/bin$ sudo apt-get install g++-multilib</div></pre></td></tr></table></figure>
<p>　b. Analyze MPARM simulation log files to know about the whole process.</p>
<p>3.<font color="green">MPA Model</font></p>
<h3 id="DSE-EXPO"><a href="#DSE-EXPO" class="headerlink" title="DSE-EXPO"></a>DSE-EXPO</h3><h3 id="Dead-Lock"><a href="#Dead-Lock" class="headerlink" title="Dead Lock"></a>Dead Lock</h3><h3 id="K-ahn-P-rocess-N-etwork"><a href="#K-ahn-P-rocess-N-etwork" class="headerlink" title="K(ahn)P(rocess)N(etwork)"></a><font color="green">K</font>(ahn)<font color="green">P</font>(rocess)<font color="green">N</font>(etwork)</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　嵌入式系统实验课大概涉及的内容有以下几个部分:&lt;br&gt;    &lt;center&gt;&lt;img src=&quot;/img/TA-Cources/ES2016/dol_framework.png&quot; width=&quot;640px&quot;/&gt;&lt;/center&gt;&lt;br&gt;　　主体就涵盖了三条纵线一条横线，functional simulation，Hds simulation，analysis model 是三纵，如何通过三纵得到的数据迭代获取 application 和 architecture 的最佳 mapping 为一横。&lt;br&gt;
    
    </summary>
    
      <category term="TA Cources" scheme="http://durant35.github.io/categories/TA-Cources/"/>
    
    
  </entry>
  
  <entry>
    <title>从 VS 的 dumpbin 目录谈 x86、xi386、x86-64、amd64...</title>
    <link href="http://durant35.github.io/2016/09/17/hsw_%E4%BB%8EVS%E7%9A%84dumpbin%E7%9B%AE%E5%BD%95%E8%B0%88x86,i386,x86-64,amd64/"/>
    <id>http://durant35.github.io/2016/09/17/hsw_从VS的dumpbin目录谈x86,i386,x86-64,amd64/</id>
    <published>2016-09-17T11:54:00.000Z</published>
    <updated>2017-02-02T09:21:38.758Z</updated>
    
    <content type="html"><![CDATA[<p>　翻开 <strong>VS</strong> 的 <strong>dumpbin.exe</strong>、<strong>cl.exe</strong> 的存放目录，你会惊奇的发现，居然存在这么多个分支！<br>    <center><img src="/img/hsw/VS2013_dumpbin_dirs.png" width="640px"/></center><br>　　什么 <strong>amd64</strong>、<strong>amd64_arm</strong>、<strong>amd64_x86</strong>、<strong>arm</strong>、<strong>x86_amd64</strong>、<strong>x86_arm</strong>???<br><a id="more"></a></p>
<h2 id="故事的起源"><a href="#故事的起源" class="headerlink" title="故事的起源"></a>故事的起源</h2><blockquote>
<p>Refer: <a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/95a3ca96-e3a5-4b12-ab59-7d70df1df07b/clexe-and-directories-under-bin-host-targets?forum=vcgeneral">cl.exe and directories under bin, host, targets?</a><br>　In general, the format of the directory name is “host_target” so “amd64_arm” means that the compiler itself runs on x64 and it targets arm. “amd64” doesn’t follow the format but it should be obvious, it runs on and targets x64 bit. The compiler in the bin directory is a x86 only compiler.</p>
</blockquote>
<p>　原来，上面说来说去也就是这三个平台而已啦，<strong>amd64</strong>、<strong>arm</strong> 还有 <strong>x86</strong>。 <strong>amd64*</strong> 目录指代运行在 <strong>amd64</strong> (也就是64位机器) 上的构建系统，可用于生成 <strong>amd64</strong>、<strong>arm</strong> 还有 <strong>x86</strong> 平台目标代码；<strong>x86*</strong> 目录类似，至于 <strong>arm</strong> 目录，该平台的构建系统没用于生成 <strong>amd64</strong> 还有 <strong>x86</strong> 平台目标代码，而整个 <strong>…/VC/bin</strong> 目录下，则是 <strong>x86_x86</strong> 的构建系统。</p>
<h2 id="了解一些基本概念"><a href="#了解一些基本概念" class="headerlink" title="了解一些基本概念"></a>了解一些基本概念</h2><blockquote>
<p>Refer: <a href="http://blog.chinaunix.net/uid-25871104-id-3424668.html">x86/x86_64的一些基本概念 </a><br>　现在的 <strong>x86 CPU</strong> 在位数上有32/64 bit之分，在 <strong>ARCH(体系架构)</strong> 上又有 x86/x86_64/x64/i386/IA32/IA64/amd64，最近又新出来一个 x32，还好不是 ARCH，只是 <strong>ABI(应用程序二进制接口)</strong>，没有那么混乱。<br>　<br>　先说一下x86的这些arch，不要求很严格的话，基本上可以用下面的公式来表达：<br>　　<strong>x86 = i386 = IA32</strong><br>　　<strong>amd64 = x86_64 = x64 != IA64</strong><br>　其实这两个等式里很多都是别名，严格说的话，x86 的世界里只存在 <font color="green"><strong>x86/x86_64/IA64</strong></font> 三种架构。<br>　当年 <strong>AMD</strong> 先于 <strong>Intel</strong> 推出向下兼容的 amd64 CPU，而 <strong>Intel</strong> 推出的不兼容32位系统的 <font color="green"><strong>IA64</strong></font> 惨淡收场(被MS放了鸽子)，后来 <strong>Intel</strong> 在指令上支持了 <font color="green"><strong>amd64</strong></font>，不过不愿意叫 amd64，改了个名字 <font color="green"><strong>x86_64</strong></font>。<br>　<br>　再说 64bit/32bit 的兼容性问题：<br>　　现在的 64bit CPU实际上都做了兼容 32bit 的特殊设计，所以 64bit 的CPU上运行 32bit 的软件(包括kernel/app，driver除外)是没有问题。反过来，32bit 的 CPU 上运行 64bit 的软件是不可以的。<br>　<br>　最后说重点，64bit相比32bit的性能优势：<br>　　这里不考虑 64bit 硬件上运行 32bit 软件的这种过度方式。<br>　　从架构上来说，64bit 拥有 64bit 的 register 和 64bit 的 bus，在数据传输效率上比 32bit 要高不少；另外，64bit 地址总线的寻址空间突破了 4G 的限制。<br>　　所以，对于大内存，密集数据运算的应用场景，64bit 的优势是非常明显的。网上有一些 benchmark，这里不贴了。<br>　　但是，对于小内存系统，64bit 的 CPU 在某些状况下可能比 32bit CPU的效率更低。<br>　　因为 64bit 的 CPU 的地址是 64 位的，指针是 64 位的，编译生成的二进制文件更大，运行时占用的内存更多;另一方面，因为 64 位地址的问题，cache 中能存放的指令就更少，所以更容易导致 cache 的 miss。<br>　　所以在某些应用场景，64bit CPU 的更大的寻址空间，更快的数据传递，更快的浮点运算的特性，与其 64bit 的地址/指针所导致的cache miss的特性，始终并存。<br>　<br>　为了充分利用64的优势，又避免 64bit 地址导致的 cache miss 的问题，Intel 提出了 <font color="green"><strong>x32 ABI</strong></font> 的概念。<br>　　x32 不是一个 ARCH，是一个 ABI。<br>　　x32 可以充分的使用 64bit 硬件的 64bit 寄存器，64bit 总线，以及 64bit 新增的指令，从而获得更快的数据处理速度。<br>　　同时 x32 又使用 32bit 的地址/pointer，32bit 的 C 数据类型，因此 cache miss 并不会增加。<br>　　x32 是一个 ABI，其设计到的部分包括：kernel 的 support，toolchain 的 support，system lib 的 support。现在 kernel(from 3.4) 和 toolchain 的 support 都已经OK。</p>
</blockquote>
<h2 id="问题深入"><a href="#问题深入" class="headerlink" title="问题深入"></a>问题深入</h2><blockquote>
<p>Refer: <a href="http://downtoearthlinux.com/posts/x86-i386-x86-64-x64-and-amd64-oh-my/">x86, i386, x86-64, x64, and amd64? Oh My!</a><br>　<font color="green"><strong>x86</strong></font> instruction sets are found on 32-bit processors, <font color="green"><strong>x86-64</strong></font> instruction sets are found on 64-bit processors.  Therefore, to find your instruction set, you must figure out if you have a 32-bit or a 64-bit processor.<br>　<br>　It is common to find x86 called <font color="green"><strong>i386</strong></font>, or occasionally <font color="green"><strong>IA-32</strong></font>.  x86-64 is commonly called <font color="green"><strong>x64</strong></font> or <font color="green"><strong>amd64</strong></font>, and less often IA-32e, EM64T, or Intel64.<br>　Typically, knowing x86, i386, x86-64, x64, and amd64 is enough for downloading Linux.<br>　<br>　x86-64  =  64-bit  =  x64  =  amd64<br>　x86  =  32-bit  =  i386<br>　If your processor supports it, use x86-64.</p>
</blockquote>
<h2 id="回到问题开始"><a href="#回到问题开始" class="headerlink" title="回到问题开始"></a>回到问题开始</h2><blockquote>
<p>Refer: <a href="http://stackoverflow.com/questions/3508173/when-compiling-x64-code-whats-the-difference-between-x86-amd64-and-amd64">When compiling x64 code, what’s the difference between “x86_amd64” and “amd64”?</a><br>　<font color="blue"><strong>x64 on x86 (x64 cross-compiler)</strong></font><br>　　Allows you to create output files for x64. This version of cl.exe runs as a 32-bit process, native on an x86 machine and under WOW64 on a 64-bit Widows operating system.<br>　<font color="blue"><strong>x64 on x64</strong></font><br>　 Allows you to create output files for x64. This version of cl.exe runs as a native process on an x64 machine.<br>　<br>　 It has nothing to do with efficiency. The native and cross-compiler will both generate the same machine code. You will however gain some benefits by running a native 64-bit compiler process on a 64-bit workstation (larger registers, larger memory space, etc…)<br>　The native compiler will only run on an 64-bit copy of Windows, so if your workstation is 32-bit this compiler won’t even run.<br>　The cross-compiler is meant to run on x86 machines even though it will run on a 64-bit copy of Windows via WoW; however, there is no reason to do this.<br>　<br>　If you use x86_amd64, then you are typically developing on an x86 machine and you want to create x64 files that run natively on x64. You could also use this option on an x64 machine but your compiler will be running under WOW64 emulation.<br>　If you use AMD64, then you are developing on an x64 machine and you want to create x64 files that run natively on x64. The compiler is running natively in x64. This option is more efficient to build x64 programs.</p>
</blockquote>
<p>　　所以，假如你是 64 位系统(现在基本上是啦)，那么在配置 <strong>dumpbin</strong> 或者 <strong>cl</strong> 环境变量时，最好选择 <strong>host</strong> 为 <strong>amd64</strong> 的路径，即 <strong>amd64*</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　翻开 &lt;strong&gt;VS&lt;/strong&gt; 的 &lt;strong&gt;dumpbin.exe&lt;/strong&gt;、&lt;strong&gt;cl.exe&lt;/strong&gt; 的存放目录，你会惊奇的发现，居然存在这么多个分支！&lt;br&gt;    &lt;center&gt;&lt;img src=&quot;/img/hsw/VS2013_dumpbin_dirs.png&quot; width=&quot;640px&quot;/&gt;&lt;/center&gt;&lt;br&gt;　　什么 &lt;strong&gt;amd64&lt;/strong&gt;、&lt;strong&gt;amd64_arm&lt;/strong&gt;、&lt;strong&gt;amd64_x86&lt;/strong&gt;、&lt;strong&gt;arm&lt;/strong&gt;、&lt;strong&gt;x86_amd64&lt;/strong&gt;、&lt;strong&gt;x86_arm&lt;/strong&gt;???&lt;br&gt;
    
    </summary>
    
      <category term="软硬兼施" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/"/>
    
      <category term="体系结构" scheme="http://durant35.github.io/categories/%E8%BD%AF%E7%A1%AC%E5%85%BC%E6%96%BD/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo博客主题Yelee迁移笔记</title>
    <link href="http://durant35.github.io/2016/09/16/hexo_%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98Yelee%E8%BF%81%E7%A7%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://durant35.github.io/2016/09/16/hexo_博客主题Yelee迁移笔记/</id>
    <published>2016-09-16T06:54:28.000Z</published>
    <updated>2016-11-12T10:21:23.629Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>References:</p>
<ul>
<li><a href="http://moxfive.coding.me/yelee/">Yelee 主题使用说明</a></li>
<li><a href="https://github.com/MOxFIVE/hexo-theme-yelee">Github: 简而不减 Hexo 双栏博客主题</a></li>
</ul>
</blockquote>
<p>　　<strong><a href="http://moxfive.xyz/">MOxFIVE</a></strong> 自定义的 <strong>Yelee</strong> 这个主题真的很好用，迁移之后我的几个体会是:<br>　　　a). 动态效果很酷炫，整个界面给人的感觉就很满意<br>　　　b). 添加多说评论栏是如此的简单<br>　　　c). 自带的站点、页面访问量统计，很不错<br>　　　d). 整个源码的框架似乎更合理了，你可以自己浏览一下源码，感同身受吧？</p>
<p>　　下面是本人将自己的博客主题迁移到 <strong>Yelee</strong> 的过程以及其中做的一些自定义适配。<br><a id="more"></a></p>
<h2 id="How-to-install-easy"><a href="#How-to-install-easy" class="headerlink" title="How to install? easy!"></a>How to install? easy!</h2><p>　　Follow <strong><a href="http://moxfive.xyz/">MOxFIVE</a></strong> 的 <a href="https://github.com/MOxFIVE/hexo-theme-yelee"><strong>Yelee</strong> Github 主页</a> 即可。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Installation</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</div><div class="line"> </div><div class="line"><span class="comment"># Change theme field in Hexo root's _config.yml file.</span></div><div class="line">theme: yelee</div></pre></td></tr></table></figure></p>
<h2 id="自定义头像"><a href="#自定义头像" class="headerlink" title="自定义头像"></a>自定义头像</h2><p>　　站点左上角的头像取自 <strong>yelee/source/img/avatar.png</strong>，其配置项在主题对应的 <strong>_config.yml</strong> 配置文件中的 <strong>Basic Setup</strong> 部分。两种方式，将原先的 <strong>avatar.png</strong> 做个备份，然后将自定义的头像存放到 <strong>yelee/source/img/</strong> 下，并命名为 <strong>avatar.png</strong>；修改配置文件中的 <strong>avatar:</strong> 项，自定义图片路径和名称，个人建议图片最好还是存放到 <strong>yelee/source/img/</strong> 下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Link to your avatar | 填写头像地址 &lt;theme-name&gt;/source/img</div><div class="line">avatar: /img/avatar.png</div></pre></td></tr></table></figure></p>
<h2 id="自定义站点小图标"><a href="#自定义站点小图标" class="headerlink" title="自定义站点小图标"></a>自定义站点小图标</h2><p>　　网址前面的图标，跟自定义头像相似。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Small icon of Your site | 站点小图标地址 &lt;theme-name&gt;/source/img</div><div class="line">favicon: /img/favicon.ico</div></pre></td></tr></table></figure></p>
<h2 id="自定义菜单栏"><a href="#自定义菜单栏" class="headerlink" title="自定义菜单栏"></a>自定义菜单栏</h2><blockquote>
<p>自定义menu<br>　自定义站点侧边栏中间的菜单项<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># &gt;&gt;&gt; Basic Setup | 基础设置 &lt;&lt;&lt;</div><div class="line"> </div><div class="line"># Header | 主菜单</div><div class="line">## About Page: `hexo <span class="keyword">new</span> page about`</div><div class="line">## Tags Cloud Page: `hexo <span class="keyword">new</span> page tags`</div><div class="line"># Header</div><div class="line">menu: </div><div class="line">  Home: /</div><div class="line">  All-lists: /archives</div><div class="line">  Contact: /Shengjie</div><div class="line">  About: /about</div></pre></td></tr></table></figure></p>
</blockquote>
<p>　</p>
<blockquote>
<p>自定义subnav<br>　自定义菜单项下方的图标导航栏，这里是想添加 <strong>开源中国</strong> 的一个图标快捷方式，相关代码在 <strong>…/source/css/_partial/customise/social-icon.styl</strong> 中。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">img-logo = "新浪微博" #ecc260 80,</div><div class="line">            "知乎" #0078d8 90,</div><div class="line">            "豆瓣" #06c611 88,</div><div class="line">            # add "OSChina"</div><div class="line">            "OSChina" white 88,</div><div class="line">            V2EX #e4cdb4 78,</div><div class="line">            TiddlyWiki #6283dd 82,</div><div class="line">            "简书" #e99888 82,</div><div class="line">            SegmentFault #018f56 80,</div><div class="line">            "网易云音乐" #e51e02 80,</div><div class="line">            "虾米音乐" #ff6a00 82,</div><div class="line">            CSDN red 82,</div><div class="line">            "博客园" #217ed4 95,</div><div class="line">            Plunker black 90,</div><div class="line">            LOFTER #316061 75,</div><div class="line">            Coding white 88,</div><div class="line">            bilibili #f589a0 100,</div><div class="line">            AcFun #fbc054 90,</div><div class="line">            niconico white 70,</div><div class="line">            Quora #b92b27 103</div><div class="line"> </div><div class="line">for i in img-logo</div><div class="line">    .&#123;i[0]&#125;</div><div class="line">        background url(root-url + '/img/' + i[0] + '.png') center no-repeat i[1]</div><div class="line">        background-size i[2] + "%"</div><div class="line">.GitHub</div><div class="line">    background url(//cdn.bootcss.com/logos/0.2.0/github-octocat.svg) no-repeat white</div><div class="line">    background-size 90%</div><div class="line">    background-position 50% 100%</div></pre></td></tr></table></figure></p>
</blockquote>
<p>　　添加 <strong>“OSChina” white 88,</strong> 一项，从下面的语句我们也可以看出，”OSChina”、white、88 分别对应于 i[0]、i[1]、i[2]，也就是图片名称、背景色、图片大小。所以需要将 <strong>OSChina</strong> 对应项的图片，即开源中国的Logo存放到 <strong>yelee/source/img/</strong> 下，并命名为 <strong>OSChina.png</strong>。<br>　　可以看出，<strong>Github</strong> 是独立开来的。此外，通过 <strong>.</strong> 操作符我们可以看出，这些都是 <strong>css</strong> 中定义的 <strong>类选择器</strong>。<br>　　完成这些之后，你就可以在主题配置文件中启动该图标导航栏。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Social info. Bar | 社交信息展示</div><div class="line">## Keep <span class="string">"mailto:"</span> in Email | 设置 Email 时保留 <span class="string">"mailto:"</span></div><div class="line">## Encrypt email 加密邮件地址 http:<span class="comment">//ctrlq.org/encode/</span></div><div class="line">## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件</div><div class="line">#<span class="meta"># https:<span class="comment">//github.com/hexojs/hexo-generator-feed</span></span></div><div class="line"> </div><div class="line">subnav:</div><div class="line">  新浪微博: <span class="string">"http://weibo.com/u/2911566017?refer_flag=1001030201_"</span></div><div class="line">  GitHub: <span class="string">"https://github.com/Durant35"</span></div><div class="line">  <span class="meta"># self-defined OSChina</span></div><div class="line">  OSChina: <span class="string">"https://my.oschina.net/love7zx/"</span></div></pre></td></tr></table></figure></p>
<h2 id="添加多说评论栏"><a href="#添加多说评论栏" class="headerlink" title="添加多说评论栏"></a>添加多说评论栏</h2><p>　　<strong>Yelee</strong> 添加多说评论栏是我遇到的自适配最简单的一个主题。此处默认你已经有多说账号了，没有的话，请到<a href="http://duoshuo.com/">多说官网</a>注册。添加多说评论栏只需要修改主题配置文件 <strong>Conments 评论系统</strong> 中的 <strong>duoshuo:</strong> 选项即可，<strong>&lt;your-duoshuo-shortname&gt;</strong> 既是多说后台管理的 id 名。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="section"># &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;</span></div><div class="line"><span class="section"># Chose ONE as your comment system and keep others disable.</span></div><div class="line"><span class="section"># 选一个作为网站评论系统，其他保持禁用。</span></div><div class="line"> </div><div class="line">preload_comment: true</div><div class="line"><span class="section">## false: 当点击评论条等区域时再加载评论模块</span></div><div class="line"><span class="section">## false: load comment's section until u click/hover on the bar/icon</span></div><div class="line"> </div><div class="line">show_count: true</div><div class="line"><span class="section">## 是否在主页文章标题旁显示评论数（多说、Disqus）</span></div><div class="line"><span class="section">## Add comment count after article title</span></div><div class="line"> </div><div class="line">disqus: </div><div class="line">  #on: true</div><div class="line">  shortname: </div><div class="line">  # https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-</div><div class="line">  # It is unnecessary to enable disqus here if </div><div class="line">  # you have set "disqus<span class="emphasis">_shortname" in your site's "_</span>config.yml" </div><div class="line"> </div><div class="line">duoshuo: </div><div class="line">  on: true</div><div class="line">  domain: <span class="xml"><span class="tag">&lt;<span class="name">your-duoshuo-shortname</span>&gt;</span></span></div><div class="line">  # 是否开启多说评论，http://duoshuo.com/create-site/</div><div class="line">  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分</div><div class="line">  # http://<span class="xml"><span class="tag">&lt;<span class="name">要填的部分</span>&gt;</span></span>.duoshuo.com (domain只填上<span class="xml"><span class="tag">&lt;&gt;</span></span>里的内容，不要填整个网址)</div></pre></td></tr></table></figure></p>
<h2 id="从繁体中文到简体中文"><a href="#从繁体中文到简体中文" class="headerlink" title="从繁体中文到简体中文"></a>从繁体中文到简体中文</h2><p>　　默认应该是繁体中文，你可以在站点配置文件(不是主题配置文件！！)中设置，站点配置位于 <strong>hexo</strong> 根目录下。对应的 <strong>language:</strong> 选项位于 <strong>…/yelee/languages/</strong> 下，都是一些 <strong>.yml</strong> 文件。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#language: zh-CN</span></div><div class="line"># Specifical language <span class="keyword">for</span> theme Yelee</div><div class="line">language: zh-Hans</div></pre></td></tr></table></figure></p>
<h2 id="自带统计特性"><a href="#自带统计特性" class="headerlink" title="自带统计特性"></a>自带统计特性</h2><blockquote>
<p>站点访问量统计<br>页面访问量统计</p>
</blockquote>
<h2 id="自定义阅读全文按钮显示内容"><a href="#自定义阅读全文按钮显示内容" class="headerlink" title="自定义阅读全文按钮显示内容"></a>自定义阅读全文按钮显示内容</h2><p>　　<strong>…/yelee/languages/&lt;your-language&gt;.yml</strong>，<strong>…/yelee/languages/</strong> 下是一些语言包对应的 <strong>.yml</strong> 文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># zh-Hans: Chinese (Simplified) 大陆简体</span></div><div class="line">index:</div><div class="line">  menu: 菜单</div><div class="line">  tags: 标签</div><div class="line">  friends: 友情链接</div><div class="line">  about: 关于我</div><div class="line">  more: more</div><div class="line">  copy: 复制</div></pre></td></tr></table></figure></p>
<h2 id="自定义分享栏"><a href="#自定义分享栏" class="headerlink" title="自定义分享栏"></a>自定义分享栏</h2><p>　　默认主题中每篇文章下方都自带分享栏，包括常见的分享到微博、QQ等，相关代码位于 <strong>…/layout/_partial/post/share.ejs</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"share"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.share.baidu</span>) &#123; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bdsharebuttonbox"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</div><div class="line">            &lt;a href="#" class="fa fa-twitter bds_twi" data-cmd="twi" title="分享到推特"&gt;&lt;/a&gt;</div><div class="line">        --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-weibo bds_tsina"</span> <span class="attr">data-cmd</span>=<span class="string">"tsina"</span> <span class="attr">title</span>=<span class="string">"分享到新浪微博"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-qq bds_sqq"</span> <span class="attr">data-cmd</span>=<span class="string">"sqq"</span> <span class="attr">title</span>=<span class="string">"分享给 QQ 好友"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-weixin bds_weixin"</span> <span class="attr">data-cmd</span>=<span class="string">"weixin"</span> <span class="attr">title</span>=<span class="string">"生成文章二维码"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-files-o bds_copy"</span> <span class="attr">data-cmd</span>=<span class="string">"copy"</span> <span class="attr">title</span>=<span class="string">"复制网址"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</div><div class="line">            &lt;a href="#" class="fa fa fa-envelope-o bds_mail" data-cmd="mail" title="通过邮件分享"&gt;&lt;/a&gt;</div><div class="line">        --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-share-alt bds_more"</span> <span class="attr">data-cmd</span>=<span class="string">"more"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="自定义版权信息"><a href="#自定义版权信息" class="headerlink" title="自定义版权信息"></a>自定义版权信息</h2><blockquote>
<p>References</p>
<ul>
<li><a href="http://moxfive.xyz/2016/01/10/hexo-post-version-control/">关联 GitHub, 让 Hexo 支持查看文章更新历史</a></li>
</ul>
</blockquote>
<p>　　默认主题每篇文章末尾都会有版权信息，相关代码在 <strong>…/yelee/layout/_partial/post/nav.ejs</strong>。<br>　　　a. 去除最末尾的许可协议说明<br>　　　b. 将文章作者信息与 <strong>.md</strong> 博文源文件关联<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"copyright"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.title</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- modify author information</div><div class="line">    &lt;p&gt;&lt;span&gt;&lt;%= __('copyright_info.author') %&gt;:...</div><div class="line">    --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.author</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=post.author%</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.date</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.date.format</span>("<span class="attr">YYYY-MM-DD</span>, <span class="attr">HH:mm:ss</span>") %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.updated</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.updated.format</span>("<span class="attr">YYYY-MM-DD</span>, <span class="attr">HH:mm:ss</span>") %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>...</div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.copy-path'</span>); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- not to show license information</div><div class="line">    &lt;p&gt;</div><div class="line">        &lt;span&gt;...</div><div class="line">    &lt;/p&gt;</div><div class="line">    --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>post.author</strong> 指代每篇 <strong>.md</strong> 文章开头的参数声明。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: hexo博客主题Yelee迁移笔记</div><div class="line">date: 2016-09-16 14:54:28</div><div class="line">categories: </div><div class="line"><span class="bullet">- </span>技术留档</div><div class="line"><span class="bullet">- </span>Hexo</div><div class="line">tags: Hexo</div><div class="line"><span class="section">author: &lt;author-name&gt;</div><div class="line">---</span></div></pre></td></tr></table></figure></p>
<h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类&amp;标签"></a>分类&amp;标签</h2><blockquote>
<p>References</p>
<ul>
<li><a href="http://moxfive.xyz/2015/10/25/hexo-tag-cloud/">《让 Hexo 自动生成 Tag Cloud 标签云页面》</a></li>
</ul>
</blockquote>
<p>　效果: <a href="http://durant35.github.io/tags">http://durant35.github.io/tags</a><br>　　1. 使用 Hexo 命令新建一个名为 tags 的页面<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure></p>
<p>　　2. 修改该页面 <strong><your-hexo-ws>/source/tags/index.md</strong><br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: 分类&amp;标签</div><div class="line"><span class="section">date: 2016-09-17 15:43:55</div><div class="line">---</span></div></pre></td></tr></table></figure></p>
<p>　　3. 分类&amp;标签页面相关的代码有 <strong>…/yelee/layout/_partial/page.ejs</strong>，通过 <strong>partial()</strong> 函数引入 <strong>…/yelee/layout/_partial/tag-cloud-page.ejs</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!-- 匹配页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.path</span> === <span class="string">"tags/index.html"</span>)&#123; %&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Tag Cloud Page --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">tag-cloud-page</span>') %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　 <strong>tag-cloud-page.ejs</strong> 代码如下，主要改变是根据需求调整分类的层数。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 显示分类 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_categories</span>(&#123;<span class="attr">depth:</span> <span class="attr">0</span>&#125;) %&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 显示标签 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tags"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">tagcloud</span>(&#123;</div><div class="line">        <span class="attr">min_font:</span> <span class="attr">16</span>, </div><div class="line">        <span class="attr">max_font:</span> <span class="attr">35</span>, </div><div class="line">        <span class="attr">amount:</span> <span class="attr">999</span>, </div><div class="line">        <span class="attr">color:</span> <span class="attr">true</span>, </div><div class="line">        <span class="attr">start_color:</span> '<span class="attr">gray</span>', </div><div class="line">        <span class="attr">end_color:</span> '<span class="attr">black</span>',</div><div class="line">    &#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></div><div class="line">    .category-list li&#123;</div><div class="line">        display: inline-block;</div><div class="line">        margin: 0 1em .5em 0;</div><div class="line">        padding: 4px;</div><div class="line">        border: 1px solid lightgray;</div><div class="line">        font-size: 1.2rem;</div><div class="line">    &#125;</div><div class="line">    .category-list a &#123; color: gray; &#125;</div><div class="line">    .category-list-item:hover a &#123;</div><div class="line">        color: gray;</div><div class="line">        text-decoration: none;</div><div class="line">    &#125;</div><div class="line">    .category-list-count &#123;</div><div class="line">        margin-left: 2px;</div><div class="line">        font-size: .9rem;</div><div class="line">    &#125;</div><div class="line">    .article-entry ul li:before&#123; display: none; &#125;</div><div class="line">    .article-inner &#123; text-align: center; &#125;</div><div class="line">    .tags &#123;</div><div class="line">        max-width: 42em;</div><div class="line">        margin: 2em auto;</div><div class="line">        margin-top: 0em;</div><div class="line">    &#125;</div><div class="line">    .tags a &#123;</div><div class="line">        margin-right: 1em;</div><div class="line">        line-height: 65px;</div><div class="line">        border-bottom: 1px solid gray;</div><div class="line">        white-space: nowrap;</div><div class="line">        transition: border-bottom .5s;</div><div class="line">    &#125;</div><div class="line">    .tags a:hover &#123;</div><div class="line">        border-bottom: 3px dotted gray;</div><div class="line">        text-decoration: none;</div><div class="line">    &#125;</div><div class="line">    #count &gt; span &#123;</div><div class="line">        margin: auto .2em;</div><div class="line">        font-weight: bold;</div><div class="line">    &#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Count tags and categories --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line">    $(<span class="string">'#count'</span>).appendTo(<span class="string">'.count'</span>);</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>list_categories()</strong> 和 <strong>tagcloud()</strong> 均为 <strong>hexo</strong> 的 API，可以参考这里 <a href="https://hexo.io/zh-cn/docs/helpers.html">API|hexo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://moxfive.coding.me/yelee/&quot;&gt;Yelee 主题使用说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MOxFIVE/hexo-theme-yelee&quot;&gt;Github: 简而不减 Hexo 双栏博客主题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　&lt;strong&gt;&lt;a href=&quot;http://moxfive.xyz/&quot;&gt;MOxFIVE&lt;/a&gt;&lt;/strong&gt; 自定义的 &lt;strong&gt;Yelee&lt;/strong&gt; 这个主题真的很好用，迁移之后我的几个体会是:&lt;br&gt;　　　a). 动态效果很酷炫，整个界面给人的感觉就很满意&lt;br&gt;　　　b). 添加多说评论栏是如此的简单&lt;br&gt;　　　c). 自带的站点、页面访问量统计，很不错&lt;br&gt;　　　d). 整个源码的框架似乎更合理了，你可以自己浏览一下源码，感同身受吧？&lt;/p&gt;
&lt;p&gt;　　下面是本人将自己的博客主题迁移到 &lt;strong&gt;Yelee&lt;/strong&gt; 的过程以及其中做的一些自定义适配。&lt;br&gt;
    
    </summary>
    
      <category term="技术留档" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/"/>
    
      <category term="Hexo" scheme="http://durant35.github.io/categories/%E6%8A%80%E6%9C%AF%E7%95%99%E6%A1%A3/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://durant35.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
