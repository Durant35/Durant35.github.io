<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[ldconfig：[load]运行时库管理]]></title>
      <url>/2017/08/08/linux_ldconfig4RuntimeLibraries/</url>
      <content type="html"><![CDATA[<p>　　<code>ldconfig</code>命令的用途主要是在默认搜寻目录 <strong>/lib</strong> 和 <strong>/usr/lib</strong> 以及动态库配置文件 <strong>/etc/ld.so.conf</strong> 内所列的目录下，搜索出可共享的动态链接库（格式如 <strong>lib*.so*</strong>），进而创建出动态装入程序（<strong>ld.so</strong>）所需的连接（快捷方式）和缓存文件。<br>　　缓存文件默认为 <strong>/etc/ld.so.cache</strong>，此文件保存已排好序的动态链接库名字列表，为了让动态链接库为系统所共享，需运行动态链接库的管理命令<code>ldconfig</code>，此执行程序存放在 <strong>/sbin</strong> 目录下。<br>　　<code>ldconfig</code>通常在系统启动时运行；用户安装了一个新的动态链接库时，就需要手工运行这个命令才能生效。<br>　　<code>ldconfig</code> 只与程序运行时有关（运行时库管理：装载），跟程序构建（编译&amp;链接）一点关系都没有，构建的时候还是该加 -$l$（链接）就得加，不要混淆了。<a id="more"></a></p>
<h3 id="ldconfig-命令"><a href="#ldconfig-命令" class="headerlink" title="ldconfig 命令"></a>ldconfig 命令</h3><ul>
<li>更新动态链接库缓存文件</li>
<li> <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ldconfig 将显示正在扫描的目录及搜索到的动态链接库，还有它所创建的连接的名字。</span></div><div class="line">ldconfig -v</div><div class="line">ldconfig -verbose</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>获取 <strong>/etc/ld.so.cache</strong> 缓存文件动态链接库列表</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 此选项指示 ldconfig 打印出当前缓存文件所保存的所有共享库的名字</span></div><div class="line">ldconfig -p</div><div class="line">ldconfig --print-cache</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>其他选项</li>
<li>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">-n：</div><div class="line">  用此选项时,ldconfig仅扫描命令行指定的目录</div><div class="line">  不扫描默认目录（/lib、/usr/lib），也不扫描配置文件/etc/ld.so.conf 所列的目录</div><div class="line">-N：</div><div class="line">  此选项指示ldconfig不重建缓存文件（/etc/ld.so.cache）</div><div class="line">  若未用-X选项，ldconfig照常更新文件的连接</div><div class="line">-X：</div><div class="line">  此选项指示ldconfig不更新文件的连接</div><div class="line">  若未用-N选项，则缓存文件正常更新</div><div class="line">-f CONF：</div><div class="line">  此选项指定动态链接库的配置文件为CONF，系统默认为 /etc/ld.so.conf</div><div class="line">-C CACHE：</div><div class="line">  此选项指定生成的缓存文件为CACHE，系统默认的是 /etc/ld.so.cache</div><div class="line">  /etc/ld.so.cache 文件存放已排好序的可共享的动态链接库的列表</div><div class="line">-r ROOT：</div><div class="line">  此选项改变应用程序的根目录为 ROOT（是调用chroot函数实现的）；</div><div class="line">  选择此项时，系统默认的配置文件/etc/ld.so.conf，实际对应的为ROOT/etc/ld.so.conf；</div><div class="line">  用此选项，可以大大增加动态链接库管理的灵活性</div><div class="line">-l：</div><div class="line">  通常情况下，ldconfig搜索动态链接库时将自动建立动态链接库的连接，</div><div class="line">  选择此项时，将进入专家模式，需要手工设置连接，一般用户不用此项</div><div class="line">-c FORMAT 或 --format=FORMAT：</div><div class="line">  此选项用于指定缓存文件所使用的格式</div><div class="line">  共有三种：old(老格式)，new(新格式)和compat（兼容格式，此为默认格式）</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="几个需要注意的地方"><a href="#几个需要注意的地方" class="headerlink" title="几个需要注意的地方"></a><font color="red">几个需要注意的地方</font></h3><ul>
<li>往<strong>/lib</strong> 和 <strong>/usr/lib</strong> 里面加东西，是不用修改 <strong>/etc/ld.so.conf</strong> 的，但是完了之后要调一下 <code>ldconfig</code>，不然这个库会找不到。</li>
<li>往<strong>/lib</strong> 和 <strong>/usr/lib</strong> 两个目录以外放 lib 的时候，一定要修改 <strong>/etc/ld.so.conf</strong>，然后再调用 <code>ldconfig</code>，不然也会找不到。<blockquote>
<p>　例如：安装了一个 mysql 到 <strong>/usr/local/mysql</strong>，mysql 有一大堆 library 在 <strong>/usr/local/mysql/lib</strong> 下面，这时就需要在 <strong>/etc/ld.so.conf</strong>文件末尾追加一行 <strong>/usr/local/mysql/lib</strong>，保存过后 <code>ldconfig</code> 一下，新的 library 才能在程序运行时被找到</p>
</blockquote>
</li>
<li>往<strong>/lib</strong> 和 <strong>/usr/lib</strong> 这两个目录以外放 lib，但是又不想在 <strong>/etc/ld.so.conf</strong> 中加东西（或者是没有权限加东西），可以通过 <strong>export</strong> 一个全局变量 <code>LD_LIBRARY_PATH</code>，然后运行程序的时候就会去这个目录中找 library；一般来讲这只是一种临时的解决方案，在没有权限或临时需要的时候使用。</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="http://man.linuxde.net/ldconfig">ldconfig命令</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> bash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[0025] Least Squares Line Fitting（最小二乘法直线拟合）]]></title>
      <url>/2017/07/21/Algorithms_LeastSquaresLineFitting/</url>
      <content type="html"><![CDATA[<p>　　<strong>最小二乘拟合</strong> 是一种数学上的近似和优化，利用已知的数据得出一条直线或者曲线，使之在坐标系上与已知数据之间的距离的平方和最小。<br><a id="more"></a></p>
<h3 id="最小二乘直线拟合"><a href="#最小二乘直线拟合" class="headerlink" title="最小二乘直线拟合"></a>最小二乘直线拟合</h3><ul>
<li><strong>TLS(Total Least Squares)</strong> vs <strong>OLS(Ordinary Least Squares)</strong><br><center><img src="/img/Algorithms/0025_TLSvsOLS.png" width="680px" alt=""/></center><ul>
<li>如上图，<strong>TLS</strong> 和 <strong>OLS</strong> 都是最小二乘拟合，只是在偏差评估上采取了不同的方式。</li>
<li>最小二乘法是一种较为简单的回归分析方法。<blockquote>
<p>The simplest example of a <strong>regression model</strong> is a straight line that passes through a set of points on a scatter plot.</p>
<ul>
<li>Regression involves fitting a mathematical model to data. </li>
<li>Regression involves estimating the mathematical relationship between one variable called the response variable (or dependent variable), and one or more explanatory variables (or independent variables)</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li>最常用的是 <strong>OLS</strong>（Ordinary  Least Square，普通最小二乘法）：所选择的回归模型应该使所有观察值的残差平方和达到最小（如上图左）。<br><center><img src="/img/Algorithms/0025_OLS.png" width="640px" alt=""/></center><ul>
<li>直接通过矩阵运算，容易得出：$B = (X^T X)^{-1}(X^T Y)$（拟合多项式：$y = b_0 + b_1 x + b_2 x^2 + … + b_k x^k$）</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Gary: O-Least-Square最小二乘拟合</span></div><div class="line">Segment::LocalLine Segment::fitLocalLine(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">list</span>&lt;Bin::MinZPoint&gt; &amp;points) &#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n_points = points.size();</div><div class="line">  <span class="comment">// 构造 X/Y 矩阵</span></div><div class="line">  Eigen::<span class="function">MatrixXd <span class="title">X</span><span class="params">(n_points, <span class="number">2</span>)</span></span>;</div><div class="line">  Eigen::<span class="function">VectorXd <span class="title">Y</span><span class="params">(n_points)</span></span>;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> iter = points.begin(); iter != points.end(); ++iter) &#123;</div><div class="line">    X(counter, <span class="number">0</span>) = iter-&gt;d;</div><div class="line">    X(counter, <span class="number">1</span>) = <span class="number">1</span>;</div><div class="line">    Y(counter) = iter-&gt;z;</div><div class="line">    ++counter;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 计算 B</span></div><div class="line">  <span class="keyword">const</span> Eigen::MatrixXd X_t = X.transpose();</div><div class="line">  <span class="keyword">const</span> Eigen::VectorXd result = (X_t * X).inverse() * X_t * Y;</div><div class="line">  LocalLine line_result;</div><div class="line">  line_result.first = result(<span class="number">0</span>);</div><div class="line">  line_result.second = result(<span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> line_result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Eigen</strong> 是C++中可以用来调用并进行矩阵计算的一个库，里面封装了一些类。</p>
<center><img src="/img/Algorithms/0025_Eigen.jpg" width="540px" alt=""/></center>

</blockquote>
<ul>
<li>通过解 $XB = Y$ 我们就能解出 $B = [m \space b]$：$$m = \frac{\sum x_i^2 \sum y_i - \sum x_i (\sum x_i y_i)}{n \sum x_i^2 - (\sum x_i)^2}$$ $$b = \frac{n \sum x_i \sum y_i - \sum x_i (\sum x_i y_i)}{n \sum x_i^2 - (\sum x_i)^2}$$</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">OrdinaryLeastSquare(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&amp; x, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&amp; y) &#123;</div><div class="line">        <span class="keyword">double</span> t1=<span class="number">0</span>, t2=<span class="number">0</span>, t3=<span class="number">0</span>, t4=<span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;x.size(); ++i)  &#123; </div><div class="line">            t1 += x[i]*x[i];  </div><div class="line">            t2 += x[i];  </div><div class="line">            t3 += x[i]*y[i];  </div><div class="line">            t4 += y[i];  </div><div class="line">        &#125;</div><div class="line">        m = (t3*x.size() - t2*t4) / (t1*x.size() - t2*t2);</div><div class="line">        b = (t1*t4 - t2*t3) / (t1*x.size() - t2*t2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>OLS 这种 least square 存在问题，比如针对垂直线段就不行，于是引入第二种 <strong>Total Least Square</strong>。<br><center><img src="/img/Algorithms/0025_TLS(1).png" width="680px" alt=""/></center><br><center><img src="/img/Algorithms/0025_TLS(2).png" width="540px" alt=""/></center><ul>
<li>其中，$U = \begin{bmatrix} x_1 - \overline{x} &amp; y_1 - \overline{y} \\ \vdots &amp; \vdots \\ x_n - \overline{x} &amp; y_n - \overline{y} \end{bmatrix}$；</li>
<li>$\frac{dE}{dN} = \frac{d(N^T U^T U N)}{dN} = U^T U N + N^T U^T U$，因为 $U^T U$ 是一个对称矩阵（$U^T U = (U^T U)^T$），$U^T U N = N^T U^T U$，所以 $\frac{dE}{dN} = 2(U^T U)N$；</li>
<li>此外，$U^T U = \begin{bmatrix} \sum (x_i - \overline{x})^2 &amp; \sum (x_i - \overline{x})(y_i - \overline{y}) \\ \sum (x_i - \overline{x})(y_i - \overline{y}) &amp; \sum (y_i - \overline{y})^2 \end{bmatrix}$ 是关于 X、Y 的一个二阶矩（随机变量平方的期望）矩阵（second-moment matrix）；</li>
<li>二阶矩矩阵 $U^T U$ 的最小特征值对应的特征向量即为求解的 $N = [a \space b]$ <ul>
<li>特征值 &amp; 特征向量<blockquote>
<p>设 $A$ 为 n 阶矩阵<font color="blue">（n × n）</font>，若存在<strong>常数 $λ$</strong> 及 <strong>n 维非零向量 x</strong><font color="blue">（n × 1）</font>，使得 $Ax=λx$，则称 $λ$ 是矩阵 $A$ 的 <strong>特征值</strong>，$x$ 是 $A$ 属于特征值 $λ$ 的 <strong>特征向量</strong>。</p>
</blockquote>
</li>
<li>$eig(U^T U) = [V, D]$，$V$ 是特征向量阵（每列为一个特征向量），$D$ 特征值对角阵 $\Longrightarrow$ 寻找 $D$ 中特征值最小的对角元素对应的特征向量即为 $U^T U$ 最小特征值对应的特征向量<blockquote>
<p>特征值分解：$U^T U = V D V^{-1}$</p>
</blockquote>
</li>
<li>通过 <a href="https://durant35.github.io/2017/07/21/Algorithms_ICP/#求点集间变换矩阵-overrightarrow-q-k">SVD（奇异值）求解</a><ul>
<li>$SVD(A) = [U, S, V]$，即 $A = USV^T$<blockquote>
<p>﹢其中 $U$ 是一个<code>m*m</code>的<font color="green">正交阵（Orthogonal matrix：满足 $U U^T = I$ 或者 $U^T U = I$ 的 n 阶方阵，其中 $I$ 为 n 阶单位阵）</font>，$S$ 是一个<code>m*n</code>的<font color="green">对角阵（Diagonal matrix：主对角线之外的元素皆为 0 的矩阵，对角线上的元素可以为 0 或其他值）</font>，对角线上的元素为 $A$ 的<strong>奇异值（Singular value）</strong>，$V$ 是一个<code>n*n</code>的正交阵。$U$ 的 m 个列向量为 $A$ 的<strong>左奇异向量（Left singular vector）</strong>，$V$ 的 n 个列向量为 $A$ 的<strong>右奇异向量（Right singular vector）</strong>。$S$ 完全由 $A$ 决定和 $U$、$V$ 无关；<br>﹢$A$ 的左奇异向量（$U$）是 $A A^T$ 的特征向量；$A$ 的右奇异向量是 $A^T A$ 的特征向量。<br>﹢$A$ 的非零奇异值是 $A^T A$ 特征值的平方根，同时也是 $A A^T$ 特征值的平方根。</p>
</blockquote>
</li>
<li>寻找 $S$ 中最小奇异值对应的 $V$ 的右奇异向量即为 $A^T A$ 最小特征值对应的特征向量。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Dense&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Eigen/Eigenvalues&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Eigen;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Eigenvalue</span></div><div class="line">    <span class="comment">// typedef Matrix&lt;int, 3, 3&gt; Matrix3d</span></div><div class="line">    Matrix3d A;</div><div class="line">    A &lt;&lt; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Here is a 3x3 matrix, A:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; A &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    EigenSolver&lt;Matrix3d&gt; es(A.transpose() * A);</div><div class="line">    <span class="comment">// 对角矩阵，每一个对角线元素就是一个特征值，里面的特征值是由大到小排列的</span></div><div class="line">    Matrix3d D = es.pseudoEigenvalueMatrix();</div><div class="line">    <span class="comment">// 特征向量（每一列）组成的矩阵</span></div><div class="line">    Matrix3d V = es.pseudoEigenvectors();</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The eigenvalue matrix D is:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; D &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The eigenvector matrix V is:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; V &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="comment">// 特征值分解</span></div><div class="line">    <span class="comment">// cout &lt;&lt; "Finally, V * D * V^(-1) = " &lt;&lt; endl &lt;&lt; V * D * V.inverse() &lt;&lt; endl;</span></div><div class="line">    <span class="comment">// 特征值&amp;特征向量</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"min-eigenvector &amp; min-eigenvalue"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" &lt;1&gt; The min-eigenvalue for A^T*A:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; D(D.rows()<span class="number">-1</span>, D.rows()<span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" &lt;2&gt; The min-eigenvector for A^T*A:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; V.col(V.cols()<span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" &lt;3&gt; (A^T*A)*min-eigenvector ="</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; (A.transpose()*A) * V.col(V.cols()<span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" &lt;4&gt; min-eigenvalue*min-eigenvector ="</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; D(D.rows()<span class="number">-1</span>, D.rows()<span class="number">-1</span>)*V.col(V.cols()<span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">    <span class="comment">// SVD</span></div><div class="line">    <span class="comment">// Eigen::ComputeThinV | Eigen::ComputeThinU</span></div><div class="line">    Eigen::JacobiSVD&lt;Eigen::Matrix3d&gt; svd(A, Eigen::ComputeFullV | Eigen::ComputeFullU);</div><div class="line">    Eigen::Matrix3d S = svd.singularValues().asDiagonal();</div><div class="line">    <span class="comment">//得到最小奇异值的位置</span></div><div class="line">    Matrix3d::Index minColIdx;</div><div class="line">    svd.singularValues().rowwise().sum().minCoeff(&amp;minColIdx);</div><div class="line"> </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The left singular vectors U is:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; svd.matrixU() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The singular-value matrix S is:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; S &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The right singular vectors V is:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; svd.matrixV() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The SVD: USV^T ="</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; svd.matrixU()*S*svd.matrixV().transpose() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">    <span class="comment">// 奇异值与特征值的关系</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The S^2 is:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; S*S &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The min-eigenvector for A^T*A:"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; svd.matrixV().col(minColIdx) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>$d = a \overline{x} + b \overline{y}$；</li>
<li>最终得到的拟合直线：<font color="blue">$y = -\frac{a}{b} x + \frac{d}{b}$</font></li>
</ul>
</li>
</ul>
<h3 id="其他直线拟合方法"><a href="#其他直线拟合方法" class="headerlink" title="其他直线拟合方法"></a>其他直线拟合方法</h3><p><font color="blue" size="4">﹢基于 <strong>RANSAC(RANdom SAmple Consensus)</strong>（随机抽样一致） 的直线拟合</font></p>
<blockquote>
<p><a href="http://www.cnblogs.com/xrwang/archive/2011/03/09/ransac-1.html">王先荣：随机抽样一致性算法（RANSAC）</a></p>
</blockquote>
<ul>
<li>示例<br><center><img src="/img/Algorithms/0025_RANSAC_example.png" width="640px" alt=""/></center><br>　（１）从一组观测数据中找出合适的2维拟合直线，观测数据中包含局内点和局外点，其中局内点近似的被直线所通过，而局外点远离于直线（如上图）；<br>　（２）简单的 <strong>最小二乘法</strong> 不能找到适应于局内点的直线，原因是最小二乘法尽量去适应包括局外点在内的所有点；<strong>RANSAC</strong> 能得出一个仅仅用局内点计算出模型，并且概率还足够高。</li>
<li><strong>RANSAC</strong>　通过反复选择数据中的一组随机子集来达成目标（被选取的子集被假设为局内点），并用下述方法进行验证：<ul>
<li>①：有一个模型适应于<font color="green">假设的局内点</font>，即所有的未知参数都能从假设的局内点计算得出。</li>
<li>②：用①中得到的模型去测试所有的其它数据，如果某个点适用于估计的模型，认为它也是局内点。</li>
<li>③：如果有<font color="green">足够多的点被归类为假设的局内点</font>，那么估计的模型就足够合理；用所有假设的局内点去重新估计模型，因为它仅仅被初始的假设局内点估计过，通过估计局内点与模型的错误率来评估模型。</li>
<li>④：①-③这个过程被重复执行固定的次数，每次产生的模型要么因为局内点太少而被舍弃，要么因为比现有的模型更好而被选用。</li>
</ul>
</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="http://www.statisticalconsultants.co.nz/blog/total-least-squares.html">Total Least Squares</a></li>
<li><a href="http://blog.csdn.net/abcd1992719g/article/details/28118095">abcd1992719g: OpenCV2马拉松第25圈——直线拟合与RANSAC算法</a></li>
<li><a href="http://www.cnblogs.com/xrwang/archive/2011/03/09/ransac-1.html">王先荣：随机抽样一致性算法（RANSAC）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[0024] Iterative Closest Points（迭代最近点）]]></title>
      <url>/2017/07/21/Algorithms_ICP/</url>
      <content type="html"><![CDATA[<h3 id="ICP-算法简介"><a href="#ICP-算法简介" class="headerlink" title="ICP 算法简介"></a>ICP 算法简介</h3><ul>
<li>由<strong>点云配准</strong> 说起<blockquote>
<p>　<strong>Point cloud registration</strong>, is the process of finding a spatial transformation that aligns two point clouds. The purpose is to merge point clouds of multiple views into a globally consistent model.<br>　Iterative Closest Points (ICP) is an algorithm employed to minimize the difference between two clouds of points. In the algorithm, target point cloud, is kept fixed, while the other one, the source, is transformed to best match the reference (the target). The algorithm iteratively revises the transformation (combination of translation and rotation) needed to minimize the distance from the source to the reference point cloud.<a id="more"></a></p>
</blockquote>
</li>
<li>问题描述<ul>
<li>有两个点集，source 和 target，target 不变（前一帧点云），source（当前帧）经过旋转（rotation）和平移（translation）甚至加上尺度（scale）变换，使得变换后的 source 点集尽量和 target 点集重合，这个变换的过程就叫 <strong>点云配准</strong>。<blockquote>
<p> Input：$M$，$P$<br>Output：rotation $R$，translation $T$，s.t. $min \verb|{| dist(M’, P) \verb|}|, \space M’ = R * M + T$</p>
</blockquote>
</li>
<li>ICP 是最广泛应用的配准方法，ICP 利用迭代一步步地算出正确的对应关系。</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="http://hustlwl.blog.sohu.com/69584430.html">经典的ICP算法</a></p>
</blockquote>
<ul>
<li>1992年，Paul J.Besl and Neil D.Mckay 在他们的文章<strong>《A method for Registration of 3D Shape》</strong>中提出了ICP（Iterative closest point）算法，通过迭代、寻找来不断搜索最近点，定义一个阀值（threhold）最终完成多视图的拼合。在那个年代提出这一划时代的算法，是不可思议的，其中很多思路没有一定的数学功底和站在一个相当的高度是难以实现的：<ul>
<li>将点集差异转换成协方差矩阵，然后通过奇异值 SVD 分解求最大特征向量；</li>
<li>最大特征向量对应四元数即为其欧式运动对应值，完成数据拼合。</li>
</ul>
</li>
<li>ICP Algorithm<ul>
<li>①Start from initial guess</li>
<li>②Iterate（<font color="blue">最大迭代次数</font>）<ul>
<li>2.1 For ecah point $M_i$，find closest point $P_i$</li>
<li>2.2 Find best transform for this correspondance</li>
<li>2.3 Transform M</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ul>
<li>两个点集 $M$、$P$ 中的点数不一定相同，给出两个点集的空间变换 $f$ 使它们能进行空间匹配；$f$ 是一未知函数，求解 $f$ 的这个问题使用的最多的方法是迭代最近点法（Iterative Closest Points Algorithm）。</li>
<li>ICP 基本思想是：根据某种几何特征对数据进行匹配，并设这些匹配点为 <font color="blue">假想的对应点</font>，然后根据这种对应关系求解运动参数；再利用这些运动参数对数据进行变换；利用同一几何特征，确定新的对应关系，重复上述过程。<ul>
<li>第①步：计算 $M$ 中的每一个点在 $P$ 中的对应近点</li>
<li>第②步：求得使上述对应近点对平均距离最小的刚体变换（平移矩阵+旋转矩阵）</li>
<li>第③步：对 $M$ 使用上一步求得的平移矩阵和旋转矩阵，得到新的变换点集 $M’$</li>
<li>第④步：如果新的变换点集 $M’$ 与参考点集 $P$ 满足收敛条件，则停止迭代计算；否则，变换点集 $M’$ 作为新的 $M$ 继续迭代第①～③步，直到达到收敛条件。<ul>
<li>Converges（是否收敛？）<ul>
<li>Errors decrease monotonically（偏差单调减少）</li>
<li>Converges to local minimum（陷入局部最优解）</li>
<li>Good initial guess $\Longrightarrow$ Converges to global minimum（全局最优解）</li>
</ul>
</li>
<li>收敛条件<ul>
<li><font color="blue">前一个变换矩阵和当前变换矩阵的差异小于阈值时，认为已经收敛</font></li>
<li><font color="blue">均方误差和（Mean Square Error, $\sigma = \sqrt{\frac{\sum ^n \varepsilon _i ^2}{n}}$）小于阈值</font>

</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ICP-目标函数"><a href="#ICP-目标函数" class="headerlink" title="ICP 目标函数"></a>ICP 目标函数</h3><ul>
<li>三维空间中两个 3D 点，$\overrightarrow{M_i} = (x_i, y_i, z_i)$，$\overrightarrow{P_j} = (x_j, y_j, z_j)$，它们的欧氏距离表示为：$$dist(\overrightarrow{M_i}, \space \overrightarrow{P_j}) = || \overrightarrow{M_i} - \overrightarrow{P_j} || = \sqrt{(x_i - x_j)^2 + (y_i - y_j)^2 + (z_i - z_j)^2}$$</li>
<li>定义点到点集的距离为点到点集的所有点中的最短距离，故点$\overrightarrow{M_i}$ 的对应点定义为：$$ \overrightarrow{P_i}  \space s.t. \space arg \space min_{\overrightarrow{P_i} \in P} dist(\overrightarrow{P_i}, \overrightarrow{M_i}) $$ $\quad$ 即点集 $P$ 中与点$\overrightarrow{M_i}$ 距离最短的那个点（<font color="blue">最近点</font>）。</li>
<li>三维点云匹配问题的目的是找到 $M$ 和 $P$ 变换的矩阵 $R$ 和 $T$，对于 $\overrightarrow{P_i} = R*\overrightarrow{M_i} + T + N_i, \space i=1, 2, …, N$（$N_i$ 是噪声矢量，$N_i$ 的要素均为白噪声），利用最小二乘法求解最优解，使得 $$E = \sum _{i=1} ^N ||(R\overrightarrow{M_i} + T) - \overrightarrow{P_i}||$$ $\quad$ 最小时的 $R$ 和 $T$。</li>
</ul>
<h3 id="ICP-算法实现"><a href="#ICP-算法实现" class="headerlink" title="ICP 算法实现"></a>ICP 算法实现</h3><ol>
<li>令 $\overrightarrow{m} \in M$，$\overrightarrow{p} \in P$，且 $N_m = ||M||$，$N_p = ||P||$。</li>
<li>初始化初始点集 $P_0 = P$，初始化变换向量 $\overrightarrow{q} = [1, 0, 0, 0, 0, 0]$，即旋转为 0， 且各方向位移为 0，初始化迭代次数 $k = 0$，执行以下几个步骤直到收敛：<ul>
<li>计算获取对应点集（搜索最近点）：$Y_k = C(P_k, \space M)$</li>
<li>计算配准变换向量：$(\overrightarrow{q_k}, \space d_{k}) = Q(P_0, \space Y_k)$，$d_{k} = MSE(\overrightarrow{q_k} * P, \space M)$</li>
<li>应用配准：$P_{k+1} = \overrightarrow{q_k} * P_0$</li>
<li>终止迭代过程：两次误差小于一个给定阈值 $\tau \gt 0$，使得 $d_k - d_{k-1} \lt \tau$</li>
</ul>
</li>
</ol>
<h4 id="如何搜索最近点-Y-k"><a href="#如何搜索最近点-Y-k" class="headerlink" title=" 如何搜索最近点 $Y_k$"></a><1> 如何搜索最近点 $Y_k$</h4><ul>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// original points</span></div><div class="line"><span class="built_in">vector</span>&lt;Vertex&gt; P; </div><div class="line"><span class="built_in">vector</span>&lt;Vertex&gt; M;</div><div class="line"> </div><div class="line"><span class="comment">// control points number</span></div><div class="line"><span class="keyword">int</span> contNum; </div><div class="line"> </div><div class="line"><span class="comment">// control points</span></div><div class="line">Vertex *contP; </div><div class="line">Vertex *contM;</div><div class="line"> </div><div class="line"><span class="keyword">double</span> ICP::closest() &#123;</div><div class="line">  <span class="comment">//cout&lt;&lt;"find closest points and error"&lt;&lt;endl;</span></div><div class="line">  <span class="keyword">double</span> error = <span class="number">0.0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;contNum; i++) &#123;</div><div class="line">    <span class="keyword">double</span> maxdist = <span class="number">100.0</span>;</div><div class="line">    index[i] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">0</span>; j&lt;M.size(); j++) &#123;</div><div class="line">      <span class="keyword">double</span> dist = distance(contP[i], M[j]);</div><div class="line">      <span class="keyword">if</span>(dist &lt; maxdist) &#123;</div><div class="line">        maxdist = dist;</div><div class="line">        index[i] = j;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    Vertex v = M[index[i]];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">3</span>; j++) &#123;</div><div class="line">      contM[i].coord[j] = v.coord[j];</div><div class="line">    &#125;</div><div class="line">    error += maxdist;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> error;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">double</span> ICP::distance(Vertex a,Vertex b) &#123;</div><div class="line">  <span class="keyword">double</span> dist = <span class="number">0.0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</div><div class="line">    dist += (a.coord[i]-b.coord[i])*(a.coord[i]-b.coord[i]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> dist;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>最近点对查找的一种改进方法<ul>
<li>对应点的查找是整个配准过程中耗费时间最长的步骤，可以利用 <strong>kd-tree</strong> 提高查找速度；</li>
<li><strong>kd-tree</strong> 建立点的拓扑关系是基于二叉树的坐标轴分割，构造 kd-tree 的过程就是按照二叉树法则生成。<ul>
<li>首先按 X 轴寻找分割线，即计算所有点的 x 值的平均值，以最近这个平均值的点的 x 值将空间分成两部分；</li>
<li>在分成的子空间中按 Y 轴寻找分割线（与 X 轴方法类似），将其分成两部分，分隔好的子空间再按 X 轴分割；</li>
<li>重复上述分割操作，直到分割的区域内只有一个点，这样点的拓扑关系就建立了；</li>
<li>这样的分割过程就对应于一个二叉树，二叉树的分节点就对应一条分割线，而二叉树的每个叶子节点就对应一个点。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="控制点"><a href="#控制点" class="headerlink" title=" 控制点"></a><2> 控制点</h4><blockquote>
<p>　In order to speed up registration, another common extension to the original ICP algorithm is to register only subsets of the input point clouds sampled in an initial selection step</p>
</blockquote>
<ul>
<li>在确定对应关系时，所使用的几何特征是空间中位置最近的点，这里我们甚至不需要两个点集中的所有点，可以只用从某一点集中选取出来的一部分点，一般称这些点为 <strong>控制点（Control Points）</strong>。这时，配准问题转化为：$$ E = \sum_{i=1}^{N} ||(R\overrightarrow{p_i} + T) - \overrightarrow{m_i}||$$ $\quad$ 其中，$\overrightarrow{p_i}$、$\overrightarrow{m_i}$ 为最近匹配点。</li>
</ul>
<h4 id="求点集间变换矩阵-overrightarrow-q-k"><a href="#求点集间变换矩阵-overrightarrow-q-k" class="headerlink" title=" 求点集间变换矩阵 $\overrightarrow{q_k}$"></a><3> 求点集间变换矩阵 $\overrightarrow{q_k}$</h4><ul>
<li>完整的配准变换向量 $\overrightarrow{q_k} = [\overrightarrow{q_R} | \overrightarrow{q_T}]$<ul>
<li>旋转向量 $\Longrightarrow$ 采用 <strong>四元数</strong> 表示<ul>
<li>设单位四元数 $\overrightarrow{q_R} = [q_0, q_1, q_2, q_3]^T$</li>
</ul>
</li>
<li>位移向量 $\overrightarrow{q_T} = [q_4, q_5, q_6]^T$</li>
</ul>
</li>
<li>如何求旋转向量 $\overrightarrow{q_R}$<ul>
<li>设点集 $M$ 的质心（中心，center of mass）为：$$\overrightarrow{\mu _M} = \frac{1}{N_m} \sum _{i=1} ^{N_m} \overrightarrow{M_i}$$<br>$\quad$ 点集 $P$ 的质心为：$$\overrightarrow{\mu _P} = \frac{1}{N_p} \sum _{i=1} ^{N_p} \overrightarrow{P_i}$$</li>
<li>平移和旋转分离<blockquote>
<p>　To measure the <strong>similarity</strong> of sets P and M, we can find their <strong>cross-covariance</strong> $\Longrightarrow$ This removes the translation component, leaving on the rotation to deal with.</p>
<center><img src="/img/programPearls/icp/rotation&translation_separation.png" width="640px" alt="" /></center></blockquote>
</li>
<li>设点集 $P$ 和 $M$ 的协方差矩阵（cross-covariance matrix）为：$$ \sum\nolimits _{pm} =  \frac{1}{N_p} \sum _{i=1} ^{N_m} [(\overrightarrow{P_i} - \overrightarrow{\mu _P})(\overrightarrow{M_i} - \overrightarrow{\mu _M})^T] = \frac{1}{N_p} \sum _{i=1} ^{N_m} [\overrightarrow{P_i} \cdot \overrightarrow{M_i}^T - \overrightarrow{\mu _P} \overrightarrow{\mu _M}^T]$$<br>$\quad$ 设对应的反对称矩阵（anti-symmetric matrix）为：$$A_{ij} = (\sum\nolimits _{pm} - \sum\nolimits _{pm} ^T)_{ij}$$<br>$\quad$ 取其循环部分组成列向量：$$\Delta = [A_{23},\space A_{31},\space A_{12}]^T$$</li>
<li>构造 4×4 对称矩阵（symmetric matrix）：$$Q(\sum\nolimits _{pm}) = \begin{bmatrix} tr(\sum\nolimits _{pm}) &amp; \Delta^T \\ \Delta &amp; \sum\nolimits _{pm} - \sum\nolimits _{pm}^T - tr(\sum\nolimits _{pm})I_3 \end{bmatrix}$$ $\quad$ 其中 $tr(?)$ 是指矩阵的迹，即矩阵的对角线元素之和；$I_3$ 是 3×3 的单位矩阵<blockquote>
<p>The unit eigenvector corresponding to the maximum eigenvalue of the matrix is selected as the optimal rotation.</p>
</blockquote>
</li>
<li>取$Q(\sum\nolimits _{pm})$ 最大的特征值（maximum eigenvalue）对应的单位特征向量（unit eigenvector）$\overrightarrow{q_R} = [q_0, q_1, q_2, q_3]^T$ 为最优旋转。$\Longrightarrow$<font color="blue"> 这一步如何实现呢？？？</font></li>
</ul>
</li>
<li>如何求位移向量 $\overrightarrow{q_T}$<ul>
<li>最优位移向量 $$\overrightarrow{q_T} = \overrightarrow{\mu _M} - R_{\overrightarrow{q_R}}\overrightarrow{\mu _P} $$ $\quad$ 其中，$R_{\overrightarrow{q_R}}$ 是旋转向量对应的旋转矩阵。</li>
<li>由四元数到旋转矩阵的变换来说，单位四元数 $\overrightarrow{q_R} = [q_0, q_1, q_2, q_3]^T$，其旋转矩阵可以表示为：$$R_{\overrightarrow{q_R}} = \begin{bmatrix} q_0^2+q_1^2-q_2^2-q_3^2 &amp; 2(q_1 q_2 - q_0 q_3) &amp; q_1 q_3 + q_0 q_2 \\ 2(q_1 q_2 + q_0 q_3) &amp; q_0^2+q_2^2-q_1^2-q_3^2 &amp; 2(q_2 q_3 - q_0 q_1)\\ 2(q_1 q_3 - q_0 q_2) &amp; 2(q_2 q_3 + q_0 q_1) &amp; q_0^2+q_3^2-q_1^2-q_2^2 \end{bmatrix}$$</li>
</ul>
</li>
<li><font color="blue">旋转向量 $\overrightarrow{q_R} = [q_0, q_1, q_2, q_3]^T$ 的最小二乘法求解</font><ul>
<li>在ICP 算法的出处论文《A Method for Registration of 3-D Shapes》中只给出了上述的算法流程和公式转化，关于如何通过特征值求解 $\overrightarrow{q_R}$ 并没有明确的指出。通过了解发现，常见的代码实现中通常采用 SVD（奇异值）求解有关旋转向量的最小二乘问题。</li>
<li><a href="http://blog.csdn.net/lcydhr/article/details/52413179">SVD</a><blockquote>
<p>任意矩阵 $A$（m×n），都能被奇异值分解为：$$A = U \begin{bmatrix} \sum \nolimits _r &amp; &amp; 0 \\ &amp; &amp; \vdots \\ 0 &amp; \cdots &amp; 0 \end{bmatrix} V^T$$ $\quad$ 其中，$U$ 是 m×m 的正交矩阵，$V$ 是 n×n 的正交矩阵，$\sum \nolimits _r $ 是由 $r$ 个沿对角线从大到小排列的奇异值组成的方阵，$r$ 就是矩阵 $A$ 的秩。</p>
</blockquote>
</li>
<li>求解方法一（ <a href="http://blog.csdn.net/xiaowei_cqu/article/details/8470376">小魏的修行路：[3D]迭代最近点算法 Iterative Closest Points</a>）<ul>
<li>分别将点集 $P$ 和 $M$平移至中心点处（去中心化）：$$\overrightarrow{p_i’} = \overrightarrow{p_i} - \overrightarrow{\mu _P}$$ $$ \overrightarrow{m_i’} = \overrightarrow{m_i} - \overrightarrow{\mu _M} $$</li>
<li>对于第 $i$ 对点对，计算点对的矩阵 $A_i$：$$ A_i = \begin{bmatrix} 0 &amp; (\overrightarrow{p_i’}-\overrightarrow{m_i’})^T \\ \overrightarrow{p_i’}-\overrightarrow{m_i’} &amp; D_i^M  \end{bmatrix}$$ $\quad$其中，$D_i = \overrightarrow{p_i’}+\overrightarrow{m_i’}$，$D_i^M$ 是矩阵 $D_i$ 的 <font color="blue">Um 形式（什么是 Um 形式呢？）</font>，$$ D_i^M = \begin{bmatrix} 0 &amp; -D_i[2] &amp; -D_i[1] \\ -D_i[2] &amp; 0 &amp; D_i[0] \\ D_i[1] &amp; -D_i[0] &amp; 0 \end{bmatrix}$$</li>
<li>对于每一次迭代，计算矩阵 $B$：$$ B = \sum_{i=1}^{N_p} A_iA_i^T$$</li>
<li>关于旋转向量的最优化问题转化为求 $B$ 的最小特征值和特征向量（如下，通过第三方 newmat 库的 SVD 求解）</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>求解方法一</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// using newmat library</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;newmat/newmatap.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;newmat/newmat.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Vertex&#123;</div><div class="line">  <span class="keyword">double</span> coord[<span class="number">3</span>];</div><div class="line">&#125;;</div><div class="line"><span class="comment">// control points in P</span></div><div class="line">Vertex *contP; </div><div class="line">Vertex *contM;</div><div class="line"><span class="comment">// control points after removing center（去中心化）</span></div><div class="line">Vertex *rmcoP; </div><div class="line">Vertex *rmcoM;</div><div class="line"> </div><div class="line"><span class="keyword">void</span> ICP::transform() &#123;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"get transform matrix"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">  <span class="function">Matrix <span class="title">B</span><span class="params">(<span class="number">4</span>,<span class="number">4</span>)</span></span>;</div><div class="line">  B = <span class="number">0</span>;</div><div class="line">  <span class="keyword">double</span> u[<span class="number">3</span>]; <span class="comment">//di+di'</span></div><div class="line">  <span class="keyword">double</span> d[<span class="number">3</span>]; <span class="comment">//di-di'</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cono;i++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++) &#123;</div><div class="line">      u[j] = rmcoP[i].coord[j]+rmcoM[i].coord[j];</div><div class="line">      d[j] = rmcoM[i].coord[j]-rmcoM[i].coord[j];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> uM[<span class="number">16</span>] = &#123;</div><div class="line">      <span class="number">0</span>,    -d[<span class="number">0</span>],  -d[<span class="number">1</span>],  -d[<span class="number">2</span>],</div><div class="line">      d[<span class="number">0</span>], <span class="number">0</span>,      -u[<span class="number">2</span>],  -u[<span class="number">1</span>],</div><div class="line">      d[<span class="number">1</span>], -u[<span class="number">2</span>],  <span class="number">0</span>,      u[<span class="number">0</span>],</div><div class="line">      d[<span class="number">2</span>], u[<span class="number">1</span>],   -u[<span class="number">0</span>],  <span class="number">0</span></div><div class="line">    	&#125;;</div><div class="line">     </div><div class="line">    <span class="function">Matrix <span class="title">Ai</span><span class="params">(<span class="number">4</span>,<span class="number">4</span>)</span> </span>;</div><div class="line">    Ai &lt;&lt; uM ;</div><div class="line">    B += Ai*Ai.t();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 利用奇异值分解计算B的特征值和特征向量（旋转向量四元数）</span></div><div class="line">  Matrix U;</div><div class="line">  Matrix V;</div><div class="line">  DiagonalMatrix D;</div><div class="line">  SVD(B,D,U,V);</div><div class="line"> </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</div><div class="line">    quad[i] = V.element(i,<span class="number">3</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  B.Release();</div><div class="line">  U.Release();</div><div class="line">  V.Release();</div><div class="line">  D.Release();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>求解方法二（<a href="(http://nghiaho.com/?page_id=671">FINDING OPTIMAL ROTATION AND TRANSLATION BETWEEN CORRESPONDING 3D POINTS</a>） $$H = \sum_{i=1}^N (P_i - \overrightarrow{\mu _P} )(M_i - \overrightarrow{\mu _M})^T$$ $$[U,\space S,\space V] = SVD(H)$$ $$ R = VU^T $$<ul>
<li>其中，$H$ 为 Familiar Covariance Matrix（近似协方差矩阵，论文中是协方差矩阵）；$R$ 即为最优的旋转矩阵。</li>
<li>Special reflection case<ul>
<li>Sometimes the SVD will return a ‘reflection’ matrix, which is numerically correct but is actually nonsense in real life. This is addressed by checking <strong>the determinant of R</strong> (from SVD above) and seeing if it’s negative (-1). If it is then the 3rd column of V is multiplied by -1.<blockquote>
<p>if determinant(R) &lt; 0<br>　multiply 3rd column of V by -1<br>   　recompute R<br>   end if</p>
</blockquote>
</li>
<li>An alternative check that is possibly more robust was suggested by Nick Lambert<blockquote>
<p>if determinant(R) &lt; 0<br>　multiply 3rd column of Ｒ by -1<br>   end if</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight py"><figcaption><span>求解方法二</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"> </div><div class="line"><span class="comment"># Input: expects Nx3 matrix of points</span></div><div class="line"><span class="comment"># Returns R,t</span></div><div class="line"><span class="comment"># R = 3x3 rotation matrix</span></div><div class="line"><span class="comment"># t = 3x1 column vector</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rigid_transform_3D</span><span class="params">(A, B)</span>:</span></div><div class="line">    <span class="keyword">assert</span> len(A) == len(B)</div><div class="line"> </div><div class="line">    N = A.shape[<span class="number">0</span>]; <span class="comment"># total points</span></div><div class="line"> </div><div class="line">    centroid_A = mean(A, axis=<span class="number">0</span>)</div><div class="line">    centroid_B = mean(B, axis=<span class="number">0</span>)</div><div class="line">    </div><div class="line">    <span class="comment"># centre the points</span></div><div class="line">    AA = A - tile(centroid_A, (N, <span class="number">1</span>))</div><div class="line">    BB = B - tile(centroid_B, (N, <span class="number">1</span>))</div><div class="line"> </div><div class="line">    <span class="comment"># dot is matrix multiplication for array</span></div><div class="line">    H = transpose(AA) * BB</div><div class="line"> </div><div class="line">    U, S, Vt = linalg.svd(H)</div><div class="line"> </div><div class="line">    R = Vt.T * U.T</div><div class="line"> </div><div class="line">    <span class="comment"># special reflection case</span></div><div class="line">    <span class="keyword">if</span> linalg.det(R) &lt; <span class="number">0</span>:</div><div class="line">       <span class="keyword">print</span> <span class="string">"Reflection detected"</span></div><div class="line">       Vt[<span class="number">2</span>,:] *= <span class="number">-1</span></div><div class="line">       R = Vt.T * U.T</div><div class="line"> </div><div class="line">    t = -R*centroid_A.T + centroid_B.T</div><div class="line"> </div><div class="line">    <span class="keyword">print</span> t</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> R, t</div><div class="line"> </div><div class="line"><span class="comment"># !!! Test with random data</span></div><div class="line"><span class="comment"># &lt;1&gt;Random rotation and translation</span></div><div class="line">R = mat(random.rand(<span class="number">3</span>,<span class="number">3</span>))</div><div class="line">t = mat(random.rand(<span class="number">3</span>,<span class="number">1</span>))</div><div class="line"><span class="comment"># &lt;2&gt;make R a proper rotation matrix, force orthonormal</span></div><div class="line">U, S, Vt = linalg.svd(R)</div><div class="line">R = U*Vt</div><div class="line"><span class="comment"># &lt;3&gt;remove reflection</span></div><div class="line"><span class="keyword">if</span> linalg.det(R) &lt; <span class="number">0</span>:</div><div class="line">   Vt[<span class="number">2</span>,:] *= <span class="number">-1</span></div><div class="line">   R = U*Vt</div><div class="line"><span class="comment"># &lt;4&gt;number of points</span></div><div class="line">n = <span class="number">10</span></div><div class="line"> </div><div class="line">A = mat(random.rand(n,<span class="number">3</span>));</div><div class="line">B = R*A.T + tile(t, (<span class="number">1</span>, n))</div><div class="line">B = B.T;</div><div class="line"> </div><div class="line"><span class="comment"># &lt;5&gt;recover the transformation</span></div><div class="line">ret_R, ret_t = rigid_transform_3D(A, B)</div><div class="line">  </div><div class="line">A2 = (ret_R*A.T) + tile(ret_t, (<span class="number">1</span>, n))</div><div class="line">A2 = A2.T</div><div class="line"> </div><div class="line"><span class="comment"># &lt;6&gt;Find the error</span></div><div class="line">err = A2 - B</div><div class="line"> </div><div class="line">err = multiply(err, err)</div><div class="line">err = sum(err)</div><div class="line">rmse = sqrt(err/n);</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"Points A"</span></div><div class="line"><span class="keyword">print</span> A</div><div class="line"><span class="keyword">print</span> <span class="string">""</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"Points B"</span></div><div class="line"><span class="keyword">print</span> B</div><div class="line"><span class="keyword">print</span> <span class="string">""</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"Rotation"</span></div><div class="line"><span class="keyword">print</span> R</div><div class="line"><span class="keyword">print</span> <span class="string">""</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"Translation"</span></div><div class="line"><span class="keyword">print</span> t</div><div class="line"><span class="keyword">print</span> <span class="string">""</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"RMSE:"</span>, rmse</div><div class="line"><span class="keyword">print</span> <span class="string">"If RMSE is near zero, the function is correct!"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="改进-ICP-算法"><a href="#改进-ICP-算法" class="headerlink" title="改进 ICP 算法"></a>改进 ICP 算法</h3><blockquote>
<p><a href="http://blog.csdn.net/yhlx125/article/details/52959892">夜空中明亮的星的专栏：点云匹配</a></p>
</blockquote>
<ul>
<li>加快寻找匹配点（最近点）的搜索效率<ul>
<li>K-D 树</li>
<li>Voronoi 图</li>
</ul>
</li>
<li>不同的距离量测方式<ul>
<li>点到点（标准 ICP 算法）</li>
<li>点到线</li>
<li>点到面</li>
<li>面到面</li>
</ul>
</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="https://web.eecs.umich.edu/~silvio/teaching/EECS598/lectures/lecture5_2.pdf">Summary of “A Method for Registration of 3-D Shapes”</a></li>
<li><a href="http://zhi.oschina.io/archives/2015/12/30/cv-icp.html">植的博客：ICP 算法过程</a></li>
<li><a href="http://nghiaho.com/?page_id=671">Nghia Ho: FINDING OPTIMAL ROTATION AND TRANSLATION BETWEEN CORRESPONDING 3D POINTS</a></li>
<li><a href="http://blog.csdn.net/xiaowei_cqu/article/details/8470376">小魏的修行路：[3D]迭代最近点算法 Iterative Closest Points</a></li>
<li><a href="http://blog.csdn.net/lcydhr/article/details/52413179">lcydhr的专栏：SVD(奇异值分解)及求解最小二乘问题</a></li>
<li><a href="http://chrisyayu.me/2016/07/07/ICP%28Iterative-Closest-Point%29%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Chrisyayu：ICP(Iterative Closest Point)学习笔记</a></li>
<li><a href="http://blog.csdn.net/u010696366/article/details/8941938">PCL学习笔记二：Registration (ICP算法)</a></li>
<li><a href="http://blog.csdn.net/yhlx125/article/details/52959892">夜空中明亮的星的专栏：点云匹配</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> 3D </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[i = i++;]]></title>
      <url>/2017/07/21/programPearls_i=i++/</url>
      <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">100</span>; j++) &#123;</div><div class="line">  i = i++;</div><div class="line">&#125;</div><div class="line"><span class="comment">// what's the value of i ?</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="i-vs-i"><a href="#i-vs-i" class="headerlink" title="i++ vs ++i"></a>i++ vs ++i</h4><ul>
<li><strong>i++</strong> is called postfix increment. This means the value of i is passed on and then i is incremented.（后自增，先使用后自增，整个表达式的值为 i）</li>
<li><strong>++i</strong> is called prefix increment. This means 1 is added to i and then that value is passed on.（前自增，先自增后使用，整个表达式的值为 i+1）</li>
</ul>
<h4 id="Side-Effect（副作用）-amp-Sequence-Point（序列点）"><a href="#Side-Effect（副作用）-amp-Sequence-Point（序列点）" class="headerlink" title="Side Effect（副作用）&amp; Sequence Point（序列点）"></a>Side Effect（副作用）&amp; Sequence Point（序列点）</h4><blockquote>
<p><a href="https://www.clarkok.com/blog/2015/02/28/i-i-C-C-%E7%9A%84%E5%BA%8F%E5%88%97%E7%82%B9/">Clarkok: i = i++; C/C++ 的序列点</a></p>
</blockquote>
<p>　<font color="red">以下概念主要针对 C++ 解释，但其它语言有着相似的涵义</font>。</p>
<ul>
<li>Side Effect（副作用）<ul>
<li>C++ 标准中对副作用是这样定义的：<blockquote>
<p>Accessing an object designated by a volatile glvalue, modifying an object, calling a library I/O function, or calling a function that does any of those operations are all <strong>side effects</strong>, which are changes in the state of the execution environment.</p>
</blockquote>
</li>
<li>C++ （一个线程）在运行的时候有一个环境，这个环境只跟以下内容有关：<ul>
<li>内存状态</li>
<li>I/O</li>
</ul>
</li>
<li>每当程序改变了以上两件东西，就被当做程序产生了副作用。在 C++ 中，以下行为被视作带有副作用：<ul>
<li>访问一个被标注为<code>volatile</code>的对象</li>
<li>修改一个对象的值</li>
<li>调用函数库中的 I/O 函数</li>
<li>以及调用了任何包含上述行为的函数</li>
</ul>
</li>
<li>后面三个好理解，但是 <font color="red">为什么“访问一个被标注为<code>volatile</code>的对象”，也会被视作产生副作用呢？</font>想进一步了解可以阅读<a href="https://durant35.github.io/2017/07/06/programPearls_inline&amp;static&amp;const&amp;extern&amp;volatile/#volatile">C/C++常见修饰符（inline&amp;static&amp;const&amp;extern&amp;volatile）—— volatile</a></li>
</ul>
</li>
<li>Sequence Point（序列点）<ul>
<li>序列点的出现，是为了防止编译器过度优化，使得程序产生错误的结果。有如下代码：</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; i++ &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">j = i;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
<ul>
<li>这段程序的副作用就是：<ul>
<li>使 i 的值加一</li>
<li>使 j 的值等于 i</li>
<li>输出 i</li>
<li>输出 j</li>
</ul>
</li>
<li>为了效率，编译器可能会改变程序的执行顺序，变成如下的执行顺序：</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 合并读取操作</span></div><div class="line">load i to reg1</div><div class="line">load j to reg2</div><div class="line"> </div><div class="line"><span class="comment">// 合并I/O操作</span></div><div class="line">output reg1, reg2</div><div class="line"> </div><div class="line"><span class="comment">// 合并写入操作</span></div><div class="line">reg2 = reg1 + <span class="number">1</span></div><div class="line">write reg2 to i</div><div class="line">write reg2 to j</div></pre></td></tr></table></figure>
<ul>
<li>很显然，这样做是不对的。序列点的出现就是为了解决这个，标准中如下定义：<blockquote>
<p>　At certain specified points in the execution sequence called <strong>sequence points</strong>, all <strong>side effects</strong> of previous evaluations shall be complete and no side effects of subsequent evaluations shall have taken place.<br>　序列点出现的时候所有在序列点之前的副作用都必须被完成，所有在序列点之后的副作用都还没有发生，序列点分隔了副作用。</p>
</blockquote>
</li>
<li>标准中规定，序列点出现在下面几个地方：<ul>
<li>分号处</li>
<li>未重载的逗号运算符，|| 运算符，&amp;&amp; 运算符中</li>
<li>三元 ?: 运算符</li>
<li>计算完函数所有参数之后，且在函数的第一条语句之前</li>
<li>函数的返回值已经被写入调用者之后，且在调用处之后的第一条语句被执行之前</li>
<li>在初始化完所有基类和成员对象之后</li>
</ul>
</li>
<li>在 C++ 中，两个序列点之间的操作的顺序是 <strong>Unspecified Befavior</strong>，即标准中不指定，由编译器自己决定如何决策。这是因为 C/C++ 企图通过对语言进行较少（其实是适中）的约束，来使得编译器对语言有着更大的优化空间，以此来优化性能。</li>
</ul>
</li>
</ul>
<h4 id="Well-defined-meaning-in-Java"><a href="#Well-defined-meaning-in-Java" class="headerlink" title="Well-defined meaning in Java"></a>Well-defined meaning in Java</h4><blockquote>
<p><a href="https://stackoverflow.com/questions/23553358/why-does-this-expression-i-i-differs-from-java-and-c">Stackoverflow: Why does this expression i+=i++ differs from Java and C?</a><br><a href="https://stackoverflow.com/questions/6457130/pre-post-increment-operator-behavior-in-c-c-java-c-sharp">Stackoverflow: Pre &amp; post increment operator behavior in C, C++, Java, &amp; C#</a></p>
</blockquote>
<p>　Java and C# evaluate expressions <strong>from left to right</strong>, and the <strong>side-effects</strong> are visible immediately.<br>　Java evaluation order is from left to right and the operands are evaluated before the operation.<br>　Java 语法对<code>i = i++;</code>这样的表达式有着明确的执行定义 —— 从左到右先确定操作数，再按优先级顺序进行操作（主要是右操作数相关的操作）。</p>
<blockquote>
<p>　　At run time, the expression is evaluated in one of two ways. If the left-hand operand expression is not an array access expression（即使左操作数存在数组访问，也是满足先左后右）, then four steps are required:<br>　　率先按照从左到右的顺序对左右操作数进行 evaluation（计算），并保存下来。</p>
<ul>
<li>First, the left-hand operand is evaluated to produce a variable. If this evaluation completes abruptly（产生异常）, then the assignment expression completes abruptly for the same reason; the right-hand operand is not evaluated and no assignment occurs.</li>
<li>Otherwise, the value of the left-hand operand is saved and then the right-hand operand is evaluated. If this evaluation completes abruptly, then the assignment expression completes abruptly for the same reason and no assignment occurs.</li>
<li>Otherwise, the saved value of the left-hand variable and the value of the right-hand operand are used to perform the binary operation indicated by the compound assignment operator. If this operation completes abruptly, then the assignment expression completes abruptly for the same reason and no assignment occurs.</li>
<li>Otherwise, the result of the binary operation is converted to the type of the left-hand variable, subjected to value set conversion（数据类型转换） to the appropriate standard value set (not an extended-exponent value set), and the result of the conversion is stored into the variable.</li>
</ul>
</blockquote>
<ul>
<li>基于上述的要求，整个代码的完整操作顺序如下：</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确定左操作数：此处 i=0</span></div><div class="line"> </div><div class="line"><span class="comment">// 确定右操作数，(i++) 的值为 i：此处 i=0</span></div><div class="line">load i to reg2</div><div class="line"> <span class="comment">// 自增操作（++）是确定右操作数需要完成的操作</span></div><div class="line">reg3 = reg2 + <span class="number">1</span></div><div class="line">write reg3 to i</div><div class="line"> </div><div class="line"><span class="comment">// 赋值操作（可以被优化）：此处 i=0</span></div><div class="line"><span class="comment">// reg4 = reg2</span></div><div class="line"><span class="comment">// write reg4 to i</span></div><div class="line">write reg2 to i</div><div class="line"><span class="comment">// 此处 i=0</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Undefined-behavior-in-C-C"><a href="#Undefined-behavior-in-C-C" class="headerlink" title="Undefined behavior in C/C++"></a>Undefined behavior in C/C++</h4><p>　In C/C++, the order of evaluation of subexpressions is unspecified, and modifying the same object twice without an <strong>intervening sequence point</strong>（序列点间） is <strong>undefined behavior</strong>.<br>　C/C++ 语法对<code>i = i++;</code>这样的表达式出于效率的考虑并没有给出明确的执行定义（只有保证操作满足优先级顺序，操作数没有确定的 evaluation 顺序），编译器无论怎么做都是合法的，但对程序语义来说会导致不确定的行为（<strong>Undefined Behavior</strong>）。</p>
<blockquote>
<p>　Between the previous and next <strong>sequence point</strong> a scalar object shall have its stored value <strong>modified at most once</strong> by the evaluation of an expression. Furthermore, the prior value shall be accessed only to determine the value to be stored. The requirements of this paragraph shall be met for each allowable ordering of the subexpressions of a full expression; <strong>otherwise the behavior is undefined</strong>.</p>
</blockquote>
<ul>
<li>因此，对于<code>i = i++;</code>这样的代码，i 的值被写入了两次，一次是 ++ 时，一次是被赋值时，这就出现了 <strong>Undefined Behavior</strong>，最终的执行顺序取决于编译器的优化，可能会像上面提到的在 Java 中按照 left-to-right 的顺序执行，也可能出现其它执行顺序（可以用<code>=</code>是从右到左的结合性解释），比如：</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确定右操作数，(i++) 的值为 i：此处 i=0</span></div><div class="line">load i to reg2</div><div class="line"> <span class="comment">// 自增操作（++）是确定右操作数需要完成的操作</span></div><div class="line">reg3 = reg2 + <span class="number">1</span></div><div class="line">write reg3 to i</div><div class="line"> </div><div class="line"><span class="comment">// 确定左操作数：此处 i=1</span></div><div class="line"> </div><div class="line"><span class="comment">// 赋值操作（可以被优化）：此处 i=1</span></div><div class="line"><span class="comment">// reg4 = reg2</span></div><div class="line"><span class="comment">// write reg4 to i</span></div><div class="line">write reg2 to i</div><div class="line"><span class="comment">// 此处 i=0</span></div></pre></td></tr></table></figure>
<ul>
<li>因为<code>=</code>操作符的这种结合性，编译器更多时候是生成上述执行顺序的代码，而不是 Java 语言那种。如下，是 <strong>x86-64 g++</strong> 编译器对该部分代码生成的汇编指令：</li>
</ul>
</li>
<li>  <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># load i to reg2</div><div class="line"><span class="number">400832</span>:	8b <span class="number">45</span> f8             	<span class="keyword">mov</span>    -<span class="number">0x8</span>(%rbp),%eax</div><div class="line"># reg3 = reg2 + <span class="number">1</span></div><div class="line"><span class="number">400835</span>:	<span class="number">8d</span> <span class="number">50</span> <span class="number">01</span>             	<span class="keyword">lea</span>    <span class="number">0x1</span>(%rax),%edx</div><div class="line"># write reg3 to i, i=<span class="number">1</span> after</div><div class="line"><span class="number">400838</span>:	<span class="number">89</span> <span class="number">55</span> f8             	<span class="keyword">mov</span>    %edx,-<span class="number">0x8</span>(%rbp)</div><div class="line"># write reg2 to i</div><div class="line">40083b:	<span class="number">89</span> <span class="number">45</span> f8             	<span class="keyword">mov</span>    %eax,-<span class="number">0x8</span>(%rbp)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="i-i"><a href="#i-i" class="headerlink" title="i += i++;"></a>i += i++;</h4><p>　<strong>i += i++;</strong> $\Longleftrightarrow$ <strong>i = i + i++;</strong></p>
<ul>
<li>Java</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确定左操作数：此处 i=0</span></div><div class="line">load i to reg1</div><div class="line"> </div><div class="line"><span class="comment">// 确定右操作数，(i++) 的值为 i：此处 i=0</span></div><div class="line">load i to reg2</div><div class="line"><span class="comment">// 自增操作（++）是确定右操作数需要完成的操作</span></div><div class="line">reg3 = reg2 + <span class="number">1</span></div><div class="line">write reg3 to i</div><div class="line"> </div><div class="line"><span class="comment">// 赋值操作（可以被优化）：此处 i=0</span></div><div class="line">reg4 = reg1 + reg2</div><div class="line">write reg4 to i</div><div class="line"><span class="comment">// 此处 i=0</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>C/C++</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确定右操作数，++ 优先级比 + 高</span></div><div class="line"><span class="comment">// right of +：(i++) 的值为 i，此处 i=0</span></div><div class="line">load i to reg1</div><div class="line"><span class="comment">// 自增操作（++）是确定右操作数需要完成的操作</span></div><div class="line">reg2 = reg1 + <span class="number">1</span></div><div class="line">write reg2 to i</div><div class="line"> </div><div class="line"><span class="comment">// left of +：此处 i=1</span></div><div class="line">load i to reg3</div><div class="line"> </div><div class="line"><span class="comment">// 确定左操作数：此处 i=1</span></div><div class="line"> </div><div class="line"><span class="comment">// 赋值操作（可以被优化）：此处 i=1</span></div><div class="line">reg4 = reg3 + reg1</div><div class="line">write reg4 to i</div><div class="line"><span class="comment">// 此处 i=1</span></div></pre></td></tr></table></figure>
<ul>
<li><font color="red">注：上述这种执行顺序并不是唯一的执行顺序，但可以说是编译器最常采用的优化方案，在 <strong>g++</strong> 上正是这种情形</font>。</li>
</ul>
</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://www.clarkok.com/blog/2015/02/28/i-i-C-C-%E7%9A%84%E5%BA%8F%E5%88%97%E7%82%B9/">Clarkok: i = i++; C/C++ 的序列点</a></li>
<li><a href="https://stackoverflow.com/questions/23553358/why-does-this-expression-i-i-differs-from-java-and-c">Stackoverflow: Why does this expression i+=i++ differs from Java and C?</a></li>
<li><a href="https://stackoverflow.com/questions/6457130/pre-post-increment-operator-behavior-in-c-c-java-c-sharp">Stackoverflow: Pre &amp; post increment operator behavior in C, C++, Java, &amp; C#</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CMake 查找库: find_package vs pkg_check_modules]]></title>
      <url>/2017/07/14/tool_CMake_find_package$pkg_check_module/</url>
      <content type="html"><![CDATA[<p>　　本文介绍 CMake 中两种查找库的方式：<strong>find_package</strong> 以及 <strong>pkg_check_modules</strong> 的用法与区别。<a id="more"></a></p>
<h4 id="find-package"><a href="#find-package" class="headerlink" title="find_package"></a><strong>find_package</strong></h4><ul>
<li>如果编译软件使用了外部库，事先并不知道它的头文件和链接库的位置，得在编译和链接命令中加上包含它们的查找路径，CMake 使用 <code>find_package</code> 命令来解决这个问题。</li>
<li>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FIND_PACKAGE</span>( &lt;name&gt; [version] [EXACT] [QUIET] [NO_MODULE] [ [ REQUIRED | COMPONENTS ] [ componets... ] ] )</div></pre></td></tr></table></figure>
<ul>
<li>这条命令执行后，CMake 会到变量<code>CMAKE_MODULE_PATH</code> 指示的目录下查找文件 <strong>Findname.cmake</strong> 并执行；</li>
<li>只要找到包，就会定义下面这些变量（都在 <strong>Findname.cmake</strong> 文件中设置）：</li>
</ul>
</li>
<li>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;NAME&gt;_FOUND</div><div class="line">&lt;NAME&gt;_INCLUDE_DIRS <span class="keyword">or</span> &lt;NAME&gt;_INCLUDES</div><div class="line">&lt;NAME&gt;_LIBRARIES <span class="keyword">or</span> &lt;NAME&gt;_LIBRARIES <span class="keyword">or</span> &lt;NAME&gt;_LIBS</div><div class="line">&lt;NAME&gt;_DEFINITIONS</div></pre></td></tr></table></figure>
<ul>
<li>要使用库<code>name</code>，我们在顶层目录中的 <strong>CMakeLists.txt</strong> 文件中，检查变量<code>NAME_FOUND</code> 来确定包是否被找到（大部分包的这些变量中的包名是全大写的，有些包则使用包的实际大小写）</li>
<li>如果找到这个包，我们用<code>NAME_INCLUDE_DIRS</code>调用 <strong>include_directories()</strong> 命令，用<code>NAME_LIBRARIES</code>调用 <strong>target_link_libraries()</strong> 命令。</li>
</ul>
</li>
</ul>
<h4 id="pkg-check-modules"><a href="#pkg-check-modules" class="headerlink" title="pkg_check_modules"></a><strong>pkg_check_modules</strong></h4><ul>
<li><a href="https://stackoverflow.com/questions/25959972/what-is-the-difference-between-find-package-and-pkg-search-module">what is the difference between find_package and pkg_search_module</a><blockquote>
<p>　　<strong>find_package</strong> is CMake’s very own mechanism for solving the same problem. For this to work you either need a CMake find script for the requested library (CMake already ships with a couple of those, but you can easily write your own) or alternatively a package config script provided by the requested library itself. In either case you might have to adjust your <code>CMAKE_MODULE_PATH</code> for CMake to be able to find the respective script.<br>　　<strong>pkg_search_module</strong> uses the <strong>pkg-config tool</strong> to determine the location of the requested library. This is mostly useful on systems where <strong>pkg-config</strong> is already in use, so you do not need to replicate all the information for CMake. Note that this approach has potential portability issues, since <font color="blue">it requires pkg-config to be setup correctly on the build machine</font>.</p>
</blockquote>
</li>
<li><strong>pkg_check_modules</strong> 是 CMake 自己的 <strong>pkg-config 模块</strong> 的一个用来简化的封装：你不用再检查 CMake 的版本，加载合适的模块，检查是否被加载，等等，参数和传给 <strong>find_package</strong> 的一样：先是待返回变量的前缀，然后是包名（pkg-config 的）。这样就定义了<code>&lt;prefix&gt;_INCLUDE_DIRS</code>和其他的这类变量，后续的用法就与 <strong>find_package</strong> 一致。</li>
<li><strong>pkg_check_modules</strong> 实质上是检测系统中的 <strong>pkg-config</strong> 是否存在制定的 <strong>.pc</strong> 文件。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> 小工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS launch file: <arg> vs <param> vs <rosparam>]]></title>
      <url>/2017/07/14/ROS_%3Carg%3E$%3Cparam%3E$%3Crosparam%3E/</url>
      <content type="html"><![CDATA[<p>　　本文介绍在 ROS 的 launch 文件中经常被使用到的三个与参数设置有关的标签 <code>&lt;arg&gt;</code>、<code>&lt;param&gt;</code>、<code>rosparam</code>。<a id="more"></a>
　　</p>
<h4 id="lt-arg-gt"><a href="#lt-arg-gt" class="headerlink" title="$\lt arg \gt$"></a>$\lt arg \gt$</h4><ul>
<li>声明 argument</li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"arg-name"</span> <span class="attr">...</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>指定 argument 的值</li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 在命令行赋值</div><div class="line">roslaunch package-name launch-file-name arg-name:=arg-value</div><div class="line"># 在声明 argument 时赋值</div><div class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"arg-name"</span> <span class="attr">default</span>=<span class="string">"arg-value"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"arg-name"</span> <span class="attr">value</span>=<span class="string">"arg-value"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>default</strong> 和 <strong>value</strong> 的区别在于，在命令行中赋值的参数可以覆盖 default，但是不能重写 value 的值。</li>
</ul>
</li>
<li>获取变量值</li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(arg arg-name)</div></pre></td></tr></table></figure>
<ul>
<li>我们可以通过 $arg$ 来使用该变量，<strong>roslaunch</strong> 会用给定的参数 $arg-name$ 的值替换整个表达式的值。</li>
</ul>
</li>
<li>将 argument 值传递给 <strong>included launch 文件</strong></li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"path-to-file"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"arg-name"</span> <span class="attr">value</span>=<span class="string">"arg-value"</span> /&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">include</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><font color="red">注意：</font>若 launch 文件及其 include 的 launch 文件出现相同的 argument，通过如下方式传递给 include launch 文件</li>
</ul>
</li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">"arg-name"</span> <span class="attr">value</span>=<span class="string">"$(arg arg-name)"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>第一个 <strong>arg-name</strong> 表示 include launch 文件中的变量；第二个则表示当前 launch 文件中的变量 $\Longrightarrow$ 指定的变量在当前 launch 文件以及 included launch 文件中都有相同的值。</li>
</ul>
</li>
</ul>
<h4 id="lt-rosparam-gt"><a href="#lt-rosparam-gt" class="headerlink" title="$\lt rosparam \gt$"></a><a href="http://wiki.ros.org/roslaunch/XML/rosparam">$\lt rosparam \gt$</a></h4><ul>
<li><font color="blue">尽管 argument（变量）和 parameter（参数）优势可互换，但二者在 ROS 中的意义完全不同：<strong>parameters</strong> 是 ROS 系统使用的数值，存在 parameter server 上，nodes 可通过<code>ros::param::get</code>函数编程得到，用户可通过<code>rosparam</code>命令获取；与之不同，<strong>arguments</strong> 仅在 launch 文件内部有意义，nodes 不能直接获取它们的值</font></li>
<li>前面介绍的<code>&lt;arg&gt;</code>用于设置变量；接下来介绍的两个<code>&lt;param&gt;</code>和<code>&lt;rosparam&gt;</code>标签用于设置参数。</li>
<li>参数访问有三种方式<ul>
<li>命令行：<code>rosparam set</code>、<code>rosparam get</code></li>
<li>launch 文件：<code>&lt;param&gt;</code>、<code>&lt;rosparam&gt;</code></li>
<li>API<ul>
<li>roscpp: <code>ros::param::set</code>、<code>ros::param::get</code></li>
<li>rospy: <code>set_param</code>、<code>set_param</code></li>
</ul>
</li>
</ul>
</li>
<li><code>&lt;rosparam&gt;</code> 通过配置文件<code>*.yaml</code>文件加载参数</li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"$(find navigation_launch)/config/costmap_common_params.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> <span class="attr">ns</span>=<span class="string">"global_costmap"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>&lt;rosparam&gt;</code> 其他常见方式</li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">command</span>=<span class="string">"delete"</span> <span class="attr">param</span>=<span class="string">"my/param"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">param</span>=<span class="string">"a_list"</span>&gt;</span>[1, 2, 3, 4]<span class="tag">&lt;/<span class="name">rosparam</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">rosparam</span>&gt;</span></div><div class="line">  a: 1</div><div class="line">  b: 2</div><div class="line"><span class="tag">&lt;/<span class="name">rosparam</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="lt-param-gt"><a href="#lt-param-gt" class="headerlink" title="$\lt param \gt$"></a>$\lt param \gt$</h4><ul>
<li><code>&lt;param&gt;</code>更像是 define 宏，必须在本地 launch 文件中赋值，无法用于在 launch 文件中获取命令中的参数（但可以通过下面介绍 <strong>rosrun</strong> 方式），通过以下方式接收和传递。定义的参数均会保留在 ROS 参数服务器(PARAMETERS)中，该参数会被节点(NODES)使用进行节点配置。</li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"param-name-1"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">node</span> <span class="attr">....</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"param-name-2"</span> <span class="attr">value</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">node</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>第一个参数 <strong>param-name-1</strong> 是整个 launch 全局（global）有效；第二个参数 <strong>param-name-2</strong> 相对（relative）节点局部（private）有效。</li>
</ul>
</li>
<li><strong>rosrun</strong> 本身的设计是可以让使用者直接修改节点内的参数，通过以下的方式：</li>
<li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rosrun package-name node-name _param-name:=param-value</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><a href="http://answers.ros.org/question/37916/when-to-use-param-and-rosparam-on-launch-file/">ROS ANSWERS: When to use param and rosparam on launch file?</a><blockquote>
<p>　　I believe that the main difference is that <font color="red"><code>&lt;param&gt;</code> may be used to set a single command on the ROS parameter server, while <code>&lt;rosparam&gt;</code> can be used to evaluate groups of parameters</font>.<br>　　So, in the cases above, <code>&lt;param&gt;</code> is setting a single parameter, and that parameter is an entire URDF file. The <code>&lt;rosparam&gt;</code> tag is reading in the rosparam yaml format from within the launch file.<br>　　<font color="red">The value set by the <code>&lt;param&gt;</code> tag may only be a string, int, bool, or double</font>, which may be set through the xml attribute value, or by reading in from a text file, bin file, or the output of a command line command.<br>　　<font color="red">The value set by the <code>&lt;rosparam&gt;</code> tag is most commonly a batch of related parameters</font>, read in from a YAML file (or from the output of rosparam dump). You can think of it as a programmatic way to access the functionality of rosparam from a launch file. </p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo：告别多说，拥抱 Disqus]]></title>
      <url>/2017/07/14/hexo_DisqusInsteadofDuoshuo/</url>
      <content type="html"><![CDATA[<p>　　首先说说，换了 Disqus 之后的体验吧，除了需要翻墙外，都挺好的。<font color="blue">最重要的是，以前一直希望多说有的邮件提醒（一直没有），Disqus 自带就有这个功能</font>。anyway，反正多说已经阵亡了，选择 Disqus 还挺不错的。<br>　　怎么从多说迁移到 Disqus 呢？配置上很简单，主要难题是如何迁移原先多说评论的数据。<a id="more"></a></p>
<h4 id="配置很简单"><a href="#配置很简单" class="headerlink" title="配置很简单"></a>配置很简单</h4><ul>
<li>只需要修改 <code>./themes/&lt;对应主题&gt;/</code>下的 <strong>_config.yml</strong> 文件即可，通过注释掉<code>#on: true</code>即可关闭多说。</li>
<li>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">disqus:</span> </div><div class="line"><span class="attr">  on:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  shortname:</span> ？？？</div><div class="line">  <span class="comment"># https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-</span></div><div class="line">  <span class="comment"># It is unnecessary to enable disqus here if </span></div><div class="line">  <span class="comment"># you have set "disqus_shortname" in your site's "_config.yml" </span></div><div class="line"> </div><div class="line"><span class="attr">duoshuo:</span> </div><div class="line">  <span class="comment">#on: true</span></div><div class="line"><span class="attr">  domain:</span> ？？？</div><div class="line">  <span class="comment"># 是否开启多说评论，http://duoshuo.com/create-site/</span></div><div class="line">  <span class="comment"># 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分</span></div><div class="line">  <span class="comment"># http://&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)</span></div></pre></td></tr></table></figure>
<ul>
<li>显然，在此之前，你需要注册一个 Disqus 账号。</li>
</ul>
</li>
</ul>
<h4 id="迁移有办法"><a href="#迁移有办法" class="headerlink" title="迁移有办法"></a>迁移有办法</h4><ul>
<li>数据迁移的步骤：从多说导出数据→数据格式转换（Disqus可用数据格式）→向 Disqus 导入数据。</li>
<li>参考 <a href="https://github.com/JamesPan/duoshuo-migrator#duoshuo2disqus">Github: JamesPan/duoshuo-migrator</a> 即可。</li>
<li>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install lxml</div><div class="line">python duoshuo-migrator.py -i duoshuo_export.json  -o disqus.xml</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://blog.jamespan.me/2015/04/18/goodbye-duoshuo">JAMES PAN’S BLOG：告别多说，拥抱 Disqus</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[32-bit program on 64-bit OS & 64-bit program on 32-bit OS]]></title>
      <url>/2017/07/14/programPearls_32-bit%20program%20on%2064-bit%20OS%20$%2064-bit%20program%20on%2032-bit%20OS/</url>
      <content type="html"><![CDATA[<h4 id="32-bit-program-on-64-bit-OS"><a href="#32-bit-program-on-64-bit-OS" class="headerlink" title="32-bit program on 64-bit OS"></a>32-bit program on 64-bit OS</h4><blockquote>
<p><a href="https://www.viva64.com/en/k/0004/">Is it possible to run 64-bit applications in a 32-bit OS?</a></p>
</blockquote>
<p>　　还是有一定的现实意义，比如经常有一些开源库只有 32-bit 版本，为了对其进行构建，需要在 64-bit 系统上配置 32-bit 环境（通常是 32-bit 的 C/C++ 基本库）。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo dpkg --add-architecture i386</div><div class="line">sudo apt-get install multiarch-support</div></pre></td></tr></table></figure></p>
<h4 id="64-bit-program-on-32-bit-OS"><a href="#64-bit-program-on-32-bit-OS" class="headerlink" title="64-bit program on 32-bit OS"></a>64-bit program on 32-bit OS</h4><blockquote>
<p><a href="https://www.viva64.com/en/k/0004/">Is it possible to run 64-bit applications in a 32-bit OS?</a></p>
</blockquote>
<p>　　不太现实，也没多大意义的一件事。不过可以通过虚拟化技术实现。</p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> 系统 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0023] 秋招华为在线笔试]]></title>
      <url>/2017/07/13/Algorithms_OnlineJudge4Huawei2017/</url>
      <content type="html"><![CDATA[<p>　　昨晚华为在线笔试，三道编程题，结果倒在第二题上，刷了两题半，没能 AK。</p>
<h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p>　第一题是括号（“(”、“[”、“{”）匹配，想法也比较简单，就通过栈<code>stack</code>模拟，遇到开括号推入堆栈，每当遇到闭括号（“)”、“]”、“}”），就进行配对，满足配对就将栈顶的开括号弹出。假如最终的栈是空的，说明输入表达式不存在括号或者括号能够完全匹配。<br>　需要注意的是：①满足配对并不是<code>stack.top()==inputStr[currentIdx]</code>，而需要分上述三种括号进行一一配对；②当存在闭括号，但栈为空或者栈顶元素并不是配对的开括号，已经能够证明输入表达式括号不匹配了，此时可以跳出循环。<a id="more"></a></p>
<h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><ul>
<li>问题背景是打印机任务打印，给一个任务打印队列，不过是每个任务对应的优先级的一个优先级队列<code>int tasksPriority[MAX_TASK_NUM];</code>，每个任务通过其在优先级队列的下标唯一标识<code>0...tasksNum-1</code>；此外还有补充条件：任务的优先级只有 1~9 这九种，优先级数值越高优先级越大。要求：任务打印时，假如等待队列中有优先级更大的，该任务不能被打印，需要重新回到队列中（重新插入队尾），求通过下标标识的一个任务打印队列的最终打印顺序。</li>
<li>一开始的想法是，用一位数组<code>tasksIdx[]</code>维护一个优先级和任务下标标识的对应关系，因为优先级只有 1~9，可以开一个大小为 10 的数组，与<code>tasksIdx[1...9]</code>对应；打印顺序即是优先级的一个由大到小排序，通过<code>sort(vector.begin(), vector.end(), greater&lt;int&gt;())</code>实现，需要先将<code>tasksPriority[]</code>通过<code>vector.assign(tasksPriority, tasksPriority+tasksNum)</code>转为 vector。排序后对应的优先级下标<code>tasksIdx[tasksPriority[0...tasksNum-1]]</code>顺序即为最终的打印顺序。</li>
<li>可惜的是，第一种想法并没有考虑到一个优先级可能有多个重复任务。现在想想，这种应该维护一个<code>vector&lt;vector&lt;int&gt;&gt; tasksIdx(10, vector&lt;int&gt;())</code>的二维向量，按照优先级队列中的先后顺序插入在每个优先级下标对应的那个向量中。不过，就需要跳过降序排列的优先级队列中重复的优先级。</li>
<li>另一种想法，因为优先级和任务下标的这种关系，想到用<code>pair&lt;int, int&gt;</code>保存（<code>first</code>记录优先级，<code>second</code>记录任务下标），又因为排序，所以想到了优先级队列<code>priority_queue</code>，以优先级<code>first</code>作为键值，可怕的是，<code>priority_queue</code>驾驭不了那种存在多个键值相同的情形，不能保证顺序的稳定：相同优先级的多个任务，其打印顺序与其在输入的优先级队列中的顺序一致。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> cmp &#123;</div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; b)</span> </span>&#123;</div><div class="line">    <span class="comment">// fitst: tasksPriority[]</span></div><div class="line">    <span class="comment">// second: tasksIdx[]</span></div><div class="line">    <span class="keyword">return</span> a.first&gt;b.first;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;, cmp&gt; tasksQueue;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>最后，现在想想，似乎应该回到问题的本质：其实就是一种稳定排序吧。所以想到了 Bubble Sort；因为交换的存在，干脆将需要进行冒泡排序的打印任务优先级队列与对应的打印任务下标队列（新建这样一个队列）通过二者下标绑定，交换优先级队列位置的时候，也将下标队列对应位置进行交换。最终得到排好序的优先级队列满足打印要求，下标队列也能与之一一对应，下标队列即为最终的打印顺序。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAX_TASK_NUM=<span class="number">100</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOrder</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> input[], <span class="keyword">int</span> len, <span class="keyword">int</span> output[])</span> </span>&#123;</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; input_(len);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; idx&lt;len; idx++) &#123;</div><div class="line">    output[idx] = idx;</div><div class="line">    input_[idx] = input[idx];</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">bool</span> isSorted;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</div><div class="line">    isSorted = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=len<span class="number">-1</span>; j&gt;i; j--) &#123;</div><div class="line">      <span class="keyword">if</span>(input_[j] &gt; input_[j<span class="number">-1</span>]) &#123;</div><div class="line">        isSorted = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">int</span> tmpPriority = input_[j];</div><div class="line">        input_[j] = input_[j<span class="number">-1</span>];</div><div class="line">        input_[j<span class="number">-1</span>] = tmpPriority;</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> tmpIdx = output[j];</div><div class="line">        output[j] = output[j<span class="number">-1</span>];</div><div class="line">        output[j<span class="number">-1</span>] = tmpIdx;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(isSorted) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">string</span> inputStr;</div><div class="line"> </div><div class="line">  <span class="keyword">while</span>(getline(<span class="built_in">cin</span>, inputStr)) &#123;</div><div class="line">    <span class="comment">// cout &lt;&lt; inputStr &lt;&lt; endl;</span></div><div class="line">    <span class="keyword">int</span> strLen = inputStr.length();</div><div class="line">    <span class="keyword">int</span> taskNum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> tasks[MAX_TASK_NUM];</div><div class="line">    <span class="keyword">int</span> printTasks[MAX_TASK_NUM];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;strLen; i++) &#123;</div><div class="line">      <span class="comment">// cout &lt;&lt; inputStr[i] &lt;&lt; endl;</span></div><div class="line">      <span class="keyword">if</span>(inputStr[i]&gt;<span class="string">'0'</span> &amp;&amp; inputStr[i]&lt;=<span class="string">'9'</span>) &#123;</div><div class="line">        tasks[taskNum++] = inputStr[i] - <span class="string">'0'</span>;</div><div class="line">        <span class="comment">// cout &lt;&lt; inputStr[i] - '0' &lt;&lt; endl;</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(taskNum&gt;=<span class="number">1</span>) &#123;</div><div class="line">      printOrder(tasks, taskNum, printTasks);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; printTasks[<span class="number">0</span>];</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;taskNum; i++) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span> &lt;&lt; printTasks[i];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>需要注意的是：①冒泡排序原理的正确实现，只有只比较相邻的元素，才能保证排序的稳定性；②输入输出格式的要求，输入格式“1, 1, 1, 1, 1”，除了上面这种获取方式，也可以通过<code>cin &gt;&gt; int &gt;&gt; char</code>获取，不过还得注意<code>cin</code>的空格自动结束，可能还是比上面的方式麻烦；输出格式的满足还是比较简单的。</li>
</ul>
</li>
</ul>
<h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><p>　第三题是输入平安果矩阵，即一个 row×col 的二维矩阵<code>appleGrids</code>，只不过矩阵的每个元素<code>appleGrids[rowIdx][colIdx]</code>表示当前格子中平安果数目；要求只能在二维网格中向下或者向右移动，求从网格左上角移动到网格右下角能收获的平安果的最大数目。<br>　显然通过 DP 可以很快速求解，<code>dp[rowIdx][colIdx]</code>表示从网格左上角移动到格子<code>[rowIdx][colIdx]</code>能收获的平安果最大数目，显然<code>dp[row-1][col-1]</code>便是最终的答案；又由于只能向下或者向右移动，动态转移方程，直观说就是<code>dp</code>二维表格从左到右（<code>[rowIdx-1][colIdx]</code>→<code>[rowIdx][colIdx]</code>）、从上到下（<code>[rowIdx][colIdx-1]</code>→<code>[rowIdx][colIdx]</code>）的填表过程，易知这个转移方程：$$ dp[rowIdx][colIdx] = max(dp[rowIdx-1][colIdx], dp[rowIdx][colIdx-1]) + appleGrids[rowIdx][colIdx] $$<br>　需要注意的是：①<code>dp[0][0]</code>、<code>dp[0][1...col-1]</code>、<code>dp[1...row-1][0]</code>需要单独初始化；<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (a&gt;b?a:b); &#125;</div><div class="line"> </div><div class="line"><span class="comment">// dp[i][j]: the largest collected apple number reach appleGrids[i][j]</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp(row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col, <span class="number">0</span>));</div><div class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = appleGrids[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> colIdx=<span class="number">1</span>; colIdx&lt;col; colIdx++) &#123;</div><div class="line">  dp[<span class="number">0</span>][colIdx] = dp[<span class="number">0</span>][colIdx<span class="number">-1</span>] + appleGrids[<span class="number">0</span>][colIdx];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> rowIdx=<span class="number">1</span>; rowIdx&lt;row; rowIdx++) &#123;</div><div class="line">  dp[rowIdx][<span class="number">0</span>] = dp[rowIdx<span class="number">-1</span>][<span class="number">0</span>] + appleGrids[rowIdx][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> rowIdx=<span class="number">1</span>; rowIdx&lt;row; rowIdx++) &#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> colIdx=<span class="number">1</span>; colIdx&lt;col; colIdx++) &#123;</div><div class="line">    <span class="comment">// max(up-&gt;down, left-&gt;right)</span></div><div class="line">    dp[rowIdx][colIdx] = max(dp[rowIdx<span class="number">-1</span>][colIdx], dp[rowIdx][colIdx<span class="number">-1</span>]) + appleGrids[rowIdx][colIdx];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　②二维平安果矩阵如何初始化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> row, col;</div><div class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; row &gt;&gt; col) &#123;</div><div class="line">  <span class="keyword">if</span>(row&gt;<span class="number">1</span> &amp;&amp; col&gt;<span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; appleGrids(row, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(col, <span class="number">-1</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> rowIdx=<span class="number">0</span>; rowIdx&lt;row; rowIdx++) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> colIdx=<span class="number">0</span>; colIdx&lt;col; colIdx++) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; appleGrids[rowIdx][colIdx];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> HUAWEI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[密码学：DES、3DES、AES]]></title>
      <url>/2017/07/11/programPearls_DES$3DES$AES/</url>
      <content type="html"><![CDATA[<p>　　加密方法可以分为两大类：一类是对称密码体制，又称单钥或私钥密码体制（private key cryptography）；还有一类是非对称密码体制，也称双钥或公开密钥体制（public key cryptography）。前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是两套密码。<br>　　在单钥加密的情况下，密钥只有一把，所以密钥的保存变得很重要，一旦秘钥泄露，密文也就被破解了；在双钥加密的情况下，秘钥有两把，一把是公开的公钥，还有一把是不公开的私钥，公钥与私钥是一一对应的关系，有一把公钥就必然有一把与之对应的、独一无二的私钥，反之亦成立。此外，①同时生成公钥和私钥应该是相对比较容易的：所有的公钥、私钥对都不同，用公钥可以解开私钥加密的信息，反之用私钥也可以解开公钥加密的信息；但是②从公钥推算出私钥，应该是很困难或者是不可能的。<br>　　目前，通用的单钥加密算法有 DES（Data Encryption Standard），通用的双钥加密算法为 RSA（Rivest-Shamir-Adleman），本文主要介绍三种常用的单钥加密算法：DES、3DES（Triple DES） 以及 AES（Advanced Encryption Standard）。<a id="more"></a></p>
<h3 id="DES-算法"><a href="#DES-算法" class="headerlink" title="DES 算法"></a>DES 算法</h3><ul>
<li>DES 算法简介<ul>
<li>DES 算法为密码体制中的对称密码体制，又被称为美国数据加密标准，是 1972 年美国 IBM 公司研制的对称密码体制加密算法；</li>
<li>DES 是一种用 56 位密钥来加密 64 位数据的方法，密钥长度为 56 位，明文按 64 位进行分组，将分组后的明文组和 56 位的密钥按位替代或交换的方法形成密文组；</li>
<li>DES 加密算法特点：分组比较短、密钥太短、秘钥生命周期短，运行速度较慢。</li>
</ul>
</li>
<li>DES 工作的基本原理<ul>
<li>入口参数有三个：key、data、mode<ul>
<li>key：加密解密使用的密钥</li>
<li>data：加密解密的数据</li>
<li>mode：工作模式<center><img src="/img/programPearls/encryption/DES_Diagram.jpg" width="320px" alt="" /></center></li>
</ul>
</li>
<li>当模式为加密模式时，明文按照 64 位进行分组，形成明文组，key 用于对数据加密。<ul>
<li>把输入的 64 位数据块经过初始置换按位重新组合，并把输出 $L_0$、$R_0$ 两部分，每部分各长32 位；</li>
<li>然后 $R_0$ 与第一轮子密钥 $K_1$ 进行 $f(R_0, K_1)$ 运算，运算结果再与 $L_0$ 进行按位异或运算，运行结果交换为下一轮的 $R_1$，$R_0$ 交换作为下一轮的 $L_1$；下一轮同样进行 $f(R_i, K_i)$ 运算，以此类推共进行 16 轮；</li>
<li>最后一轮不用进行交换，最后进行逆初始置换，即为密文输出。</li>
</ul>
</li>
<li>子密钥 $K_i$（48 bit）生成算法（概述）<ul>
<li>初始 key 值为 64 位，但 DES 算法规定，其中第 8、16、…、64 位是奇偶校验位，不参与 DES 运算，故 key 实际可用位数便只有 56 位；</li>
<li>经过缩小选择换位表 1 的变换后，key 的位数由 64 位变成了 56 位，此 56 位分为 $C_0$、$D_0$ 两部分，各 28 位；分别进行第 1 次循环左移，得到 $C_1$、$D_1$，将 $C_1$（28位）、$D_1$（28位）合并得到 56 位，再经过缩小选择换位 2，从而便得到了密钥 $K_0$（48位）；</li>
<li>以此类推，便可得到 $K_1$、$K_2$、…、$K_{15}$，不过需要注意的是，16 次循环左移对应的左移位数要依据下述规则进行：循环左移位数 $1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1$。</li>
</ul>
</li>
<li>当模式为解密模式时，key 用于对数据解密<ul>
<li>DES 的解密过程与加密一样，区别仅仅在于第一次迭代时用子密钥 $K_{15}$、第二次 $K_{14}$、…，最后一次用 $K_0$，算法本身并没有任何变化。</li>
</ul>
</li>
<li>在通信网络的两端，双方约定一致的 key，在通信的源点用 key 对核心数据进行 DES 加密，然后以密文形式在公共通信网（如电话网）中传输到通信网络的终点，数据到达目的地后，用同样的 key 对密文数据进行解密，便再现了明码形式的核心数据。</li>
<li>实际运用中，密钥只用到了 64 位中的 56 位，这样才具有高的安全性。<br><br/></li>
</ul>
</li>
</ul>
<h4 id="密钥的产生：子密钥-K-i-（48-bit）生成算法"><a href="#密钥的产生：子密钥-K-i-（48-bit）生成算法" class="headerlink" title="密钥的产生：子密钥 $K_i$（48 bit）生成算法"></a>密钥的产生：子密钥 $K_i$（48 bit）生成算法</h4><p>　　DES 含有 16 轮非线性变换，每一轮变换都用一个 48bits 的子密钥，共需 16 个不同的 48bits 的子密钥。一个 64bits 的外部密钥经过以下密钥产生器产生 16 个 48bits 的子密钥。</p>
<p><center><img src="/img/programPearls/encryption/DES_KiGenerate.png" width="540px" alt="" /></center></p>
<ul>
<li>奇偶校验：64 位 $K$ 中第 8、16、…、64 位是奇偶校验位。</li>
<li>置换 1：作用是将 56bits 密钥 $K’$ 各位上的数按规定方式进行换位，置换后的 56bits 分别存到两个 28bits 的寄存器 $C_0$、$D_0$ 中，如下图：<br><center><img src="/img/programPearls/encryption/DES_ReplacementOne.png" width="460px" alt="" /></center><ul>
<li>$C_0$ 的各位依次为原密钥中的第 57、49、41、…、36 位，$D_0$ 的各位依次为原密钥中的第 63、55、47、…、4 位。</li>
</ul>
</li>
<li>循环左移寄存器：每个循环左移寄存器都有 28bits，加密时，循环寄存器 $C_{i+1}$、$D_{i+1}$ 的内容是将循环寄存器 $C_i$、$D_i$ 的内容分别左移 1 至 2 位得到的，各级寄存器移位的比特数如下表：<center><img src="/img/programPearls/encryption/DES_LeftShiftTable.png" width="540px" alt="" /></center></li>
<li>压缩置换：从 56bits 内容中选出 48bits，产生 16 轮加密的 16 个子密钥，压缩置换表如下：<br><center><img src="/img/programPearls/encryption/DES_CompressionReplacementTable.png" width="340px" alt="" /></center><ul>
<li>压缩置换表中的数字表示循环寄存器对 $(C_i, D_i)$ 的比特序号，读取顺序是从左到右、从上到下，即 $D_i$ 的第 14、17、11、…、32位分别置换成 $C_i$ 的第 1、2、3、…、48位。</li>
</ul>
</li>
<li>具体实现如下<code>void initKey(const char key[8])</code>函数。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 置换 1 置换表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> REPLACE_ONE_TABLE[] = &#123;</div><div class="line">  <span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,</div><div class="line">  <span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,</div><div class="line">  <span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,</div><div class="line">  <span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,</div><div class="line">  <span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,</div><div class="line">  <span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,<span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,</div><div class="line">  <span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 压缩置换表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> COMPRESSION_REPLACE_TABLE[] = &#123;</div><div class="line">  <span class="number">14</span>,<span class="number">17</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">28</span>,</div><div class="line">  <span class="number">15</span>,<span class="number">6</span>,<span class="number">21</span>,<span class="number">10</span>,<span class="number">23</span>,<span class="number">19</span>,<span class="number">12</span>,<span class="number">4</span>,</div><div class="line">  <span class="number">26</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">7</span>,<span class="number">27</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">2</span>,</div><div class="line">  <span class="number">41</span>,<span class="number">52</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">47</span>,<span class="number">55</span>,<span class="number">30</span>,<span class="number">40</span>,</div><div class="line">  <span class="number">51</span>,<span class="number">45</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">44</span>,<span class="number">49</span>,<span class="number">39</span>,<span class="number">56</span>,</div><div class="line">  <span class="number">34</span>,<span class="number">53</span>,<span class="number">46</span>,<span class="number">42</span>,<span class="number">50</span>,<span class="number">36</span>,<span class="number">29</span>,<span class="number">32</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 每轮迭代循环左移位数表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEFT_SHIFT_TABLE[] = &#123;</div><div class="line">  <span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 16 轮子密钥</span></div><div class="line"><span class="keyword">bool</span> subKey[<span class="number">16</span>][<span class="number">48</span>] = &#123;<span class="number">0</span>&#125;;</div><div class="line"> </div><div class="line"><span class="comment">//--------------byte转换bit---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bytetobit</span><span class="params">(<span class="keyword">bool</span>* out, <span class="keyword">const</span> <span class="keyword">char</span>* in, <span class="keyword">int</span> bitslen)</span></span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitslen; i++)&#123;</div><div class="line">    out[i] = in[i/<span class="number">8</span>]&gt;&gt;(i%<span class="number">8</span>) &amp; <span class="number">0x1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//--------------置换操作---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tableReplace</span><span class="params">(<span class="keyword">bool</span>* out, <span class="keyword">const</span> <span class="keyword">bool</span>* in, <span class="keyword">const</span> <span class="keyword">int</span>* table, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> temp[<span class="number">256</span>];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">    temp[i] = in[table[i]<span class="number">-1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">memcpy</span>(out, temp, len);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//--------------循环左移---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">leftLoopShift</span><span class="params">(<span class="keyword">bool</span>* in, <span class="keyword">int</span> len, <span class="keyword">int</span> loop)</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> temp[<span class="number">256</span>];</div><div class="line">  <span class="built_in">memcpy</span>(temp, in, loop);</div><div class="line">  <span class="built_in">memcpy</span>(in, in+loop, len-loop);</div><div class="line">  <span class="built_in">memcpy</span>(in+len-loop, temp, loop);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*--------------密钥初始化---------------</div><div class="line"> * key[8]: 64 位密钥</div><div class="line"> * subKey[16][48]: 16 个 48-bit 子密钥</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initKey</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> key[<span class="number">8</span>])</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> kbit[<span class="number">64</span>],*kl = &amp;kbit[<span class="number">0</span>], *kr = &amp;kbit[<span class="number">28</span>];</div><div class="line">  bytetobit(kbit, key, <span class="number">64</span>);</div><div class="line">  <span class="comment">// 置换1</span></div><div class="line">  tableReplace(kbit, kbit, REPLACE_ONE_TABLE, <span class="number">56</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i ++)&#123;</div><div class="line">    leftloop(kl, <span class="number">28</span>, LEFT_SHIFT_TABLE[i]);</div><div class="line">    leftloop(kr, <span class="number">28</span>, LEFT_SHIFT_TABLE[i]);</div><div class="line">    <span class="comment">// 压缩置换</span></div><div class="line">    tableReplace(subKey[i], kbit, COMPRESSION_REPLACE_TABLE, <span class="number">48</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="明文加密过程"><a href="#明文加密过程" class="headerlink" title="明文加密过程"></a>明文加密过程</h4><p><center><img src="/img/programPearls/encryption/DES_Details.png" width="720px" alt="" /></center></p>
<ul>
<li>初始置换 $IP$：将 64bits 明文的位置进行置换，得到一个乱序的 64bits 明文组，而后分成左右两段，每段为 32bits，以 $L_0$ 和 $R_0$ 表示；$IP$ 中各列元素位置号相差为 8，相当于将明文各字节按列读出，各列比特经过偶采样和奇采样置换后，再对各行进行逆序。<ul>
<li>初始置换表 $IP$ 如下：<br>  <center><img src="/img/programPearls/encryption/DES_IPTable.png" width="360px" alt="" /></center><ul>
<li>即将初始置换表中的元素按行读出构成置换输出。</li>
<li>$IP$ 和最后的 $IP^{-1}$ 在密码上意义不大，它们的作用在于打乱原输入的 ASCII 码字划分的关系，并将原来明文的校验位<code>[8]</code>、<code>[16]</code>、…、<code>[64]</code>变成 $IP$ 输出的一个字节。</li>
</ul>
</li>
</ul>
</li>
<li>乘积变换 $f$：DES 算法的核心部分。<ul>
<li>将经过 $IP$ 置换后的数据分成 32bits 的左右两组，在迭代过程中彼此左右交换位置。</li>
<li>每次迭代时只对右边的 32bits $R_{i-1}$ 进行一系列的加密交换，在此轮迭代即将结束时，把左边的 32bits $L_{i-1}$ 与右边得到的 32bits $R_{i-1}$ 逐位模 2 相加，作为下一轮迭代时右边的段 $R_{i}$，并将原来右边未经变换的段 $R_{i-1}$ 直接送到左边的寄存器作为下一轮迭代时左边的段 $L_i$。<center><img src="/img/programPearls/encryption/DES_ProductTransform.png" width="420px" alt="" /></center></li>
<li>在每一轮迭代时，右边的段 $R_{i-1}$ 要经过选择扩展运算 E、密钥加密运算、选择压缩算法 S、置换运算 P 和左右混合运算。<ul>
<li>选择扩展运算 E（扩展置换）：将输入的 32bits $R_{i-1}$ 扩展成 48bits 的输出，令 s 表示 E 原输入数据比特的原下标，则 E 的输出是将原下标 $s[ 0或1 (mod 4)]$ 的各比特重复一次得到，即对原来第 1、4、5、8、9、…、32 各位都重复一次，实现数据扩展，将下表中数据按行读出得到 48bits 输出。<br>  <center><img src="/img/programPearls/encryption/DES_ExtendedOperation.png" width="720px" alt="" /></center><ul>
<li>扩展置换的目的有两个：①生成与密钥长度相同的数据以进行异或运算；②提供更长的结果，在后续的替代运算中可以进行压缩。</li>
</ul>
</li>
<li>选择压缩运算 S（S-盒代替）：将前面送来的 48bits 数据自左至右分成 8 组，每组 6bits，而后并行送入 8 个 S-盒，每个 S-盒为一个非线性代换网络，有 4 个输出，如下图：<br>  <center><img src="/img/programPearls/encryption/DES_CompressionOperation.png" width="420px" alt="" /></center><ul>
<li>每个 S-盒都是一个 4×16 的矩阵，每行都是 0～15 的数字，但每行的数字排列都不同；每个 S-盒有 6 位输入，4 位输出，6 位输入中的第 1 位和第 6 位数字组成的二进制数值决定置换矩阵的行数，其余 4 位数字所组成的二进制数值决定置换矩阵的列数，行数和列数交点的数字便是 S-盒的输出。<center><img src="/img/programPearls/encryption/DES_S1Box.png" width="480px" alt="" /></center></li>
<li>上表是 $S_1$-盒：假设 $S_1$-盒的输入是<code>110010</code>，因第 1 位和第 6 位数字组成的二进制数为：$10_{(2) = 2}$，对应$S_1$-盒行号为 2 的那一行，其余 4 个数字所组成的二进制数为：$1001{(2) = 9}$，对应 $S_1$-盒列号为 9 的那一列，交点处的数是 12，则 $S_1$-盒的输出为<code>1100</code>。</li>
<li><font color="blue">S-盒代替是 DES 算法的关键步骤，所有其它的运算都是线性的，易于分析；而 S-盒是非线性的，相比于其它步骤，提供了更好的安全性</font>。</li>
</ul>
</li>
<li>置换运算  P（P-盒置换）：对 $S_1$-至 $S_8$-盒输出的 32bits 数据进行坐标置换，置换表如下：<center><img src="/img/programPearls/encryption/DES_ReplacementOperation.png" width="720px" alt="" /></center></li>
<li>置换 P 输出的 32bits 数据与左边 32bits，即 $R{i-1}$ 逐位模 2 相加（异或运算），所得到的 32bits 作为下一轮迭代用的右边的数字段 $R_i$，并将 $R_{i-1}$ 并行送到左边的寄存器，作为下一轮迭代用的左边的数字段 $L_i$。</li>
</ul>
</li>
</ul>
</li>
<li>逆初始置换 $IP^{-1}$：将 16 轮迭代后给出的 64bits 组进行置换，得到输出的密文组，输出为逆初始置换表中元素按行读得的结果。<ul>
<li>逆初始置换表 $IP^{-1}$ 如下：<br><center><img src="/img/programPearls/encryption/DES_IPInverseTable.png" width="360px" alt="" /></center><br>$\quad$ 逆初始置换是初始置换的逆过程，DES 最后一轮后，左、右两半部分并未进行交换，而是两部分合并形成一个分组作为逆置换的输入，置换方法同上。</li>
</ul>
</li>
<li>具体实现如下<code>void DES(char out[8], char in[8], bool mode=encrypt)</code>函数。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> &#123;encrypt, decrypt&#125;;</div><div class="line"><span class="comment">// 初始置换表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> IP_TABLE[] = &#123;</div><div class="line">  <span class="number">58</span>,<span class="number">50</span>,<span class="number">42</span>,<span class="number">34</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">10</span>,<span class="number">2</span>,</div><div class="line">  <span class="number">60</span>,<span class="number">52</span>,<span class="number">44</span>,<span class="number">36</span>,<span class="number">28</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">4</span>,</div><div class="line">  <span class="number">62</span>,<span class="number">54</span>,<span class="number">46</span>,<span class="number">38</span>,<span class="number">30</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">6</span>,</div><div class="line">  <span class="number">64</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">40</span>,<span class="number">32</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">8</span>,</div><div class="line">  <span class="number">57</span>,<span class="number">49</span>,<span class="number">41</span>,<span class="number">33</span>,<span class="number">25</span>,<span class="number">17</span>,<span class="number">9</span>,<span class="number">1</span>,</div><div class="line">  <span class="number">59</span>,<span class="number">51</span>,<span class="number">43</span>,<span class="number">35</span>,<span class="number">27</span>,<span class="number">19</span>,<span class="number">11</span>,<span class="number">3</span>,</div><div class="line">  <span class="number">61</span>,<span class="number">53</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">29</span>,<span class="number">21</span>,<span class="number">13</span>,<span class="number">5</span>,</div><div class="line">  <span class="number">63</span>,<span class="number">55</span>,<span class="number">47</span>,<span class="number">39</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">15</span>,<span class="number">7</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">// 逆初始置换表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> IIP_TABLE[] = &#123;</div><div class="line">  <span class="number">40</span>,<span class="number">8</span>,<span class="number">48</span>,<span class="number">16</span>,<span class="number">56</span>,<span class="number">24</span>,<span class="number">64</span>,<span class="number">32</span>,</div><div class="line">  <span class="number">39</span>,<span class="number">7</span>,<span class="number">47</span>,<span class="number">15</span>,<span class="number">55</span>,<span class="number">23</span>,<span class="number">63</span>,<span class="number">31</span>,</div><div class="line">  <span class="number">38</span>,<span class="number">6</span>,<span class="number">46</span>,<span class="number">14</span>,<span class="number">54</span>,<span class="number">22</span>,<span class="number">62</span>,<span class="number">30</span>,</div><div class="line">  <span class="number">37</span>,<span class="number">5</span>,<span class="number">45</span>,<span class="number">13</span>,<span class="number">53</span>,<span class="number">21</span>,<span class="number">61</span>,<span class="number">29</span>,</div><div class="line">  <span class="number">36</span>,<span class="number">4</span>,<span class="number">44</span>,<span class="number">12</span>,<span class="number">52</span>,<span class="number">20</span>,<span class="number">60</span>,<span class="number">28</span>,</div><div class="line">  <span class="number">35</span>,<span class="number">3</span>,<span class="number">43</span>,<span class="number">11</span>,<span class="number">51</span>,<span class="number">19</span>,<span class="number">59</span>,<span class="number">27</span>,</div><div class="line">  <span class="number">34</span>,<span class="number">2</span>,<span class="number">42</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">18</span>,<span class="number">58</span>,<span class="number">26</span>,</div><div class="line">  <span class="number">33</span>,<span class="number">1</span>,<span class="number">41</span>,<span class="number">9</span>,<span class="number">49</span>,<span class="number">17</span>,<span class="number">57</span>,<span class="number">25</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// E 位选择表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> E_TABLE[] = &#123;</div><div class="line">  <span class="number">32</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,</div><div class="line">  <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,</div><div class="line">  <span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,</div><div class="line">  <span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,</div><div class="line">  <span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,</div><div class="line">  <span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,</div><div class="line">  <span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,</div><div class="line">  <span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">1</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// S1-S8盒</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> S_BOX[<span class="number">8</span>][<span class="number">4</span>][<span class="number">16</span>] = &#123;</div><div class="line">  <span class="comment">//S1</span></div><div class="line">  <span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>,</div><div class="line">  <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>,</div><div class="line">  <span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>,</div><div class="line">  <span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>,</div><div class="line">  <span class="comment">//S2</span></div><div class="line">  <span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>,</div><div class="line">  <span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>,</div><div class="line">  <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>,</div><div class="line">  <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>,</div><div class="line">  <span class="comment">//S3</span></div><div class="line">  <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>,</div><div class="line">  <span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>,</div><div class="line">  <span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>,</div><div class="line">  <span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>,</div><div class="line">  <span class="comment">//S4</span></div><div class="line">  <span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>,</div><div class="line">  <span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>,</div><div class="line">  <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>,</div><div class="line">  <span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>,</div><div class="line">  <span class="comment">//S5</span></div><div class="line">  <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>,</div><div class="line">  <span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>,</div><div class="line">  <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>,</div><div class="line">  <span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>,</div><div class="line">  <span class="comment">//S6</span></div><div class="line">  <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>,</div><div class="line">  <span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>,</div><div class="line">  <span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>,</div><div class="line">  <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>,</div><div class="line">  <span class="comment">//S7</span></div><div class="line">  <span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>,</div><div class="line">  <span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>,</div><div class="line">  <span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>,</div><div class="line">  <span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>,</div><div class="line">  <span class="comment">//S8</span></div><div class="line">  <span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>,</div><div class="line">  <span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>,</div><div class="line">  <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>,</div><div class="line">  <span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// P-盒置换表</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P_TABLE[] = &#123;</div><div class="line">  <span class="number">16</span>,<span class="number">7</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">29</span>,<span class="number">12</span>,<span class="number">28</span>,<span class="number">17</span>,</div><div class="line">  <span class="number">1</span>,<span class="number">15</span>,<span class="number">23</span>,<span class="number">26</span>,<span class="number">5</span>,<span class="number">18</span>,<span class="number">31</span>,<span class="number">10</span>,</div><div class="line">  <span class="number">2</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">14</span>,<span class="number">32</span>,<span class="number">27</span>,<span class="number">3</span>,<span class="number">9</span>,</div><div class="line">  <span class="number">19</span>,<span class="number">13</span>,<span class="number">30</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">11</span>,<span class="number">4</span>,<span class="number">25</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">//--------------byte转换bit---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bytetobit</span><span class="params">(<span class="keyword">bool</span>* out, <span class="keyword">const</span> <span class="keyword">char</span>* in, <span class="keyword">int</span> bitslen)</span></span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bitslen; i++)&#123;</div><div class="line">    out[i] = in[i/<span class="number">8</span>]&gt;&gt;(i%<span class="number">8</span>) &amp; <span class="number">0x1</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//--------------置换操作---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tableReplace</span><span class="params">(<span class="keyword">bool</span>* out, <span class="keyword">const</span> <span class="keyword">bool</span>* in, <span class="keyword">const</span> <span class="keyword">int</span>* table, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> temp[<span class="number">256</span>];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">    temp[i] = in[table[i]<span class="number">-1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">memcpy</span>(out, temp, len);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//--------------异或操作---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span><span class="params">(<span class="keyword">bool</span>* ina, <span class="keyword">const</span> <span class="keyword">bool</span>* inb, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">    ina[i] ^= inb[i];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//--------------S盒变换---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sFunc</span><span class="params">(<span class="keyword">bool</span> out[<span class="number">32</span>], <span class="keyword">const</span> <span class="keyword">bool</span> in[<span class="number">48</span>])</span></span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j,k; i&lt;<span class="number">8</span>; i++,in+=<span class="number">6</span>,out+=<span class="number">4</span>)&#123;</div><div class="line">    j = (in[<span class="number">0</span>]&lt;&lt;<span class="number">1</span>) + in[<span class="number">5</span>];</div><div class="line">    k = (in[<span class="number">1</span>]&lt;&lt;<span class="number">3</span>) + (in[<span class="number">2</span>]&lt;&lt;<span class="number">2</span>) + (in[<span class="number">3</span>]&lt;&lt;<span class="number">1</span>) + in[<span class="number">4</span>];</div><div class="line">    bytetobit(out, &amp;S_BOX[i][j][k], <span class="number">4</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//--------------密码处理 f 函数---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fFunc</span><span class="params">(<span class="keyword">bool</span> in[<span class="number">32</span>], <span class="keyword">const</span> <span class="keyword">bool</span> subkey[<span class="number">48</span>])</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> mr[<span class="number">48</span>];</div><div class="line">  <span class="comment">// E 扩展置换</span></div><div class="line">  tableReplace(mr, in, E_TABLE, <span class="number">48</span>);</div><div class="line">  <span class="comment">// 异或操作</span></div><div class="line">  xor(mr, subkey, <span class="number">48</span>);</div><div class="line">  <span class="comment">// S-盒代替</span></div><div class="line">  sFunc(in, mr);</div><div class="line">  <span class="comment">// P-盒置换</span></div><div class="line">    tableReplace(in, in, P_TABLE, <span class="number">32</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//--------------bite转换byte---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bittobyte</span><span class="params">(<span class="keyword">char</span>* out, <span class="keyword">const</span> <span class="keyword">bool</span>* in, <span class="keyword">int</span> bitslen)</span></span>&#123;</div><div class="line">  <span class="built_in">memset</span>(out, <span class="number">0</span>, (bitslen+<span class="number">7</span>)/<span class="number">8</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;bitslen; i++)&#123;</div><div class="line">    out[i/<span class="number">8</span>] |= in[i]&lt;&lt;(i%<span class="number">8</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//--------------加密解密处理---------------</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DES</span><span class="params">(<span class="keyword">char</span> out[<span class="number">8</span>], <span class="keyword">char</span> in[<span class="number">8</span>], <span class="keyword">bool</span> mode=encrypt)</span></span>&#123;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> obit[<span class="number">64</span>], temp[<span class="number">32</span>], *li = &amp;obit[<span class="number">0</span>], *ri = &amp;obit[<span class="number">32</span>];</div><div class="line"> </div><div class="line">  bytetobit(obit, in, <span class="number">64</span>);</div><div class="line">  <span class="comment">// 初始置换</span></div><div class="line">  tableReplace(obit, obit, IP_TABLE, <span class="number">64</span>);</div><div class="line"> 	<span class="comment">// 乘积变换</span></div><div class="line">  <span class="keyword">if</span>(mode == encrypt) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; i++)&#123;</div><div class="line">      <span class="built_in">memcpy</span>(temp, ri, <span class="number">32</span>);</div><div class="line">      fFunc(ri, subKey[i]);</div><div class="line">      xor(ri, li, <span class="number">32</span>);</div><div class="line">      <span class="built_in">memcpy</span>(li, temp, <span class="number">32</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">15</span>; i&gt;=<span class="number">0</span>; i--)&#123;</div><div class="line">      <span class="built_in">memcpy</span>(temp, li, <span class="number">32</span>);</div><div class="line">      fFunc(li, subkey[i]);</div><div class="line">      xor(li, ri, <span class="number">32</span>);</div><div class="line">      <span class="built_in">memcpy</span>(ri, temp, <span class="number">32</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 逆初始置换</span></div><div class="line">  tableReplace(obit, obit, IIP_TABLE, <span class="number">64</span>);</div><div class="line">  bittobyte(out, obit, <span class="number">64</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="密文解密过程"><a href="#密文解密过程" class="headerlink" title="密文解密过程"></a>密文解密过程</h4><ul>
<li>DES 是一种 16 轮循环的 <strong>Feistel 网络</strong>，在 Feistel 网络中，加密的各个步骤称为轮，整个加密过程就是进行若干次轮的循环；无论是任何轮数、任何轮函数，Feistel 网络都可以用相同的结构实现加密和解密，且加密结果必定能够正确解密。<center><img src="/img/programPearls/encryption/DES_FlowChart.png" width="420px" alt="" /></center></li>
<li>那么，基于 Feistel 网络的 DES 算法如何解密呢？很简单，只要按照逆序来使用子密钥，即输入变成密文，输出则为明文了；<font color="blue">此外，需要注意的是，加密过程的最后一轮存在左右互换（如上图），因此在解密过程中，在进入 Feistel 网络之前需要先将经过初始置换的密文左右互换，完成 $L_{16}$、$R_{16}$ 初始化</font>。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DES 解密</span></div><div class="line"><span class="built_in">bitset</span>&lt;64&gt; decrypt(<span class="built_in">bitset</span>&lt;<span class="number">64</span>&gt;&amp; cipher) &#123;</div><div class="line">  <span class="built_in">bitset</span>&lt;64&gt; plain;</div><div class="line">  <span class="built_in">bitset</span>&lt;64&gt; currentBits;</div><div class="line">  <span class="built_in">bitset</span>&lt;32&gt; left;</div><div class="line">  <span class="built_in">bitset</span>&lt;32&gt; right;</div><div class="line">  <span class="built_in">bitset</span>&lt;32&gt; newLeft;</div><div class="line">  <span class="comment">// 第一步：初始置换IP</span></div><div class="line">  ...</div><div class="line">  </div><div class="line">  <span class="comment">// 第二步：获取 L16 和 R16</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</div><div class="line">    left[i<span class="number">-32</span>] = currentBits[i];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</div><div class="line">    right[i] = currentBits[i];</div><div class="line">  </div><div class="line">  <span class="comment">// 第三步：共16轮迭代（子密钥逆序应用）</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> round=<span class="number">0</span>; round&lt;<span class="number">16</span>; ++round &#123;</div><div class="line">    ... subKey[<span class="number">15</span>-round]</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 第四步：合并 L0 和 R0，注意合并为 R0L0</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; ++i)</div><div class="line">    plain[i] = left[i];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">32</span>; i&lt;<span class="number">64</span>; ++i)</div><div class="line">    plain[i] = right[i<span class="number">-32</span>];</div><div class="line">  </div><div class="line">  <span class="comment">// 第五步：逆初始置换</span></div><div class="line">  ...</div><div class="line">  </div><div class="line">  <span class="comment">// 返回明文</span></div><div class="line">  <span class="keyword">return</span> plain;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br/></p>
<ul>
<li>虽然 56 位密钥的 DES 算法已经风光不在，而且常有用 DES 加密的明文被破译的报道，但目前 DES 算法得到了广泛的应用，在某些场合，仍然发挥着余热。</li>
</ul>
<h3 id="3DES-算法"><a href="#3DES-算法" class="headerlink" title="3DES 算法"></a>3DES 算法</h3><ul>
<li>3DES 简介<ul>
<li>密码学中，3DES（Triple DES）是三重数据加密算法（Triple Data Encryption Algorithm）块密码的通称，它相当于是对每个数据块应用三次 DES 加密算法。</li>
<li>由于计算机运算能力的增强，原版 DES 密码的密钥长度变得容易被暴力破解；3DES 即是设计用来提供一种相对简单的方法，即通过增加 DES 的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。</li>
</ul>
</li>
<li>3DES 加密过程<ul>
<li>加密算法为：密文 = $E_{K_3}(D_{K_2}(E_{K_1}(明文)))$，其中 $E$ 为 DES 加密操作，$D$ 为 DES 解密操作。<center><img src="/img/programPearls/encryption/3DES_Diagram.jpg" width="480px" alt="" /></center></li>
<li>3DES 将密钥长度增至 112 位或 168 位，通过增加迭代次数提高安全性；标准定义了三种密钥选项：<ul>
<li>密钥选项①：三个密钥独立的，强度最高，拥有 3×56=168 个独立的密钥位；</li>
<li>密钥选项②：$K_1$ 和 $K_2$ 是独立的，而 $K_3 = K_1$，安全性稍低，拥有 2×56=112 个独立的密钥位；</li>
<li>密钥选项③：三个密钥均相等，即 $K_1 = K_2 = K_3$，等同于 DES，只有 56 个密钥位，因为第 1 和第 2 次 DES 操作相互抵消了，因此与 DES 兼容。</li>
</ul>
</li>
</ul>
</li>
<li>3DES 解密过程<ul>
<li>解密算法为：明文 = $D_{K_3}(E_{K_2}(D_{K_3}(密文)))$，3DES 的解密过程和加密相反，是以密钥 $K_3$、$K_2$、$K_1$ 的顺序进行解密、加密、解密的操作，即将上图从明文到密文的箭头反过来就是解密的流程。</li>
</ul>
</li>
<li>3DES 是 DES 向 AES 过渡的加密算法，3DES 存在以下缺点：处理速度较慢、密钥计算时间较长，加密效率不高。</li>
</ul>
<h3 id="AES-算法"><a href="#AES-算法" class="headerlink" title="AES 算法"></a>AES 算法</h3><ul>
<li>AES 简介<ul>
<li>对于三种对称密码，DES 因为已经很容易被暴力破解，因此不建议再使用；3DES 目前还被银行等机构使用，但其处理速度不高，而且在安全性方面也逐渐显现出了一些问题；AES 作为最新标准，安全、快速，而且可以在各种平台上工作，可以算是目前最佳的选择。</li>
<li>AES 是取代其前任标准 DES 而成为新标准的一种对称密码算法。AES 最终候选算法名单中，总共有 5 种算法，分别为：MARS、RC6、Rijndael、Serpent、Twofish，最终被选定为 AES 的是 <strong>Rijndael 算法</strong>。<center><img src="/img/programPearls/encryption/AES_FlowChart(De&En).png" width="640px" alt="" /></center></li>
</ul>
</li>
<li>AES 算法（即 Rijndael 算法）是一种对称分组密码算法，数据长度必须是 128bits，使用的密钥长度为 128bits、192bits 或 256bits，对于三种不同长度的 AES 算法，分别称为<strong>“AES-128”</strong>、<strong>“AES-192”</strong>、<strong>“AES-256”</strong>，上图是 AES 加密解密的整体流程图，其中<ul>
<li>状态（State）：密码运算的中间结果称为状态，状态用以字节为基本构成元素的矩阵阵列来表示，该阵列有 4 行，列数记为 $Nb$，Nb = 分组长度（bits）÷32；</li>
<li>密码密钥（Cipher Key）的表示：Cipher Key类似地用一个 4 行的矩阵阵列来表示，列数记为 $Nk$，Nk = 密钥长度（bits）÷32；<center><img src="/img/programPearls/encryption/AES_NbNkNr.png" width="480px" alt="" /></center></li>
<li>$Nr$：加密的轮数，对于不同的密钥长度，轮数不一样，具体如上表。<center><img src="/img/programPearls/encryption/AES_OrganizeMatrix.png" width="480px" alt="" /></center></li>
<li>算法中 16 字节（128bits）、192bits、256bits 的明文、密文和轮密钥以一个 4×4、4×6、4×8 的矩阵表示，组织排列方式如上，以字节为单位。</li>
</ul>
</li>
</ul>
<h4 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h4><ul>
<li>加解密中每轮的密钥分别由初始密钥扩展得到。密钥 bit 的总数 = 分组长度 ×（轮数 + 1）；字总数 = 分组列数 Nb ×（轮数 Nr + 1）。</li>
<li>AES 算法通过密钥扩展（Key Expansion）将用户输入的密钥 K 扩展生成 <font color="blue">$Nb(Nr+1)$ 个字</font>，存放在一个线性数组<code>w[Nb*(Nr+1)]</code>中，具体如下：<ul>
<li>位置变换（<code>RotWord</code>）：接受一个字 [a0, a1, a2, a3] 作为输入，循环左移一个字节后输出 [a1, a2, a3, a0]；</li>
<li>S-盒变换（<code>SubWord</code>/<code>SubBytes</code>）：S-盒是一个 16×16 的表，其中每一个元素是一个字节；接受一个字 [a0, a1, a2, a3] 的输入，对于输入的每一个字节 ai，前四位 ai[7…4] 组成十六进制数作为行号，后四位 ai[3…0] 组成十六进制数作为列号，查找表中对应的值；最后函数输出 4 个新字节组成的 32-bit 字；</li>
<li>轮常数（<code>Rcon</code>）：直接当做常量数组使用；</li>
<li>扩展密钥数组<code>w[]</code>的前 $Nk$ 个元素就是外部密钥 $K$，以后的元素<code>w[i]</code>等于它的前一个元素<code>w[i-1]</code>与前 $Nk$ 个元素 <code>w[i-Nk]</code>的异或，即 <code>w[i] = w[i-1] XOR w[i-Nk]</code>；但若 $i$ 为 $Nk$ 的倍数，则 <code>w[i] = w[i-Nk] XOR SubWord(RotWord(w[i-1]) XOR Rcon[i/Nk - 1])$</code>。</li>
<li>详细的伪代码如下：<br><img src="/img/programPearls/encryption/AES_KeyExpansionPseudocode.png" width="540px" alt="" /></li>
</ul>
</li>
<li>  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">typedef bitset&lt;8&gt; byte;</div><div class="line">typedef bitset&lt;32&gt; word;</div><div class="line"> </div><div class="line">const int Nr = 10;  // AES-128需要 10 轮加密</div><div class="line">const int Nk = 4;   // Nk 表示输入密钥的 word 个数</div><div class="line"> </div><div class="line">// S盒</div><div class="line">byte S_BOX[16][16] = &#123;</div><div class="line">  /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */</div><div class="line">  0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, /*0*/ </div><div class="line">  0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, /*1*/</div><div class="line">  0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, /*2*/</div><div class="line">  0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, /*3*/</div><div class="line">  0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, /*4*/</div><div class="line">  0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, /*5*/</div><div class="line">  0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, /*6*/ </div><div class="line">  0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, /*7*/</div><div class="line">  0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, /*8*/</div><div class="line">  0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, /*9*/</div><div class="line">  0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, /*a*/</div><div class="line">  0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, /*b*/</div><div class="line">  0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, /*c*/</div><div class="line">  0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, /*d*/</div><div class="line">  0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, /*e*/</div><div class="line">  0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  /*f*/</div><div class="line">&#125;;</div><div class="line">  </div><div class="line">// 将4个 byte 转换为一个 word.</div><div class="line">word Word(byte&amp; k1, byte&amp; k2, byte&amp; k3, byte&amp; k4) &#123;</div><div class="line">  word result(0x00000000);</div><div class="line">  word temp;</div><div class="line">  temp = k1.to_ulong();  // K1</div><div class="line">  temp &lt;&lt;= 24;</div><div class="line">  result |= temp;</div><div class="line">  temp = k2.to_ulong();  // K2</div><div class="line">  temp &lt;&lt;= 16;</div><div class="line">  result |= temp;</div><div class="line">  temp = k3.to_ulong();  // K3</div><div class="line">  temp &lt;&lt;= 8;</div><div class="line">  result |= temp;</div><div class="line">  temp = k4.to_ulong();  // K4</div><div class="line">  result |= temp;</div><div class="line">  return result;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">/**</div><div class="line"> *  按字节 循环左移一位</div><div class="line"> *  即把[a0, a1, a2, a3]变成[a1, a2, a3, a0]</div><div class="line"> */</div><div class="line">word RotWord(word&amp; rw) &#123;</div><div class="line">  word high = rw &lt;&lt; 8;</div><div class="line">  word low = rw &gt;&gt; 24;</div><div class="line">  return high | low;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">/**</div><div class="line"> *  对输入word中的每一个字节进行S-盒变换</div><div class="line"> */</div><div class="line">word SubWord(word&amp; sw) &#123;</div><div class="line">  word temp;</div><div class="line">  for(int i=0; i&lt;32; i+=8) &#123;</div><div class="line">    int row = sw[i+7]*8 + sw[i+6]*4 + sw[i+5]*2 + sw[i+4];</div><div class="line">    int col = sw[i+3]*8 + sw[i+2]*4 + sw[i+1]*2 + sw[i];</div><div class="line">    byte val = S_Box[row][col];</div><div class="line">    for(int j=0; j&lt;8; ++j)</div><div class="line">      temp[i+j] = val[j];</div><div class="line">  &#125;</div><div class="line">  return temp;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">/**</div><div class="line"> *  密钥扩展函数 - 对Nk-word密钥进行扩展得到 w[4*(Nr+1)]</div><div class="line"> */ </div><div class="line">void KeyExpansion(byte key[4*Nk], word w[4*(Nr+1)])</div><div class="line">&#123;</div><div class="line">  word temp;</div><div class="line">  int i = 0;</div><div class="line">  // w[]的前4个就是输入的key</div><div class="line">  while(i &lt; Nk) &#123;</div><div class="line">    w[i] = Word(key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]);</div><div class="line">    ++i;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  i = Nk;</div><div class="line"> </div><div class="line">  while(i &lt; 4*(Nr+1))&#123;</div><div class="line">    temp = w[i-1]; // 记录前一个word</div><div class="line">    if(i % Nk == 0)</div><div class="line">      w[i] = w[i-Nk] ^ SubWord(RotWord(temp)) ^ Rcon[i/Nk-1];</div><div class="line">    else </div><div class="line">      w[i] = w[i-Nk] ^ temp;</div><div class="line">    ++i;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>从扩展密钥中取出轮密钥：第一个轮密钥由扩展密钥的第一个 $Nb$ 个字（4 字节），第二个轮密钥由接下来的 $Nb$ 个字组成，一次类推。<h4 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h4></li>
<li>依据本节开头的 AES 流程图可以得到下图的伪代码：<br>  <center><img src="/img/programPearls/encryption/AES_CipherPseudocode.png" width="640px" alt="" /></center><ul>
<li>从伪代码描述中可以看出，AES 加密时主要涉及以下几个步骤<ul>
<li>字节替换（SubBytes） 就是根据一张替换表（S-Box），将输入中每个字节的值替换成另一个字节的值，在密钥扩展部分已经介绍了；</li>
<li>行移位（ShiftRows） 即将 SubBytes 的输出以字节为单位进行打乱出路，这种打乱处理也是有规律的：通过作用于行上的循环左移，第 0 行不变，第 1 行循环移位 $C1$ 字节，第 2 行循环移位 $C2$ 字节，第 3 行循环移位 $C3$ 字节，如下图：<center><img src="/img/programPearls/encryption/AES_ShiftRows.png" width="540px" alt="" /></center><br>$\quad$ 偏移量 $C1$、$C2$、$C3$ 与分组长度 $Nb$ 有关，如下表所示：<br><center><img src="/img/programPearls/encryption/AES_ShiftRowsTable.png" width="280px" alt="" /></center></li>
<li>列混淆（MixColumns） 即对一个 4 字节的值进行变换，将其变成另外一个 4 字节的值，变换方式如下：<br><center><img src="/img/programPearls/encryption/AES_MixColumns.png" width="540px" alt="" /></center><br>$\quad$ <font color="red">注意公式中用到的乘法是伽罗华域（$GF(2^8)$，有限域）上的乘法</font>。</li>
<li>轮密钥加（AddRoundKey） ：扩展密钥只参与了这一步，就是将 MixColumns 的输出与轮密钥进行按位 XOR 处理，至此，一轮就结束了。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line">typedef bitset&lt;8&gt; byte;</div><div class="line">typedef bitset&lt;32&gt; word;</div><div class="line"> </div><div class="line">const int Nr = 10;  // AES-128需要 10 轮加密</div><div class="line">const int Nk = 4;   // Nk 表示输入密钥的 word 个数</div><div class="line"> </div><div class="line">// S盒</div><div class="line">byte S_BOX[16][16] = &#123;</div><div class="line">  /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f */</div><div class="line">  0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76, /*0*/ </div><div class="line">  0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0, /*1*/</div><div class="line">  0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15, /*2*/</div><div class="line">  0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75, /*3*/</div><div class="line">  0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84, /*4*/</div><div class="line">  0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf, /*5*/</div><div class="line">  0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8, /*6*/ </div><div class="line">  0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2, /*7*/</div><div class="line">  0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73, /*8*/</div><div class="line">  0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb, /*9*/</div><div class="line">  0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79, /*a*/</div><div class="line">  0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08, /*b*/</div><div class="line">  0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a, /*c*/</div><div class="line">  0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e, /*d*/</div><div class="line">  0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf, /*e*/</div><div class="line">  0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16  /*f*/</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">// S盒变换 -每个字节前4位为行号，后4位为列号</div><div class="line">void SubBytes(byte mtx[4*4]) &#123;</div><div class="line">  for(int i=0; i&lt;16; ++i) &#123;</div><div class="line">    int row = mtx[i][7]*8 + mtx[i][6]*4 + mtx[i][5]*2 + mtx[i][4];</div><div class="line">    int col = mtx[i][3]*8 + mtx[i][2]*4 + mtx[i][1]*2 + mtx[i][0];</div><div class="line">    mtx[i] = S_Box[row][col];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 行变换 - 按字节循环移位</div><div class="line">void ShiftRows(byte mtx[4*4]) &#123;</div><div class="line">  // 第二行循环左移一位</div><div class="line">  byte temp = mtx[4];</div><div class="line">  for(int i=0; i&lt;3; ++i)</div><div class="line">    mtx[i+4] = mtx[i+5];</div><div class="line">  mtx[7] = temp;</div><div class="line">  // 第三行循环左移两位</div><div class="line">  for(int i=0; i&lt;2; ++i) &#123;</div><div class="line">    temp = mtx[i+8];</div><div class="line">    mtx[i+8] = mtx[i+10];</div><div class="line">    mtx[i+10] = temp;</div><div class="line">  &#125;</div><div class="line">  // 第四行循环左移三位</div><div class="line">  temp = mtx[15];</div><div class="line">  for(int i=3; i&gt;0; --i)</div><div class="line">    mtx[i+12] = mtx[i+11];</div><div class="line">  mtx[12] = temp;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 有限域上的乘法 GF(2^8)</div><div class="line">byte GFMul(byte a, byte b) &#123; </div><div class="line">  byte p = 0;</div><div class="line">  byte hi_bit_set;</div><div class="line">  for (int counter = 0; counter &lt; 8; counter++) &#123;</div><div class="line">    if ((b &amp; byte(1)) != 0) &#123;</div><div class="line">      p ^= a;</div><div class="line">    &#125;</div><div class="line">    hi_bit_set = (byte) (a &amp; byte(0x80));</div><div class="line">    a &lt;&lt;= 1;</div><div class="line">    if (hi_bit_set != 0) &#123;</div><div class="line">      a ^= 0x1b; /* x^8 + x^4 + x^3 + x + 1 */</div><div class="line">    &#125;</div><div class="line">    b &gt;&gt;= 1;</div><div class="line">  &#125;</div><div class="line">  return p;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 列混淆</div><div class="line">void MixColumns(byte mtx[4*4]) &#123;</div><div class="line">  byte arr[4];</div><div class="line">  for(int i=0; i&lt;4; ++i) &#123;</div><div class="line">    for(int j=0; j&lt;4; ++j)</div><div class="line">      arr[j] = mtx[i+j*4];</div><div class="line"> </div><div class="line">    mtx[i] = GFMul(0x02, arr[0]) ^ GFMul(0x03, arr[1]) ^ arr[2] ^ arr[3];</div><div class="line">    mtx[i+4] = arr[0] ^ GFMul(0x02, arr[1]) ^ GFMul(0x03, arr[2]) ^ arr[3];</div><div class="line">    mtx[i+8] = arr[0] ^ arr[1] ^ GFMul(0x02, arr[2]) ^ GFMul(0x03, arr[3]);</div><div class="line">    mtx[i+12] = GFMul(0x03, arr[0]) ^ arr[1] ^ arr[2] ^ GFMul(0x02, arr[3]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 轮密钥加变换 - 将每一列与扩展密钥进行异或</div><div class="line">void AddRoundKey(byte mtx[4*4], word k[4]) &#123;</div><div class="line">  for(int i=0; i&lt;4; ++i) &#123;</div><div class="line">    word k1 = k[i] &gt;&gt; 24;</div><div class="line">    word k2 = (k[i] &lt;&lt; 8) &gt;&gt; 24;</div><div class="line">    word k3 = (k[i] &lt;&lt; 16) &gt;&gt; 24;</div><div class="line">    word k4 = (k[i] &lt;&lt; 24) &gt;&gt; 24;</div><div class="line">    </div><div class="line">    mtx[i] = mtx[i] ^ byte(k1.to_ulong());</div><div class="line">    mtx[i+4] = mtx[i+4] ^ byte(k2.to_ulong());</div><div class="line">    mtx[i+8] = mtx[i+8] ^ byte(k3.to_ulong());</div><div class="line">    mtx[i+12] = mtx[i+12] ^ byte(k4.to_ulong());</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 加密</div><div class="line">void encrypt(byte in[4*4], word w[4*(Nr+1)]) &#123;</div><div class="line">  word key[4];</div><div class="line">  for(int i=0; i&lt;4; ++i)</div><div class="line">    key[i] = w[i];</div><div class="line">  AddRoundKey(in, key);</div><div class="line"> </div><div class="line">  for(int round=1; round&lt;Nr; ++round)&#123;</div><div class="line">    SubBytes(in);</div><div class="line">    ShiftRows(in);</div><div class="line">    MixColumns(in);</div><div class="line">    for(int i=0; i&lt;4; ++i)</div><div class="line">      key[i] = w[4*round+i];</div><div class="line">    AddRoundKey(in, key);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  SubBytes(in);</div><div class="line">  ShiftRows(in);</div><div class="line">  for(int i=0; i&lt;4; ++i)</div><div class="line">    key[i] = w[4*Nr+i];</div><div class="line">  AddRoundKey(in, key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程"></a>解密过程</h4><ul>
<li>①AES 使用的并不是 Feistel 网络，而是 SPN 结构，加密时的 SubBytes、ShiftRows、MixColumns，解密时分别为反向运算的 InvSubBytes、InvShiftRows、InvMixColumns，这是因为 SPN 结构不像 Feistel 网络一样能够用一种结构实现加密和解密；②加解密所有操作的顺序正好是相反的；正是这两点，保证了解密能够正确地恢复明文。</li>
<li>依据本节开头的 AES 流程图可以得到下图的伪代码：<br>  <center><img src="/img/programPearls/encryption/AES_InvCipherPseudocode.png" width="640px" alt="" /></center><ul>
<li>从伪代码描述中可以看出，AES 解密时主要涉及以下几个步骤<ul>
<li>逆行移位（InvShiftRows）：加密时是对矩阵每一行进行循环左移，所以解密时的 InvShiftRows 操作是对矩阵每一行进行循环右移；</li>
<li>逆字节替换（InvSubBytes）：与加密时的字节替换一样也是查表，查表的方式也一样，只不过查的是另外一张表，S-Box 的逆表；</li>
<li>逆列混淆（MixColumns）：与加密时的列混淆一样，只不过变换公式中的系数矩阵发生了变化，如下图：<center><img src="/img/programPearls/encryption/AES_InvMixColumns.png" width="640px" alt="" /></center></li>
<li>轮密钥加（AddRoundKey） ：与加密时的操作一致。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">typedef bitset&lt;8&gt; byte;</div><div class="line">typedef bitset&lt;32&gt; word;</div><div class="line"> </div><div class="line">const int Nr = 10;  // AES-128需要 10 轮加密</div><div class="line">const int Nk = 4;   // Nk 表示输入密钥的 word 个数</div><div class="line"> </div><div class="line">// S-盒逆表</div><div class="line">byte INV_S_BOX[16][16] = &#123;</div><div class="line">  /*  0    1    2    3    4    5    6    7    8    9    a    b    c    d    e    f  */ </div><div class="line">  0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb, /*0*/</div><div class="line">  0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb, /*1*/</div><div class="line">  0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e, /*2*/</div><div class="line">  0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25, /*3*/</div><div class="line">  0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92, /*4*/</div><div class="line">  0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84, /*5*/</div><div class="line">  0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06, /*6*/</div><div class="line">  0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b, /*7*/</div><div class="line">  0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73, /*8*/</div><div class="line">  0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e, /*9*/</div><div class="line">  0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b, /*a*/</div><div class="line">  0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4, /*b*/</div><div class="line">  0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f, /*c*/</div><div class="line">  0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef, /*d*/</div><div class="line">  0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61, /*e*/</div><div class="line">  0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d  /*f*/</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">// 逆行变换 - 以字节为单位循环右移</div><div class="line">void InvShiftRows(byte mtx[4*4]) &#123;</div><div class="line">  // 第二行循环右移一位</div><div class="line">  byte temp = mtx[7];</div><div class="line">  for(int i=3; i&gt;0; --i)</div><div class="line">    mtx[i+4] = mtx[i+3];</div><div class="line">  mtx[4] = temp;</div><div class="line">  // 第三行循环右移两位</div><div class="line">  for(int i=0; i&lt;2; ++i) &#123;</div><div class="line">    temp = mtx[i+8];</div><div class="line">    mtx[i+8] = mtx[i+10];</div><div class="line">    mtx[i+10] = temp;</div><div class="line">  &#125;</div><div class="line">  // 第四行循环右移三位</div><div class="line">  temp = mtx[12];</div><div class="line">  for(int i=0; i&lt;3; ++i)</div><div class="line">    mtx[i+12] = mtx[i+13];</div><div class="line">  mtx[15] = temp;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 逆字节替换</div><div class="line">void InvSubBytes(byte mtx[4*4]) &#123;</div><div class="line">  for(int i=0; i&lt;16; ++i) &#123;</div><div class="line">    int row = mtx[i][7]*8 + mtx[i][6]*4 + mtx[i][5]*2 + mtx[i][4];</div><div class="line">    int col = mtx[i][3]*8 + mtx[i][2]*4 + mtx[i][1]*2 + mtx[i][0];</div><div class="line">    mtx[i] = Inv_S_Box[row][col];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 有限域上的乘法 GF(2^8)</div><div class="line">byte GFMul(byte a, byte b) &#123; </div><div class="line">  byte p = 0;</div><div class="line">  byte hi_bit_set;</div><div class="line">  for (int counter = 0; counter &lt; 8; counter++) &#123;</div><div class="line">    if ((b &amp; byte(1)) != 0) &#123;</div><div class="line">      p ^= a;</div><div class="line">    &#125;</div><div class="line">    hi_bit_set = (byte) (a &amp; byte(0x80));</div><div class="line">    a &lt;&lt;= 1;</div><div class="line">    if (hi_bit_set != 0) &#123;</div><div class="line">      a ^= 0x1b; /* x^8 + x^4 + x^3 + x + 1 */</div><div class="line">    &#125;</div><div class="line">    b &gt;&gt;= 1;</div><div class="line">  &#125;</div><div class="line">  return p;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 逆列混淆</div><div class="line">void InvMixColumns(byte mtx[4*4]) &#123;</div><div class="line">  byte arr[4];</div><div class="line">  for(int i=0; i&lt;4; ++i) &#123;</div><div class="line">    for(int j=0; j&lt;4; ++j)</div><div class="line">      arr[j] = mtx[i+j*4];</div><div class="line"> </div><div class="line">    mtx[i] = GFMul(0x0e, arr[0]) ^ GFMul(0x0b, arr[1]) </div><div class="line">      ^ GFMul(0x0d, arr[2]) ^ GFMul(0x09, arr[3]);</div><div class="line">    mtx[i+4] = GFMul(0x09, arr[0]) ^ GFMul(0x0e, arr[1]) </div><div class="line">      ^ GFMul(0x0b, arr[2]) ^ GFMul(0x0d, arr[3]);</div><div class="line">    mtx[i+8] = GFMul(0x0d, arr[0]) ^ GFMul(0x09, arr[1]) </div><div class="line">      ^ GFMul(0x0e, arr[2]) ^ GFMul(0x0b, arr[3]);</div><div class="line">    mtx[i+12] = GFMul(0x0b, arr[0]) ^ GFMul(0x0d, arr[1]) </div><div class="line">      ^ GFMul(0x09, arr[2]) ^ GFMul(0x0e, arr[3]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 轮密钥加变换 - 将每一列与扩展密钥进行异或</div><div class="line">void AddRoundKey(byte mtx[4*4], word k[4]) &#123;</div><div class="line">  for(int i=0; i&lt;4; ++i) &#123;</div><div class="line">    word k1 = k[i] &gt;&gt; 24;</div><div class="line">    word k2 = (k[i] &lt;&lt; 8) &gt;&gt; 24;</div><div class="line">    word k3 = (k[i] &lt;&lt; 16) &gt;&gt; 24;</div><div class="line">    word k4 = (k[i] &lt;&lt; 24) &gt;&gt; 24;</div><div class="line">     </div><div class="line">    mtx[i] = mtx[i] ^ byte(k1.to_ulong());</div><div class="line">    mtx[i+4] = mtx[i+4] ^ byte(k2.to_ulong());</div><div class="line">    mtx[i+8] = mtx[i+8] ^ byte(k3.to_ulong());</div><div class="line">    mtx[i+12] = mtx[i+12] ^ byte(k4.to_ulong());</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">// 解密</div><div class="line">void decrypt(byte in[4*4], word w[4*(Nr+1)]) &#123;</div><div class="line">  word key[4];</div><div class="line">  for(int i=0; i&lt;4; ++i)</div><div class="line">    key[i] = w[4*Nr+i];</div><div class="line">  AddRoundKey(in, key);</div><div class="line"> </div><div class="line">  for(int round=Nr-1; round&gt;0; --round) &#123;</div><div class="line">    InvShiftRows(in);</div><div class="line">    InvSubBytes(in);</div><div class="line">    for(int i=0; i&lt;4; ++i)</div><div class="line">      key[i] = w[4*round+i];</div><div class="line">    AddRoundKey(in, key);</div><div class="line">    InvMixColumns(in);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  InvShiftRows(in);</div><div class="line">  InvSubBytes(in);</div><div class="line">  for(int i=0; i&lt;4; ++i)</div><div class="line">    key[i] = w[i];</div><div class="line">  AddRoundKey(in, key);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2006/12/notes_on_cryptography.html">阮一峰: 密码学笔记</a></li>
<li><a href="http://www.jianshu.com/p/7e30a71626a8">DES加密算法：设计与实现</a></li>
<li><a href="http://www.alonemonkey.com/2016/05/25/aes-and-des/">AloneMonkey: DES和AES算法详解</a></li>
<li><a href="http://www.cnblogs.com/songwenlong/p/5944139.html">安全体系（一）—— DES算法详解</a></li>
<li><a href="http://keeganlee.me/post/reading/20160629">Keegan小钢: 读《图解密码技术》(一):密码</a></li>
<li><a href="https://my.oschina.net/zchuanzhao/blog/525898">对称加密算法DES、3DES原理和实现方式</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E9%87%8D%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">Wikipedia：三重資料加密演算法-密钥选项</a></li>
<li><a href="https://songlee24.github.io/2014/12/13/aes-encrypt/">神奕的博客：AES加密算法的C++实现</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DES </tag>
            
            <tag> AES </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JPEG编码&算术编码、LZW编码]]></title>
      <url>/2017/07/11/programPearls_JPEG$Arithmetic$LZW/</url>
      <content type="html"><![CDATA[<p>　　本文介绍 JPEG 编解码过程（附简单的<code>cpp</code>实现）。JPEG 中常用到的熵编码是变长编码：Huffman 编码，本文也对算术编码（附<code>cpp</code>实现）、LZW 编码（附<code>py</code>实现）两种熵编码进行介绍。<a id="more"></a></p>
<h4 id="JPEG-编解码过程"><a href="#JPEG-编解码过程" class="headerlink" title="JPEG 编解码过程"></a>JPEG 编解码过程</h4><ul>
<li>JPEG 编码过程<br>  <center><img src="/img/programPearls/jpeg/JPEG_Diagram.jpg" width="480px" alt=""/></center><ul>
<li>色彩空间转换<br>$\quad$ 将 RGB 色彩空间转换到其他色彩空间，比如 YUV 色彩空间，根据人对亮度更敏感些，增加亮度的信号，减少颜色的信号，以这样“欺骗”人的眼睛的手段来节省空间。YUV 的格式也很多，常见的有 420 和 422 格式。在 420 格式中，<font color="blue">每四个 Y 共用一组  UV 分量</font>，每个 YUV 分量和 RGB 一样都用 8 位来表示，YUV 色彩空间就比 RGB 色彩空间所需的存储空间少一半，数据就被压缩到了一半。</li>
<li>将图像 8×8 分块<br>$\quad$ 对图像按一定的采样格式进行采样，常见的格式有 4:4:4、4:2:2 和 4:2:0，采样完成后，将图像按 8×8(pixel) 划分成 MCU。</li>
<li>离散余弦变换 DCT<ul>
<li>DCT 将时间或空间数据变成频率数据，利用人的听觉或视觉对高频信号（的变化）不敏感和对不同频带数据的感知特征不一样等特点，可以对多媒体数据进行压缩。</li>
<li>DCT 是数码率压缩需要常用的一个变换编码方法：①任何连续的实对称函数的傅里叶变换中只含余弦项，因此余弦变换与傅里叶变换一样有明确的物理意义；②由于大多数图像的高频分量较小，相应于图像高频分量的系数经常为零，加上人眼对高频成分的失真不敏感，所以可用更粗的量化。</li>
<li>传送变换系数的数码率要大大小于传送图像像素所用的数码率，到达接收端后通过反离散余弦变换回到样值，虽然会有一定的失真，但人眼是可以接受的。</li>
<li>二维正反离散余弦变换（FDCT/IDCT）的公式如下：<br>$$C(\omega) = \begin{cases} \frac{1}{\sqrt{2}}, \space\space \omega = 0 \cr 1, \quad \omega \gt 0 \end{cases}$$ $$ FDCT: F(u, v) = \frac{2}{N} C(u)C(v) \sum_{x=0}^{N-1} \sum_{y=0}^{N-1} f(x, y) cos[\frac{(2x+1)u \pi}{2N}] cos[\frac{(2y+1)v \pi}{2N}]$$ $$IDCT: f(x, y) = \frac{2}{N} \sum_{u=0}^{N-1} \sum_{v=0}^{N-1} C(u)C(v)F(u, v) cos[\frac{(2x+1)u \pi}{2N}] cos[\frac{(2y+1)v \pi}{2N}]$$<ul>
<li>其中 $N$ 是像块的水平、垂直像素数，一般取 $N=8$。$N$ 大于 8 时效率增加不多但复杂性大为增加。8×8 的二维数据块经 DCT 后变成 8×8 个变换系数，这些系数都有明确的意义：$F(u=0, v=0)$ 是原 64 个样值的平均，相当于直流分量；随着 $u$、$v$ 值增加，相应系数分别代表逐步增加的水平空间频率和垂直空间频率分量的大小，如下图：<center><img src="/img/programPearls/jpeg/DCT_schematic.png" width="440px" alt=""/></center></li>
<li>图像信号被分解成直流信号+从低频到高频的各种余弦成分；DCT 系数只是表示了该种成分所占原图像信号的份额大小；显然，恢复图像信息可以表示这样一个矩阵形式：$f(x, y) = F(u, v) * C(u, v)$，$C(u, v)$ 是一个基底，$F(u, v)$ 是 DCT 系数，$f(x, y)$ 则是图像信号。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>FDCT</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> w)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> w&gt;<span class="number">0</span>?<span class="number">1</span>:<span class="keyword">double</span>(<span class="number">1</span>/<span class="built_in">sqrt</span>(<span class="number">2</span>));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">func_F</span><span class="params">(<span class="keyword">int</span> f[][<span class="number">8</span>], <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">8</span>; j++)&#123;</div><div class="line">      sum += f[i][j]*<span class="built_in">cos</span>((<span class="number">2</span>*i+<span class="number">1</span>)*u*M_PI/<span class="number">16</span>)*<span class="built_in">cos</span>((<span class="number">2</span>*j+<span class="number">1</span>)*v*M_PI/<span class="number">16</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0.25</span>*C(u)*C(v)*sum;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// DCT transform </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fdct</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;<span class="number">8</span>; row++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;<span class="number">8</span>;col++)&#123;</div><div class="line">      F[row][col] = func_F(f, row, col);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>量化（quantization）<ul>
<li>量化是对经过 FDCT 变换后的频率系数进行量化，是一个将信号的幅度离散化的过程，离散信号经过量化后变为数字信号；量化的目的是减少非“0”系数的幅度以及增加“0”值系数的数目，利用人眼对高频部分不敏感的特性来舍去高频部分。</li>
<li>对于有损压缩算法，JPEG 算法使用均匀量化器进行量化，量化步距是按照系数所在的位置和每种颜色分量的色调值来确定的，因为人眼对亮度信号比对色差信号敏感，因此使用了如下两种量化表：标准亮度量化表（<code>bright_table.txt</code>）和标准色差量化表（<code>color_diff_table.txt</code>）。</li>
</ul>
</li>
<li><figure class="highlight cpp"><figcaption><span>bright_table.txt</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">17</span>	<span class="number">18</span>	<span class="number">24</span>	<span class="number">47</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span></div><div class="line"><span class="number">18</span>	<span class="number">21</span>	<span class="number">26</span>	<span class="number">66</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span></div><div class="line"><span class="number">24</span>	<span class="number">26</span>	<span class="number">56</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span></div><div class="line"><span class="number">47</span>	<span class="number">66</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span></div><div class="line"><span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span></div><div class="line"><span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span></div><div class="line"><span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span></div><div class="line"><span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span>	<span class="number">99</span></div></pre></td></tr></table></figure>
</li>
<li><figure class="highlight cpp"><figcaption><span>color_diff_table.txt</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">16</span>	<span class="number">11</span>	<span class="number">10</span>	<span class="number">16</span>	<span class="number">24</span>	<span class="number">40</span>	<span class="number">51</span>	<span class="number">61</span></div><div class="line"><span class="number">12</span>	<span class="number">12</span>	<span class="number">14</span>	<span class="number">19</span>	<span class="number">26</span>	<span class="number">58</span>	<span class="number">60</span>	<span class="number">55</span></div><div class="line"><span class="number">14</span>	<span class="number">13</span>	<span class="number">16</span>	<span class="number">24</span>	<span class="number">40</span>	<span class="number">57</span>	<span class="number">69</span>	<span class="number">56</span></div><div class="line"><span class="number">14</span>	<span class="number">17</span>	<span class="number">22</span>	<span class="number">29</span>	<span class="number">51</span>	<span class="number">87</span>	<span class="number">80</span>	<span class="number">62</span></div><div class="line"><span class="number">18</span>	<span class="number">22</span>	<span class="number">37</span>	<span class="number">56</span>	<span class="number">68</span>	<span class="number">109</span>	<span class="number">103</span>	<span class="number">77</span></div><div class="line"><span class="number">24</span>	<span class="number">35</span>	<span class="number">55</span>	<span class="number">64</span>	<span class="number">81</span>	<span class="number">104</span>	<span class="number">113</span>	<span class="number">92</span></div><div class="line"><span class="number">49</span>	<span class="number">64</span>	<span class="number">78</span>	<span class="number">87</span>	<span class="number">103</span>	<span class="number">121</span>	<span class="number">120</span>	<span class="number">101</span></div><div class="line"><span class="number">72</span>	<span class="number">92</span>	<span class="number">95</span>	<span class="number">98</span>	<span class="number">112</span>	<span class="number">100</span>	<span class="number">103</span>	<span class="number">99</span></div></pre></td></tr></table></figure>
<ul>
<li>由于人眼对低频分量的图像比对高频分量更敏感，因此左上角的量化步距要比右下角的量化步距小；把 DCT 系数块的数值除以对应量化表位置上的数值，并四舍五入到最近的整数；解码的时候，反量化步骤会乘回量化表相应值，但是四舍五入导致低频有所损失，高频“0”字段被舍弃；这一步为有损运算，会导致图像质量变低，量化是图像质量下降的最主要原因，所以说 JPEG 编码是有损压缩。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> Q[<span class="number">8</span>][<span class="number">8</span>];</div><div class="line"><span class="keyword">int</span> Sq[<span class="number">8</span>][<span class="number">8</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">color_diff_quantization_table_init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span>&#123;</div><div class="line">  <span class="function">ifstream <span class="title">in</span><span class="params">(filename)</span></span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;<span class="number">8</span>; row++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;<span class="number">8</span>; col++)&#123;</div><div class="line">      in &gt;&gt; Q[row][col];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  in.close();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Sq(u,v) = round(F(u,v) / Q(u,v))</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quantilize</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  <span class="comment">//color_diff_quantization_table_init("bright_table.txt");</span></div><div class="line">  color_diff_quantization_table_init(<span class="string">"color_diff_table.txt"</span>);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;<span class="number">8</span>; row++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;<span class="number">8</span>;col++)&#123;</div><div class="line">      Sq[row][col] = round(F[row][col] / Q[row][col]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>zig-zag Z 字形游程编码<br>$\quad$ 量化后的数据还可以通过以下 ZigZag 表的规则进行重排后，重排后的结果中可以看到出现连续的多个 0，达到简化、更大程度的去压缩，这样有利于进行游程编码。<center><img src="/img/programPearls/jpeg/zig-zagTable.png" width="720px" alt=""/></center></li>
<li>使用差分脉冲编码调制（DPCM）对直流系数（DC）进行编码<br>$\quad$ 8×8 图像经过 DCT 变换之后得到的 DC 直流系数有两个特点：一是系数的数值比较大；二是相邻 8×8 图像块的 DC 系数值变化不大。根据这两个特点，JPEG 算法使用了差分脉冲调制编码（DPCM）技术，对相邻图像块之间量化的 DC 系数的差值（Delta）进行编码：$Delta = DC(0, 0)_k - DC(0, 0)_{k-1}$</li>
<li>使用行程长度编码（RLE）对交流系数（AC）进行编码<ul>
<li>Z 字形读出的量化后的 AC 系数的特点是 1×64 矢量中包含有许多“0”系数并且许多“0”是连续的，因此使用非常简单和直观的游程长度编码（RLE）对它们进行编码：只将“0”作为重复的内容，JPEG 使用了一个字节的高4位来表示连续“0”的个数（最多重复内容可以记录数量为 15，超过 15 次要进行分段处理），而使用它的低4位来表示编码下一个非“0”系数所需要的位数；特别到最后，如果都是“0”，在读到最后一个数后，只要给出“快结束”（EOB）码字，就可以结束输出，因此节省了很多码率。</li>
<li>如下面的 4×4 图像块 $\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\ 2 &amp; 4 &amp; 0 &amp; 0 \\ 5 &amp; 0 &amp; 0 &amp; 0 \\ 8 &amp; 0 &amp; 0 &amp; 0 \end{bmatrix}$，按 Z 字形抽取得到的码字是：$\verb|{| 1, 0, 2, 5, 4, 0, 0, 0, 0, 8, 0, …, 0 \verb|}|$，经过游程编码得到的码值为：<code>(0,1,0)(1,2,0)(0,5,0)(0,4,0)(4,8,1)EOB</code></li>
</ul>
</li>
<li>熵编码（Huffman或算术）<ul>
<li>使用熵编码还可以对 DPCM 编码后的直流 DC 系数和 RLE 编码后的交流 AC 系数作进一步的压缩；常用的熵编码有变长编码，即 哈弗曼（Huffman）编码。</li>
<li>Huffman 编码的基本原理：根据数据中元素出现的基本频率，调整元素的编码长度，以得到更高的压缩比；编码方法：对出现概率大的符号分配短字长的二进制码，对出现概率小的符号分配长字长的二进制码，得到符号的平均码长最短的码。</li>
<li>Huffman 编码的步骤：<ol>
<li>将符号按概率从小到大顺序从左至右排列叶节点；</li>
<li>连接两个概率最小的顶层节点来组成一个父节点，并在到左右子节点的两条连线上分别标记“0”和“1”（可以对概率大的赋值“0”，小的赋值“1”）；</li>
<li>重复步骤<code>2</code>，直到得到根节点，形成一棵二叉树；</li>
<li>从根节点开始到相应于每个符号的叶节点的 0/1 串，就是该符号的二进制编码。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;queue&gt;</div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;climits&gt; // for CHAR_BIT</div><div class="line">#include &lt;iterator&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line"> </div><div class="line">const int UniqueSymbols = 1 &lt;&lt; CHAR_BIT;</div><div class="line">const char* SampleString = "this is an example for huffman encoding";</div><div class="line"> </div><div class="line">typedef std::vector&lt;bool&gt; HuffCode;</div><div class="line">typedef std::map&lt;char, HuffCode&gt; HuffCodeMap;</div><div class="line"> </div><div class="line">class INode &#123;</div><div class="line">public:</div><div class="line">    const int f;</div><div class="line">    virtual ~INode() &#123;&#125;</div><div class="line">protected:</div><div class="line">    INode(int f) : f(f) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">class InternalNode : public INode &#123;</div><div class="line">public:</div><div class="line">    INode *const left;</div><div class="line">    INode *const right;</div><div class="line">    InternalNode(INode* c0, INode* c1) : INode(c0-&gt;f + c1-&gt;f), left(c0), right(c1) &#123;&#125;</div><div class="line">    ~InternalNode()&#123;</div><div class="line">        delete left;</div><div class="line">        delete right;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">class LeafNode : public INode &#123;</div><div class="line">public:</div><div class="line">    const char c;</div><div class="line">    LeafNode(int f, char c) : INode(f), c(c) &#123;&#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">struct NodeCmp&#123;</div><div class="line">    bool operator() (const INode* lhs, const INode* rhs) const &#123; return lhs-&gt;f &gt; rhs-&gt;f; &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">INode* BuildTree(const int (&amp;frequencies)[UniqueSymbols]) &#123;</div><div class="line">    std::priority_queue&lt;INode*, std::vector&lt;INode*&gt;, NodeCmp&gt; trees;</div><div class="line"> </div><div class="line">    for (int i = 0; i &lt; UniqueSymbols; ++i) &#123;</div><div class="line">        if(frequencies[i] != 0)</div><div class="line">            trees.push(new LeafNode(frequencies[i], (char)i));</div><div class="line">    &#125;</div><div class="line">    while (trees.size() &gt; 1) &#123;</div><div class="line">        INode* childR = trees.top();</div><div class="line">        trees.pop();</div><div class="line"> </div><div class="line">        INode* childL = trees.top();</div><div class="line">        trees.pop();</div><div class="line"> </div><div class="line">        INode* parent = new InternalNode(childR, childL);</div><div class="line">        trees.push(parent);</div><div class="line">    &#125;</div><div class="line">    return trees.top();</div><div class="line">&#125;</div><div class="line"> </div><div class="line">void GenerateCodes(const INode* node, const HuffCode&amp; prefix, HuffCodeMap&amp; outCodes) &#123;</div><div class="line">    if (const LeafNode* lf = dynamic_cast&lt;const LeafNode*&gt;(node)) &#123;</div><div class="line">        outCodes[lf-&gt;c] = prefix;</div><div class="line">    &#125;</div><div class="line">    else if (const InternalNode* in = dynamic_cast&lt;const InternalNode*&gt;(node)) &#123;</div><div class="line">        HuffCode leftPrefix = prefix;</div><div class="line">        leftPrefix.push_back(false);</div><div class="line">        GenerateCodes(in-&gt;left, leftPrefix, outCodes);</div><div class="line"> </div><div class="line">        HuffCode rightPrefix = prefix;</div><div class="line">        rightPrefix.push_back(true);</div><div class="line">        GenerateCodes(in-&gt;right, rightPrefix, outCodes);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">int main() &#123;</div><div class="line">    // Build frequency table</div><div class="line">    int frequencies[UniqueSymbols] = &#123;0&#125;;</div><div class="line">    const char* ptr = SampleString;</div><div class="line">    while (*ptr != '\0')</div><div class="line">        ++frequencies[*ptr++];</div><div class="line"> </div><div class="line">    INode* root = BuildTree(frequencies);</div><div class="line"> </div><div class="line">    HuffCodeMap codes;</div><div class="line">    GenerateCodes(root, HuffCode(), codes);</div><div class="line">    delete root;</div><div class="line"> </div><div class="line">    for (HuffCodeMap::const_iterator it = codes.begin(); it != codes.end(); ++it) &#123;</div><div class="line">        std::cout &lt;&lt; it-&gt;first &lt;&lt; " ";</div><div class="line">        std::copy(it-&gt;second.begin(), it-&gt;second.end(),</div><div class="line">                  std::ostream_iterator&lt;bool&gt;(std::cout));</div><div class="line">        std::cout &lt;&lt; std::endl;</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>组成位数据流<br>$\quad$ JPEG 编码的最后一个步骤是把各种标记代码和编码后的图像数据组成一帧一帧的数据，这样做的目的是为了便于传输、存储和译码器进行译码，这样组织的数据通常称为 JPEG 位数据流（JPEG bitstream）。</li>
</ul>
</li>
<li>JPEG 解码过程<br>  <center><img src="/img/programPearls/jpeg/JPEG_Decompression.jpg" width="640px" alt=""/></center><ul>
<li>AC 系数、DC 系数的解码<br>$\quad$ 每个颜色分量单元都应该由两部分组成：1 个直流分量和 63 个交流分量。</li>
<li>直流系数的差分编码</li>
<li>反量化</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// inverse quantization</span></div><div class="line"><span class="keyword">int</span> invSq[<span class="number">8</span>][<span class="number">8</span>];</div><div class="line"> </div><div class="line"><span class="comment">// invSq(u,v) = Sq(u,v) * Q(u,v)</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inverse_quantilize</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;<span class="number">8</span>; row++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;<span class="number">8</span>;col++)&#123;</div><div class="line">      invSq[row][col] = Sq[row][col] * Q[row][col];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>反 Zig-Zag 编码</li>
<li>反离散余弦变换（Inverse DCT）</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reconstructed sample data</span></div><div class="line"><span class="keyword">int</span> invV[<span class="number">8</span>][<span class="number">8</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">func_f</span><span class="params">(<span class="keyword">int</span> F[][<span class="number">8</span>], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">0</span>; u&lt;<span class="number">8</span>; u++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;<span class="number">8</span>; v++)&#123;</div><div class="line">      sum += C(u)*C(v)*F[u][v]*<span class="built_in">cos</span>((<span class="number">2</span>*i+<span class="number">1</span>)*u*M_PI/<span class="number">16</span>)*<span class="built_in">cos</span>((<span class="number">2</span>*j+<span class="number">1</span>)*v*M_PI/<span class="number">16</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;	</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0.25</span>*sum;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reconstruct</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  <span class="comment">// inverse DCT transform</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;<span class="number">8</span>; row++)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;<span class="number">8</span>;col++)&#123;</div><div class="line">      invV[row][col] = func_f(invSq, row, col);</div><div class="line">      <span class="comment">// inverse of pre process</span></div><div class="line">      invV[row][col] += <span class="number">128</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>YCrCb（YUV） 向 RGB 转换</li>
</ul>
</li>
</ul>
<h4 id="算术编码"><a href="#算术编码" class="headerlink" title="算术编码"></a>算术编码</h4><ul>
<li>算术编码克服了 Huffman 编码必须为整数位，这与实数的概率值相差大的缺点，如在 Huffman 编码中，本来只需要 0.1 位就可以表示的符号，却必须用 1 位来表示，结果造成 10 倍的浪费。算术编码所采用的解决办法是，不用二进制代码来表示符号，而改用 $[0，1)$ 中的一个宽度等于其出现概率的实数区间来表示一个符号，符号表中的所有符号刚好布满整个 $[0，1)$ 区间（概率之和为 1，不重不漏），<font color="blue">把输入符号串（数据流）映射成 $[0，1)$ 区间中的一个实数值</font>。</li>
<li>编码方法<ul>
<li>符号串编码方法：将串中使用的符号表按原编码（如字符的ASCII编码、数字的二进制编码）从小到大顺序排列成表，计算表中每种符号 $s_i$ 出现的概率 $p_i$，然后依次根据这些符号概率大小 $p_i$ 来确定其在 $[0, 1)$ 期间中对应的小区间范围 $[x_i, y_i)$<br>$$ x_i = \sum_{j=0}^{i-1} p_j, y_i = x_i + p_i, i=1, …, m$$</li>
<li>对输入符号串进行编码<ul>
<li>设串中第 $j$ 个符号 $c_j$ 为符号表中的第 $i$ 个符号 $s_i$，则可根据 $s_i$ 在符号表中所对应区间的上下限 $x_i$ 和 $y_i$，来计算编码区间 $I_j = [l_j, r_j)$：$l_j = l_{j-1} + d_{j-1}·x_i$，$r_j = l_{j-1} + d_{j-1}·y_i$；</li>
<li>其中，$d_j = r_j - l_j$ 为区间 $I_j$ 的宽度，$l_0 = 0，r_0 = 1，d_0 = 1$。显然，$l_j$↑而 $d_j$ 与 $r_j$↓。串的最后一个符号所对应区间的下限 $l_n$ 就是该符号串的算术编码值。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STRLEN 100</span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">char</span> str[STRLEN], source_str[STRLEN];</div><div class="line">  <span class="keyword">int</span> str_len;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input a string..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cin</span>.getline(str, STRLEN);</div><div class="line"></div><div class="line">  str_len = <span class="built_in">strlen</span>(str);</div><div class="line">  <span class="built_in">strcpy</span>(source_str, str);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"*input string length: "</span>);</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; str_len &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"*sorting string letters in dictionary order: "</span>);</div><div class="line">  sort(str, str+str_len);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\"%s\"\n"</span>, str);</div><div class="line"> </div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; word;				<span class="comment">//存放字符串中的字符word[i]</span></div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; freq;				<span class="comment">//存放word[i]字符所对应的频率freq[i]</span></div><div class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; endpoint;			<span class="comment">//每个字符word[i]对应频率区间的左右点[endpoint[2i], endpoint[2i+1]);</span></div><div class="line">   </div><div class="line">  <span class="comment">// 计算每个字母的频率(by dictionary order)</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str_len;)&#123;</div><div class="line">    <span class="keyword">int</span> tmp_num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> cur_word = str[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; str_len; j++)&#123;</div><div class="line">      <span class="keyword">if</span> (str[j] == cur_word)&#123;</div><div class="line">        tmp_num++;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    word.push_back(cur_word);</div><div class="line">    freq.push_back(<span class="keyword">double</span>(tmp_num) / str_len);</div><div class="line">    i += tmp_num;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">//for (int i = 0; i &lt; word.size(); i++)&#123;</span></div><div class="line">  <span class="comment">//	cout &lt;&lt; word[i]&lt;&lt; " " &lt;&lt; freq[i] &lt;&lt; endl;</span></div><div class="line">  <span class="comment">//&#125;</span></div><div class="line">   </div><div class="line">  <span class="comment">// 计算每个字母的频率区间的左右端点</span></div><div class="line">  <span class="keyword">double</span> left_endpoint = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.size(); i++)&#123;</div><div class="line">    endpoint.push_back(left_endpoint);</div><div class="line">    left_endpoint += freq[i];</div><div class="line">    endpoint.push_back(left_endpoint);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\n----------- Symbol Table -----------\n"</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.size(); i++)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\'%c\' %8.6lf [%8.6lf, %8.6lf)\n"</span>, word[i], freq[i], endpoint[<span class="number">2</span>*i], endpoint[<span class="number">2</span>*i+<span class="number">1</span>]);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 编码</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\n----------- Arithmetic Coding -----------\n"</span>);</div><div class="line">  <span class="keyword">double</span> left = <span class="number">0.</span>, right = <span class="number">1.</span>, delta = <span class="number">1.</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str_len; i++)&#123;</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; word.size(); j++)&#123;</div><div class="line">      <span class="keyword">if</span> (source_str[i] == word[j])&#123;</div><div class="line">        index = j;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    left = left + delta*endpoint[<span class="number">2</span> * index];</div><div class="line">    right = left + delta*endpoint[<span class="number">2</span> * index + <span class="number">1</span>];</div><div class="line">    <span class="comment">// delta = right - left = delta * (endpoint[2 * index + 1] - endpoint[2 * index]) = delta * freq[index]</span></div><div class="line">    delta = delta*freq[index];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%c %0.18lf %0.18lf %0.18lf\n"</span>, source_str[i], left, right, delta);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"*Arithmetic Coding Result: %.18lf\n"</span>, left);</div><div class="line">  </div><div class="line">  <span class="comment">//...</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>解码方法<ul>
<li>由符号表（包括符号对应的概率与区间）和实数编码 $l_n$，可以按下面的解码算法来重构输入符号串。<ul>
<li>① 设 $v_1 = l_n = \space$码值；</li>
<li>② 若 $v_j \in [x_i, y_j) \Longrightarrow c_j = s_i, j = 1, …, n$；</li>
<li>③ $v_{j+1} = \frac{v_j - x_i}{p_j}, j = 1, …, n-1$，重复步骤②、③。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; word;				<span class="comment">//存放字符串中的字符word[i]</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; freq;				<span class="comment">//存放word[i]字符所对应的频率freq[i]</span></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; endpoint;			<span class="comment">//每个字符word[i]对应频率区间的左右点[endpoint[2i], endpoint[2i+1]);</span></div><div class="line"> </div><div class="line"><span class="built_in">printf</span>(<span class="string">"*Arithmetic Coding Result: %.18lf\n"</span>, left);</div><div class="line"> </div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n----------- Arithmetic Decoding -----------\n"</span>);</div><div class="line"><span class="keyword">double</span> v = left;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str_len; i++)&#123;</div><div class="line">  <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; word.size(); j++)&#123;</div><div class="line">    <span class="keyword">if</span> (v &lt; endpoint[<span class="number">2</span> * j + <span class="number">1</span>])&#123;</div><div class="line">      index = j;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%.18lf %d \'%c\'\n"</span>, v, index+<span class="number">1</span>, word[index]);</div><div class="line">  v = (v - endpoint[<span class="number">2</span> * index]) / freq[index];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="LZW编码"><a href="#LZW编码" class="headerlink" title="LZW编码"></a>LZW编码</h4><ul>
<li>LZW 编码和 Huffman编码、算术编码一样，是无损压缩中的一种；该算法通过建立字典，实现字符重用与编码，适用于 source 中重复率很高的文本压缩。<ul>
<li>LZW 算法是一种基于字典的编码——将变长的输入符号串映射成定长的码字——形成一本短语词典索引（串表），利用字符出现的频率冗余度及串模式高使用率冗余度达到压缩的目的。该算法只需一遍扫描，且具有自适应的特点（从空表开始逐步生成串表，码字长从 1 逐步增加到12），</font color="blue">不需保存和传送串表</font>。</li>
<li>串表具有前缀性——若串 $wc$（$c$ 为字符）在串表中，则串 $w$ 也在串表中（所以，可初始化串表为含所有单个字符的串）。</li>
<li>匹配采用贪婪算法——每次只识别与匹配串表中最长的已有串 $w$（输出对应的码字）、并可与下一输入字符 $c$ 拼成一个新的码字 $wc$。</li>
</ul>
</li>
<li>LZW 压缩算法<ul>
<li>初始化<ul>
<li>①将所有单个字符（$n$ 个不同字符）的串放入串表 ST 中（共 $n$ 项[码字为$1~n$]，实际操作时不必放入，只需空出串表的前 $n$ 项，字符对应码字所对应的串表索引即可）；</li>
<li>②读首字符入前缀串 $w$；</li>
<li>③设置码长 $codeBits = n+1$；</li>
<li>④设置串表中当前表项的索引值 $next = 初始码字 = n+1$</li>
</ul>
</li>
<li>循环<ul>
<li>⑤读下一输入字符 $c$；</li>
<li>⑥若 $c=EOF$（文件结束符），则输出 $w$ 的码字 $dict[w]$，结束循环（输出结束码字）；</li>
<li>⑦若 $wc$ 已在串表中，则 $w = wc$，转到循环开始处⑤；否则，输出 $w$ 的码字 $dict[w]$，将 $wc$ 放入 ST 中的 $next$ 处，$next++$；令 $w=c$，转到循环开始处⑤；</li>
<li>⑧若 $next$ 的位数超过码长（$\gt codeBits$），则 $codeBits++$；若串表已满（$next$ 的位数已超过最大码长 12），则清空串表，输出清表码字，转到初始化开始处①（一般不太可能发生）。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># coding= utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> sys</div><div class="line"> </div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line"> </div><div class="line">input = raw_input(<span class="string">u"请输入字符串："</span>.encode(<span class="string">'mbcs'</span>))</div><div class="line"><span class="keyword">print</span> <span class="string">u"编码过程："</span></div><div class="line">inputlist = list(input)</div><div class="line"> </div><div class="line">wclist = list(set(inputlist))</div><div class="line">diclen = len(wclist)</div><div class="line">wclist.sort()</div><div class="line">phrases_dict = &#123;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>, diclen+<span class="number">1</span>):</div><div class="line">    phrases_dict[x] = wclist[x<span class="number">-1</span>]</div><div class="line"> </div><div class="line">nextlist = range(<span class="number">1</span>, len(wclist)+<span class="number">1</span>)</div><div class="line">wlist = [<span class="string">'--'</span>] * len(wclist)</div><div class="line">procedurelist = [<span class="string">'--'</span>] * len(wclist)</div><div class="line">poslist = [<span class="string">'--'</span>]*len(wclist)</div><div class="line">mstr = <span class="string">''</span></div><div class="line">nstr = <span class="string">''</span></div><div class="line">k = <span class="number">0</span></div><div class="line"> </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(inputlist)):</div><div class="line">    nstr = nstr + inputlist[i]</div><div class="line">    <span class="keyword">if</span> nstr <span class="keyword">in</span> wclist:</div><div class="line">        mstr = nstr</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        k = k+<span class="number">1</span></div><div class="line">        wclist.append(nstr)</div><div class="line">        nextlist.append(len(nextlist)+<span class="number">1</span>)</div><div class="line">        a = wclist.index(mstr)</div><div class="line">        wlist.append(a+<span class="number">1</span>)</div><div class="line">        procedurelist.append(k)</div><div class="line">        poslist.append(i-len(nstr)+<span class="number">2</span>)</div><div class="line">        mstr = inputlist[i]</div><div class="line">        nstr = inputlist[i]</div><div class="line"> </div><div class="line">wclist.append(<span class="string">'--'</span>)</div><div class="line">nextlist.append(<span class="string">'--'</span>)</div><div class="line">a = wclist.index(mstr)</div><div class="line">wlist.append(a+<span class="number">1</span>)</div><div class="line">procedurelist.append(k+<span class="number">1</span>)</div><div class="line">poslist.append(<span class="string">'--'</span>)</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">u'步 骤  位 置   Next      Wc      输出W'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(wclist)):</div><div class="line">    <span class="keyword">print</span> <span class="string">'%s\t %s\t %s\t %s\t %s\t'</span>%(procedurelist[i], poslist[i], nextlist[i], wclist[i], wlist[i])</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>LZW 还原算法<ul>
<li>初始化<ul>
<li>①将所有单个字符（$n$ 个不同字符）的串放入串表 ST 中（共 $n$ 项[码字为$1~n$]，实际操作时不必放入，只需空出串表的前 $n$ 项，字符对应码字所对应的串表索引即可）；</li>
<li>②设置码长 $codeBits = n+1$；</li>
<li>③设置串表中当前表项的索引值 $next = 初始码字 = n+1$</li>
<li>④读首个码字（所对应的单个字符）入老串 $old$，输出该字符；</li>
</ul>
</li>
<li>循环<ul>
<li>⑤读下一码字 $new$：若 $new$ 为结束码字，结束循环；若 $new$ 为清表码字，清空串表，转到初始化开始处①；</li>
<li>⑥若 $new \geq next$，则输出串 $newStr = old + old[0]$（例外处理）；若 $new \lt next$，则输出串 $newStr = ST[new]$；</li>
<li>⑦将 $old + newStr[0]$ 放入串表 ST[next] 中，$next++$；</li>
<li>⑧若 $next$ 的位数超过码长（$\gt codeBits$），则 $codeBits++$；若加一后 $codeBits \gt 12$，则重新让 $codeBits = 12$；</li>
<li>⑨$old = newStr$，转到循环开始处⑤。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_before_decode</span><span class="params">(phrases_dict)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">u'步骤 码字   词 典    输 出'</span></div><div class="line">    keys = sorted(list(phrases_dict.keys()))</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:</div><div class="line">        <span class="keyword">print</span> <span class="string">'%-4s %-4s %-4s %-5s %-4s'</span> % \</div><div class="line">            (<span class="string">''</span>, <span class="string">''</span>, <span class="string">'('</span> + str(key) + <span class="string">')'</span>, phrases_dict[key], <span class="string">''</span>)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decodeLZW</span><span class="params">(codes, phrases_dict)</span>:</span></div><div class="line">    step = <span class="number">1</span></div><div class="line">    next = len(phrases_dict) + <span class="number">1</span></div><div class="line">    old = phrases_dict[codes[<span class="number">0</span>]]</div><div class="line">    <span class="keyword">print</span> <span class="string">'%-4s %-4s %-4s %-5s %-4s'</span> % \</div><div class="line">        (step, <span class="string">'(1)'</span>, <span class="string">'-'</span>, <span class="string">'-'</span>, old)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(codes)):</div><div class="line">        new = codes[i]</div><div class="line">        <span class="keyword">if</span> new &gt;= next:</div><div class="line">            newStr = old + old[<span class="number">0</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            newStr = phrases_dict[new]</div><div class="line">        phrases_dict[next] = old + newStr[<span class="number">0</span>]</div><div class="line">        step += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">print</span> <span class="string">'%-4s %-4s %-4s %-5s %-4s'</span> % \</div><div class="line">            (step, <span class="string">'('</span> + str(new) + <span class="string">')'</span>, <span class="string">'('</span> + str(next) + <span class="string">')'</span>,</div><div class="line">             phrases_dict[next], newStr)</div><div class="line">        next += <span class="number">1</span></div><div class="line">        old = newStr</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">u"解码过程："</span></div><div class="line">codes = wlist[diclen:]</div><div class="line">print_before_decode(phrases_dict)</div><div class="line">decodeLZW(codes, phrases_dict)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://felixzhang00.github.io/2016/12/24/2016-12-24-jpeg%E7%BC%96%E7%A0%81%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Felix: jpeg编码学习笔记</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_61d40cc30100f5e1.html">quennel的博客: JPEG编解码过程详解（一）</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_61d40cc30100f5e6.html">quennel的博客: JPEG编解码过程详解（二）</a></li>
<li><a href="http://edwin-wang.com/2006/06/jpeg%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/">EdwinWang.com: JPEG 压缩编码笔记</a></li>
<li>《多媒体技术基础：李才伟编著》</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JPEG </tag>
            
            <tag> LZW </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0022] BST（二叉查找树）和 R-B Tree（红黑树）]]></title>
      <url>/2017/07/08/Algorithms_BST$R-B%20Tree/</url>
      <content type="html"><![CDATA[<p>　一些计算机程序设计中常用的线性数据结构：<code>Array</code>、<code>ArrayList</code>、<code>LinkedList</code>、<code>List</code>、<code>Stack</code>、<code>Queue</code>、<code>Hashtable</code> 和<code>Dictionary</code>。为了更高效的进行数据的查找和访问，例如避免普通数据查找的 $O(N)$ 线性时间复杂度，常用树这种数据结构保存数据。<br>　树（Tree）是由多个节点（Node）的集合组成，每个节点又有多个与其关联的子节点（Child Node）；子节点就是直接处于节点之下的节点，而父节点（Parent Node）则位于节点直接关联的上方；树的根（Root）指的是一个没有父节点的单独的节点。所有的树都呈现了一些共有的性质：<font color="blue">①只有一个根节点；②除了根节点，所有节点都有且只有一个父节点；③无环。将任意一个节点作为起始节点，都不存在任何回到该起始节点的路径（正是前两个性质保证了无环的成立）</font>。<br>　更高效同时也相对更加复杂的树型数据结构包括 <strong>BST</strong>（二叉查找树）、<strong>R-B Tree</strong>（红黑树）、<strong>AVL Tree</strong>（平衡二叉树：父节点的左子树和右子树的高度之差不能大于1）、<strong>Treap</strong>（树堆：满足①二叉查找树的性质；满足②堆的性质）、<strong>Splay Tree</strong>（伸展树：在一次搜索后，会对树进行一些特殊的操作，这些操作的理念与AVL树有些类似，即通过旋转，来改变树节点的分布，并减小树的深度；伸展树并没有AVL树的平衡要求，任意节点的左右子树可以相差任意深度）、<strong>B-Tree</strong>（B树：多叉平衡查找树，<strong>B$^{+}$-Tree</strong>（B+树）是B树的变体）等。<br>　本文主要介绍基础的 <font color="red">BST（二叉查找树）</font>以及提升搜索效率的更高级的数据结构：<font color="red">R-B Tree（红黑树）</font>。<a id="more"></a></p>
<h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><ul>
<li>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree），排序二叉树（sorted binary tree），是指一棵空树或者具有下列性质的二叉树<ul>
<li>若任意节点的左子树不空，则左子树上所有结点的值均不大于它的根结点的值</li>
<li>若任意节点的右子树不空，则右子树上所有结点的值均不小于它的根结点的值</li>
<li>任意节点的左、右子树也分别为二叉查找树</li>
</ul>
</li>
<li>二叉查找树的一般结构：</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> TreeNode &#123;</div><div class="line">  <span class="comment">// 节点关键字</span></div><div class="line">  <span class="keyword">int</span> key;</div><div class="line">  <span class="comment">// 节点卫星数据</span></div><div class="line">  type val;</div><div class="line">  <span class="comment">// 指向父节点</span></div><div class="line">  TreeNode* parent;</div><div class="line">  <span class="comment">// 指向左子树</span></div><div class="line">  TreeNode* left;</div><div class="line">  <span class="comment">// 指向右子树</span></div><div class="line">  TreeNode* right;</div><div class="line">  TreeNode(<span class="keyword">int</span> key): key(key), val(<span class="literal">NULL</span>), parent(<span class="literal">NULL</span>), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="查询二叉查找树"><a href="#查询二叉查找树" class="headerlink" title="查询二叉查找树"></a>查询二叉查找树</h4><p>　查询某元素、最大最小节点、前驱后继节点。</p>
<ul>
<li>查询某元素<ul>
<li>在二叉查找树中查询某个元素k<ul>
<li>若k大于当前节点关键字，则搜索其右子树；</li>
<li>若k小于当前节点关键字，则搜索其左子树；</li>
<li>若k等于当前节点关键字或者当前节点为空，返回当前节点。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>递归版本</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输入：node二叉查找树的根节点，k为待查找元素</span></div><div class="line"><span class="comment">//输出：查找到的对应节点</span></div><div class="line">Tree-Search(node, k)</div><div class="line">  <span class="keyword">if</span>(node==<span class="literal">NULL</span> || k==node-&gt;key)</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">  <span class="keyword">if</span>(k &lt; node-&gt;key)</div><div class="line">    <span class="keyword">return</span> Tree-Search(node-&gt;left, k);</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> Tree-Search(node-&gt;right, k);</div></pre></td></tr></table></figure>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>非递归版本</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输入：node二叉查找树的根节点，k为待查找元素</span></div><div class="line"><span class="comment">//输出：查找到的对应节点</span></div><div class="line">Tree-Search(node, k)</div><div class="line">  <span class="keyword">while</span>(node!=<span class="literal">NULL</span> &amp;&amp; k!=node-&gt;key) &#123;</div><div class="line">    <span class="keyword">if</span>(k &lt; node-&gt;key)</div><div class="line">      node = node-&gt;left;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      node = node-&gt;right;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> node;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>查询最大最小节点<ul>
<li>最大节点：二叉查找树最右侧节点</li>
<li>最小节点：二叉查找树最左侧节点</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Tree-Minimum(node)</div><div class="line">  <span class="keyword">while</span>(node-&gt;left != <span class="literal">NULL</span>)</div><div class="line">    node = node-&gt;left;</div><div class="line">  <span class="keyword">return</span> node;</div><div class="line"> </div><div class="line">Tree-Maximum(node)</div><div class="line">  <span class="keyword">while</span>(node-&gt;right != <span class="literal">NULL</span>)</div><div class="line">    node = node-&gt;right;</div><div class="line">  <span class="keyword">return</span> node;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>查询前驱后继节点<ul>
<li>后继：指关键字大于某节点<code>key[x]</code>的所有节点中，关键字最小的节点，即对树进行中序遍历，紧随其后的节点。</li>
<li>前驱：小于某节点<code>key[x]</code>的关键字中最大的那个节点，即树的中序遍历中，排在其前的节点。</li>
<li>求某个节点的后继节点分为三种情况：<ul>
<li>该节点有右子树，则其后继节点是其右子树的最左侧节点，即右子树的最小节点。</li>
<li>该节点无右子树，但是父节点的左孩子，则该节点的后继节点是该父节点。</li>
<li>该节点无右子树，且是父节点的右孩子，则需要一直向上搜索，直到它的<code>n-1</code>代祖先是它第<code>n</code>代祖先的左孩子，则它的后继就是第<code>n</code>个祖先。如果一直搜索到根节点，也没有找到<code>n-1</code>代祖先是它第<code>n</code>代祖先的左孩子，则该节点是整个树的中序遍历中的最后一个节点，即它没有后继。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Tree-Successor(node)</div><div class="line">  <span class="keyword">if</span>(node-&gt;right != <span class="literal">NULL</span>)</div><div class="line">    <span class="keyword">return</span> Tree-Minimum(node-&gt;right)</div><div class="line">  <span class="comment">//x用来保存待确定的节点</span></div><div class="line">  <span class="comment">//y为x的父节点</span></div><div class="line">  x = node;</div><div class="line">  TreeNode y = x-&gt;parent;</div><div class="line">  <span class="comment">// x==y-&gt;right &lt;==&gt; x!=y-&gt;left</span></div><div class="line">  <span class="keyword">while</span>(y!=<span class="literal">NULL</span> &amp;&amp; x==y-&gt;right)</div><div class="line">    x = y;</div><div class="line">    y = x-&gt;parent;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> y;</div></pre></td></tr></table></figure>
<ul>
<li>求某个节点的前驱节点与求后继节点类似：<ul>
<li>该节点有左子树，则其前驱节点是其左子树的最右侧节点，即左子树的最大节点。</li>
<li>该节点无左子树，但是父节点的右孩子，则该节点的前驱节点是该父节点。</li>
<li>该节点无左子树，且是父节点的左孩子，则需要一直向上搜索，直到它的<code>n-1</code>代祖先是它第<code>n</code>代祖先的右孩子，则它的后继就是第<code>n</code>个祖先。如果一直搜索到根节点，也没有找到<code>n-1</code>代祖先是它第<code>n</code>代祖先的右孩子，则该节点是整个树的中序遍历中的第一个节点，即它没有前驱。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Tree-Predecessor(node)</div><div class="line">  <span class="keyword">if</span>(node-&gt;left != <span class="literal">NULL</span>)</div><div class="line">    <span class="keyword">return</span> Tree-Maximum(node-&gt;right)</div><div class="line">  <span class="comment">//x用来保存待确定的节点</span></div><div class="line">  <span class="comment">//y为x的父节点</span></div><div class="line">  x = node;</div><div class="line">  TreeNode y = x-&gt;parent;</div><div class="line">  <span class="comment">// x==y-&gt;left &lt;==&gt; x!=y-&gt;right</span></div><div class="line">  <span class="keyword">while</span>(y!=<span class="literal">NULL</span> &amp;&amp; x==y-&gt;left)</div><div class="line">    x = y;</div><div class="line">    y = x-&gt;parent;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> y;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h4><p>　插入和删除需要在保持二叉查找树性质的情况下，对树进行修改。</p>
<ul>
<li>插入<ul>
<li>若为空树，则直接将插入的节点作为根节点；</li>
<li>若插入节点关键字小于当前节点关键字，应插入在当前节点左子树中；否则应插入在右子树中；</li>
<li>直到当前节点为叶子节点，则将插入节点变成当前节点的左孩子或右孩子。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Tree-Insert(root, node)</div><div class="line">  curNode = root</div><div class="line">  leafNode = <span class="literal">NULL</span></div><div class="line">  <span class="keyword">while</span>(curNode != <span class="literal">NULL</span>)</div><div class="line">    leafNode = curNode</div><div class="line">    <span class="keyword">if</span>(node-&gt;key &gt;= curNode-&gt;key)</div><div class="line">      curNode = curNode-&gt;right</div><div class="line">    <span class="keyword">else</span></div><div class="line">      curNode = curNode-&gt;left</div><div class="line"> </div><div class="line">  node-&gt;parent = leafNode</div><div class="line">  <span class="comment">// 当前树为空树</span></div><div class="line">  <span class="keyword">if</span>(leafNode==<span class="literal">NULL</span>)</div><div class="line">    root = node</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">if</span>(node-&gt;key &gt;= leafNode-&gt;key)</div><div class="line">      leafNode-&gt;right = node</div><div class="line">    <span class="keyword">else</span></div><div class="line">      leafNode-&gt;left = node</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>删除<ul>
<li>相比插入，删除操作较为复杂。删除操作分为三种情况：<ul>
<li>若删除节点为叶子节点（没有左右子树），此时删除该节点不会破坏二叉查找树的结构，则直接将其删除；</li>
<li>若删除节点只有一个子节点，则用子节点<strong>替代</strong>删除节点的位置（直接删除该节点，并将其左子树或者右子树设置为其父节点的左子树或者右子树即可，此操作不会破坏二叉查找树的结构），此时该子节点称为“替代节点”；</li>
<li>若删除节点有两个子节点，一般的删除策略是用其右子树的最小数据（容易找到）代替要删除的节点数据，并删除该节点（此时为<code>NULL</code>）：因为右子树的最小节点不可能有左孩子，所以第二次删除较为容易。<br><center><img src="/img/Algorithms/0022_BSTDeletewithLeftRight.png" width="640px" alt=""/></center><ul>
<li>右子树的最小数据即为当前节点的<strong>后继节点</strong>，$z$ 的左子树和右子树均不空，找到 $z$ 的后继 $y$，用 $y$ 的值代替 $z$ 的值；因为 $y$ 一定没有左子树，所以可以删除 $y$，并让 $y$ 的父亲节点成为 $y$ 的右子树的父亲节点。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">Tree-Delete(root, node)</div><div class="line">  curNode = root;</div><div class="line">  parent = <span class="literal">NULL</span>;</div><div class="line">  <span class="keyword">while</span>(<span class="literal">NULL</span> != node) &#123;</div><div class="line">    <span class="keyword">if</span>(node-&gt;key &lt; curNode-&gt;key) &#123;</div><div class="line">      parent = curNode;</div><div class="line">      curNode = curNode-&gt;left;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node-&gt;key &gt; curNode-&gt;key) &#123;</div><div class="line">      parent = curNode;</div><div class="line">      curNode = curNode-&gt;right;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// found</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 叶子节点</span></div><div class="line">      <span class="keyword">if</span>(<span class="literal">NULL</span>==curNode-&gt;left &amp;&amp; <span class="literal">NULL</span>==curNode-&gt;right) &#123;</div><div class="line">        <span class="comment">// 根结点</span></div><div class="line">        <span class="keyword">if</span>(parent == <span class="literal">NULL</span>) &#123; </div><div class="line">          <span class="keyword">delete</span> curNode;</div><div class="line">          curNode = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 非根结点</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 父节点的左子树部分还是右子树部分</span></div><div class="line">          (parent-&gt;left==curNode)? (parent-&gt;left=<span class="literal">NULL</span>) : (parent-&gt;right=<span class="literal">NULL</span>);</div><div class="line">          <span class="keyword">delete</span> curNode;</div><div class="line">          curNode = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 只有左孩子</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">NULL</span>!=curNode-&gt;left &amp;&amp; <span class="literal">NULL</span>==curNode-&gt;right) &#123;</div><div class="line">        <span class="keyword">if</span>(parent == <span class="literal">NULL</span>) &#123;</div><div class="line">          TreeNode tmp = curNode;</div><div class="line">          curNode = curNode-&gt;left;</div><div class="line">          <span class="keyword">delete</span> tmp;</div><div class="line">          tmp = <span class="literal">NULL</span>; </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 父节点的左子树部分还是右子树部分</span></div><div class="line">          (parent-&gt;left==curNode)?(parent-&gt;left=curNode-&gt;left):(parent-&gt;right=curNode-&gt;left);</div><div class="line">          <span class="keyword">delete</span> curNode;</div><div class="line">          curNode = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 只有右孩子</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">NULL</span>==curNode-&gt;left &amp;&amp; <span class="literal">NULL</span>!=curNode-&gt;right) &#123;</div><div class="line">        <span class="keyword">if</span>(parent == <span class="literal">NULL</span>) &#123;</div><div class="line">          TreeNode tmp = curNode;</div><div class="line">          curNode = curNode-&gt;right;</div><div class="line">          <span class="keyword">delete</span> tmp;</div><div class="line">          tmp = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 父节点的左子树部分还是右子树部分</span></div><div class="line">          (parent-&gt;left==curNode)?(parent-&gt;left=curNode-&gt;right):(parent-&gt;right=curNode-&gt;right);</div><div class="line">          <span class="keyword">delete</span> curNode;</div><div class="line">          curNode = <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 既有左孩子又有右孩子</span></div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        TreeNode* rightNode = curNode;</div><div class="line">        <span class="keyword">while</span>(rightNode-&gt;left != <span class="literal">NULL</span>) &#123;</div><div class="line">          parent = rightNode;</div><div class="line">          rightNode = rightNode-&gt;left;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// 交换rightNode与curNode</span></div><div class="line">        <span class="keyword">int</span> swapKey = rightNode-&gt;key;</div><div class="line">        rightNode-&gt;key = curNode-&gt;key;</div><div class="line">        curNode-&gt;key = swapKey;</div><div class="line"> </div><div class="line">        <span class="comment">// 删除rightNode，parent肯定不为空</span></div><div class="line">        <span class="comment">// 后继节点没有右孩子</span></div><div class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == rightNode-&gt;right) &#123;</div><div class="line">          parent-&gt;left = <span class="literal">NULL</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          parent-&gt;left = rightNode-&gt;right;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">delete</span> rightNode;</div><div class="line">        rightNode = <span class="literal">NULL</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="满二叉树-amp-完全二叉树"><a href="#满二叉树-amp-完全二叉树" class="headerlink" title="满二叉树&amp;完全二叉树"></a>满二叉树&amp;完全二叉树</h4><ul>
<li>满二叉树（Full Binary Tree）<ul>
<li>官方解释<blockquote>
<p>A full binary tree is a tree in which every node other than the leaves has two children.</p>
</blockquote>
</li>
<li>总节点数 $k$：深度为 $h$，有 $k = 2^h - 1$</li>
<li>树高 $h$：$h = log_2 (k+1)$<center><img src="/img/Algorithms/0022_FBT&CBT.jpg" width="420px" alt=""/></center></li>
</ul>
</li>
<li>完全二叉树（Complete Binary Tree）<ul>
<li>官方解释<blockquote>
<p>A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</p>
</blockquote>
</li>
<li>深度为 $h$，有 $n$ 个节点的二叉树，当且仅当其每一个节点都与深度为 $h$ 的满二叉树中，序号为 $1$ 至 $n$ 的节点对应时，为一棵<strong>完全二叉树</strong>。</li>
<li>总节点数 $k$：深度为 $h$，有 $2^{h-1} \leq k \lt 2^h - 1$</li>
<li>树高 $h$：$h = log_2 k + 1$</li>
</ul>
</li>
</ul>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>　一棵由 $N$ 个节点的随机构造的二叉查找树的高度为 $logN$，所以顺理成章，二叉查找树的一般操作（主要是查找）的执行时间为 $O(logN)$。但二叉查找树若退化成了一棵具有 $N$ 个节点的线性链后，这些操作就变成最坏情况，运行时间变成 $O(N)$。<br>　红黑树虽然本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的插入、删除、主要是查找的时间复杂度最坏为 $O(logN)$。</p>
<ul>
<li>R-B Tree(Red-Black Tree)，它是一种特殊的二叉查找树，红黑树的每个节点除了包含<code>key</code>、<code>left</code>、<code>right</code>、<code>parent</code>外，还有存储位表示节点的颜色，可以是红(Red)或黑(Black)。但它是如何保证一棵 $N$ 个节点的红黑树的高度始终在 $logN$ 的呢？这就引出了红黑树的 5 个性质：<br>  <center><img src="/img/Algorithms/0022_R-B Tree.png" width="480px" alt=""/></center><ul>
<li>①每个节点不是黑色便是红色；</li>
<li>②根节点为黑色；</li>
<li>③每个叶子节点（<font color="red">即指树尾端那些空(<code>NIL</code>/<code>NULL</code>)的叶子节点</font>）是黑色的；</li>
<li>④如果一个节点是红色的，则它的子节点（两个子节点）必须是黑色的（<font color="red">即从每个叶子节点到根的所有路径上不能有两个连续的红色节点</font>）；</li>
<li>⑤从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。<ul>
<li>对于任意节点而言，其到其子孙叶子节点树尾端<code>NIL</code>指针的每条路径都包含相同数目的黑节点。</li>
<li>确保没有一条路径会比其它路径长出两个节点（一红一黑），因此，红黑树相对是接近平衡的二叉树。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>　正是红黑树的这 5 条性质，使一棵 $N$ 个节点的红黑树始终保持了 $logN$ 的高度，也即</font color="blue">“保证了红黑树的插入、删除、主要是查找的时间复杂度最坏为 $O(logN)$”</font>。<br>　红黑树的应用比较广泛，主要用它来存储有序的数据，例如，Java 集合中的 TreeSet、TreeMap，C++ STL 中的 set、map，以及 Linux虚拟内存的管理，都是通过红黑树去实现的，它的时间复杂度是 $O(logN)$，效率非常之高。</p>
<h4 id="红黑树的搜索时间复杂度"><a href="#红黑树的搜索时间复杂度" class="headerlink" title="红黑树的搜索时间复杂度"></a>红黑树的搜索时间复杂度</h4><ul>
<li>下面通过<strong>数学归纳法</strong>证明定理：一棵含有$N$个节点的红黑树的高度至多为$2log(N+1)$<ul>
<li>转化为证明逆否命题<blockquote>
<p> “一棵含有 $N$ 个节点的红黑树的高度至多为 $2log(N+1)$” 的<font color="red">逆否命题</font>是：”高度为 $h$ 的红黑树，它包含的节点个数至少为 $2^{h/2}$-1 个”。我们只需要证明逆否命题，即可证明原命题为真，即只需证明 “高度为 $h$ 的红黑树，它包含的节点个数至少为 $2^{h/2}$-1 个”。</p>
</blockquote>
</li>
<li>从某个节点 $x$ 出发（不包括该节点）到达一个叶节点的任意一条路径上，黑色节点的个数称为该节点的<strong>黑高度(x’s black height)</strong>，记为 $bh(x)$。关于 $bh(x)$ 有两点需要说明：<ul>
<li>第1点：根据上述红黑树的<code>性质⑤</code>可知，从节点 $x$ 出发到达的所有的叶节点具有相同数目的黑节点，这也就意味着，$bh(x)$ 的值是唯一的！</li>
<li>第2点：根据上述红黑树的<code>性质④</code>可知，从节点 $x$ 出发达到叶节点：$所经历的黑色节点数目 \geq 所经历的红节点的数目$。假设 $x$ 是根节点，则可以得出结论：$bh(x=root) \geq h/2$。进而，我们只需证明：<font color="red">“高度为 $h$ 的红黑树，它包含的黑色节点个数至少为 $2^{bh(x)}$-1个”</font> 即可。</li>
</ul>
</li>
<li><strong>“数学归纳法”</strong> 论证：<font color="blue">“高度为 $h$ 的红黑树，它包含的黑色节点个数至少为 $2^{bh(x)}$-1个”</font><ul>
<li>①当树的高度 $h=0$ 时，节点个数是 0，$bh(x)$ 为 0，$2^{bh(x)}$-1 也为 0。显然，原命题成立。</li>
<li>②当 $h \gt 0$，无妨设树的高度为 $h$-1 时，它包含的节点个数至少为 $2^{bh(x)-1}$-1。<ul>
<li>当树的高度为 $h$ 时，对于节点 $x$（$x$ 为根节点），其黑高度为 $bh(x)$；对于节点 $x$ 的左右子树，它们黑高度为 $bh(x)$ 或者 $bh(x)$-1；</li>
<li>根据假设条件，我们已知 <font color="blue">“$x$ 的左右子树，即高度为 $h$-1 的节点，它包含的节点至少为 $2^{bh(x)-1}$-1 个” </font>；</li>
<li>所以，节点 $x$ 所包含的节点至少为：$(2^{bh(x)-1}-1) + (2^{bh(x)-1}-1) + 1 = 2^{bh(x)}-1$，即节点 $x$ 所包含的节点至少为 $2^{bh(x)}$-1。因此，原命题成立。</li>
</ul>
</li>
<li>结合①、②，得出：<font color="blue">“高度为 $h$ 的红黑树，它包含的黑色节点个数至少为 $2^{bh(x)}$-1个”</font>，因此，<font color="red">“一棵含有 $N$ 个节点的红黑树的高度至多为 $2log(N+1)$”</font>。</li>
</ul>
</li>
</ul>
</li>
<li>上述定理说明：一棵 $N$ 个节点的红黑树始终能保持 $logN$ 的高度，故</font color="blue">红黑树的各操作时间复杂度最坏为 $O(logN)$</font>，红黑树的搜索时间复杂度为：$logN$。</li>
</ul>
<h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><ul>
<li>当对红黑树进行插入和删除等操作时，对树做了修改可能会破坏红黑树的性质。为了继续保持红黑树的性质，可以通过对树进行相关的<font color="blue">旋转操作（修改树的指针结构）</font>，以及对节点进行<font color="blue">重新着色（修改树中某些节点的颜色）</font>，来达到对红黑树进行插入或删除等操作后继续保持它的性质 $\Longrightarrow$ 平衡的目的。  <center><img src="/img/Algorithms/0022_LeftRightRotate.png" width="640px" alt=""/></center></li>
<li>如上图所示，从左图到右图的过程为左旋，反之为右旋。旋转前后 $x$、$y$ 与三棵子树 $\alpha$、$\beta$、$\gamma$ 之间的大小关系均满足红黑树的搜索性质：$\alpha \lt x \lt \beta \lt y \lt \gamma$ </li>
<li>左旋转：以 $y$ 节点为中心，将 $x$、$y$ 之间的轴（蓝色箭头）左旋（逆时针旋转），这使得 $y$ 称为该子树的新根；对 $x$ 进行左旋，意味着将 $x$ 变成一个左节点，显然是新根（即原本 $x$ 的右孩子 $y$）的左节点。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输入：root为树的根节点，x与x的右子节点为待左旋的节点</span></div><div class="line"><span class="comment">//输出：旋转后的树结构</span></div><div class="line">Left-Rotate(root, x)</div><div class="line">  <span class="comment">// 前提</span></div><div class="line">  y = x-&gt;right</div><div class="line">  </div><div class="line">  <span class="comment">// 将β设为x的右孩子</span></div><div class="line">  x-&gt;right = y-&gt;left</div><div class="line">  <span class="comment">// 将β的父亲设为x</span></div><div class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span> != y-&gt;left)</div><div class="line">    y-&gt;left-&gt;parent = x</div><div class="line">  </div><div class="line">  <span class="comment">// 情况1：x的父节点为空，即x原先为根节点，将y设为根节点</span></div><div class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span> == x-&gt;parent)</div><div class="line">    root = y</div><div class="line">  <span class="comment">// 情况2：子树的根x原先是它的父亲的左孩子，将y设为x的父亲的左孩子</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x == x-&gt;parent-&gt;left)</div><div class="line">    x-&gt;parent-&gt;left = y</div><div class="line">  <span class="comment">// 情况3：子树的根x原先是它的父亲的右孩子，将y设为x的父亲的右孩子</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    x-&gt;parent-&gt;right = y</div><div class="line">   </div><div class="line">  <span class="comment">// 将x设为y的左孩子</span></div><div class="line">  y-&gt;left = x</div><div class="line">  <span class="comment">// 将x的父节点设为y</span></div><div class="line">  x-&gt;parent = y</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>右旋转</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输入：root为树的根节点，y与y的左子节点为待右旋的节点</span></div><div class="line"><span class="comment">//输出：旋转后的树结构</span></div><div class="line">Right-Rotate(root, y)</div><div class="line">  <span class="comment">// 前提</span></div><div class="line">  x = y-&gt;left</div><div class="line"> </div><div class="line">  <span class="comment">// 将β设为y的左孩子</span></div><div class="line">  y-&gt;left = x-&gt;right</div><div class="line">  <span class="comment">// 将β的父亲设为x</span></div><div class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span> != x-&gt;right)</div><div class="line">    x-&gt;right-&gt;parent = y</div><div class="line"> </div><div class="line">  <span class="comment">// 情况1：y的父节点为空，即y原先为根节点，将x设为根节点</span></div><div class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span> == y-&gt;parent)</div><div class="line">    root = x</div><div class="line">  <span class="comment">// 情况2：子树的根y原先是它的父亲的左孩子，将x设为y的父亲的左孩子</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(y == y-&gt;parent-&gt;left)</div><div class="line">    y-&gt;parent-&gt;left = x</div><div class="line">  <span class="comment">// 情况3：子树的根y原先是它的父亲的右孩子，将x设为y的父亲的右孩子</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    x-&gt;parent-&gt;right = y</div><div class="line"> </div><div class="line">  <span class="comment">// 将y设为x的右孩子</span></div><div class="line">  x-&gt;right = y</div><div class="line">  <span class="comment">// 将y的父节点设为x</span></div><div class="line">  y-&gt;parent = x</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>一棵红黑树在经过左旋和右旋之后，树的搜索性质（二叉查找树性质）保持不变，但树的红黑性质则被破坏了，因此需要通过重新着色来恢复树的红黑性质。</li>
</ul>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p>　将一个节点插入到红黑树中，需要执行哪些步骤呢？首先，将红黑树当做一棵二叉查找树，将节点插入；然后，将节点着色为红色；最后，通过旋转和重新着色等方法来修正该树，使之重新成为一棵红黑树。</p>
<ul>
<li>将红黑树当做一棵二叉查找树，将节点插入。<ul>
<li>无论是左旋还是右旋，若旋转之前这棵树是一棵二叉查找树，旋转之后它一定还是二叉查找树；任何的旋转和重新着色操作，都不会改变它仍然是一棵二叉查找树的事实。</li>
<li>红黑树本身就是一棵二叉查找树，将节点插入后，该树仍然是一棵二叉查找树，即树的键值仍然是有序的。</li>
</ul>
</li>
<li>将插入的节点着色为“红色”。为什么着色成红色，而不是黑色呢？因为将着色为“红色”，不会违背红黑树<code>性质⑤</code>：从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑色节点；少违背一条特性，就意味着我们需要处理的情况越少，接下来只需要使其满足其它性质即可。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// root为红黑树的树根，z为要插入的新节点</span></div><div class="line">RB-Insert(root, z)</div><div class="line">  <span class="comment">// 新建节点y，将y设为空节点</span></div><div class="line">  y = <span class="literal">NULL</span>;</div><div class="line">  <span class="comment">// 设红黑树的根节点为x</span></div><div class="line">  x = root;</div><div class="line"> </div><div class="line">  <span class="comment">// 找出要插入新节点z在二叉树中的位置y</span></div><div class="line">  <span class="keyword">while</span>(<span class="literal">NULL</span> != x)</div><div class="line">    y = x;</div><div class="line">    <span class="keyword">if</span>(z-&gt;key &lt; x-&gt;key)</div><div class="line">      x = x-&gt;left;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      x = x-&gt;right;</div><div class="line"> </div><div class="line">  <span class="comment">// 设z的父亲为y</span></div><div class="line">  z-&gt;parent = y;</div><div class="line">  <span class="comment">// 情况1：y是空节点，将z设为根</span></div><div class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span> == y)</div><div class="line">    root = z;</div><div class="line">  <span class="comment">// 情况2：z设为y的左孩子</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(z-&gt;key &lt; y-&gt;key)</div><div class="line">    y-&gt;left = z;</div><div class="line">  <span class="comment">// 情况3：z设为y的右孩子</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    y-&gt;right = z;</div><div class="line"> </div><div class="line">  <span class="comment">// z的左右孩子设为空格</span></div><div class="line">  z-&gt;left = <span class="literal">NULL</span>;</div><div class="line">  z-&gt;right = <span class="literal">NULL</span>;</div><div class="line">  <span class="comment">// 至此，已经完成将新节点z插入到二叉树中</span></div><div class="line"> </div><div class="line">  <span class="comment">// 将z着色为“红色”</span></div><div class="line">  z-&gt;color = RED;</div><div class="line">  <span class="comment">// 通过RB-Insert-Fixup对红黑树的节点进行颜色修改以及旋转，让树仍然是一棵红黑树</span></div><div class="line">  RB-Insert-Fixup(root, z);</div></pre></td></tr></table></figure>
<ul>
<li>接下来的问题就是：想方设法地旋转以及重新着色，是这棵树重新称为一棵红黑树！</li>
</ul>
</li>
<li>通过一系列的旋转或重新着色操作，使之重新成为一棵红黑树。<ul>
<li>将插入节点着色为“红色”之后，不会违背<code>性质⑤</code>，那它到底会违背哪些性质呢？<ul>
<li>对于<code>性质①</code>，因为已经将它涂成红色了，显然不会违背；</li>
<li>对于<code>性质②</code>，在上面步骤中我们将红黑树当做二叉查找树，然后执行插入操作；根据二叉查找树的特点，除非是根节点，插入操作不会改变根节点，所以，根节点仍然是黑色，除非插入的就是根节点；</li>
<li>对于<code>性质③</code>，显然不会违背，这里的叶子节点是指空叶子节点，插入非空节点（其左右空叶子节点初始化即为黑色的）并不会对它们造成影响；</li>
<li>对于<code>性质④</code>，很有可能违背！接下来是想办法使这棵树满足<code>性质④</code>，将树重新构造成红黑树。</li>
</ul>
</li>
<li>根据被插入节点 $N$ 的父节点的情况，可以划分为以下三类情况处理：<ul>
<li>第一类：被插入的节点是根节点 $\Longrightarrow$ 直接把新节点涂为黑色</li>
<li>第二类：被插入节点的父节点是黑色节点 $\Longrightarrow$ 新节点被插入后，仍然是红黑树</li>
<li>第三类：被插入节点的父节点是红色节点 $\Longrightarrow$ 显然与<code>性质⑤</code>冲突，这种情况下，新节点一定存在非空祖父节点（肯定有黑色的节点作为父节点的父节点）；新节点也一定存在叔叔节点，即使叔叔节点为空叶子节点，其本身也是黑色节点，视之为存在。对于这类情况，需要依据“叔叔节点的情况”，进一步划分为一下三种情况（这三种情况可能存在一定转换关系）。<ul>
<li>Case 1：叔叔节点 $U$ 是红色节点<br><center><img src="/img/Algorithms/0022_RBInsertCase1.png" width="720px" alt=""/></center><br>$\quad$处理策略：<ol>
<li>将父节点 $P$ 设为黑色节点；</li>
<li>将叔叔节点 $U$ 设为黑色节点；</li>
<li>将祖父节点 $G$ 设为红色节点；</li>
<li>将祖父节点设为“当前节点”$N$，之后继续对“当前节点”进行操作。</li>
</ol>
</li>
<li>Case 2：叔叔节点 $14$ 是黑色节点，且当前节点 $N$ 是右孩子<br><center><img src="/img/Algorithms/0022_RBInsertCase2.png" width="720px" alt=""/></center><br>$\quad$处理策略：<ol>
<li>将父节点 $2$ 作为新的“当前节点”$N$；</li>
<li>以新的“当前节点”$N$ 为支点进行左旋。</li>
</ol>
</li>
<li>Case 3：叔叔节点 $14$ 是黑色节点，且当前节点 $N$ 是左孩子<br><center><img src="/img/Algorithms/0022_RBInsertCase3.png" width="720px" alt=""/></center><br>$\quad$处理策略：<ol>
<li>将父节点 $7$ 设为黑色节点；</li>
<li>将祖父节点 $11$ 设为红色节点；</li>
<li>以祖父节点 $11$ 为支点进行右旋。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// root为红黑树的树根，z为要插入的新节点</span></div><div class="line">RB-Insert-Fixup(root, z)</div><div class="line">  <span class="comment">// 若当前节点z的父节点是红色，则进行以下处理</span></div><div class="line">  <span class="keyword">while</span>(RED == z-&gt;parent-&gt;color)</div><div class="line">    <span class="comment">// 若z的父节点是z的祖父节点的左孩子</span></div><div class="line">    <span class="keyword">if</span>(z-&gt;parent == z-&gt;parent-&gt;parent-&gt;left)</div><div class="line">      <span class="comment">// 将y设置为z的叔叔节点（z的祖父节点的右孩子）</span></div><div class="line">      y = z-&gt;parent-&gt;parent-&gt;right;</div><div class="line"> </div><div class="line">      <span class="comment">// Case 1</span></div><div class="line">      <span class="keyword">if</span>(RED == y-&gt;color)</div><div class="line">        z-&gt;parent-&gt;color = BLACK;</div><div class="line">        y-&gt;color = BLACK;</div><div class="line">        z-&gt;parent-&gt;parent-&gt;color = RED;</div><div class="line">        z = z-&gt;parent-&gt;parent;</div><div class="line">      <span class="comment">// Case 2</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(z == z-&gt;parent-&gt;right)</div><div class="line">        Left-Rotate(root, z);</div><div class="line">      <span class="comment">// Case 3</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        z-&gt;parent-&gt;color = BLACK;</div><div class="line">        z-&gt;parent-&gt;parent-&gt;color = RED;</div><div class="line">        Right-Rotate(root, z-&gt;parent-&gt;parent);</div><div class="line">    <span class="comment">// z在父节点是z的祖父节点的右孩子，与左子树原理相同，将right与left互换即可</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="comment">// 将y设置为z的叔叔节点（z的祖父节点的左孩子）</span></div><div class="line">      y = z-&gt;parent-&gt;parent-&gt;left;</div><div class="line"> </div><div class="line">      <span class="comment">// Case 1</span></div><div class="line">      <span class="keyword">if</span>(RED == y-&gt;color)</div><div class="line">        z-&gt;parent-&gt;color = BLACK;</div><div class="line">        y-&gt;color = BLACK;</div><div class="line">        z-&gt;parent-&gt;parent-&gt;color = RED;</div><div class="line">        z = z-&gt;parent-&gt;parent;</div><div class="line">      <span class="comment">// Case 2</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(z == z-&gt;parent-&gt;left)</div><div class="line">        Right-Rotate(root, z);</div><div class="line">      <span class="comment">// Case 3</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        z-&gt;parent-&gt;color = BLACK;</div><div class="line">        z-&gt;parent-&gt;parent-&gt;color = RED;</div><div class="line">        Left-Rotate(root, z-&gt;parent-&gt;parent);</div><div class="line">  <span class="comment">// 被插入的节点是根节点</span></div><div class="line">  root-&gt;color = BLACK;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>　将红黑树内的某一个节点删除，需要执行的操作依次是：首先将红黑树当做一棵二叉查找树，将该节点从二叉查找树中删除；然后，通过“旋转和重新着色”等一系列来修正该树，使之重新成为一棵红黑树。</p>
<ul>
<li>将红黑树当做一棵二叉查找树，将节点删除，这和在常规二叉查找树中删除节点的方法一样，分3种情况：<ul>
<li>①被删除节点没有儿子，即为叶子节点，那么，直接将该节点删除；</li>
<li>②被删除节点只有一个儿子，那么，直接删除该节点，并用该节点的唯一子节点顶替它的位置；</li>
<li>③被删除节点有两个儿子，那么，先找出它的后继节点，然后把该后继节点的“内容”复制给该节点的“内容”，之后删除该后继节点。<ul>
<li>该后继节点相当于替身，在将后继节点的“内容”赋值给被删除节点之后，再将后继节点删除，这样就巧妙地将问题转换为“删除后继节点”的情况了；</li>
<li>在被删除节点有两个非空子节点的情况下，它的后继节点不可能是双子非空的（至少左孩子为空，否则显然不可能是后继节点）：若没有儿子，则按<code>情况①</code>进行处理；若只有一个儿子，则按<code>情况②</code>进行处理。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">RB-Delete(root, z)</div><div class="line">  <span class="comment">// 若z的左孩子或右孩子为空</span></div><div class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span>==z-&gt;left || <span class="literal">NULL</span>==z-&gt;right)</div><div class="line">    y = z;</div><div class="line">  <span class="comment">// 将z的后继节点赋值给y</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    y = Tree-Successor(z);</div><div class="line"> </div><div class="line">  <span class="comment">// y至少一个孩子为空</span></div><div class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span> != y-&gt;left)</div><div class="line">    x = y-&gt;left;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    x = y-&gt;right;</div><div class="line"> </div><div class="line">  <span class="comment">// 将y的父节点设置为x的父节点</span></div><div class="line">  x-&gt;parent = y-&gt;parent;</div><div class="line"> </div><div class="line">  <span class="comment">// 情况1：y的父节点为空，则设置x为根节点</span></div><div class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span> == y-&gt;parent)</div><div class="line">    root = x;</div><div class="line">  <span class="comment">// 情况2：y是它父节点的左孩子，则设置x为y的父节点的左孩子</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(y == y&gt;parent-&gt;left)</div><div class="line">    y-&gt;parent-&gt;left = x;</div><div class="line">  <span class="comment">// 情况3：y是它父节点的右孩子，则设置x为y的父节点的右孩子</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    y-&gt;parent-&gt;right = x;</div><div class="line"> </div><div class="line">  <span class="comment">// 将z的后继节点y的值赋值给z，这里只拷贝z的值给y，而没有拷贝z的颜色!!!</span></div><div class="line">  <span class="keyword">if</span>(y != z)</div><div class="line">    z-&gt;key = y-&gt;key;</div><div class="line">    <span class="comment">//copy y's satelite date into z;</span></div><div class="line"> </div><div class="line">  <span class="comment">// 若y为黑色节点</span></div><div class="line">  <span class="keyword">if</span>(BLACK == y-&gt;color)</div><div class="line">    RB-Delete-Fixup(root, x);</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>上一步中删除节点之后，可能会违背红黑树的性质，所以需要通过“旋转和重新着色”来修正该树，使之重新成为一棵红黑树。<ul>
<li>由上面的算法，我们知道：删除节点 $y$ 之后，$x$ 占据了原本节点 $y$ 的位置。既然删除 $y$（$y$ 是黑色节点），意味着减少一个黑色节点，那么，再在该位置上增加一个黑色节点即可，即假设“$x$ 包含一个额外的黑色节点”（$x$ 最终需要变成一个黑色节点），就正好弥补了“删除 $y$ 所丢失的黑色节点”，也就不会违反<code>性质⑤</code>；<ul>
<li>现在，$x$ 不仅包含它原本的颜色属性，还包含一个额外的颜色，即 $x$ 的颜色属性是“红+黑”或者“黑+黑”，它违反了<code>性质①</code>；我们面临的问题，由解决“违反<code>性质②</code>、<code>性质④</code>、<code>性质⑤</code>”转换成了解决违反<code>性质①</code>、<code>性质②</code>、<code>性质④</code>”；</li>
</ul>
</li>
<li>解决的思想是：将 $x$ 所包含的额外的黑色属性不断沿树上移（向根方向移动：<code>Case 2</code>），直到出现下面的情况：<ul>
<li>第一类：$x$ 是“红+黑”节点，此时，直接将 $x$ 设为一个“黑”节点即可，红黑树的性质全部恢复；<ul>
<li>如果删除的节点是红色节点，则删除后，树依然能够保持红黑性？？？（<font color="red">错误的命题？</font>）<ol>
<li>树中各节点的黑高度不会发生变化？可能会发生变化；</li>
<li>不存在父子节点都是红色节点的情况；</li>
<li>根依然是黑色节点。</li>
</ol>
</li>
</ul>
</li>
<li>第二类：$x$是“黑+黑”节点且 $x$ 是根，此时，将 $x$ 设为一个“黑”节点即可，红黑树的性质全部恢复；</li>
<li>第三类：$x$是“黑+黑”节点但 $x$ 不是根，这种情况又可以划分为以下 4 种情况：<ul>
<li>Case 1：$A$ 是 “黑+黑”节点，$A$ 的兄弟节点 $D$ 是红色（此时 $A$ 的父节点 $B$ 和 $A$ 的兄弟节点的子节点 $C$、$E$ 都是黑色）<br><center><img src="/img/Algorithms/0022_RBDeleteCase1.png" width="640px" alt=""/></center><br>$\quad$处理策略：<ol>
<li>将 $A$ 的兄弟节点 $D$ 设为黑色节点；</li>
<li>将 $A$ 的父节点 $B$ 设为红色节点；</li>
<li>对 $A$ 的父节点 $B$ 进行左旋（BD为轴）；</li>
<li>左旋后，由于 $A$ 的兄弟节点发生了变化，需要更新 $A$ 的兄弟节点（由 $D$ 变成 $C$），继续进行后续处理（Case 1 转换为 Case 2、Case 3 或 Case 4）。</li>
</ol>
</li>
<li>Case 2：$A$ 是 “黑+黑”节点，$A$ 的兄弟节点 $D$ 是黑色，$A$ 的兄弟节点的两个孩子 $C$、$E$ 都是黑色<br><center><img src="/img/Algorithms/0022_RBDeleteCase2.png" width="640px" alt=""/></center><br>$\quad$处理策略：<ol>
<li>将兄弟节点 $D$ 设为红色节点；</li>
<li>将父节点 $B$ 设为新的“当前节点”$N$，之后继续对“当前节点”进行操作。</li>
</ol>
</li>
<li>Case 3：$A$ 是 “黑+黑”节点，$A$ 的兄弟节点 $D$ 是黑色；$A$ 的兄弟节点的左孩子 $C$ 是红色节点、右孩子 $E$ 是黑色节点<br><center><img src="/img/Algorithms/0022_RBDeleteCase3.png" width="640px" alt=""/></center><br>$\quad$处理策略：<ol>
<li>将兄弟节点 $D$ 的左孩子 $C$ 设为黑色节点；</li>
<li>将兄弟节点 $D$ 设为红色节点；</li>
<li>对兄弟节点 $D$ 进行右旋；</li>
<li>右旋后，需要更新 $A$ 的兄弟节点（由 $D$ 变成 $C$），继续进行后续处理（Case 3 转换为 Case 4）。</li>
</ol>
</li>
<li>Case 4：$A$ 是 “黑+黑”节点，$A$ 的兄弟节点 $D$ 是黑色；$A$ 的兄弟节点的右孩子 $E$ 是红色节点、左孩子 $C$ 可以是任意颜色<br><center><img src="/img/Algorithms/0022_RBDeleteCase4.png" width="640px" alt=""/></center><br>$\quad$处理策略：<ol>
<li>将父节点 $B$ 的颜色赋值给兄弟节点 $D$；</li>
<li>将父节点 $B$ 设为黑色节点；</li>
<li>将兄弟节点 $D$ 的右孩子 $E$ 设为黑色节点；</li>
<li>对父节点 $B$ 进行左旋；</li>
<li>设置 $x$ 设为根节点，就可以跳出<code>while</code>循环，即完成了全部处理。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>上述<code>Case 1-4</code>都只是树的局部，并非树的整体部分；且删除后红黑树恢复<code>Case 3</code>、<code>Case 4</code>在经过上面的调整后，还要继续调整直至重新恢复平衡。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// x：被删除节点位置的替换节点</span></div><div class="line">RB-Delete-Fixup(root, x)</div><div class="line">  <span class="comment">// 删除节点x是根节点或删除节点x是红色节点，红黑树的性质都能保持!!!</span></div><div class="line">  <span class="keyword">while</span>(x!=root &amp;&amp; BLACK==x-&gt;color)</div><div class="line">    <span class="comment">// x是它父节点的左孩子，w为x叔叔，即父节点的右孩子</span></div><div class="line">    <span class="keyword">if</span>(x == x-&gt;parent-&gt;left)</div><div class="line">      w = x-&gt;parent-&gt;right;</div><div class="line">      <span class="comment">// Case 1</span></div><div class="line">      <span class="keyword">if</span>(RED == w-&gt;color)</div><div class="line">        <span class="comment">// x的兄弟节点设为黑色</span></div><div class="line">        w-&gt;color = BLACK;</div><div class="line">        <span class="comment">// x的父节点设为红色</span></div><div class="line">        x-&gt;parent-&gt;color = RED;</div><div class="line">        <span class="comment">// 对x的父节点进行左旋</span></div><div class="line">        Left-Rotate(root, x-&gt;parent);</div><div class="line">        <span class="comment">// 左旋后，重新设置x的兄弟节点</span></div><div class="line">        w = x-&gt;parent-&gt;right;</div><div class="line">      <span class="comment">// Case 1 ==&gt; Case 2、3、4</span></div><div class="line">      <span class="comment">// Case 2</span></div><div class="line">      <span class="keyword">if</span>(BLACK==w-&gt;left-&gt;color &amp;&amp; BLACK==w-&gt;right-&gt;color)</div><div class="line">        <span class="comment">// x的兄弟节点设为红色</span></div><div class="line">        w-&gt;color = RED;</div><div class="line">        <span class="comment">// 设置x的父节点为新一轮迭代的x节点，向上转移</span></div><div class="line">        x = x-&gt;parent;</div><div class="line">      <span class="comment">// Case 3：x的兄弟节点左孩子是红色，右孩子是黑色</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(BLACK==w-&gt;right-&gt;color)</div><div class="line">        <span class="comment">// x的兄弟节点的左孩子设为黑色</span></div><div class="line">        w-&gt;left-&gt;color = BLACK;</div><div class="line">        <span class="comment">// x的兄弟节点设为红色</span></div><div class="line">        w-&gt;color = RED;</div><div class="line">        <span class="comment">// 对x的兄弟节点进行右旋</span></div><div class="line">        Right-Rotate(root, w);</div><div class="line">        <span class="comment">// 右旋后，重新设置x的兄弟节点，进行下一轮迭代 ==&gt; Case 4</span></div><div class="line">        w = x-&gt;parent-&gt;right;</div><div class="line">      <span class="comment">// Case 4：z的兄弟节点右孩子是红色，左孩子任意颜色</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        <span class="comment">// 将x父节点的颜色赋值给x的兄弟节点</span></div><div class="line">        w-&gt;color = x-&gt;parent-&gt;color;</div><div class="line">        <span class="comment">// 将x父节点设为黑色</span></div><div class="line">        x-&gt;parent-&gt;color = BLACK;</div><div class="line">        <span class="comment">// 将x兄弟节点的右孩子设为黑色</span></div><div class="line">        w-&gt;right-&gt;color = BLACK;</div><div class="line">        <span class="comment">// 对x的父节点进行左旋</span></div><div class="line">        Left-Rotate(root, x-&gt;parent);</div><div class="line">        <span class="comment">// 设置x为根节点，退出while循环</span></div><div class="line">        x = root;</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="comment">// z是父节点的右孩子，与左子树原理相同，将right与left互换即可</span></div><div class="line">      w = x-&gt;parent-&gt;left;</div><div class="line">      <span class="comment">// Case 1</span></div><div class="line">      <span class="keyword">if</span>(RED == w-&gt;color)</div><div class="line">        <span class="comment">// x的兄弟节点设为黑色</span></div><div class="line">        w-&gt;color = BLACK;</div><div class="line">        <span class="comment">// x的父节点设为红色</span></div><div class="line">        x-&gt;parent-&gt;color = RED;</div><div class="line">        <span class="comment">// 对x的父节点进行右旋</span></div><div class="line">        Right-Rotate(root, x-&gt;parent);</div><div class="line">        <span class="comment">// 右旋后，重新设置x的兄弟节点</span></div><div class="line">        w = x-&gt;parent-&gt;left;</div><div class="line">      <span class="comment">// Case 1 ==&gt; Case 2、3、4</span></div><div class="line">      <span class="comment">// Case 2</span></div><div class="line">      <span class="keyword">if</span>(BLACK==w-&gt;left-&gt;color &amp;&amp; BLACK==w-&gt;right-&gt;color)</div><div class="line">        <span class="comment">// x的兄弟节点设为红色</span></div><div class="line">        w-&gt;color = RED;</div><div class="line">        <span class="comment">// 设置x的父节点为新一轮迭代的x节点，向上转移</span></div><div class="line">        x = x-&gt;parent;</div><div class="line">      <span class="comment">// Case 3：x的兄弟节点右孩子是红色，左孩子是黑色</span></div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(BLACK==w-&gt;left-&gt;color)</div><div class="line">        <span class="comment">// x的兄弟节点的右孩子设为黑色</span></div><div class="line">        w-&gt;right-&gt;color = BLACK;</div><div class="line">        <span class="comment">// x的兄弟节点设为红色</span></div><div class="line">        w-&gt;color = RED;</div><div class="line">        <span class="comment">// 对x的兄弟节点进行左旋</span></div><div class="line">        Left-Rotate(root, w);</div><div class="line">        <span class="comment">// 左旋后，重新设置x的兄弟节点，进行下一轮迭代 ==&gt; Case 4</span></div><div class="line">        w = x-&gt;parent-&gt;right;</div><div class="line">      <span class="comment">// Case 4：z的兄弟节点左孩子是红色，右孩子任意颜色</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        <span class="comment">// 将x父节点的颜色赋值给x的兄弟节点</span></div><div class="line">        w-&gt;color = x-&gt;parent-&gt;color;</div><div class="line">        <span class="comment">// 将x父节点设为黑色</span></div><div class="line">        x-&gt;parent-&gt;color = BLACK;</div><div class="line">        <span class="comment">// 将x兄弟节点的左孩子设为黑色</span></div><div class="line">        w-&gt;left-&gt;color = BLACK;</div><div class="line">        <span class="comment">// 对x的父节点进行右旋</span></div><div class="line">        Right-Rotate(root, x-&gt;parent);</div><div class="line">        <span class="comment">// 设置x为根节点，退出while循环</span></div><div class="line">        x = root;</div><div class="line"> </div><div class="line">  x-&gt;color = BLACK;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html">浅谈算法和数据结构: 七 二叉查找树</a></li>
<li><a href="http://www.cnblogs.com/gaochundong/p/binary_search_tree.html">Scale-out Thinking：二叉查找树</a></li>
<li><a href="http://blog.csdn.net/u014593748/article/details/72857498">二叉搜索树</a></li>
<li><a href="http://blog.csdn.net/lalor/article/details/7621239">求一棵二叉树中任意节点的后继节点（后继节点是指在中序遍历中紧随其后的节点）</a></li>
<li><a href="http://blog.csdn.net/dengzhilong_cpp/article/details/6669641">二叉查找树后继节点和前驱节点查找</a></li>
<li><a href="http://www.cnblogs.com/skywang12345/p/3245399.html">Sky Wang ：红黑树(一)之 原理和算法详细介绍</a></li>
<li><a href="http://blog.csdn.net/u014593748/article/details/72864573">KDK‘s CSDN：红黑树</a></li>
<li><a href="http://blog.csdn.net/v_july_v/article/details/6105630">July’s CSDN：教你初步了解红黑树</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[声明/定义/初始化/赋值]]></title>
      <url>/2017/07/07/programPearls_declaration$definition$initialization$assignment/</url>
      <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义（定义性声明）</span></div><div class="line"><span class="keyword">int</span> i;</div><div class="line"><span class="comment">// 声明（引用性声明）</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> j;</div><div class="line"><span class="comment">// 初始化</span></div><div class="line"><span class="keyword">int</span> k = <span class="number">7</span>;</div><div class="line"><span class="comment">// 默认初始化</span></div><div class="line"><span class="keyword">int</span> l;</div><div class="line"><span class="comment">// 赋值</span></div><div class="line">l = <span class="number">100</span>;</div></pre></td></tr></table></figure>
<ul>
<li>引用性<font color="red">声明</font>不分配存储空间，如：<code>extern int x;</code>只是告诉编译器变量<code>x</code>是整型，已经在其它地方定义了。</li>
<li><font color="red">定义</font>是在内存中确定变量的位置、大小。</li>
<li><font color="red">初始化</font>是定义变量的时候赋给变量的值，强调从无到有这一过程。</li>
<li><font color="red">赋值</font>是初始化后用到该变量，赋给该变量新的值。<a id="more"></a>
</li>
</ul>
<h4 id="定义-vs-声明"><a href="#定义-vs-声明" class="headerlink" title="定义 vs 声明"></a>定义 vs 声明</h4><ul>
<li>变量的声明有两种情况<ul>
<li>一种是需要建立存储空间的：<code>int a;</code></li>
<li>另一种是不需要建立存储空间的：<code>extern int b;</code></li>
<li>前者是<strong>定义性声明(defining declaration)</strong>，或者称为<strong>定义(definition)</strong>，而后者是<strong>引用性声明(referencing declaration)</strong>。从广义的角度讲，声明中包含着定义，但不是所有的声明都是定义，因此这里所说的声明和定义，都是狭义上的，声明特指不需要建立存储空间的引用性声明；定义则指需要建立存储空间的定义性声明。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 声明</span></div><div class="line">  <span class="keyword">extern</span> <span class="keyword">int</span> a;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 声明</span></div><div class="line">  <span class="keyword">extern</span> <span class="keyword">int</span> a;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 定义</span></div><div class="line"><span class="keyword">int</span> a;</div></pre></td></tr></table></figure>
<ul>
<li>外部变量（普通全局变量）的定义只能有一次，其位置肯定在函数之外；而同一个文件中对一个外部变量的声明可以有多次，既可以在函数之内（哪个函数要用到就在那个函数中声明），也可以在函数之外（在外部变量的定义点之前）。</li>
</ul>
</li>
<li>函数的声明和定义则相对区分明显。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数声明</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getStringLen</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">// 函数定义（实现）</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">getStringLen</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://boyishachang.blog.51cto.com/3485129/1285493">声明、定义、初始化、赋值的区别</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C/C++常见修饰符（inline&static&const&extern&volatile）]]></title>
      <url>/2017/07/06/programPearls_inline$static$const$extern$volatile/</url>
      <content type="html"><![CDATA[<p>　本文是关于C/C++语言中常见的五个修饰符：<code>static</code>、<code>const</code>、<code>extern</code>、<code>inline</code>、<code>volatile</code>的含义和用法，在阅读本文前，建议先通过<a href="https://durant35.github.io/2017/07/07/programPearls_declaration&amp;definition&amp;initialization&amp;assignment/">《声明/定义/初始化/赋值》</a>了解有关C/C++中定义、声明等概念以及变量声明和定义的区别。<br><a id="more"></a></p>
<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><ul>
<li>关键字static有着不同不同寻常的历史。起初，在C中引入关键字<code>static</code>是为了表示退出一个块后仍然存在的局部变量；随后，<code>static</code>在C中有了第二种含义：用来表示不能被其它文件访问的全局变量和函数。为了避免引入新的关键字，所以仍使用static关键字来表示这第二种含义。</li>
<li>static的三个作用<ul>
<li>①控制存储方式（生命周期）：函数内部的<code>static</code>变量，即静态局部变量，因为是局部变量，已经是内部连接了。<ul>
<li>控制存储方式 $\Longrightarrow$ 静态存储区：持久性+默认值为0。<ul>
<li>①存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。</li>
<li>②在静态数据区，内存中所有的字节默认值都是<code>0x00</code>（对于整型为0；对于字符数组为<code>&#39;\0&#39;</code>），某些时候这一特点可以减少程序员的工作量。</li>
</ul>
</li>
<li><code>static</code>修饰局部变量<ul>
<li>一般情况下，局部变量是放在栈区的，并且局部变量的生命周期在该语句块执行结束时便结束了；如果用static进行修饰的话，该变量便存放在静态数据区，其生命周期一直持续到整个程序执行结束 $\Longrightarrow$ 生命周期及其存储空间发生了变化，但是其作用域并没有改变，其仍然是一个局部变量，作用域仅限于该语句块。</li>
<li>在用<code>static</code>修饰局部变量后，该变量只在初次运行时进行初始化工作，且只进行一次。</li>
</ul>
</li>
</ul>
</li>
<li>②控制可见性与连接类型（作用域）：<code>static</code>全局变量，因为是全局变量，已经是静态存储了。<ul>
<li>控制可见性 $\Longrightarrow$ 隐藏<ul>
<li>当我们同时编译多个文件时，所有未加<code>static</code>前缀的全局变量和函数都具有全局可见性（源程序中的其它文件也能访问）。</li>
<li><code>static</code>修饰函数和修饰全局变量<ul>
<li>函数/全局变量只能用在它所在的编译单元</li>
<li><strong>编译单元</strong>：当一个<code>.c</code>或<code>.cpp</code>文件在编译时，预处理器首先递归包含头文件，形成一个含有所有必要信息的单个源文件，这个源文件就是一个编译单元。这个编译单元会被编译成为一个同名的目标文件（<code>.o</code>或<code>.obj</code>），链接程序把不同编译单元中产生的符号联系起来，构成一个可执行程序。</li>
</ul>
</li>
</ul>
</li>
<li>利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突；对于函数来讲，<code>static</code>的作用仅限于隐藏。</li>
<li>静态全局变量，作用域仅限于变量被定义的文件中，其它文件中即使用<code>extern</code>（下文会介绍）声明也无法使用它；准确地说，作用域是从声明之处开始，到文件结尾处结束：在定义之处前面的同一文件的那些代码行也不能使用它，想要使用就得在前面再加<code>extern</code>。</li>
</ul>
</li>
<li>③C++类中的static成员<ul>
<li>设计思路：将和某些类紧密相关的全局变量或函数写在类里面，使其看上去像一个整体，易于理解和维护。</li>
<li>访问方式：可以想访问普通成员函数和变量一样通过对象访问，但常直接用<code>类名::???</code>的方式访问。</li>
<li>静态成员变量：必须在类声明体外的某个地方（一般是实现文件<code>.cpp</code>）初始化。静态成员变量本质上是全局变量，在类的所有实例对象中共享一份。</li>
<li>静态成员函数：本质上是全局函数，并不具体作用于某个对象，不需要对象也可以访问。静态成员函数中不能访问非静态成员变量，也不能调用非静态成员函数。</li>
</ul>
</li>
</ul>
</li>
<li>static全局变量 vs 普通全局变量<ul>
<li>全局变量本身就是静态存储方式，两者在存储方式上并无不同</li>
<li>普通全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，普通（非静态的）全局变量在各个源文件中都是有效的；静态全局变量限制了其作用域，只在定义该变量的源文件内有效，在同一源程序的其它源文件中无效；由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用，因此可以避免在其它源文件中引起的错误。 <font color="blue">如果在不同源文件中出现了用<code>static</code>修饰的同名全局变量，那么这些变量互不干扰。</font></li>
<li>把全局变量改变成静态变量后改变了变量的作用域，限制了变量的使用范围。</li>
</ul>
</li>
<li>static局部变量 vs 普通局部变量<ul>
<li>把局部变量改变为静态变量后改变了变量的存储方式，即改变了变量的生存期。</li>
<li>static局部变量只被初始化一次，下一次访问依据上一次结果值。</li>
</ul>
</li>
<li>static函数 vs 普通函数<ul>
<li>只在当前源文件中使用的函数应该声明为内部函数（static函数），内部函数应该在当前源文件中声明和实现；对于可在当前源文件以外使用的函数，应该在一个头文件中声明，要使用这些函数的源文件（包括函数实现）要包含这个头文件</li>
</ul>
</li>
</ul>
<h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><ul>
<li>被<code>const</code>修饰的东西（变量/函数）都受到强制保护，程序中使用<code>const</code>可以预防意外的变动，在一定程度上提高程序的健壮性，但是程序中使用过多的<code>const</code>，可能加大代码的阅读难度。</li>
<li><code>const</code>修饰普通变量<ul>
<li>C的<code>#define</code>预处理指令，只是简单的值替代，缺乏类型的检测机制；C++引入<code>const</code>关键字：</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> datatype name=value;</div></pre></td></tr></table></figure>
<ul>
<li>不仅满足了使用预处理指令的要求：①不可变性；②避免意义模糊的数字出现，方便参数调整和修改，同时：③编译器不为普通<code>const</code>常量分配存储空间，而是将它们保存在符号表中 $\Longrightarrow$ 编译期间的常量，没有了内存存储等操作，效率更高。</li>
<li>用<code>const</code>修饰的变量（用来修饰函数的形参除外）必须在声明时进行初始化；一旦一个变量被<code>const</code>修饰，在程序中除初始化外对这个变量进行的赋值都是错误的。</li>
</ul>
</li>
<li><code>const</code>修饰指针：指针常量 vs 常量指针<ul>
<li>指针本身也是一个变量，只不过这个变量存放的是地址而已。</li>
<li>指针常量：是一个常量，这个常量本身是一个指针，即指针本身的值不可变，指针只能指向固定的存储单元 $\Longrightarrow$ 指针指向的变量的值（这个固定存储单元保存的值）是可以改变的。</li>
<li>常量指针：是一个指针，这个指针指向的变量是一个常量，该变量的值不可变 $\Longrightarrow$ 指针本身的值是可以改变的，即指针可以指向其它存储单元。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 指针常量</span></div><div class="line"><span class="keyword">int</span>* <span class="keyword">const</span> a;</div><div class="line"><span class="comment">// 常量指针</span></div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> *a;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span>* a;</div></pre></td></tr></table></figure>
<ul>
<li><code>const</code>是一个左结合的类型修饰符，它与其左侧的类型合为一个类型修饰符。</li>
</ul>
</li>
<li><code>const</code>修饰函数的参数</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 常量指针：以防意外改动指针指向数据内容</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">stringCopy</span><span class="params">(<span class="keyword">char</span>* strDest, <span class="keyword">const</span> <span class="keyword">char</span>* strSrc)</span></span>;</div><div class="line"><span class="comment">// 指针常量：以防意外改动指针本身</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* <span class="keyword">const</span> p1, <span class="keyword">int</span>* <span class="keyword">const</span> p2)</span></span>;</div><div class="line"><span class="comment">// 非内部数据类型的引用传递</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span><span class="params">(<span class="keyword">const</span> MyClass&amp; a)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li>“值传递”函数将自动产生临时变量用于复制该参数，该输入参数无需保护；临时对象的构造、复制、析构都将消耗时间；内部数据类型不存在构造析构的过程，复制也非常快。</li>
<li>“引用传递”仅借用一下参数的别名而已，不需要产生临时对象；“引用传递”有可能会改变参数，可以通过<code>const</code>限定。</li>
</ul>
</li>
<li><code>const</code>修饰函数的返回值</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">getString</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="comment">// 函数返回值采用值传递，加 const 没有任何意义</span></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">const</span> Myclass&amp; <span class="title">getObj</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div></pre></td></tr></table></figure>
<ul>
<li><code>const</code>限定类的成员函数</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> MyClass &#123;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getXXX</span><span class="params">()</span> <span class="keyword">const</span></span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><code>const</code>只能放在函数声明的尾部，大概是因为其它地方被占用了。</li>
<li>只读函数：函数不能改变类对象的状态（只能由常量对象（实例）调用）；不能修改类的数据成员，不能在函数中调用其它非<code>const</code>函数。</li>
</ul>
</li>
<li>C和C++中的<code>const</code>有很大区别：在C语言中用<code>const</code>修饰的变量仍然是一个变量；而在C++中用<code>const</code>修饰后，就变成常量了。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">5</span>;</div><div class="line"><span class="keyword">int</span> a[n];</div></pre></td></tr></table></figure>
<ul>
<li>这种方式在C语言中会报错，原因是声明数组时其长度必须为一个常量；但是在C++中就不会报错。</li>
</ul>
</li>
</ul>
<h4 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h4><ul>
<li>在C语言中，修饰符<code>extern</code>用在变量或者函数的声明前，用来说明“此变量/函数是在别处定义的，要在此处<font color="red">引用</font>”<ul>
<li><code>extern</code>置于变量或者函数前，标识变量或者函数的定义在别的文件中，提示编译器遇到此变量或函数时在其他模块（其他<code>.o</code>文件）中寻找其定义。</li>
<li>关于<code>extern</code>的作用域<ul>
<li>对外部变量的引用不只是取决于<code>extern</code>声明，还取决于外部变量本身是否能够被引用到，即变量的作用域：要求被引用的变量的链接属性必须是外链接的，通常是全局变量。<ul>
<li><code>extern</code>声明的位置对其作用域也有关系，例如在某个函数中的声明就只能在该函数中调用，在其它函数中不能调用。</li>
</ul>
</li>
</ul>
</li>
<li>为啥要用<code>extern</code>？因为用<code>extern</code>会加速程序的编译过程，这样能节省时间。<ul>
<li>对其它模块中函数的引用，最常用的方法是<code>#include</code>这些函数声明的头文件，<code>extern</code>的引用方式要直截了当、简洁的多：想引用哪个函数就用<code>extern</code>声明哪个函数，这会加速程序编译，确切的说预处理过程，节省时间；在大型C程序编译过程中，这种加速会更加明显。</li>
</ul>
</li>
<li>正确使用<code>extern</code>共享全局函数/全局变量<ul>
<li>供其他文件调用的外部函数和变量在<code>.h</code>文件中通过<code>extern</code>修饰进行声明，在<code>.c</code>/<code>.cpp</code>文件的变量定义与函数实现与普通变量、普通函数一致；要调用该文件中的函数和变量，只需要把<code>.h</code>文件用<code>#include</code>包含进来即可。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>file1.c</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明全局变量</span></div><div class="line"><span class="keyword">int</span> i, j;</div><div class="line"><span class="keyword">char</span> c;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>file2.c</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 外部变量声明</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i, j;</div><div class="line"><span class="keyword">extern</span> <span class="keyword">char</span> c;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对外部变量的声明和定义不是一回事。对外部变量的声明，只是声明该变量是在外部定义过的一个全局变量，在这里引用；而外部变量的定义，即对该全局变量的定义，则要分配存储空间；一个全局变量只能定义一次，却可以有多次外部引用。</li>
</ul>
</li>
<li>在C++中<code>extern</code>还有另外一个作用：用于指示C或者C++函数的调用规范。<ul>
<li>C++和C程序编译完成后在目标代码中命名规则不同，用此来解决名字匹配的问题。<ul>
<li>C++语言在编译的时候为了解决函数的多态问题，会<font color="blue">将函数名和参数联合起来生成一个中间的函数名称（重命名）</font>，而C语言则不会，因此会造成链接时找不到对应函数的情况。</li>
</ul>
</li>
<li><font color="red">在C++中调用C库函数，需要在C++程序中<code>extern &quot;C&quot;{...}</code>声明要引用的函数</font>，这是给链接器用的，告诉链接器在链接的时候用C函数规范来链接。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>main.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">func1</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">// 或者</span></div><div class="line">  <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"func1.h"</span></span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  func1();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在C++中导出C函数，用<code>extern &quot;C&quot;{...}</code>进行链接指定，告诉编译器，请保持我的函数名，不要进行任何重命名。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>xxx.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">func1</span><span class="params">()</span></span>;</div><div class="line">  <span class="comment">// ....</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h4><ul>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> expression(x,y) (x+y)*(x-y)</span></div></pre></td></tr></table></figure>
<ul>
<li>A. 形式和使用上像一个函数，<font color="blue">使用预处理器实现，没有参数压栈等一系列操作 $\Longrightarrow$ 效率很高</font></li>
<li>B. 使用（说调用不太准确）它时，只是做预处理器符号表中的简单替换 $\Longrightarrow$ 无严格类型检查，返回值也不能被强制转换为可转换的合适的类型。</li>
<li>C. C++类及类的访问控制的存在，这种方式无法访问类的保护成员或私有成员。</li>
</ul>
</li>
<li><code>inline</code>修饰全局函数，保留了上述方式的优点，又能有效避免相应的不足。<ul>
<li><code>inline</code>内联函数代码被<font color="blue">放入符号表中，调用时直接进行替换（像宏一样展开）</font>，没有了调用的开销，效率也很高。<ul>
<li><font color="red">栈空间</font>是指放置程序局部数据也就是函数内数据的内存空间，系统下的栈空间是有限的，假如频繁大量地使用（递归死循环调用）就会造成因栈空间不足所造成的程序出错。</li>
<li>函数被调用，函数入栈，即函数栈，会消耗栈空间（栈内存）。</li>
</ul>
</li>
<li>编译器像对待普通函数一样 $\Longrightarrow$ 参数类型检测…</li>
<li><code>inline</code>成员函数 $\Longrightarrow$ 访问保护成员或私有成员</li>
</ul>
</li>
<li><code>inline</code>内联函数函数体应简单<ul>
<li><code>inline</code>函数足够简单：不能包含复杂的结构控制语句（while/switch），不能出现递归。</li>
<li>原因：内联函数会在任何调用它的地方展开，如果太复杂，代码膨胀（程序总代码量增大，消耗更多的内存空间）$\Longrightarrow$ 效率反而得不偿失。</li>
<li>内联函数常用在类的<code>set/get</code>函数。</li>
</ul>
</li>
<li><code>inline</code>函数声明和定义（实现）放在头文件中最合适<ul>
<li>省却每个文件实现一次的麻烦</li>
<li>避免实现存在不一致的问题</li>
</ul>
</li>
</ul>
<h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><ul>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> i=<span class="number">10</span>;</div><div class="line"><span class="keyword">int</span> a=i;</div><div class="line"><span class="comment">// 其他代码，并未明确告诉编译器，对 i 进行过操作</span></div><div class="line">...</div><div class="line"><span class="keyword">int</span> b=i;</div></pre></td></tr></table></figure>
<ul>
<li><code>volatile</code>指出变量是随时可能发生变化的，每次使用该变量的时候都必须从其地址中读取，因此编译器生成的<code>int b=i;</code>的汇编代码会重新从变量 i 的地址读取数据放在变量 b 中；优化的做法（没有<code>volatile</code>）是：编译器发现两次从变量 i 读数据的代码间没有对 i 进行过操作，会自动把上次读的 i 的数据（一般的编译器可能会将其拷贝放在寄存器中以加快指令的执行速度）放在变量 b 中 $\Longrightarrow$ <code>volatile</code>可以保证对特殊地址的稳定访问。</li>
</ul>
</li>
<li><code>volatile</code>与编译器优化<ul>
<li>提高执行速度的两个方面<ul>
<li>硬件级别的优化：由于内存访问速度远不及CPU处理速度，为提高机器整体性能，在硬件上引入高速缓存cache，加速对内存的访问；另外在现代CPU中指令的执行并不一定按照顺序执行（in-order），没有相关性的指令可以乱序执行（out-of-order），以充分利用CPU的指令流水线，提高执行速度</li>
<li>软件级别的优化：一种是在编写代码时由程序员优化；另一种则是由编译器进行优化。编译器优化常用的方法有：<ul>
<li>①将内存变量缓存到寄存器；</li>
<li>②调整指令顺序以充分利用CPU指令流水线，常见的是重新排序读写指令（可能是<code>load</code>/<code>store</code>指令）。</li>
</ul>
</li>
</ul>
</li>
<li><code>volatile</code>总是与优化有关，编译器有一项技术叫做<strong>数据流分析</strong>，分析程序中的变量在哪里赋值？在哪里使用？在哪里失效，分析结果可以用于常量合并、常量传播等优化，进一步可以死代码消除。编译器对常规内存进行优化的时候，这些优化是透明的，而且效率很好；但有时候这些优化不是程序所需要的，这时可以用<code>volatile</code>禁止这些优化：<ul>
<li>不要在两个操作之间把<code>volatile</code>变量缓存在寄存器中：在多任务、中断等环境下，变量可能被其他程序改变。</li>
<li>不做常量合并、常量传播等优化。</li>
<li>对<code>volatile</code>变量的读写不会被优化掉：如果你对一个变量赋值但后面没用到，编译器常常可以省略那个赋值操作，然而万一这个赋值是对 Memory Mapped的 IO 资源（比如LEDs）进行操作呢！</li>
</ul>
</li>
</ul>
</li>
<li>一般说来，<code>volatile</code>用在如下几个地方：<ul>
<li>中断服务程序中修改的供其它程序检测的变量需要加<code>volatile</code>。</li>
<li>多任务环境下各任务间共享的标志应该加<code>volatile</code>。</li>
<li>存储器映射（Memory Mapped）的硬件寄存器通常也要加<code>volatile</code>说明，因为每次对它的读写都可能有不同的意义。</li>
</ul>
</li>
<li>频繁地使用<code>volatile</code>很可能会增加代码尺寸和降低性能！</li>
<li>一个参数可能既是<code>const</code>又是<code>volatile</code>，比如只读的状态寄存器。</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://blog.csdn.net/zqixiao_09/article/details/50877383">内联函数 —— C 中关键字 inline 用法解析</a></li>
<li><a href="http://blog.csdn.net/lemonrabbit1987/article/details/48621149">C++类的const, static 和inline成员函数（变量）</a></li>
<li><a href="http://www.cnblogs.com/stoneJin/archive/2011/09/21/2183313.html">C语言static作用（修饰函数、局部变量、全局变量）</a></li>
<li><a href="http://c.biancheng.net/cpp/html/436.html">C语static关键字—言最名不符实的关键字</a></li>
<li><a href="http://developer.51cto.com/art/201104/256820.htm">浅谈C/C++中的static和extern关键字</a></li>
<li><a href="http://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777431.html">C/C++中extern关键字详解</a></li>
<li><a href="http://blog.csdn.net/zcywell/article/details/7416488">C语言中extern修饰符的用法</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/archive/2011/04/18/2020248.html">浅谈C和C++中的const关键字</a></li>
<li><a href="http://blog.xieyc.com/const-in-detail/">const 详解（修饰变量、输入参数、返回值、成员函数</a></li>
<li><a href="http://www.cnblogs.com/yc_sunniwell/archive/2010/07/14/1777432.html">C/C++中volatile关键字详解</a></li>
<li><a href="http://blog.csdn.net/tigerjibo/article/details/7427366">C语言中volatile关键字的作用</a></li>
<li><a href="http://www.cnblogs.com/yc_sunniwell/archive/2010/06/24/1764231.html">详解C中volatile关键字</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0021] Some Algorithms Basic Details Review（课程总结）]]></title>
      <url>/2017/07/02/Algorithms_BasicMiscs/</url>
      <content type="html"><![CDATA[<h4 id="如何对-vector-初始化"><a href="#如何对-vector-初始化" class="headerlink" title="如何对 vector 初始化"></a>如何对 <strong>vector</strong> 初始化</h4><ul>
<li>大小为<code>size</code>的一维向量，二位向量</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;what-type&gt; var-name(what-size);</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;what-type&gt;&gt; var-name(rowSize, <span class="built_in">vector</span>&lt;what-type&gt;(colSize));</div></pre></td></tr></table></figure>
<ul>
<li>数组转 vector</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> rowSize = ?;</div><div class="line"><span class="keyword">int</span> colSize = ?;</div><div class="line">what-type A_[rowSize][colSize] = &#123;</div><div class="line">  &#123;element1, elment2, ..., element&#125;,</div><div class="line">  &#123;&#125;,</div><div class="line">  ...</div><div class="line">  &#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;what-type&gt;&gt; A(rowSize, <span class="built_in">vector</span>&lt;what-type&gt;(colSize));</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;rowSize; row++) &#123;</div><div class="line">  A[row].assign(A_[row], A_[row] + colSize);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="对-vector-等-STL-标准容器进行排序操作"><a href="#对-vector-等-STL-标准容器进行排序操作" class="headerlink" title="对 vector 等 STL 标准容器进行排序操作"></a>对 vector 等 STL 标准容器进行排序操作</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#inlcude <span class="meta-string">&lt;algorithm&gt;</span>	<span class="comment">/* sort */</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compareFunc</span><span class="params">(<span class="keyword">int</span> before, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> (before &lt; after);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> compareClass &#123;</div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> before, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (before &lt; after);</div><div class="line">  &#125;</div><div class="line">&#125; compareObj;</div><div class="line"> </div><div class="line"><span class="comment">// using default comparison(operator &lt;)</span></div><div class="line">sort(<span class="built_in">vector</span>.begin(), <span class="built_in">vector</span>.end());</div><div class="line">sort(<span class="built_in">vector</span>.begin(), <span class="built_in">vector</span>.begin() + length);</div><div class="line"> </div><div class="line"><span class="comment">// using comparison function</span></div><div class="line">sort(<span class="built_in">vector</span>.begin(), <span class="built_in">vector</span>.end(), compareFunc);</div><div class="line"> </div><div class="line"> <span class="comment">// using comparison object</span></div><div class="line">sort(<span class="built_in">vector</span>.begin(), <span class="built_in">vector</span>.end(), compareObj);</div></pre></td></tr></table></figure>
<ul>
<li>上述的 <code>sort(begin, end, comparison)</code> 函数，其中<code>[before]</code>元素与<code>[after]</code>元素满足<code>comparison</code>关系</li>
<li>一些自带的 comparison 函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 相等</span></div><div class="line">equal_to&lt;&gt;()</div><div class="line">not_equal_to&lt;&gt;()</div><div class="line">less&lt;&gt;() </div><div class="line">greater&lt;&gt;()</div><div class="line"><span class="comment">// ≤</span></div><div class="line">less_equal&lt;&gt;()</div><div class="line"><span class="comment">// ≥</span></div><div class="line">greater_equal&lt;&gt;()</div></pre></td></tr></table></figure>
<h4 id="使用二维-vector-维护邻接列表"><a href="#使用二维-vector-维护邻接列表" class="headerlink" title="使用二维 vector 维护邻接列表"></a>使用二维 vector 维护邻接列表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; graph;</div><div class="line">graph.resize(vertex-number);</div><div class="line"><span class="comment">// vector&lt;pair&lt;int, int&gt;&gt; edges;</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> edgeIdx=<span class="number">0</span>; edgeIdx&lt;edges.size(); edgeIdx++) &#123;</div><div class="line">  graph[edges[edgeIdx].first].push_back(edges[edgeIdx].second);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="STL-常见容器关键操作"><a href="#STL-常见容器关键操作" class="headerlink" title="STL 常见容器关键操作"></a>STL 常见容器关键操作</h4><ul>
<li>vector $\begin{cases} push\_back \cr pop\_back \end{cases}$　　list $\begin{cases} push\_back \cr pop\_back \cr push\_front \cr pop\_front \end{cases}$</li>
<li>stack $\begin{cases} push \cr pop \cr top \end{cases}$　　queue $\begin{cases} push \cr pop \cr front \cr back \end{cases}$</li>
<li>map, set  $\begin{cases} insert \cr erase \cr \color{red}{find} \end{cases}$</li>
</ul>
<h4 id="DFS-amp-BFS-的快速实现"><a href="#DFS-amp-BFS-的快速实现" class="headerlink" title="DFS&amp;BFS 的快速实现"></a>DFS&amp;BFS 的快速实现</h4><ul>
<li>DFS 递归</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> 节点 ? :</div><div class="line">    <span class="keyword">if</span>(!visited[?]) &#123;</div><div class="line">      dfs(?, visited);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(startIdx, visited[])</span> </span>&#123;</div><div class="line">  visited[startIdx] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">for</span> 节点 startIdx 的邻接边 startIdx-&gt;?:</div><div class="line">    <span class="keyword">if</span>(!visited[?]) &#123;</div><div class="line">      dfs(?, visited);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>DFS 堆栈</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(root)</span> </span>&#123;</div><div class="line">  nodeStack.push(root);</div><div class="line">  visited[root] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">while</span>(!nodeStack.empty()) &#123;</div><div class="line">    curNode = nodeStack.top();</div><div class="line">    nodeStack.pop();</div><div class="line">    <span class="keyword">for</span> curNode 的邻接边 curNode-&gt;?:</div><div class="line">      <span class="keyword">if</span>(!visited[?]) &#123;</div><div class="line">        nodeStack.push(?);</div><div class="line">        visited[?] = <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>BFS 队列</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(root)</span> </span>&#123;</div><div class="line">  nodeQueue.push(root);</div><div class="line">  visited[root] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">while</span>(!nodeQueue.empty()) &#123;</div><div class="line">    curNode = nodeQueue.front();</div><div class="line">    nodeStack.pop();</div><div class="line">    <span class="keyword">for</span> curNode 的邻接边 curNode-&gt;?:</div><div class="line">      <span class="keyword">if</span>(!visited[?]) &#123;</div><div class="line">        nodeQueue.push(?);</div><div class="line">        visited[?] = <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h4><ul>
<li>带正权（不可带负权）的图</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(source)</span> </span>&#123;</div><div class="line">  visited[] = <span class="literal">false</span>;</div><div class="line">  prevs[] = <span class="literal">NULL</span>;</div><div class="line">  dists[] = INT_MAX;</div><div class="line"> </div><div class="line">  dists[source] = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> 完成所有节点挑选:</div><div class="line">    curMinDist = INT_MAX;</div><div class="line">    pickNode = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">for</span> 所有节点?:</div><div class="line">      <span class="keyword">if</span>(!visited[?] &amp;&amp; dists[?] &lt; curMinDist) &#123;</div><div class="line">        curMinDist = dists[?];</div><div class="line">        pickNode = ?;</div><div class="line">      &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(pickNode == <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">// 存在节点不可达</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    visited[pickNode] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> pickNode 所有邻接边 pickNode-&gt;?:</div><div class="line">      <span class="keyword">if</span>(!visited[?] </div><div class="line">        &amp;&amp; dists[?] &gt; (dists[pickNode] + 边权)) &#123;</div><div class="line">        dists[?] = dists[pickNode] + 边权;</div><div class="line">        prevs[?] = pickNode;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可带负权的图 $\longrightarrow$ 可以检测是否有负环</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BellmanFord</span><span class="params">(source)</span> </span>&#123;</div><div class="line">  visited[] = <span class="literal">false</span>;</div><div class="line">  prevs[] = <span class="literal">NULL</span>;</div><div class="line">  dists[] = INT_MAX;</div><div class="line"> </div><div class="line">  dists[source] = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> 完成所有节点[<span class="number">0</span>-N<span class="number">-1</span>]挑选:</div><div class="line">    updated = <span class="literal">false</span>;</div><div class="line">    <span class="comment">// 更新所有节点</span></div><div class="line">    <span class="keyword">for</span> 所有节点?:</div><div class="line">      <span class="keyword">for</span> ?的所有邻接边?-&gt;△:</div><div class="line">        <span class="keyword">if</span>(dists[△] != INT_MAX </div><div class="line">          &amp;&amp; dists[△] &gt; (dists[?] + 边权)) &#123;</div><div class="line">          dists[△] = dists[?] + 边权;</div><div class="line">          prevs[△] = ?;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(!updated) &#123;</div><div class="line">      <span class="comment">// 完成最短路径搜索</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(已经挑选了所有节点 &amp;&amp; updated) &#123;</div><div class="line">      <span class="comment">// 存在负环</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="最小生成树问题"><a href="#最小生成树问题" class="headerlink" title="最小生成树问题"></a>最小生成树问题</h4><ul>
<li>Prim 算法，与 Dijkstra 类似，只不过代价是到当前生成树的，而不是到源的代价</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(root = <span class="number">0</span>)</span> </span>&#123;</div><div class="line">  visited[] = <span class="literal">false</span>;</div><div class="line">  prevs[] = <span class="literal">NULL</span>;</div><div class="line">  costs[] = INT_MAX;</div><div class="line"> </div><div class="line">  costs[root] = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> 完成所有节点挑选:</div><div class="line">    curMinCost = INT_MAX;</div><div class="line">    pickNode = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">for</span> 所有节点?:</div><div class="line">      <span class="keyword">if</span>(!visited[?] &amp;&amp; costs[?] &lt; curMinCost) &#123;</div><div class="line">        curMinCost = costs[?];</div><div class="line">        pickNode = ?;</div><div class="line">      &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(pickNode == <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">// 节点不可达</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    visited[pickNode] = <span class="literal">true</span>;</div><div class="line">    <span class="comment">// 更新 cost</span></div><div class="line">    <span class="keyword">for</span> pickNode 所有邻接边 pickNode-&gt;?:</div><div class="line">      <span class="keyword">if</span>(!visited[?] </div><div class="line">        &amp;&amp; costs[?] &gt; (dists[pickNode] + 边权)) &#123;</div><div class="line">        costs[?] = costs[pickNode] + 边权;</div><div class="line">        prevs[?] = pickNode;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="关于子串、子序列的动态规划问题"><a href="#关于子串、子序列的动态规划问题" class="headerlink" title="关于子串、子序列的动态规划问题"></a>关于子串、子序列的动态规划问题</h4><ul>
<li><code>dp[i]</code>：转化到以 [i] 结尾或者 [0, …, i] 这样的子串/子序列的子问题</li>
<li><code>dp[i][j]</code>：转化到 [i, …, j] 这样的子串/子序列的子问题<ul>
<li>以长度递增为填表方向<ul>
<li>长度为 1，需作为基单独计算</li>
<li>长度为 2，可能需要作为基单独计算</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="动态规划：编辑距离（Edit-distance）"><a href="#动态规划：编辑距离（Edit-distance）" class="headerlink" title="动态规划：编辑距离（Edit distance）"></a>动态规划：编辑距离（Edit distance）</h4><ul>
<li>设需要计算编辑距离的两个字符串分别为 <strong>x[1…m]</strong> 和 <strong>y[1…n]</strong></li>
<li>$E(i, j)$：<strong>x[1…i]</strong> 和 <strong>y[1…j]</strong> 的编辑距离</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, ..., m</div><div class="line">  <span class="comment">// y 插入操作</span></div><div class="line">  j=<span class="number">0</span>: <span class="comment">// x 为空</span></div><div class="line">    E(i, j) = i;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> j = <span class="number">1</span>, <span class="number">2</span>, ..., n</div><div class="line">  <span class="comment">// y 删除操作</span></div><div class="line">  i=<span class="number">0</span>: <span class="comment">// y 为空</span></div><div class="line">    E(i, j) = j;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">2</span>, ..., m</div><div class="line">  <span class="keyword">for</span> j = <span class="number">1</span>, <span class="number">2</span>, ..., n</div><div class="line">    E(i, j) = min&#123;</div><div class="line">      <span class="number">1</span> + E(i<span class="number">-1</span>, j),	<span class="comment">// y 删除操作</span></div><div class="line">      <span class="number">1</span> + E(i, j<span class="number">-1</span>),	<span class="comment">// y 插入操作</span></div><div class="line">      diff(i, j) + E(i<span class="number">-1</span>, j<span class="number">-1</span>),	<span class="comment">// y 替换操作</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line"><span class="keyword">return</span> E(m, n)</div></pre></td></tr></table></figure>
<ul>
<li>其中，$diff(i, j) = \begin{cases} 0, x[i]=y[j] \cr 1, else \end{cases}$</li>
</ul>
<h4 id="动态规划：最长路"><a href="#动态规划：最长路" class="headerlink" title="动态规划：最长路"></a>动态规划：最长路</h4><ul>
<li>保证在计算<code>dist(v)</code>时，<code>v</code>的前驱节点<code>u</code>的最短/长路已经算出来 $\Longrightarrow$ 按照拓扑排序的顺序来计算每个点<code>v</code>的最长/短路<code>dist(v)</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">initialize all dist(·) value to ∞</div><div class="line">dists[source] = 0</div><div class="line">for v∈V\&#123;source&#125;, in topological order:</div><div class="line">  dist(v) = max/min \_&#123;(u, v) ∈ E&#125; &#123;dist(u) + weight(u, v)&#125;</div></pre></td></tr></table></figure>
<ul>
<li>有点复杂的动态规划思路<ul>
<li>$ans[j][i]$：以 j 点为起点，经过点集 i 中的点恰好一次而不经过其他点的路径长度的最大值，不存在则为-∞</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">A. i 只包含一个点，ans[j][i] = <span class="number">0</span></div><div class="line">B. 否则，ans[j][i] = max(graph[j][k] + ans[k][s])</div><div class="line">  S 表示 i 集合中去掉了 j 点的集合</div><div class="line">  k 遍历集合 S 中的点，点 j 到点 k 有边存在，权值为 graph[j][k]</div><div class="line">C. 所有 ans[j][i] 的最大值即为最长路</div></pre></td></tr></table></figure>
<h4 id="动态规划：最短可靠路径"><a href="#动态规划：最短可靠路径" class="headerlink" title="动态规划：最短可靠路径"></a>动态规划：最短可靠路径</h4><ul>
<li>从 s 到 t 的不超过 k 条边的最短路</li>
<li><code>dist(v, i)</code>：从起点 s 到 v 点恰好经过 i 条边的最短路</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">i = 0, dist(s, i) = 0, 其他为∞</div><div class="line">for 所有顶点 v</div><div class="line">  dist(v, i) = min&#123;(u, v) \in E&#125; &#123;dist(u, i-1) + weight(u, v)&#125;</div></pre></td></tr></table></figure>
<h4 id="动态规划：最长递增序列"><a href="#动态规划：最长递增序列" class="headerlink" title="动态规划：最长递增序列"></a>动态规划：最长递增序列</h4><ul>
<li>转化为最长路径问题（容易提取）</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(fromIdx=<span class="number">0</span>; fromIdx&lt;n; fromIdx++) &#123;</div><div class="line">  <span class="keyword">for</span>(toIdx=fromIdx+<span class="number">1</span>; toIdx&lt;n; toIdx++) &#123;</div><div class="line">    <span class="keyword">if</span>(num[toIdx] &gt; num[fromIdx]) &#123;</div><div class="line">      graph[fromIdx].push_back(toIdx);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>动态规划（$O(N^2)$）<ul>
<li>$L(j)$：以第 j 个数结尾的最长递增子序列的长度</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">L(<span class="number">0</span>) = <span class="number">1</span>;</div><div class="line">prevs[] = <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span> j = <span class="number">1.</span>..n<span class="number">-1</span>:</div><div class="line">  <span class="comment">// 最长递增序列只有 num[j]</span></div><div class="line">  <span class="keyword">int</span> localMax = <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> i = <span class="number">0.</span>..j:</div><div class="line">    <span class="comment">// 以比 num[j] 小的数结尾的最长递增子序列长度+1</span></div><div class="line">    <span class="keyword">if</span>(num[i] &lt; num[j] &amp;&amp; L(i) &gt; localMax) &#123;</div><div class="line">      localMax = L(i);</div><div class="line">      prevs[j] = i;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">  L(j) = localMax + <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h4 id="动态规划：矩阵连乘"><a href="#动态规划：矩阵连乘" class="headerlink" title="动态规划：矩阵连乘"></a>动态规划：矩阵连乘</h4><ul>
<li>给定 n 个矩阵构成的一个链 <code>&lt;A1, A2, ..., An&gt;</code>，其中矩阵<code>Ai</code>的大小为 $P_{i-1} * P_{i}, i=1,…n$，找一个计算顺序，使得计算乘积<code>A1A2...An</code>的乘法次数最少。</li>
<li>$m[i, j]$：表示计算 <code>Ai...Aj</code>的最小乘法次数<ul>
<li>$min_{i \leq k \leq j} {m[i, k] + m[k+1, j] + P_{i-1}P_{k}P_{j}}$</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">n = length[p] - <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="keyword">for</span> i = <span class="number">1.</span>..n:</div><div class="line">  m[i, i] = <span class="number">0</span></div><div class="line"> </div><div class="line"><span class="keyword">for</span> l = <span class="number">2.</span>..n:</div><div class="line">  <span class="keyword">for</span> i = <span class="number">1.</span>..(n-l+<span class="number">1</span>):</div><div class="line">    j = i + l - <span class="number">1</span></div><div class="line">    m[i, j] = ∞</div><div class="line">    <span class="keyword">for</span> k = i...j<span class="number">-1</span>:</div><div class="line">      q = m[i, k] + m[k+<span class="number">1</span>, j] + P[i<span class="number">-1</span>]*P[k]*P[j]</div><div class="line">      <span class="keyword">if</span>(q &lt; m[i, j]) &#123;</div><div class="line">        m[i, j] = q;</div><div class="line">        s[i, j] = k;</div><div class="line">      &#125;</div><div class="line"> </div><div class="line"><span class="keyword">return</span> m[<span class="number">1</span>, n], s[<span class="number">1</span>, n]</div></pre></td></tr></table></figure>
<ul>
<li><code>m[1, n]</code>为最终需要的最小乘法次数，通过<code>s[1, n]</code>可以回溯得到对应的计算顺序</li>
</ul>
<h4 id="期末机考错误题目反思"><a href="#期末机考错误题目反思" class="headerlink" title="期末机考错误题目反思"></a>期末机考错误题目反思</h4><ul>
<li><a href="https://leetcode.com/problems/merge-two-binary-trees/#/description">617. Merge Two Binary Trees</a></li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* t1, TreeNode* t2)</span> </span>&#123;</div><div class="line">        <span class="comment">// t1==NULL or t1!=NULL</span></div><div class="line">        <span class="keyword">if</span>(t2 == <span class="literal">NULL</span>) &#123;</div><div class="line">        	<span class="keyword">return</span> t1;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// t2!=NULL t1==NULL</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t1 == <span class="literal">NULL</span>) &#123;</div><div class="line">        	t1 = <span class="keyword">new</span> TreeNode(t2-&gt;val);</div><div class="line">        	mergeTrees(t1-&gt;left, t2-&gt;left);</div><div class="line">        	mergeTrees(t1-&gt;right, t2-&gt;right);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// t2!=NULL t1!=NULL</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        	t1-&gt;val += t2-&gt;val;</div><div class="line">        	mergeTrees(t1-&gt;left, t2-&gt;left);</div><div class="line">        	mergeTrees(t1-&gt;right, t2-&gt;right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> t1;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>反思：<code>t1 = new TreeNode(t2-&gt;val);</code> 之后，损失了该节点与 t1 树的连接关系；需要通过单独开一棵树的方式来解决这个问题。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">mergeTrees</span><span class="params">(TreeNode* t1, TreeNode* t2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(t1 == <span class="literal">NULL</span>) &#123;</div><div class="line">        	<span class="keyword">return</span> t2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(t2 == <span class="literal">NULL</span>) &#123;</div><div class="line">        	<span class="keyword">return</span> t1;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        TreeNode* result = <span class="keyword">new</span> TreeNode(t1-&gt;val + t2-&gt;val);</div><div class="line">        result-&gt;left = mergeTrees(t1-&gt;left, t2-&gt;left);</div><div class="line">        result-&gt;right = mergeTrees(t1-&gt;right, t2-&gt;right);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><a href="https://leetcode.com/problems/01-matrix/#/description">542. 01 Matrix</a></li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix, <span class="keyword">int</span> startRowIdx, <span class="keyword">int</span> startColIdx)</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; queue_;</div><div class="line">    <span class="comment">// 这里已经很难处理，似乎没办法记录当前层（广度优先搜索的深度）层数，即步数</span></div><div class="line">  &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; updateMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; matrix) &#123;</div><div class="line">        <span class="keyword">int</span> rowSize = matrix.size();</div><div class="line">        <span class="keyword">int</span> colSize = matrix[<span class="number">0</span>].size();</div><div class="line"> </div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; stepMatrix(rowSize, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(colSize));</div><div class="line"> </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;rowSize; row++) &#123;</div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;colSize; col++) &#123;</div><div class="line">        		<span class="keyword">if</span>(matrix[row][col] == <span class="number">0</span>) &#123;</div><div class="line">        			stepMatrix[row][col] = <span class="number">0</span>;</div><div class="line">        		&#125;</div><div class="line">        		<span class="keyword">else</span> &#123;</div><div class="line">        			stepMatrix[row][col] = BFS(matrix, row, col);</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> stepMatrix;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>反思：原先的想法是对于那些 1 的位置，进行DFS（现在想想应该BFS），寻找其到达最近的 0 需要的步数；会存在的一个问题（如上）就是，如何得到这些 1 到 0 的步数呢？而且无论是 DFS 还是 BFS，显然都存在重复的搜索操作。那假如换种思路，从那些 0 出发，一层一层向外扩张去更新那些 1 所在位置的步数呢？每一层的扩张显然可以利用上一层扩张的结果去更新，不存在重复的搜索操作。因此，一开始将那些 1 所在位置的到最近 0 所在位置的步数初始化为<code>INT_MAX</code>，然后从那些 0 所在位置开始通过 BFS 一层一层进行扩张，用更小的步数去更新 1 所在位置的值，最终，那些原先为 1 所在位置的值便是其到达最近 0 所在位置需要的步数了。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; updateMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;&amp; matrix) &#123;</div><div class="line">        <span class="keyword">int</span> rowSize = matrix.size();</div><div class="line">        <span class="keyword">int</span> colSize = matrix[<span class="number">0</span>].size();</div><div class="line"> </div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; stepMatrix(rowSize, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(colSize));</div><div class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; queue_;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;rowSize; row++) &#123;</div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;colSize; col++) &#123;</div><div class="line">        		<span class="keyword">if</span>(matrix[row][col] == <span class="number">0</span>) &#123;</div><div class="line">        			stepMatrix[row][col] = <span class="number">0</span>;</div><div class="line">        			queue_.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(row, col));</div><div class="line">        		&#125;</div><div class="line">        		<span class="keyword">else</span> &#123;</div><div class="line">        			stepMatrix[row][col] = INT_MAX;</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// up; down; left; right</span></div><div class="line">        <span class="keyword">int</span> dirs[<span class="number">4</span>][<span class="number">2</span>] = &#123;</div><div class="line">        	&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, </div><div class="line">        	&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, </div><div class="line">        	&#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, </div><div class="line">        	&#123;<span class="number">0</span>, <span class="number">1</span>&#125;</div><div class="line">        &#125;;</div><div class="line"> </div><div class="line">        <span class="keyword">while</span>(!queue_.empty()) &#123;</div><div class="line">        	pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; curPos = queue_.front();</div><div class="line">        	queue_.pop();</div><div class="line"> </div><div class="line">        	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</div><div class="line">        		<span class="keyword">int</span> rowIdx = curPos.first + dirs[i][<span class="number">0</span>];</div><div class="line">        		<span class="keyword">int</span> colIdx = curPos.second + dirs[i][<span class="number">1</span>];</div><div class="line">        		<span class="keyword">if</span>(rowIdx&lt;<span class="number">0</span> || colIdx&lt;<span class="number">0</span> || rowIdx&gt;=rowSize || colIdx&gt;=colSize) &#123;</div><div class="line">        			<span class="keyword">continue</span>;</div><div class="line">        		&#125;</div><div class="line">        		<span class="keyword">if</span>(stepMatrix[curPos.first][curPos.second]+<span class="number">1</span> &lt; stepMatrix[rowIdx][colIdx]) &#123;</div><div class="line">        			stepMatrix[rowIdx][colIdx] = stepMatrix[curPos.first][curPos.second]+<span class="number">1</span>;</div><div class="line">        			queue_.push(pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(rowIdx, colIdx));</div><div class="line">        		&#125;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> stepMatrix;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><a href="http://www.lintcode.com/en/problem/longest-common-substring/">Longest Common Substring</a></li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</div><div class="line">     * @param A, B: Two string.</div><div class="line">     * @return: the length of the longest common substring.</div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(<span class="built_in">string</span> &amp;A, <span class="built_in">string</span> &amp;B)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lenA = A.length();</div><div class="line">        <span class="keyword">int</span> lenB = B.length();</div><div class="line">        <span class="keyword">if</span>(lenA==<span class="number">0</span> || lenB==<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// L[idxA][idxB]: the largest length of LCS ending with A[idxA] and B[idxB] </span></div><div class="line">        <span class="keyword">int</span> L[lenA][lenB];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxB=<span class="number">0</span>; idxB&lt;lenB; idxB++) &#123;</div><div class="line">            L[<span class="number">0</span>][idxB] = B[idxB]==A[<span class="number">0</span>]? <span class="number">1</span> : <span class="number">0</span>; </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxA=<span class="number">0</span>; idxA&lt;lenA; idxA++) &#123;</div><div class="line">            L[idxA][<span class="number">0</span>] = A[idxA]==B[<span class="number">0</span>]? <span class="number">1</span> : <span class="number">0</span>; </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxA=<span class="number">1</span>; idxA&lt;lenA; idxA++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> idxB=<span class="number">1</span>; idxB&lt;lenB; idxB++)&#123;</div><div class="line">                L[idxA][idxB] = A[idxA]==B[idxB]? L[idxA<span class="number">-1</span>][idxB<span class="number">-1</span>]+<span class="number">1</span> : <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxA=<span class="number">0</span>; idxA&lt;lenA; idxA++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> idxB=<span class="number">0</span>; idxB&lt;lenB; idxB++)&#123;</div><div class="line">                <span class="keyword">if</span>(L[idxA][idxB] &gt; maxLen) &#123;</div><div class="line">                    maxLen = L[idxA][idxB];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxLen;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>反思：子问题定义的时候出现问题，应该是<code>L[idxA][idxB]</code>：the largest length of LCS <font color="red">ending with A[idxA] and B[idxB]</font>，而不是<font color="red">A[0…idxA]和B[0…idxB]</font>的最长公共子串。</li>
</ul>
</li>
<li><a href="https://leetcode.com/problems/house-robber/#/description">198. House Robber</a><ul>
<li>机考时是求数列：A[0], A[1], …, A[n-1] 的最小和，要求A[i]和A[i+1]至少选取一个；打家劫舍这道题类似，相当于在数列中取出一个或多个不相邻数，使其和最大。</li>
<li>打家劫舍要求确保不出现连续相邻的两个数，下面两个子问题都能够保证这样的一个前提条件。<ul>
<li>①<code>money[i]</code>：抢劫完房间 house[i] 后，能够获得的最大金钱数目。</li>
<li>②<code>money[i]</code>：在房间 house[0], …, house[i] 中进行抢劫能够获得的最大金钱数目。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b?a:b)</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="comment">// money[i]: max money after robbing house[i]</span></div><div class="line">        <span class="keyword">int</span> numSize = nums.size();</div><div class="line">        <span class="keyword">if</span>(numSize == <span class="number">0</span>) &#123;</div><div class="line">        	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; money(nums.size());</div><div class="line">        money[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(numSize &gt; <span class="number">1</span>) &#123;</div><div class="line">        	money[<span class="number">1</span>] = nums[<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(numSize &gt; <span class="number">2</span>) &#123;</div><div class="line">        	money[<span class="number">2</span>] = nums[<span class="number">0</span>] + nums[<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;numSize; i++) &#123;</div><div class="line">        	money[i] = max(money[i<span class="number">-3</span>], money[i<span class="number">-2</span>]);</div><div class="line">        	money[i] += nums[i];</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> largestMoney = money[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;numSize; i++) &#123;</div><div class="line">        	<span class="keyword">if</span>(money[i] &gt; largestMoney) &#123;</div><div class="line">        		largestMoney = money[i];</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> largestMoney;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b?a:b)</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="comment">// money[i]: max money after reaching house[i], may robbed house[i]</span></div><div class="line">        <span class="keyword">int</span> numSize = nums.size();</div><div class="line">        <span class="keyword">if</span>(numSize == <span class="number">0</span>) &#123;</div><div class="line">        	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; money(nums.size());</div><div class="line">        money[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span>(numSize &gt; <span class="number">1</span>) &#123;</div><div class="line">        	money[<span class="number">1</span>] = max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;numSize; i++) &#123;</div><div class="line">        	money[i] = max(money[i<span class="number">-2</span>]+nums[i], money[i<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> money[numSize<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>然而，机考时的最小和问题必须满足：不存在相邻两个数不选的情况；显然对于转化为子问题②很难保证这个前提条件。</li>
</ul>
</li>
<li>  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#define min(a,b) (a&lt;b?a:b)</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int minSum(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        // sums[i]: minimum sum ending with nums[i]</div><div class="line">        int numSize = nums.size();</div><div class="line">        if(numSize == 0) &#123;</div><div class="line">        	return 0;</div><div class="line">        &#125;</div><div class="line">        vector&lt;int&gt; sums(nums.size());</div><div class="line">        sums[0] = nums[0];</div><div class="line">        if(numSize &gt; 1) &#123;</div><div class="line">        	sums[1] = nums[1];</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        for(int i=2; i&lt;numSize; i++) &#123;</div><div class="line">        	sums[i] = min(sums[i-2], sums[i-1]);</div><div class="line">        	sums[i] += nums[i];</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        return min(sums[numSize-2], sums[numSize-1]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0020] 几个有关图的问题]]></title>
      <url>/2017/06/26/Algorithms_GraphProblems/</url>
      <content type="html"><![CDATA[<h4 id="有向图-vs-无向图"><a href="#有向图-vs-无向图" class="headerlink" title="有向图 vs 无向图"></a>有向图 vs 无向图</h4><ul>
<li>有向图强调<strong>出入度</strong>的概念；无向图，其<strong>邻接矩阵</strong> 是一个对称矩阵。</li>
<li>无向图边的两端是对称的，无向图讲究<strong>连通</strong>这个概念，没有<strong>方向</strong>，没有<strong>拓扑</strong>。</li>
</ul>
<h4 id="判断图是否连通？（一个图有几个连通分量）"><a href="#判断图是否连通？（一个图有几个连通分量）" class="headerlink" title="判断图是否连通？（一个图有几个连通分量）"></a>判断图是否连通？（一个图有几个连通分量）</h4><ul>
<li>从一个指定的点开始，通过不同的策略去遍历这个图，有深度遍历和广度遍历。</li>
<li>每次经过一个节点的时候，首先判断一下这个节点是否已经访问过了，如果没有访问过，则这个节点可以作为下一次继续遍历的候选。</li>
<li>如果这个图是连通的话，这种方法最终会覆盖到整个图。所以可以采用一种计数统计的方式来实现。<ul>
<li>比如说每次访问一个以前没有遍历的节点，则将对应的计数加一。这样当最后遍历结束后，如果统计的节点和图本身的节点一样的话，表示这个图是连通的，否则表示不连通。</li>
</ul>
</li>
<li>这种方法用来判断整个图是否为连通的时候，实际上只要给定一个点，然后按照给定的步骤可以把该点所连接的所有点都涵盖到。如果有其它分隔的部分则不会再处理了，所以，通过这种办法我们在图不是连通的情况下，它只需要涵盖图的一部分就执行结束了。最坏的情况时间复杂度也就是$O(V+E)$。<a id="more"></a></li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">连通分量标识符 counter = <span class="number">1</span>;</div><div class="line">visited[] = <span class="literal">false</span>;</div><div class="line"><span class="keyword">for</span> 所有节点 ?:</div><div class="line">  <span class="keyword">if</span>(!visited[?])</div><div class="line">    dfs(?, visited) 或 bfs(?, visited)</div><div class="line">  counter++;</div><div class="line"> </div><div class="line">counter 为连通分量数目</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="图中任意两个点的连通性"><a href="#图中任意两个点的连通性" class="headerlink" title="图中任意两个点的连通性"></a>图中任意两个点的连通性</h4><ul>
<li>在某些情况下，我们需要考虑的不仅仅是判断整个图是否为连通这么简单，有时候我们需要考虑，给定两个节点$i,  j$，需要判断它们是否相互连接。<ul>
<li>给定两个点，看它们之间是否连通，可能有很多种情况：比如说当整个图是连通的，则它们必然是连通的；而如果整个图不是连通的，但是这两个点是在一个连通的块，它们也是相互连通的。</li>
<li>光遍历一个连通的块是不够的，肯定要遍历完所有的块。另外，如果遍历完一个块仅仅用一个数组来标记是否被访问还是不够的，对于每个不同的连通区域，要进行不同的标识。<ul>
<li>遍历图中间所有节点</li>
<li>所有相通的块必须标识为相同：①遍历一遍所有的节点，对每个节点都调用遍历方法，对于已经访问过的节点则直接跳过；②不管是dfs还是bfs，只要给定一个节点遍历完，这一块连通块我们一路做同样的标记就可以了，只要它们相通那么标记也肯定是一样的</li>
</ul>
</li>
</ul>
</li>
<li>实现的细节上<ul>
<li>考虑用一个计数器和一个数组，对于某个块给计数器设定一个值，然后对应的这个值也放到对应数组的索引的位置里</li>
<li>下一次遍历一个新的块时，对这个计数器加一，这样每次遍历的块的计数器值不同。</li>
<li>给定任意两个节点，只要判断一下数组里对应的计数器值是否相同就可以判断图中任意两个点是否是连通的。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">belongComponent[] = &#123;<span class="number">-1</span>&#125;;</div><div class="line">counter = <span class="number">1</span>;</div><div class="line">visited[] = <span class="literal">false</span>;</div><div class="line"><span class="keyword">for</span> 所有节点?:</div><div class="line">  <span class="keyword">if</span>(!visited[?])</div><div class="line">    dfs(?, visited, belongComponent, counter);</div><div class="line">  counter++;</div><div class="line"> </div><div class="line">判断 belongComponent[i] ?= belongComponent[j]</div><div class="line"> </div><div class="line"><span class="keyword">void</span> dfs(startIdx, visited, belongComponent, counter) &#123;</div><div class="line">  visited[startIdx] = <span class="literal">true</span>;</div><div class="line">  belongComponent[startIdx] = counter;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="深度优先遍历先序-amp-后序"><a href="#深度优先遍历先序-amp-后序" class="headerlink" title="深度优先遍历先序&amp;后序"></a>深度优先遍历先序&amp;后序</h4><ul>
<li>在访问图的时候，假定以深度优先遍历为例。当我们每次遍历到一个节点的时候就访问它，可以称其访问序为前序，而如果等它遍历后递归返回的时候再访问它，这就相当于一个后序。</li>
<li>要实现这两种遍历的方法其实很简单，无非就是在深度优先遍历的时候在访问某个节点前或者在访问结束后将节点加入到队列里。每次在第一次访问某个节点时就往<code>preQueue</code>里面添加元素；而往<code>postQueue</code>里面添加元素，则是在通过该节点以及它所关联的节点都已经遍历结束递归返回的时候。</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(graph, startIdx)</span> </span>&#123;</div><div class="line">  <span class="comment">// 先序</span></div><div class="line">  preQueue.push(startIdx);</div><div class="line"> </div><div class="line">  visited[startIdx] = <span class="literal">true</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> 邻接边 startIdx-&gt;?:</div><div class="line">    <span class="keyword">if</span>(!visited[?])</div><div class="line">      dfs(graph, ?)</div><div class="line"> </div><div class="line">  <span class="comment">// 后序</span></div><div class="line">  postQueue.push(startIdx);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="图中环的检测"><a href="#图中环的检测" class="headerlink" title="图中环的检测"></a>图中环的检测</h4><ul>
<li>还有一个常见的问题就是检测图中是否存在环？这也是一个很有意思的问题，因为在大多数图的结构中确实是存在环的。<ul>
<li>对于一个连通的图来说，如果它不存在环，则可以称其为树了（如下文），因此环检测的问题在判断一个图是否为树的问题上有很重要的应用。</li>
</ul>
</li>
<li>从图中构成环的任意一个节点开始，如果按照某个方向遍历，最终它某个可以访问的点是它前面已经遍历过的。<ul>
<li>对于一些特殊的情况，比如两个相邻的节点之间的连接，它们不能定义为环，需要被排除：可以增加一个参数，表示访问的当前节点的前一个节点，<font color="green">如果从当前节点所能连接到的节点去遍历的时候，碰到的节点是已经访问过的节点，但是这个节点是它的前一个节点的话，这种情况不能定义为环，我们应该忽略</font>。</li>
<li>如果对于图并不是完全连通的情况呢？为了避免遗漏，肯定要尝试去遍历所有的节点，和前面检测图连通性类似。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">① 遍历所有连通块，记录 prev 节点，同时进行访问标记</div><div class="line">② 如果从当前节点所能连接的节点去遍历时，碰到的节点是已经访问过的</div><div class="line">  (<span class="number">1</span>) 这个节点是当前节点的 prev 节点，不是环</div><div class="line">  (<span class="number">2</span>) 不是 prev 节点，是环</div><div class="line">当环存在时，可以通过 prevs[] 数组返回这个环</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>上述方法仅使用于无向图，对于如下的有向图并不适用：利用上述算法会在节点⑥时检测到环，实际上并不存在环。<center><img src="/img/Algorithms/0020_DG_useless.png" width="420px" alt=""/></center></li>
<li>因此对于有向图，需要对上述算法做以下的补充。  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">③ 找到一个还在遍历中的节点，同时在遍历的时候它如果再次被访问到了，则表示找到了环；如果它被访问完了之后返回，则再次碰到它的时候就不是环了</div><div class="line">  (<span class="number">1</span>) <span class="keyword">bool</span> onStack[]：</div><div class="line">    <span class="number">1.1</span> 对这个节点访问前设置，表示在一个递归顺序</div><div class="line">    <span class="number">1.2</span> 访问退出这个递归后，设置回来</div><div class="line">  (<span class="number">2</span>) <span class="keyword">bool</span> visited[]：记录访问过的节点</div><div class="line">  (<span class="number">3</span>) <span class="keyword">int</span> prevs[]：记录环的结果，通过记录前后访问的节点来回溯得到环</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>能够用拓扑排序（下一节）完成对图中所有节点的排序的话，就说明这个图中没有环；如果不能完成，则说明有环。</li>
</ul>
<h4 id="DAG-拓扑排序"><a href="#DAG-拓扑排序" class="headerlink" title="DAG: 拓扑排序"></a>DAG: 拓扑排序</h4><ul>
<li>在一些任务安排和调度的问题里，不同的问题或者任务之间存在一些依赖关系：有的任务需要在某些任务完成之后才能做。像一些学校的教学课程安排：设置某一门课程需要依赖于一个前置的课程，只有学生学习了前置课程之后才能去学习该课程，如果将一门课程当做一个节点，从它引出一个指针指向后序依赖它的课程，就会得到一个有向图。<ul>
<li>对于这种图来说，最大的特点就是它们肯定就不能存在环，不然就有逻辑上的错误。因此，前面检测一个图是否为DAG的方法就是看图中是否有环。</li>
<li>拓扑排序则是在确定没有环的情况下，输出一个正常的序列，这个序列表示从一个不依赖任何元素的节点到后序的节点（这些序列正好符合课程安排或者任务调度的逻辑顺序）。</li>
</ul>
</li>
<li>对于一个有向图来说，如果它不存在环，则它应该为<strong>DAG</strong>。现在的问题是怎么找出这个拓扑序列来？<ul>
<li>基于DFS，结合堆栈的拓扑排序<ul>
<li><strong>证明</strong>：假设对某一已知有向无回路图$G=(V,E)$运行DFS过程，以便确定其顶点的完成时刻。只要证明对任一对不同顶点$u、v∈V$，若$G$中存在一条从$u$到$v$的边，则$finish[v] \lt finish[u]$。考虑过程DFS所探寻的任何边$（u，v）$，当探寻到该边时，顶点$v$必然是已考察完成的顶点或者还未被访问到的顶点：①若$v$是还未被访问到的顶点，则它是$u$的后裔，$finish[v] \lt finish[u]$；②若$v$为已考察完成的顶点，则已完成探索，且$finish[v]$已经设置了。因为仍在探寻$u$，还要为$finish[u]$赋时间戳，同样有$finish[v] \lt finish[u]$。这样一来，对于有向无回路图中任意边$（u, v）$，都有$finish[v]&lt;finish[u]$。</li>
<li><strong>简单解释</strong>：如果存在$u$到$v$的通路，则必然存在$finish[u]&gt;finish[v]$，即$u$肯定在$v$的前面（堆栈先进后出）。</li>
</ul>
</li>
<li>拓扑序列要求的序列必然是开始于一系列入度为０的节点。如果没有入度为０的节点，则表示这个图不是DAG，这样连遍历都没有必要了（<font color="red">当然，如果这个图里有入度为０的节点，并不代表这个图就一定是DAG</font>）。<ul>
<li>怎么来求这些节点的入度：增加一个数组int[] inDegrees，每次我们添加一个边<code>u-&gt;v</code>到图里时，<code>inDegrees[v]++</code>。</li>
<li>取这些入度为０的节点，然后从这些节点遍历图。</li>
</ul>
</li>
<li>实际上，对于深度优先遍历的后序序列，如果我们将它们的顺序完全倒过来，得到的序列就是拓扑排序序列。<ul>
<li>在 DFS 中，依次访问所遍历到的节点；而在拓扑排序时，顶点必须比其邻接点先出现。</li>
<li>用栈来保存拓扑排序的顶点序列，保证在某顶点入栈前，其所有邻接点已入栈。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">对所有入度为<span class="number">0</span>的点</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> startIdx)</span> </span>&#123;</div><div class="line">    visited[startIdx] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">for</span> startIdx-&gt;?:</div><div class="line">      <span class="keyword">if</span>(!visited[?])</div><div class="line">        dfs(?);</div><div class="line">    <span class="comment">// 后序深度优先遍历</span></div><div class="line">    topologicalStack.push(startIdx);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>上述算法显然不适用与 <strong>DAG</strong> 不确定的图，假如要检测图中是否存在环，则会最终变成与上一节类似的算法过程。</li>
</ul>
</li>
<li><p>Kahn 算法</p>
<ul>
<li>计算图中所有点的入度，把入度为0的点加入栈</li>
<li>如果栈非空：<ul>
<li>取出栈顶顶点a，输出该顶点的值，删除该顶点</li>
<li>从图中删除所有以a为起始点的边，如果删除边后另一个顶点入度为0，则把它入栈</li>
</ul>
</li>
<li>如果图中还存在顶点，则表示图中存在环；否则输出的顶点就是一个拓扑排序序列</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; setOfZeroIndegree;</div><div class="line"><span class="comment">//stack&lt;int&gt; setOfZeroIndegree;</span></div><div class="line"><span class="comment">// push 所有入度为0的点</span></div><div class="line"><span class="keyword">while</span>(!setOfZeroIndegree.empty()) &#123;</div><div class="line">  <span class="keyword">int</span> vertexIdx = setOfZeroIndegree.front();</div><div class="line">  <span class="comment">//int vertexIdx = setOfZeroIndegree.top();</span></div><div class="line">  setOfZeroIndegree.pop();</div><div class="line"> </div><div class="line">  <span class="comment">// 维护一个拓扑排序序列</span></div><div class="line">  topologicalQueue.push(vertexIdx);</div><div class="line"> </div><div class="line">  <span class="comment">// 遍历由 vertexIdx 引出的所有边 vertexIdx-&gt;?</span></div><div class="line">  <span class="keyword">for</span> ...</div><div class="line">    <span class="comment">// 通过减少边的数量来模拟将邻边 vertexIdx-&gt;? 从图中移除</span></div><div class="line">    edgeNum--;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span>(<span class="number">0</span> == --inDegrees[graph[vertexIdx][?]]) &#123;</div><div class="line">      setOfZeroIndegree.push(graph[vertexIdx][?]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 如果此时图中还存在边（点），说明图中含有环路</span></div></pre></td></tr></table></figure>
<ul>
<li>顶点进栈出栈，其复杂度为$O(V)$；删除顶点后将邻接点的入度减1，其复杂度为$O(E)$；整个算法的复杂度为$O(V+E)$</li>
<li>如果利用上面的拓扑排序算法求环，可以判断是否有环，但是输出环时有点麻烦（还是上一节的方法比较直接）$Longrightarrow$ 并不是所有最后剩余的点都是环中的顶点，如下图。<center><img src="/img/Algorithms/0020_KahnLoopOutput.png" width="240px" alt=""/></center>

</li>
</ul>
</li>
</ul>
<h4 id="如何判断一个图是否是一棵树？"><a href="#如何判断一个图是否是一棵树？" class="headerlink" title="如何判断一个图是否是一棵树？"></a>如何判断一个图是否是一棵树？</h4><ul>
<li>是连通图</li>
<li>无环</li>
</ul>
<h4 id="判断一个图是否为二分图？"><a href="#判断一个图是否为二分图？" class="headerlink" title="判断一个图是否为二分图？"></a>判断一个图是否为二分图？</h4><ul>
<li>假设我们有一个图，我们尝试用如下的方式去给每个节点着色，总共所有的节点只能着两种颜色中的一种（假设为红色或者蓝色）。对于一个节点来说，假设它着的是某一种颜色，和它相邻的节点只能着另一种颜色。给定一个图，如果这个图满足上述的特性的话，则这个图可以称之为<strong>二分图</strong>。<ul>
<li>判断一个图是否为二分图必然会遍历这个图</li>
<li>每次在判断的时候假定一个节点的颜色为某个值，那么再将它相邻的节点颜色都设置成不同的。因为只是两种颜色，可以直接用布尔值类型来处理。<ul>
<li>对于不属于二分图的情况，肯定是<font color="red">某个节点访问到一个它可以连接到的节点，而这个节点已经被访问过了，但是这个被访问过的节点和当前节点颜色是一样</font>。这样表明它和前面二分图的定义有冲突，所以，我们遍历整个图就是为了判断是否存在这种情况。</li>
</ul>
</li>
</ul>
</li>
<li>实际实现中需要考虑的细节。<ul>
<li>对于所有节点对应的颜色需要定义一个<code>boolean[] color</code>数组</li>
<li>最开始访问一个节点的时候，将其对应<code>color</code>位设置为<code>true</code>，每次访问一个关联的节点时，将关联节点设置成原来节点的相反值。也就是说，比如节点$v$它的颜色为<code>color[v]</code>，那么下一个它被关联的节点$w$的颜色则可以设置成<code>color[w] = !color[v]</code>，正好通过取反实现了颜色的变换。</li>
<li>这里实现的要点还是通过dfs方法<ul>
<li>每次碰到一个节点的时候就要判断一下是否已经访问过：①已经访问过的话，要判断颜色是否相同，相同则表明该图不是一个二分图；②没有访问过的话，则将新节点设置成当前节点的相反值。</li>
<li>然后就是要遍历所有节点，防止遗漏未连接的节点情况。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span>[] color;</div><div class="line">visited[] = <span class="literal">false</span>;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> 所有节点 ?:</div><div class="line">  <span class="keyword">if</span>(!visited[?])</div><div class="line">    color[?] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(!dfs(?, visited, color))</div><div class="line">      <span class="comment">// 不是二分图</span></div><div class="line"><span class="comment">// 为二分图</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(startIdx, visited, color)</span> </span>&#123;</div><div class="line">  visited[startIdx] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">for</span> startIdx 邻接边 startIdx-&gt;?:</div><div class="line">    <span class="keyword">if</span>(!visited[?])&#123;</div><div class="line">      color[?] = !color[startIdx];</div><div class="line">      <span class="keyword">if</span>(!dfs(?, visited, color))</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(color[startIdx] == color[?]) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看出，<font color="red">一个图是不是二分图并不严格要求其必须是一个连通图</font>。</li>
</ul>
</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://shmilyaw-hotmail-com.iteye.com/blog/2113093">无向图的几个基本算法应用</a> </li>
<li><a href="http://shmilyaw-hotmail-com.iteye.com/blog/2116275">有向图的几个算法分析总结</a></li>
<li><a href="http://www.cnblogs.com/dzkang2011/p/toplogicalSort_1.html">图基本算法 拓扑排序（基于dfs)</a></li>
<li><a href="http://www.cnblogs.com/TenosDoIt/p/3644225.html">JustDoIT：判断一个图是否有环</a></li>
<li><a href="http://blog.csdn.net/dm_vincent/article/details/7714519">拓扑排序的原理及其实现</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0019] Greedy Algorithms（贪心策略）]]></title>
      <url>/2017/06/26/Algorithms_GreedyAlgorithms/</url>
      <content type="html"><![CDATA[<h4 id="何为贪心？"><a href="#何为贪心？" class="headerlink" title="何为贪心？"></a>何为贪心？</h4><ul>
<li>贪心算法在解决问题的策略上目光短浅，只根据当前已有的信息就作出选择（下一步的选择总是在当前看来收敛最快和效果最明显的那一个），而且一旦做出了选择，不管将来有什么结果，这个选择策略都不会改变（以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为规模更小的子问题）。</li>
<li>贪心算法并不是从整体最优考虑，它所做出的选择只是在某种意义上的局部最优。</li>
<li>贪心算法对于大部分的优化问题都能产生最优解（如单源最短路径问题，最小生成树等），但不能总获得整体最优解，通常可以获得近似最优解。</li>
<li>贪心策略一旦经过证明成立后，它就是一种高效的算法。<a id="more"></a></li>
</ul>
<h4 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h4><ul>
<li>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// C 是问题的输入集合即候选集合</span></div><div class="line">Greedy(C) &#123;</div><div class="line">  <span class="comment">// 初始解集合 S 为空集</span></div><div class="line">  S = &#123;&#125;;</div><div class="line">  <span class="comment">// 集合 S 没能构成问题的一个解</span></div><div class="line">  <span class="keyword">while</span>(not solution(S)) &#123;</div><div class="line">    <span class="comment">// 在候选集合 C 中做贪心选择</span></div><div class="line">    x = select(C);</div><div class="line">    <span class="comment">// 判断集合 S 加入 x 后的解是否可行</span></div><div class="line">    <span class="keyword">if</span>(feasible(S, x)) &#123;</div><div class="line">      S += &#123;x&#125;;</div><div class="line">      C -= &#123;x&#125;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> S;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><font color="red">候选集合 C</font>：为了构造问题的解决方案，有一个候选集合 C 作为问题的可能解，即问题的最终解均取自于候选集合 C。</li>
<li><font color="red">解集合 S</font>：随着贪心选择的进行，解集和 S 不断扩展，直到构成一个满足问题的完整解。</li>
<li><font color="red">解决函数 solution</font>：检查解集合 S 是否构成问题的完整解？</li>
<li><font color="red">选择函数 select</font>：贪心策略，关键的一步。它指出哪个候选对象最有希望构成问题的解，选择函数通常与目标函数，即求解的问题有关。</li>
<li><font color="red">可行函数 feasible</font>：检查解集合 S 加入候选对象后是否依旧可行？即解集合扩展后是否满足约束条件。</li>
</ul>
<h4 id="贪心算法可行的基本要素"><a href="#贪心算法可行的基本要素" class="headerlink" title="贪心算法可行的基本要素"></a>贪心算法可行的基本要素</h4><blockquote>
<p>是否可用贪心算法求解？</p>
</blockquote>
<ul>
<li><font color="red">子问题</font>：为了解决某一优化问题（目标函数），需要依次作出 n 个决策 $D_1, D_2, …, D_n$，对于任何一次决策 $D_k, 1 \lt k \lt n$，以 $D_k$ 作为问题的初始状态，来进行以后的决策 $D_{k+1}$…，这样的每次决策就成为是原问题的一个子问题；贪心算法以迭代的方式作出相继的贪心选择，每做一次贪心选择，就将所求问题简化成规模更小的子问题。</li>
<li><strong>① 贪心选择性质</strong><ul>
<li>所求问题的整体最优解可以通过一系列局部最优的选择得到，即对于一个具体问题，要确定它是否具有贪心选择的性质，必须证明每一步所做的贪心选择最终导致问题的整体最优解。</li>
<li>当考虑当前问题的做何种选择的时候，只需考虑对当前问题最佳的选择而不用考虑子问题的结果。</li>
</ul>
</li>
<li><strong>② 最优子结构性质</strong>（关键基本元素）<ul>
<li>当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。</li>
</ul>
</li>
</ul>
<h4 id="活动选择问题"><a href="#活动选择问题" class="headerlink" title="活动选择问题"></a>活动选择问题</h4><ul>
<li>问题描述<blockquote>
<p>假设有一个需要使用某个资源的$n$个活动组成的集合 $S= \verb|{|a1，a2，···，an \verb|}|$，该资源每次只能由一个活动占用。每个活动 $a[i]$ 都有一个开始时间 $s[i]$ 和结束时间 $f[i]$，且 $0 \leq s[i] \lt f[i] \lt ∞$。一旦被选择后，活动 $a[i]$ 就占据半开时间区间 $[s[i], f[i])$。若时间区间 $[s[i], f[i])$ 与区间 $[s[j], f[j])$ 互不重叠，则称活动 $a[i] $与活动 $a[j]$ 是兼容的。也就是说，当 $s[i] \geq f[j]$ 或 $s[j] \geq f[i]$ 时，活动 $a[i]$ 与活动 $a[j]$ 兼容。活动选择问题就是要选择一个由兼容活动构成的最大集合。</p>
</blockquote>
</li>
<li>DP策略：贪心是特殊的 DP<ul>
<li><font color="blue">Step1</font>：活动选择问题就是要选择一个由兼容活动构成的最大集合，子问题是什么，兼容活动集合，这样的子问题有 $2^n$。所以我们才用 <strong>DP</strong> 来优化它，如果子问题的最优解可以构造成原问题的最优解，那么此问题就具有<strong>② 最优子结构性质</strong>。<ul>
<li>定义 $S[i, j] = \verb|{|a[k]∈S: f[i] \leq s[k] &lt; f[k] \leq s[j] \verb|}|$，$S$ 是所有活动集合。$S[i, j]$ 就是原问题集合 $S$ 的子问题，其中的每个活动都是在活动 $a[i]$ 结束之后开始，且在 $a[j]$ 开始之前结束，更重要的是 $S[i, j]$ 中的活动都要相互兼容。</li>
<li>为了表示完整的问题集合，虚构两个活动 $a[0], a[n+1], f[0]=0, s[n+1]=∞$，这样 $S=S[0，n+1]$。</li>
</ul>
</li>
<li><font color="blue">Step2</font>：为了减少问题的处理量，给所有活动按结束时间递增的顺序排序。这样的话如果 $i \geq j, S[i, j] = ∅$。<ul>
<li>假设有一个 $a[k]∈S[i,j], 则 f[i] \leq s[k] \lt f[k] \leq s[j]$。说明 $a[i]$ 活动排在 $a[j]$ 活动前面，也即是 $i \lt j$，这与 $i \geq j$ 矛盾。所以来说，如果将<font color="red">活动按结束时间非递减排序</font>的话，则子问题就是 $S[i, j]$，$0 \leq i \lt j \leq n+1$，其他的 $S[i, j]$ 是空集。</li>
</ul>
</li>
<li><font color="blue">Step3</font>：针对于 $S[i, j]$ 中的 $a[k]$，我们把子问题分成 $S[i, k], S[k, j]$ 和 $a[k]$。则 $S[i, j]$ 的最优解就是 $S[i, k]$ 的最优解加上 $S[k, j]$ 的最优解捎带一个 $a[k]$ 的并集。设 $C[i, j]$ 是 $S[i, j]$ 的最优解，即是 $S[i, j]$ 中最大兼容活动数。<br>$$ C[i, j]  = \begin{cases} 0, S[i, j] = \emptyset \cr max_{i &lt; k &lt; j} \verb|{| C[i, k]+C[k, j]+1 \verb|}|,  S[i, j] != \emptyset \end{cases}$$</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><figcaption><span>贪心算法</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将活动按结束时间非递减排序</span></div><div class="line"> </div><div class="line">Activity-Selector(s, f, i, j) &#123;</div><div class="line">  m &lt;-- i+<span class="number">1</span></div><div class="line">  <span class="comment">// find the first activity in S[i,j]</span></div><div class="line">  <span class="keyword">while</span> m&lt;j and s[m]&lt;f[i] &#123;&#125;</div><div class="line"> </div><div class="line">  <span class="keyword">if</span>(m&lt;j)</div><div class="line">    <span class="keyword">return</span> &#123;a[m]&#125; ∪ Activity-Selector(s, f, m, j)</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> ∅</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>贪心策略：最早结束的活动肯定就是当前子问题的最优活动。对于任何非空 $S[i,j]$，设 $a[m]$ 是 $S[i, j]$ 中最早结束的一个活动，$f[m] = min{f[k]: a[k]∈S[i, j]}$，则<ul>
<li><strong>① 贪心选择性质</strong>（贪心策略是安全的）：活动 $a[m]$ 被包含在 $S[i, j]$ 的一个（可能有多个）最大兼容活动的子集中<ul>
<li>假设 $a[k]$ 是 $S[i, j]$ 最优解 $C[i, j]$ 的第一个活动（排序之后），如果 $a[m] = a[k]$，结论得证</li>
<li>如果 $a[m], a[k]$ 不相等，那么就用 $a[m]$ 替换 $a[k]$（因为 $a[m]$ 是最早结束的活动，替换之后肯定和其他的兼容），原问题的最大兼容活动数目没变，结论得证。</li>
</ul>
</li>
<li>最早结束的活动 $a[m]$ 肯定就是当前子问题的最优活动！你选择了 $a[m]$，那么剩余问题的最优解就是 $S[m, j]$ 的最优解。</li>
<li>这就是贪心算法，每次都选择当前最好的选择，意思就是已经选定是最优活动，那么之后选择的最优要和之前选定的活动兼容，这样每次选择的活动都是和之前兼容的，那所有的活动也就只是考虑一次而已。</li>
</ul>
</li>
<li>Greedy（贪心） vs DP（动态规划）<ul>
<li>DP 和贪心的区别就是做选择的时候贪心所做出的选择是当前最佳，要依赖已经做出的所有贪心选择，而不依赖有待于做出选择的子问题的解。而 DP 具有无后效性，未来与过去无关，当前的状态是此前历史的一个完整总结，不会依赖已经得到子问题的解，只是和以后的子问题有关系，这点和贪心刚好相反。</li>
<li><font color="red">DP 是通过小问题来得到大问题的解，而贪心是一次一次做出贪心选择，然后不断将给定的问题规约为更小的子问题</font>。<strong>DP要自底向上，贪心可以自顶向下</strong>地解决问题。</li>
<li>DP 还具有重叠子问题的性质，从上面也可以看出来，这点是贪心不具备的。</li>
</ul>
</li>
<li>活动时间安排的例题<ul>
<li><a href="#">Sicily1001. 会议安排</a><blockquote>
<p>N个会议要同时举行，参会人数分别为$A[0], A[1], …, A[N-1]$. 现有M个会议室，会议室可容纳人数分别为$B[0], B[1], …, B[M-1]$. 当$A[i]&lt;=B[j]$时，可以把会议$i$安排在会议室$j$，每间会议室最多安排一个会议，每个会议最多只能安排一个会议室. 求最多安排多少个会议？</p>
<ul>
<li>贪心策略：参会人数少的会议先安排，怎么安排呢？安排到能满足容纳人数的最小的会议室。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Problem#: 20617</span></div><div class="line"><span class="comment">// Submission#: 5148744</span></div><div class="line"><span class="comment">// The source code is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</span></div><div class="line"><span class="comment">// URI: http://creativecommons.org/licenses/by-nc-sa/3.0/</span></div><div class="line"><span class="comment">// All Copyright reserved by Informatic Lab of Sun Yat-sen University</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">assignConferenceRoom</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> conferenceNum = A.size();</div><div class="line">        <span class="keyword">int</span> roomNum = B.size();</div><div class="line">        <span class="keyword">if</span>(conferenceNum==<span class="number">0</span> || roomNum==<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// sort conference in conferee increasing order</span></div><div class="line">        sort(A.begin(), A.end(), less&lt;<span class="keyword">int</span>&gt;());</div><div class="line">        <span class="comment">// sort room in room's size increasing order</span></div><div class="line">        sort(B.begin(), B.end(), less&lt;<span class="keyword">int</span>&gt;());</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> conferenceOpenNum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> bIdx=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> aIdx=<span class="number">0</span>; aIdx&lt;conferenceNum; aIdx++) &#123;</div><div class="line">            <span class="keyword">while</span>(bIdx&lt;roomNum) &#123;</div><div class="line">                <span class="keyword">if</span>(A[aIdx]&lt;=B[bIdx++]) &#123;</div><div class="line">                    conferenceOpenNum++;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(bIdx == roomNum) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> conferenceOpenNum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="其他几个经典问题"><a href="#其他几个经典问题" class="headerlink" title="其他几个经典问题"></a>其他几个经典问题</h4><ul>
<li>区间覆盖问题（近似活动选择问题）：多个区间，存在相互覆盖，要求去除多余的空间，使剩下的区间（不存在相互覆盖了）占用长度最大。</li>
<li>线段覆盖（lines cover）：在一维空间中告诉你 N 条线段的起始坐标和终止坐标，要求求出这些线段一共覆盖了多大的长度。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 优先选择：s[i] 由小到大排序</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> pre=<span class="number">0</span>, <span class="keyword">int</span> cur=<span class="number">1</span>; cur&lt;size; cur++) &#123;</div><div class="line">  <span class="comment">// 相邻线段不存在覆盖</span></div><div class="line">  <span class="keyword">if</span>(s[cur] &gt;= f[pre]) &#123;</div><div class="line">    lineCover += f[cur] - s[cur];</div><div class="line">    pre = cur;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 存在相互覆盖</span></div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 不仅覆盖，还被包含，直接丢弃当前线段</span></div><div class="line">    <span class="keyword">if</span>(f[cur]&lt;=f[pre]) &#123;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      lineCover += f[cur] - s[pre];</div><div class="line">      pre = cur;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>数字组合问题：有 N 个正整数，使它们连接在一起成立最大的数字<ul>
<li>冒泡排序：冒泡条件 $\Longrightarrow$ 开头最大的数字</li>
</ul>
</li>
<li>背包问题<ul>
<li>问题描述<blockquote>
<p>有一个背包，背包容量是$M$。有$N$个任意大小 $wi$，价值 $pi$ 的物品。要求尽可能让装入背包中的物品总价值最大，但不能超过背包总容量。<br>目标函数： $\sum_i^N pi$最大<br>约束条件：装入的物品总重量不超过背包容量：$\sum_i^N wi&lt;=M$。</p>
</blockquote>
</li>
<li>根据贪心的策略<ul>
<li>每次挑选价值最大的物品装入背包，得到的结果是否最优？</li>
<li>每次挑选所占重量最小的物品装入是否能得到最优解？</li>
<li>每次选取单位重量价值最大的物品，成为解本题的策略。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://www.cnblogs.com/steven_oyj/archive/2010/05/22/1741375.html">五大常用算法之三：贪心算法</a></li>
<li><a href="http://www.hahack.com/wiki/algorithms-greedy.html">HaHack：贪婪算法</a></li>
<li><a href="http://blog.csdn.net/effective_coder/article/details/8736718">K神丶的专栏：贪心算法详解</a></li>
<li>活动选择问题：<a href="http://blog.csdn.net/liangbopirates/article/details/10044463">承续缘的信仰：贪心算法详解</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0018] 图的点连通度和边连通度]]></title>
      <url>/2017/06/24/Algorithms_Vertex$Edge%20connectivity%20degree/</url>
      <content type="html"><![CDATA[<h4 id="基本概念？"><a href="#基本概念？" class="headerlink" title="基本概念？"></a>基本概念？</h4><ul>
<li>点连通度（图的连通度）：对应一个图 $G$，对于所有点集 $U \subset V_G$，也就是 $V_G$ 的子集中，使得 $G-U$（在图 $G$ 中删去 $U$ 和与 $U$ 关联的边）要么是一个非连通图，要么就是一个平凡图，其中最小的集合 $U$ 的大小 $|U|$ 就是图 $G$ 的<strong>点连通度</strong>（有时候也直接称为<strong>图的连通度</strong>）。<a id="more"></a><blockquote>
<p>连通图&amp;非连通图（无向图）</p>
<ul>
<li>如果无向图 $G$ 中任意一对顶点都是连通的，此图是<code>连通图</code>；</li>
<li>相反，如果一个无向图不是连通图，则称为<code>非连通图</code>。</li>
</ul>
<p>强连通&amp;单连通&amp;弱连通（有向图）</p>
<ul>
<li>如果对有向图 $G$ 中任意两个顶点 $u$ 和 $v$，既存在从 $u$ 到 $v$ 的路径，也存在从 $v$ 到 $u$ 的路径，则称该有向图 $G$ 为<code>强连通有向图</code>；</li>
<li>如果仅存在从 $u$ 到 $v$ 的路径，或从 $v$ 到 $u$ 的路径，则称该有向图 $G$ 为<code>单连通有向图</code>；</li>
<li>如果忽略有向图 $G$ 中每条有向边的方向，得到的无向图（即该有向图的基图）是连通图，则称该有向图 $G$ 为<code>弱连通有向图</code>。</li>
</ul>
<p>平凡图&amp;非平凡图</p>
<ul>
<li>只有一个节点，没有边的图为<code>平凡图</code>；</li>
<li>有至少两个节点，一条边的图，为<code>非平凡图</code>。</li>
</ul>
</blockquote>
</li>
</ul>
<p>　　只许删点，求至少要删掉几个点，即一个图 $G$ 最少要去掉多少个点会变成非连通图或者平凡图：对于一个完全图 $K_n$ 来说，它的（点）连通度为 $n-1$。</p>
<blockquote>
<p><code>完全图</code>：若一个图的每一对不同顶点恰有一条边相连。</p>
</blockquote>
<ul>
<li>边连通度：同理，<strong>边连通度</strong>就是对于一个非平凡图 $G$，至少去掉多少条边才能使得该图变成非连通图。<br>　　只许删边，求至少要删掉几条边。</li>
</ul>
<h4 id="如何求解？"><a href="#如何求解？" class="headerlink" title="如何求解？"></a>如何求解？</h4><p>　　对于任意一个图，如何求该<strong>图的（点）连通度</strong>和<strong>边连通度</strong>呢？</p>
<ul>
<li><code>有向图的边连通度</code>其实就是一个<a href="https://durant35.github.io/2017/05/19/Algorithms_MaximizingFlow/">最小割问题</a>。<ul>
<li>求解思路<ul>
<li>将原图 $G$ 中每条边$\lt u, v \gt$设置为容量为1的边，其它都不需要修改，即可得到对应的流网络图</li>
<li>任意选取一个节点 $u$ 作为源点，枚举其他所有与节点 $u$ 不相邻的节点作为汇点，求所有汇点情况下的各个最大流</li>
<li>其中最小的那个最大流即为原图的边连通度</li>
</ul>
</li>
<li>最小的最大流中，所有流量为1的边组成的边集即为最小的边割集（割边集/割集）<blockquote>
<p>设 $E’$ 是连通图 $G$ 的边集的子集，在 $G$ 中删去 $E’$ 后图不连通，则称 $E’$ 是 $G$ 的<code>割边集</code></p>
<ul>
<li>如果割边集 $E’$ 的任何真子集都不是割边集，则称 $E’$ 为<code>极小割边集</code></li>
<li>边的数目（图 $G$ 的边连通度）最小的极小割边集称为 <code>最小割边集</code></li>
</ul>
<p>如果割边集中只有一条边，则该边可以称为<code>割边</code>（或<code>桥</code>）</p>
</blockquote>
</li>
</ul>
</li>
<li><code>有向图的点连通度</code><ul>
<li>求解思路<ul>
<li>点连通度的流网络构造方法其实是将点连通度的求解转化为了边连通度的求解；<ul>
<li>对于有向图 $G$，将每个节点 $u$ 拆分成 $u1$ 和 $u2$ 两个节点，并添加一条 $u1$ 到 $u2$ 容量为1的边$\lt u, v \gt$；</li>
<li>对于原图 $G$ 中的边$\lt u, v \gt$，对应在新网络中有边$\lt u2, v1 \gt$，容量为正无穷，即可得到对应的流网络图。<blockquote>
<p><font color="red">实际上：</font><br>　原图 $G$ 上节点 $u$，$v$ 和从 $u$ 到 $v$ 的边<code>&lt;u,v&gt;</code>在对应的流网络中为节点 $u1$，$u2$，$v1$ 和 $v2$ 以及边<code>&lt;u1,u2&gt;</code>（容量为1）；<code>&lt;u2,v1&gt;</code>（容量为正无穷）；<code>&lt;v1,v2&gt;</code>（容量为1），也是一条路径。</p>
</blockquote>
</li>
</ul>
</li>
<li>也是在上述对应的流网络上任意选取一个节点 $u$ 作为源点，枚举所有其他不相邻的节点求最大流，其中最小的那个最大流即为原图 $G$ 的点连通度。</li>
</ul>
</li>
<li>最小的最大流中，所有流量为1的边\lt u1, u2 \gt$对应的原图中的同一节点 $u$ 组成的点集即为最小的点割集（割顶集/割点集）<blockquote>
<p>设 $V’$ 是连通图 $G$ 的一个顶点子集，在 $G$ 中删去 $V’$ 和与 $V’$ 关联的边后图不连通，则称 $V’$ 是 $G$ 的<code>割顶集</code></p>
<ul>
<li>如果割边顶集 $V’$ 的任何真子集都不是割顶集，则称 $V’$ 为<code>极小割顶集</code></li>
<li>顶点个数（图 $G$ 的（点）连通度）最小的极小割顶集称为 <code>最小割顶集</code></li>
</ul>
<p>如果割顶集中只有一个顶点，则该顶点可以称为<code>割点</code>（或<code>关节点</code>）</p>
</blockquote>
</li>
</ul>
</li>
<li><code>关于无向图</code>：将图中的每条边 $(u, v)$ 拆成 $\lt u, v \gt$ 和 $\lt v, u \gt$ 两条边，即转成有向图处理。</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://blog.csdn.net/smartxxyx/article/details/9467709">图的匹配问题与最大流问题（四）——计算图的边连通度和点连通度</a> </li>
<li><a href="http://www.cppblog.com/matono1/archive/2011/04/05/143449.html">图的连通度问题的求法</a></li>
<li><a href="https://www.zybuluo.com/DATASOURCE/note/168108">图的连通性问题</a></li>
<li><a href="https://github.com/zhaochenyou/Way-to-Algorithm/blob/master/5_GraphTheory/5_FlowNetwork/11_connectivity.cpp">Github: zhaochenyou/Way-to-Algorithm 连通度基础概念</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0017] NP-完全问题：概述（两道证明习题）]]></title>
      <url>/2017/06/08/Algorithms_NP-Complete(I)/</url>
      <content type="html"><![CDATA[<p>　　在计算机算法求解问题当中，经常用<code>时间复杂度</code>和<code>空间复杂度</code>来表示一个算法的运行效率。空间复杂度表示一个算法在计算过程当中要占用的内存空间大小；时间复杂度则表示这个算法运行得到想要的解所需的计算工作量，并不是表示一个程序解决问题需要花多少时间，而是当问题规模扩大后，程序需要的时间长度增长得有多快，即探讨的是当输入值接近无穷时，算法所需工作量的变化快慢程度。也就是说，对于高速处理数据的计算机来说，处理某一个特定数据的效率不能衡量一个程序的好坏，而应该看当这个数据的规模变大到数百倍后，程序运行时间是否还是一样，或者也跟着慢了数百倍，或者变慢了数万倍。<a id="more"></a><br>　　不管数据有多大，程序处理花的时间始终是那么多的，我们就说这个程序很好，具有$O(1)$的时间复杂度，也称常数级复杂度；数据规模变得有多大，花的时间也跟着变得有多长，这个程序的时间复杂度就是$O(N)$，比如找$N$个数中的最大值；而像冒泡排序、插入排序等，数据扩大2倍，时间变慢4倍的，属于$O(N^2)$的复杂度；还有一些穷举类的算法，所需时间长度成几何阶数上涨，这就是$O(a^N)$的指数级复杂度，甚至$O(N!)$的阶乘级复杂度。时间复杂度排序：$O(1) \lt O(N) \lt O(logN) \lt O(N^2) \lt O(N^a) \lt O(b^N) \lt O(N!)$（$a \gt 2, b \gt 1$，$N$表示输入的数据个数）。<br>　　容易看出，前面的几类复杂度被分为两种级别，其中后者的复杂度无论如何都远远大于前者：一种是$O(1), O(logN), O(N^a)$等，我们把它叫做多项式级（$ax^n - bx^{n-1} + … + c$）的时间复杂度，因为它的规模$N$出现在底数的位置；另一种是$O(a^N)$和$O(N!)$型复杂度，它是非多项式级的，其复杂度计算机往往不能承受。当我们在解决一个问题时，我们选择的算法通常都需要是多项式级的时间复杂度，非多项式级的时间复杂度需要的时间太多，往往会超时，除非是数据规模非常小。<br>　　自然地，人们会想到一个问题：会不会所有的问题都可以找到复杂度为多项式级的算法呢？很遗憾，答案是否定的。有些问题甚至根本不可能找到一个正确的算法来，这称之为<strong>“不可解问题”(Undecidable Decision Problem)</strong>。下面引入 <code>P问题</code>、<code>NP问题</code> 等概念对一个问题求解的复杂度进行不同等级的评估。</p>
<h4 id="P-问题"><a href="#P-问题" class="headerlink" title="P 问题"></a>P 问题</h4><p>　如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于<code>P问题</code>，P(olynominal) 问题。</p>
<h4 id="NP-问题"><a href="#NP-问题" class="headerlink" title="NP 问题"></a>NP 问题</h4><p>　能在多项式时间内验证给出的一个解的问题属于<code>NP问题</code>，Nondeterministic Polynominal，非确定性多项式问题。</p>
<ul>
<li>NP 问题不是非 P 类问题，NP问题的另一个定义是，可以在多项式的时间里猜出一个解的问题。之所以要定义NP问题，是因为通常只有 NP 问题才可能找到多项式时间复杂度的算法，因为我们不会指望一个连多项式地验证一个解都不行的问题存在一个解决它的多项式级的算法。</li>
<li>NP 问题，实际上是在探讨 NP 问题与 P 问题的关系。<ul>
<li>很显然，<strong>所有的 P 问题都是 NP 问题</strong>，也就是说，能多项式地解决一个问题，必然能多项式时间内验证一个问题的解（既然正解都出来了，验证任意给定的解也只需要比较一下就可以了）。</li>
<li><strong>是否所有的 NP 问题都是 P 问题</strong>？我们可以用集合的观点来说明：如果把所有 P 类问题归为一个集合 P 中，把所有 NP 问题划进另一个集合 NP 中，那么，显然有P 属于 NP。现在，所有对 NP 问题的研究都集中在一个问题上，即究竟是否有 <code>P=NP</code>？在研究 NP 问题的过程中找出了一类非常特殊的 NP 问题叫做 <code>NP-完全问题</code>，也即所谓的 NPC 问题。正是 NPC 问题的存在，使人们相信 <code>P≠NP</code>。</li>
</ul>
</li>
</ul>
<h4 id="NPC-NP-Complete-问题"><a href="#NPC-NP-Complete-问题" class="headerlink" title="NPC(NP-Complete) 问题"></a>NPC(NP-Complete) 问题</h4><p>　<code>NPC问题</code>的定义非常简单，同时满足下面两个条件的问题就是 NPC 问题：① 首先，它得是一个 NP 问题；②然后，所有的 NP 问题都可以在多项式时间内归约到它。即如果所有 NP 问题都能在多项式时间内归约到一个 NP 问题，则称该 NP 问题为 <code>NPC问题</code>，NP Complete，NP 完全问题。</p>
<ul>
<li>什么是 <strong>归约</strong>？<ul>
<li>归约(Reducibility，有的资料上叫“约化”)。一个问题A可以归约到问题B的含义即是，可以用问题B的解法解决问题A，或者说，问题A可以“变成”问题B。<ul>
<li>举个例子，一元一次方程的求解，跟二元一次方程的求解</li>
<li>我们知道，只要能求解二元一次方程，那就可以用二元一次方程的解法来求解一元一次方程，只需要将一元一次方程加上y，并附加一个方程y=0就可以将一元一次方程变形为一个二元一次方程，然后用二元一次方程的解法来求解这个方程。</li>
<li>注意，这里二元一次方程的解法会比一元一次的复杂。所以我们说，只需要找到解二元一次方程的规则性解法，那就能用这个规则性解法来求解一元一次方程。</li>
</ul>
</li>
<li>“问题A可归约到问题B” 有一个重要的直观意义：B的时间复杂度≥A的时间复杂度，也就是说，问题A不比问题B难。<ul>
<li>这很容易理解。既然问题A能用问题B来解决，倘若B的时间复杂度比A的时间复杂度还低了，那A的算法就可以改进为B的算法，两者的时间复杂度还是相同。</li>
<li>正如解一元二次方程比解一元一次方程难，因为解决前者的方法可以用来解决后者。</li>
</ul>
</li>
<li>很显然，归约具有一项重要的性质：归约具有传递性。如果问题A可归约到问题B，问题B可归约到问题C，则问题A一定归约到问题C。<ul>
<li>不断归约下去，我们会发现一个很惊人的特性：就是一定会存在一个最大的问题，我们只需要解决了这个问题，那其下的所有问题也就解决啦！这个问题就是上面所说的 NPC 问题！！！</li>
</ul>
</li>
<li>对于同一类的所有的 NP 问题，若他们都可以在多项式时间内归约到 NPC 问题（更复杂的时间复杂度），当我们针对这个时间复杂度最高的超级 NP 问题要是能找到他的多项式时间算法的话，那就等于变向地证明了其下的所有属于同一类的 NP 问题都是存在多项式算法的，即 <code>NP=P</code>！！！！</li>
</ul>
</li>
<li>NPC 问题是 NP 问题的子集。</li>
<li>证明一个问题是 NPC 问题也很简单：先证明它至少是一个 NP 问题，再证明一个已知的 NPC 问题能在多项式时间内归约到它（由归约的传递性，则 NPC 问题定义的第二条条件也得以满足；至于第一个 NPC 问题是怎么来的？），这样就可以说它是 NPC 问题了。</li>
<li>既然所有的 NP 问题都能归约成 NPC 问题，那么只要任意一个 NPC 问题找到了一个多项式时间复杂度的算法，那么所有的 NP 问题都能用这个算法解决了，NP 也就等于 P 了。因此，给 NPC 找一个多项式时间复杂度算法太不可思议了。因此，上文才说，“正是 NPC 问题的存在，使人们相信 P≠NP”。</li>
<li>我们可以直观地理解：NPC 问题目前没有多项式的有效算法，只能用指数级甚至阶乘级复杂度进行搜索求解。</li>
</ul>
<h4 id="两道习题：如何证明一个问题是-NPC-NP-Complete-问题"><a href="#两道习题：如何证明一个问题是-NPC-NP-Complete-问题" class="headerlink" title="两道习题：如何证明一个问题是 NPC(NP-Complete) 问题"></a>两道习题：如何证明一个问题是 NPC(NP-Complete) 问题</h4><ul>
<li>证明一个问题是 NPC 问题<ul>
<li>先证明它至少是一个 NP 问题；</li>
<li>再证明一个已知的 NPC 问题能在多项式时间内归约到它。</li>
</ul>
</li>
</ul>
<h5 id="两道习题"><a href="#两道习题" class="headerlink" title="两道习题"></a>两道习题</h5><blockquote>
<ul>
<li>[8.3] <strong>STINGY SAT</strong> is the following problem: given a set of clauses (each a disjunction of literals) and an integer k, find a satisfying assignment in which at most k variables are true, if such an assignment exists. Prove that <strong>STINGY SAT</strong> is NP-complete.</li>
</ul>
</blockquote>
<ul>
<li><strong>STINGY SAT</strong> 是这样的：给定一组子句（每个子句都是其中变量的析取）和整数$k$，求一个最多有$k$个变量为 true 的满足赋值——如果该赋值存在。证明 <strong>STINGY SAT</strong> 是一个 NP-完全问题。<ul>
<li>首先，易知 <strong>STINGY SAT</strong> 的解是可在多项式时间内验证的，因此 <strong>STINGY SAT</strong> 是一个 NP 问题。</li>
<li>另外，很容易可以将 <strong>SAT</strong> 归约到 <strong>STINGY SAT</strong>：将 k 设为 <strong>SAT</strong> 问题中所有变量的总个数即可，于是证明：<strong>STINGY SAT</strong> 是一个 NP 完全问题。</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>[8.8] In the <strong>EXACT 4SAT</strong> problem, the input is a set of clauses, each of which is a disjunction of exactly four literals, and such that each variable occurs at most once in each clause. The goal is to find a satisfying assignment, if one exists. Prove that <strong>EXACT 4SAT</strong> is NP-complete.</li>
</ul>
</blockquote>
<ul>
<li>在 <strong>EXACT 4SAT</strong> 问题中，输入为一组子句，每个字句都是恰好 4 个变量的析取，且每个变量最多在每个子句中出现一次；目标是求它的满足——如果该赋值存在。证明 <strong>EXACT 4SAT</strong> 是一个 NP-完全问题。<ul>
<li>首先很显然，<strong>EXACT 4SAT</strong> 是一个 NP 问题。</li>
<li>现在通过将 <strong>3SAT</strong> 归约到 <strong>EXACT 4SAT</strong> 来证明后者的 NP 完全性。<ul>
<li>对于任意一个 <strong>3SAT</strong> 实例（一组子句），如果其中某个子句中包含了同一个变量多次，那么可以缩减为一次；如果同时包含了某个变量本身及其取反，那么可以将这个变量去掉。</li>
<li>然后，再在每个子句中添加一些哑变量（即没用的辅助变量，赋值为 true），这样就可以将每个子句所包含的变量数目扩充到 4 个。至此，即已将该 <strong>3SAT</strong> 实例转化成了一个 <strong>EXACT 4SAT</strong> 实例，于是证明：<strong>EXACT 4SAT</strong> 是一个 NP-完全问题。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="NPH-NP-Hard-问题"><a href="#NPH-NP-Hard-问题" class="headerlink" title="NPH(NP-Hard) 问题"></a>NPH(NP-Hard) 问题</h4><p>　假如一个问题，不是一个 NP 问题，但所有的 NPC 问题都可以在多项式时间内归约到它的话，我们就叫它 <code>NPH问题</code>，NP Hard，NP 难问题。</p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://www.matrix67.com/blog/archives/105">什么是P问题、NP问题和NPC问题</a></li>
<li><a href="http://blog.csdn.net/databatman/article/details/49304295">[总结]算法中的P问题、NP问题、NP完全问题和NP难问题</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DARPA[Boss]: Motion Planning in Urban Environments]]></title>
      <url>/2017/06/02/DARPA_Boss_MotionPlanninginUrbanEnvironments/</url>
      <content type="html"><![CDATA[<h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><ul>
<li>model-predictIve trajectory generation algorithm（模型预测轨迹生成算法）</li>
<li>long range plans<ul>
<li>on-road planning</li>
<li>unstructured planning: parking lots/anomalous on-road scenarios（异常路况）<a id="more"></a>
<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 自动驾驶 </category>
            
            <category> DARPA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DARPA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DARPA[Boss]: Boss and the Urban Challenge]]></title>
      <url>/2017/06/02/DARPA_Boss_BossandtheUrbanChallenge/</url>
      <content type="html"><![CDATA[<p>　Boss 自动驾驶软硬件概述。</p>
<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><ul>
<li>软件概述<ul>
<li>Motion planning sub-system<br>==&gt; 2 planners: avoiding static and dynamic obstacles while achieving a desired goal（最终都是产生一条 trajectory）<ul>
<li>structured driving: road following</li>
<li>unstructured driving: maneuvering in parking lots（停车场等的机动控制）</li>
</ul>
</li>
<li>Perception sub-system<a id="more"></a>
<ul>
<li>static obstacle map</li>
<li>moving obstacles</li>
<li>location relative to the road</li>
</ul>
</li>
<li>Mission planner<ul>
<li>optimal path given knowledge of the road network</li>
</ul>
</li>
<li>Behavioral sub-system<ul>
<li>Lane Driving</li>
<li>Intersection Handling</li>
<li>Goal Selection：分配 execution tasks</li>
</ul>
</li>
<li>Software infrastructure（软件基础框架） and tools<br>==&gt; online data logging, offline data log playback and visualization.</li>
</ul>
</li>
<li>硬件概述<ul>
<li>With electric motors to<ul>
<li>转向</li>
<li>踩刹车</li>
<li>shift the transmission 换挡、变速器</li>
</ul>
</li>
<li>保留 normal human driving controls：steering wheel、brake、gas pedal</li>
<li>Two independent power busses<ul>
<li>remaining 12VDC battery and harnesses（电池和线束）</li>
<li>an upgraded high-output alternator：24VDC</li>
</ul>
</li>
<li>Sensors 感知传感器<center><img src="/img/DARPA/Boss_sensorsOverview.png" width="540px"/></center>

</li>
</ul>
</li>
</ul>
<h4 id="Motion-Planning"><a href="#Motion-Planning" class="headerlink" title="Motion Planning"></a>Motion Planning</h4>]]></content>
      
        <categories>
            
            <category> 自动驾驶 </category>
            
            <category> DARPA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DARPA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0016] 二分图匹配问题]]></title>
      <url>/2017/06/01/Algorithms_BiGraphMatching/</url>
      <content type="html"><![CDATA[<h4 id="二分图匹配问题"><a href="#二分图匹配问题" class="headerlink" title="二分图匹配问题"></a>二分图匹配问题</h4><ul>
<li>二分图<br><center><img src="/img/Algorithms/0016_bipartiteGraph.png" width="340px" alt=""/></center><ul>
<li>顶点被分成两个不相交的集合（$U$ 和 $V$）并且同属一个集合内的点两两不相连（$E_{in U} = E_{in V} = \emptyset$），即要么没有圈，要么圈所包含的边数必定是偶数。</li>
<li><strong>二分图</strong> 的一个等价定义是：不含有 <strong>含奇数条边的环</strong> 的图。<a id="more"></a></li>
</ul>
</li>
<li><strong>匹配</strong> 是边的集合 $M$（$M \subseteq E$），其中任意的两条边不共点：$e_1, e_2 \in M, e_1 \cap e_2 = \varnothing $<ul>
<li>集合 $M$ 中的元素（边），称为 <strong>匹配边</strong></li>
<li>匹配边所连接的点被称为 <strong>匹配点</strong></li>
<li>同理可以定义 <strong>非匹配边</strong> 和 <strong>非匹配点</strong> 的概念</li>
</ul>
</li>
<li>最大匹配<ul>
<li>对于一个二分图可能有多种匹配，如果二分图里的某一个匹配包含的边的数量，在该二分图的所有匹配中最大，那么这个匹配称为 <strong>最大匹配</strong></li>
<li>如果一个图的某个匹配中，<font color="blue">所有的顶点都是匹配点</font>（可能会残留一些边不是匹配边），那么它就是一个 <strong>完美匹配</strong>。</li>
<li>显然，<strong>完美匹配</strong> 一定是 <strong>最大匹配</strong>（<strong>完美匹配</strong> 的任何一个点都已经匹配，添加一条新的匹配边一定会与已有的匹配边冲突）；但并非每个图都存在 <strong>完美匹配</strong>，即  <strong>最大匹配</strong> 不一定是 <strong>完美匹配</strong>。</li>
</ul>
</li>
<li>增广路径（增广轨）<ul>
<li>在二分图的匹配中，如果一条路径的首尾是 <strong>非匹配点</strong>，路径中除此之外的（如果有）其他点均是 <strong>匹配点</strong>，那么这条路径就是一条 <strong>增广路径（agumenting path）/增广轨</strong>（顾名思义是指一条可以使匹配数变多的路径）。<ul>
<li>$A：$首尾是非匹配点，因此，增广路径的第一条和最后一条边，必然是 <strong>非匹配边</strong>。</li>
<li>$B：$增广路径的第二条（如果有）和倒数第二条（如果有），必然是 <strong>匹配边</strong> $\Longleftarrow N$ 个点（$0～N-1$），$v_1, v_2, …, v_{N-3}, v_{N-2}$ 均为匹配点，且 ($v_0 → v_1$) 和 ($v_{N-2} → v_{N-1}$) 为 <strong>非匹配边</strong>。</li>
<li>$C：$第三条（如果有）和倒数第三条（如果有）一定是 <strong>非匹配边</strong> $\Longleftarrow $($v_1 → v_2$)$\in M$，($v_1 → v_2$)$\cap$($v_2 → v_3$)$= v_2$，故 ($v_2 → v_3$) 只能是 <strong>非匹配边</strong></li>
</ul>
</li>
<li>$A, B, C \Longrightarrow$ 增广路径从非匹配边开始，匹配边和非匹配边依次交替，最后由非匹配边结束 $\Longrightarrow$ 增广路径中，非匹配边的数目会比匹配边大 1。</li>
<li>在二分图的匹配中，从一个未匹配点出发，依次经过非匹配边、匹配边、非匹配边…形成的路径叫 <strong>交替路径/交替轨</strong>。<ul>
<li><strong>增广路径/增广轨</strong> 也被称为 <strong>交替路径/交替轨</strong>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="判断一个图是否为二分图？"><a href="#判断一个图是否为二分图？" class="headerlink" title="判断一个图是否为二分图？"></a>判断一个图是否为二分图？</h4><ul>
<li>假设我们有一个图，我们尝试用如下的方式去给每个节点着色，总共所有的节点只能着两种颜色中的一种（假设为红色或者蓝色）。对于一个节点来说，假设它着的是某一种颜色，和它相邻的节点只能着另一种颜色。给定一个图，如果这个图满足上述的特性的话，则这个图可以称之为<strong>二分图</strong>。<ul>
<li>判断一个图是否为二分图必然会遍历这个图</li>
<li>每次在判断的时候假定一个节点的颜色为某个值，那么再将它相邻的节点颜色都设置成不同的。因为只是两种颜色，可以直接用布尔值类型来处理。<ul>
<li>对于不属于二分图的情况，肯定是<font color="red">某个节点访问到一个它可以连接到的节点，而这个节点已经被访问过了，但是这个被访问过的节点和当前节点颜色是一样</font>。这样表明它和前面二分图的定义有冲突，所以，我们遍历整个图就是为了判断是否存在这种情况。</li>
</ul>
</li>
</ul>
</li>
<li>实际实现中需要考虑的细节。<ul>
<li>对于所有节点对应的颜色需要定义一个<code>boolean[] color</code>数组</li>
<li>最开始访问一个节点的时候，将其对应<code>color</code>位设置为<code>true</code>，每次访问一个关联的节点时，将关联节点设置成原来节点的相反值。也就是说，比如节点$v$它的颜色为<code>color[v]</code>，那么下一个它被关联的节点$w$的颜色则可以设置成<code>color[w] = !color[v]</code>，正好通过取反实现了颜色的变换。</li>
<li>这里实现的要点还是通过dfs方法<ul>
<li>每次碰到一个节点的时候就要判断一下是否已经访问过：①已经访问过的话，要判断颜色是否相同，相同则表明该图不是一个二分图；②没有访问过的话，则将新节点设置成当前节点的相反值。</li>
<li>然后就是要遍历所有节点，防止遗漏未连接的节点情况。</li>
</ul>
</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span>[] color;</div><div class="line">visited[] = <span class="literal">false</span>;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> 所有节点 ?:</div><div class="line">  <span class="keyword">if</span>(!visited[?])</div><div class="line">    color[?] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span>(!dfs(?, visited, color))</div><div class="line">      <span class="comment">// 不是二分图</span></div><div class="line"><span class="comment">// 为二分图</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(startIdx, visited, color)</span> </span>&#123;</div><div class="line">  visited[startIdx] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">for</span> startIdx 邻接边 startIdx-&gt;?:</div><div class="line">    <span class="keyword">if</span>(!visited[?])&#123;</div><div class="line">      color[?] = !color[startIdx];</div><div class="line">      <span class="keyword">if</span>(!dfs(?, visited, color))</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(color[startIdx] == color[?]) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看出，<font color="red">一个图是不是二分图并不严格要求其必须是一个连通图</font>。</li>
</ul>
</li>
</ul>
<h4 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h4><ul>
<li>增广路径的性质<ul>
<li>有奇数条边</li>
<li>起点在二分图的左半边$U$，终点在右半边$V$</li>
<li>路径上的点一定是一个在左半边，一个在右半边，交替出现。（其实二分图的性质就决定了这一点，因为二分图同一边的点之间没有边相连）</li>
<li>整条路径上没有重复的点</li>
<li>起点和终点都是目前还没有配对的点，而其它所有点都是已经配好对的</li>
<li>路径上的所有第奇数条边都不在原匹配中，所有第偶数条边都出现在原匹配中</li>
<li>最后，也是最重要的一条，把增广路径上的所有第奇数条边加入到原匹配中去，并把增广路径中的所有第偶数条边从原匹配中删除（这个操作称为增广路径的 <strong>取反</strong> ），则新的匹配数就比原匹配数增加了1个</li>
</ul>
</li>
<li>算法思想<ul>
<li>初始时最大匹配为空。</li>
<li>从二分图中找出一条路径来，让路径的起点和终点都是还没有匹配过的点，并且路径经过的连线是一条没被匹配、一条已经匹配过、再下一条又没被匹配过这样交替的出现。</li>
<li>找到这样的路径后，显然路径里没被匹配过的连线比已经匹配了的连线多一条，于是修改匹配图，把路径里所有匹配过的连线去掉匹配关系，把没有匹配的连线变成匹配的，这样匹配数就比原来多1。</li>
<li>不断执行上述操作，直到找不到这样的路径为止。<ul>
<li>从反证法考虑，即假设存在这样的情况：当前匹配不是二分图的最大匹配，但已找不到一条新的增广路径。因为当前匹配不是二分图的最大匹配，那么在两个集合中，分别至少存在一个非匹配点。那么情况分为两种：<ul>
<li>这两个点之间存在一条边——那么我们找到了一条新的增广路径，产生矛盾；</li>
<li>这两个点之间不存在直接的边，即这两个点分别都只与匹配点相连——那么：（1）如果这两个点可以用已有的匹配点相连，那么我们找到了一条新的增广路径，产生矛盾；（2）如果这两个点无法用已有的匹配点相连，那么这两个点也就无法增加匹配中边的数量，也就是我们已经找到了二分图的最大匹配，产生矛盾。</li>
</ul>
</li>
<li>在所有可能的情况，上述假设都会产生矛盾。因此假设不成立，亦即贪心算法：不断地搜寻出增广路径，直到最终我们找不到新的增广路径为止，必然能求得最大匹配的解。</li>
</ul>
</li>
<li>如果二分图的左半边 $U$ 一共有 $|V_U|$ 个点，最多找 $|V_U|$ 条增广路径，如果图中有 $|E|$ 条边，每一条增广路径把所有边遍历一遍，所以时间复杂度为 $O(|V_U|·|E|)$。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><figcaption><span>BigraphMatching.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>		<span class="comment">/* stdin */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>		<span class="comment">/* INT_MAX */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>		<span class="comment">/* queue */</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UNMATCHING 	-1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STARTPOINT	-1</span></div><div class="line">  </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  <span class="keyword">int</span> vertexIdx;</div><div class="line">  <span class="comment">// 0: in U/ 1: in V</span></div><div class="line">  <span class="keyword">int</span> UorV;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd;</div><div class="line">  <span class="comment">// 0: in U/1: in V</span></div><div class="line">  <span class="keyword">int</span> UorV;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data &gt;&gt; UorV; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].vertexIdx = i;</div><div class="line">    g.VertexNodes[i].UorV = UorV;</div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">    <span class="comment">// Bigraph is a undirected graph</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeStart;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeEnd].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeEnd].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for Bigraph&lt;U, V&gt; is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span>;</div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[i].UorV == <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"U"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"V"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">")-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">" "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(<span class="keyword">const</span> Graph&amp; g, <span class="keyword">int</span> prevs[], <span class="keyword">int</span> toIdx)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (prevs[toIdx] != STARTPOINT) &#123;</div><div class="line">    PrintPath(g, prevs, prevs[toIdx]);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[toIdx].data;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMatching</span><span class="params">(Graph&amp; g, <span class="keyword">const</span> <span class="keyword">int</span> matchings[])</span> </span>&#123;</div><div class="line">  <span class="keyword">bool</span> visited[g.vertexNum] = &#123;<span class="literal">false</span>&#125;;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(matchings[i]!=<span class="number">-1</span> &amp;&amp; !visited[i]) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"&lt;--&gt;"</span> &lt;&lt; g.VertexNodes[matchings[i]].data</div><div class="line">         &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">     	visited[i] = <span class="literal">true</span>;</div><div class="line">     	visited[matchings[i]] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungarian</span><span class="params">(Graph&amp; g, <span class="keyword">int</span> matchings[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> U[g.vertexNum], V[g.vertexNum];</div><div class="line">  <span class="keyword">int</span> uSize = <span class="number">0</span>, vSize = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> vertex=<span class="number">0</span>; vertex&lt;g.vertexNum; vertex++) &#123;</div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[vertex].UorV == <span class="number">0</span>) &#123;</div><div class="line">      U[uSize++] = g.VertexNodes[vertex].vertexIdx;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      V[vSize++] = g.VertexNodes[vertex].vertexIdx;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">int</span> matchingSize = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="comment">// -1 means no matching</span></div><div class="line">    matchings[i] = UNMATCHING;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// cout &lt;&lt; "U: #" &lt;&lt; uSize &lt;&lt; " V: #" &lt;&lt; vSize &lt;&lt; endl;</span></div><div class="line"> </div><div class="line">  <span class="keyword">int</span> prevs[g.vertexNum];</div><div class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfsVertexQueue;</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"Hungarian Algorithm's Process: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> vertexInU=<span class="number">0</span>; vertexInU&lt;uSize; vertexInU++) &#123;</div><div class="line">    <span class="keyword">int</span> vertexIdx = U[vertexInU];</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; g.VertexNodes[vertexIdx].data &lt;&lt; <span class="string">": "</span>;</div><div class="line">    <span class="comment">// find an agumenting path, starting with an unmatching vertex</span></div><div class="line">    <span class="keyword">if</span>(matchings[vertexIdx] == UNMATCHING) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"unmatched vertex"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="keyword">while</span>(!bfsVertexQueue.empty()) &#123;</div><div class="line">        bfsVertexQueue.pop();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">bool</span> visited[g.vertexNum] = &#123;<span class="literal">false</span>&#125;;</div><div class="line"> </div><div class="line">      bfsVertexQueue.push(vertexIdx);</div><div class="line">      visited[vertexIdx] = <span class="literal">true</span>;</div><div class="line">      <span class="comment">// prevs for augumenting path's backtracking, -1 means starting point</span></div><div class="line">      prevs[vertexIdx] = STARTPOINT;</div><div class="line"> </div><div class="line">      <span class="keyword">bool</span> pathFound = <span class="literal">false</span>;</div><div class="line">      <span class="keyword">while</span>(!bfsVertexQueue.empty() &amp;&amp; !pathFound) &#123;</div><div class="line">        <span class="keyword">int</span> u = bfsVertexQueue.front();</div><div class="line">        <span class="comment">// cout &lt;&lt; "pop: " &lt;&lt; g.VertexNodes[u].data &lt;&lt; endl;</span></div><div class="line">        bfsVertexQueue.pop();</div><div class="line"> </div><div class="line">        adjVertexNode* head = g.VertexNodes[u].<span class="built_in">list</span>;</div><div class="line">        <span class="keyword">while</span> (head != <span class="literal">NULL</span> &amp;&amp; !pathFound) &#123;</div><div class="line">          <span class="keyword">int</span> v = head-&gt;adjVertexIdx;</div><div class="line">          <span class="comment">// visited: avoid loop</span></div><div class="line">          <span class="keyword">if</span>(!visited[v]) &#123;</div><div class="line">            <span class="comment">// v is a matching vertex</span></div><div class="line">            <span class="keyword">if</span>(matchings[v] != UNMATCHING) &#123;</div><div class="line">              bfsVertexQueue.push(matchings[v]);</div><div class="line">              visited[v] = <span class="literal">true</span>;</div><div class="line">              visited[matchings[v]] = <span class="literal">true</span>;</div><div class="line">              prevs[v] = u;</div><div class="line">              prevs[matchings[v]] = v;</div><div class="line">              <span class="comment">// cout &lt;&lt; "push: " &lt;&lt; g.VertexNodes[matchings[v]].data &lt;&lt; endl;</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// v is the other unmatching vertex, augumenting path found</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">              <span class="comment">// record previous vertex for backtracking</span></div><div class="line">              prevs[v] = u;</div><div class="line"> </div><div class="line">              pathFound = <span class="literal">true</span>;</div><div class="line">              <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\tAugumenting path: "</span>;</div><div class="line">              PrintPath(g, prevs, v);</div><div class="line">              <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">              <span class="comment">// reverse the augumenting path, for one more matching</span></div><div class="line">              <span class="keyword">int</span> curIdx = v, prevIdx = u;</div><div class="line">              <span class="keyword">bool</span> isMatchedEdge = <span class="literal">false</span>;</div><div class="line">              <span class="keyword">while</span>(prevIdx != STARTPOINT) &#123;</div><div class="line">                <span class="keyword">if</span>(!isMatchedEdge) &#123;</div><div class="line">                  matchings[curIdx] = prevIdx;</div><div class="line">                  matchings[prevIdx] = curIdx;</div><div class="line">                &#125;</div><div class="line">                isMatchedEdge = !isMatchedEdge;</div><div class="line">                curIdx = prevIdx;</div><div class="line">                prevIdx = prevs[prevIdx];</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          head = head-&gt;next;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// expand one more matching</span></div><div class="line">      <span class="keyword">if</span>(matchings[vertexIdx] != UNMATCHING) &#123;</div><div class="line">        matchingSize++;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"matched vertex"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> matchingSize;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> USE_GRAPH1</span></div><div class="line">    freopen(<span class="string">"Bigraph1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    freopen(<span class="string">"Bigraph2.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"></div><div class="line">  <span class="keyword">int</span> matchings[g.vertexNum];</div><div class="line">  <span class="keyword">int</span> matchingSize = Hungarian(g, matchings);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Maximum Matching: #"</span> &lt;&lt; matchingSize &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  PrintMatching(g, matchings);</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>代码实现细节如下<ul>
<li><code>int Hungarian(Graph&amp; g, int matchings[])</code> 函数根据传入的二分图 <code>g</code>，运行<strong>匈牙利算法</strong>确定该二分图的最大匹配数并返回，对应的匹配信息通过 <code>matchings</code> 数组返回。</li>
<li>从左边 $U$ 顶点集第 1 个顶点开始，挑选未匹配点进行搜索，寻找增广路径。<ul>
<li>上述实现中采用<strong>BFS</strong>进行搜索，也可以采用<strong>DFS</strong>进行搜索。<ul>
<li>如果经过一个未匹配点，说明搜索成功：根据增广路径更新匹配信息，最大匹配数 +1，停止搜索。</li>
<li>如果经过一个匹配点，</li>
</ul>
</li>
<li>如果未能找到增广路径，则跳过这个点进行下一次搜索：事实上，此时搜索后会形成一棵匈牙利树。我们可以永久性地把它从图中删去，而不影响结果。</li>
</ul>
</li>
<li>由于找到增广路径之后需要沿着路径更新匹配信息（取反操作），所以我们需要一个结构来记录路径上的点。DFS 通过函数递归调用隐式地使用一个栈，而 我们的 BFS 实现中使用 <code>prevs</code> 数组来记录增广路径上途径的点信息。<ul>
<li>沿着增广路径更新匹配信息（取反操作）是根据增广路径上的匹配边、非匹配边交替出现的性质。<center><img src="/img/Algorithms/0016_ExampleBigraphHungarian.png" width="420px" alt=""/></center></li>
</ul>
</li>
</ul>
</li>
<li><code>Graph[1]</code> 输入文件如下：</li>
<li>  <figure class="highlight cpp"><figcaption><span>Bigraph1.txt</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="number">8</span> <span class="number">7</span></div><div class="line"><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="number">2</span> <span class="number">0</span></div><div class="line"><span class="number">3</span> <span class="number">0</span></div><div class="line"><span class="number">4</span> <span class="number">0</span></div><div class="line"><span class="number">5</span> <span class="number">1</span></div><div class="line"><span class="number">6</span> <span class="number">1</span></div><div class="line"><span class="number">7</span> <span class="number">1</span></div><div class="line"><span class="number">8</span> <span class="number">1</span></div><div class="line"><span class="number">0</span> <span class="number">4</span></div><div class="line"><span class="number">0</span> <span class="number">6</span></div><div class="line"><span class="number">1</span> <span class="number">4</span></div><div class="line"><span class="number">2</span> <span class="number">4</span></div><div class="line"><span class="number">2</span> <span class="number">5</span></div><div class="line"><span class="number">3</span> <span class="number">6</span></div><div class="line"><span class="number">3</span> <span class="number">7</span></div></pre></td></tr></table></figure>
<ul>
<li>构建运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ g++ -DUSE_GRAPH1 BigraphMatching.cpp -o BigraphMatching</div><div class="line">$ ./BigraphMatching </div><div class="line">The adjacent list for Bigraph&lt;U, V&gt; is:</div><div class="line"> 1(U)-&gt;7 5 </div><div class="line"> 2(U)-&gt;5 </div><div class="line"> 3(U)-&gt;6 5 </div><div class="line"> 4(U)-&gt;8 7 </div><div class="line"> 5(V)-&gt;3 2 1 </div><div class="line"> 6(V)-&gt;3 </div><div class="line"> 7(V)-&gt;4 1 </div><div class="line"> 8(V)-&gt;4 </div><div class="line"> </div><div class="line">Hungarian Algorithm&apos;s Process: </div><div class="line">  1: unmatched vertex</div><div class="line">    Augumenting path: 1-&gt;7</div><div class="line">  2: unmatched vertex</div><div class="line">    Augumenting path: 2-&gt;5</div><div class="line">  3: unmatched vertex</div><div class="line">    Augumenting path: 3-&gt;6</div><div class="line">  4: unmatched vertex</div><div class="line">    Augumenting path: 4-&gt;8</div><div class="line"> </div><div class="line">Maximum Matching: #4</div><div class="line">  + 1&lt;--&gt;7</div><div class="line">  + 2&lt;--&gt;5</div><div class="line">  + 3&lt;--&gt;6</div><div class="line">  + 4&lt;--&gt;8</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><code>Graph[2]</code> 输入文件如下：</li>
<li>  <figure class="highlight cpp"><figcaption><span>Bigraph2.txt</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="number">12</span> <span class="number">16</span></div><div class="line"><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="number">2</span> <span class="number">0</span></div><div class="line"><span class="number">3</span> <span class="number">0</span></div><div class="line"><span class="number">4</span> <span class="number">0</span></div><div class="line"><span class="number">5</span> <span class="number">0</span></div><div class="line"><span class="number">6</span> <span class="number">0</span></div><div class="line"><span class="number">7</span> <span class="number">1</span></div><div class="line"><span class="number">8</span> <span class="number">1</span></div><div class="line"><span class="number">9</span> <span class="number">1</span></div><div class="line">a <span class="number">1</span></div><div class="line">b <span class="number">1</span></div><div class="line">c <span class="number">1</span></div><div class="line"><span class="number">0</span> <span class="number">6</span></div><div class="line"><span class="number">0</span> <span class="number">7</span></div><div class="line"><span class="number">0</span> <span class="number">9</span></div><div class="line"><span class="number">1</span> <span class="number">7</span></div><div class="line"><span class="number">1</span> <span class="number">11</span></div><div class="line"><span class="number">2</span> <span class="number">7</span></div><div class="line"><span class="number">2</span> <span class="number">8</span></div><div class="line"><span class="number">3</span> <span class="number">8</span></div><div class="line"><span class="number">3</span> <span class="number">10</span></div><div class="line"><span class="number">3</span> <span class="number">11</span></div><div class="line"><span class="number">4</span> <span class="number">8</span></div><div class="line"><span class="number">4</span> <span class="number">9</span></div><div class="line"><span class="number">4</span> <span class="number">10</span></div><div class="line"><span class="number">4</span> <span class="number">11</span></div><div class="line"><span class="number">5</span> <span class="number">7</span></div><div class="line"><span class="number">5</span> <span class="number">10</span></div></pre></td></tr></table></figure>
<ul>
<li>构建运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">$ g++ BigraphMatching.cpp -o BigraphMatching</div><div class="line">$ ./BigraphMatching </div><div class="line">The adjacent list for Bigraph&lt;U, V&gt; is:</div><div class="line"> 1(U)-&gt;a 8 7 </div><div class="line"> 2(U)-&gt;c 8 </div><div class="line"> 3(U)-&gt;9 8 </div><div class="line"> 4(U)-&gt;c b 9 </div><div class="line"> 5(U)-&gt;c b a 9 </div><div class="line"> 6(U)-&gt;b 8 </div><div class="line"> 7(V)-&gt;1 </div><div class="line"> 8(V)-&gt;6 3 2 1 </div><div class="line"> 9(V)-&gt;5 4 3 </div><div class="line"> a(V)-&gt;5 1 </div><div class="line"> b(V)-&gt;6 5 4 </div><div class="line"> c(V)-&gt;5 4 2 </div><div class="line"> </div><div class="line">Hungarian Algorithm&apos;s Process: </div><div class="line">  1: unmatched vertex</div><div class="line">    Augumenting path: 1-&gt;a</div><div class="line">  2: unmatched vertex</div><div class="line">    Augumenting path: 2-&gt;c</div><div class="line">  3: unmatched vertex</div><div class="line">    Augumenting path: 3-&gt;9</div><div class="line">  4: unmatched vertex</div><div class="line">    Augumenting path: 4-&gt;b</div><div class="line">  5: unmatched vertex</div><div class="line">    Augumenting path: 5-&gt;c-&gt;2-&gt;8</div><div class="line">  6: unmatched vertex</div><div class="line">    Augumenting path: 6-&gt;b-&gt;4-&gt;c-&gt;5-&gt;a-&gt;1-&gt;7</div><div class="line"> </div><div class="line">Maximum Matching: #6</div><div class="line">  + 1&lt;--&gt;7</div><div class="line">  + 2&lt;--&gt;8</div><div class="line">  + 3&lt;--&gt;9</div><div class="line">  + 4&lt;--&gt;c</div><div class="line">  + 5&lt;--&gt;a</div><div class="line">  + 6&lt;--&gt;b</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>补充概念：匈牙利树<br><center><img src="/img/Algorithms/0016_HungarianTree.png" width="540px" alt=""/></center><ul>
<li>上文提到的 <strong>匈牙利树</strong> 一般由 BFS 构造（类似于 BFS 树）。从一个未匹配点出发运行 BFS（唯一的限制是，必须走交替路），直到不能再扩展为止。</li>
<li>上图（1），可以得到如图（2）的一棵 BFS 树：这棵树存在一个叶子节点为非匹配点（7 号），但是匈牙利树要求所有叶子节点均为匹配点，因此这不是一棵匈牙利树。相比之下，由图（3）得到的如图（4）的一棵 BFS 树，就是一棵匈牙利树。</li>
</ul>
</li>
</ul>
<h4 id="最大流方法计算最大匹配"><a href="#最大流方法计算最大匹配" class="headerlink" title="最大流方法计算最大匹配"></a>最大流方法计算最大匹配</h4><p>　如下图所示，对于一个二分图$G$，令已有的边的容量（Capacity）为无穷大，增加一个源点$S$和一个汇点$T$，令$S$和$T$分别连接二分图中的左半边$U$和右半边$V$，并设置其容量为1。这时得到流网络$G’$，计算得到的$G’$最大流就等于$G$的最大匹配。</p>
<center><img src="/img/Algorithms/0016_Bigraph2NetworkGraph.png" width="440px" alt=""/></center>

<ul>
<li>算法正确性简单证明<ul>
<li>首先假设，当前流网络有一个最大流，但它对应的不是最大匹配。那么，我们至少还可以向最大匹配中加入一条边$(u→v)$，显然我们还可以增加一条增广路径：<code>s-&gt;u-&gt;v-&gt;t</code>，那么就得到一个更大的流，和假设矛盾，所以假设不成立。</li>
<li>同理，假设当前有一个最大匹配，其对应的不是最大流，那么至少还存在一条增广路径<code>s-&gt;u-&gt;v-&gt;t</code>以确保更大的流，这时就可以增加边$(u→v)$到最大匹配中，同样和假设矛盾。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><figcaption><span>BigraphMatchingbyMaxFlow.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span>			<span class="comment">/* setw */</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>			<span class="comment">/* stdin */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>			<span class="comment">/* INT_MAX */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>			<span class="comment">/* queue */</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UNMATCHING 	-1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STARTPOINT	-1</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  <span class="keyword">int</span> vertexIdx;</div><div class="line">  <span class="comment">// 0: in U/ 1: in V</span></div><div class="line">  <span class="keyword">int</span> UorV;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd;</div><div class="line">  <span class="comment">// 0: in U/1: in V</span></div><div class="line">  <span class="keyword">int</span> UorV;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data &gt;&gt; UorV; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].vertexIdx = i;</div><div class="line">    g.VertexNodes[i].UorV = UorV;</div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd;</div><div class="line">    </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">    <span class="comment">// Bigraph is a undirected graph</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeStart;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeEnd].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeEnd].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for Bigraph&lt;U, V&gt; is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span>;</div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[i].UorV == <span class="number">0</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"U"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"V"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">")-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">" "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(<span class="keyword">const</span> Graph&amp; g, <span class="keyword">int</span> prevs[], <span class="keyword">int</span> toIdx)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (prevs[toIdx] != STARTPOINT) &#123;</div><div class="line">    PrintPath(g, prevs, prevs[toIdx]);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(toIdx == <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"S"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(toIdx == g.vertexNum+<span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"T"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[toIdx<span class="number">-1</span>].data;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMatching</span><span class="params">(Graph&amp; g, <span class="keyword">const</span> <span class="keyword">int</span> matchings[])</span> </span>&#123;</div><div class="line">  <span class="keyword">bool</span> visited[g.vertexNum] = &#123;<span class="literal">false</span>&#125;;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(matchings[i]!=<span class="number">-1</span> &amp;&amp; !visited[i]) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"&lt;--&gt;"</span> &lt;&lt; g.VertexNodes[matchings[i]].data</div><div class="line">         &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">     	visited[i] = <span class="literal">true</span>;</div><div class="line">     	visited[matchings[i]] = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span>** graph, <span class="keyword">int</span> vertexNum, <span class="keyword">int</span> fromIdx, <span class="keyword">int</span> toIdx, <span class="keyword">int</span>* prevs)</span> </span>&#123;</div><div class="line">  <span class="keyword">bool</span> visited[vertexNum];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> vertexIdx=<span class="number">0</span>; vertexIdx&lt;vertexNum; vertexIdx++) &#123;</div><div class="line">    visited[vertexIdx] = <span class="literal">false</span>;</div><div class="line">    prevs[vertexIdx] = <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; vertexIdxQueue;</div><div class="line">  vertexIdxQueue.push(fromIdx);</div><div class="line">  visited[fromIdx] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">while</span> (!vertexIdxQueue.empty()) &#123;</div><div class="line">    <span class="keyword">int</span> u = vertexIdxQueue.front();</div><div class="line">    <span class="comment">// cout &lt;&lt; u &lt;&lt; " ";</span></div><div class="line">    <span class="keyword">if</span>(u == toIdx) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    vertexIdxQueue.pop();</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;vertexNum; v++) &#123;</div><div class="line">      <span class="keyword">if</span>(!visited[v] &amp;&amp; graph[u][v] &gt; <span class="number">0</span>) &#123;</div><div class="line">        vertexIdxQueue.push(v);</div><div class="line">        visited[v] = <span class="literal">true</span>;</div><div class="line">        prevs[v] = u;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> visited[toIdx];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxMatchingbyMaxFlow</span><span class="params">(Graph&amp; g, <span class="keyword">int</span> matchings[])</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    matchings[i] = UNMATCHING;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// Add source[0] and sink[g.vertexNum+1]</span></div><div class="line">  <span class="keyword">int</span> N = g.vertexNum+<span class="number">2</span>;</div><div class="line">  <span class="keyword">int</span> sourceIdx = <span class="number">0</span>, sinkIdx = g.vertexNum+<span class="number">1</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">int</span> maxFlow = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> flowGraph[N][N];</div><div class="line">  <span class="comment">// initialize the residual graph</span></div><div class="line">  <span class="keyword">int</span>** residualGraph = <span class="keyword">new</span> <span class="keyword">int</span>*[N];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u&lt;N; u++) &#123;</div><div class="line">    residualGraph[u] = <span class="keyword">new</span> <span class="keyword">int</span>[N];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;N; v++) &#123;</div><div class="line">      residualGraph[u][v] = <span class="number">0</span>;</div><div class="line">      flowGraph[u][v] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> vertexIdx=<span class="number">0</span>; vertexIdx&lt;g.vertexNum; vertexIdx++) &#123;</div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[vertexIdx].UorV == <span class="number">0</span>) &#123;</div><div class="line">      residualGraph[sourceIdx][vertexIdx+<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line"> </div><div class="line">      adjVertexNode* head = g.VertexNodes[vertexIdx].<span class="built_in">list</span>;</div><div class="line">      <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">        residualGraph[vertexIdx+<span class="number">1</span>][head-&gt;adjVertexIdx+<span class="number">1</span>] = INT_MAX;</div><div class="line">        head = head-&gt;next;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      residualGraph[vertexIdx+<span class="number">1</span>][sinkIdx] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// prevs array for storing the augmenting path</span></div><div class="line">  <span class="keyword">int</span> prevs[N];</div><div class="line">  <span class="keyword">int</span> iter = <span class="number">1</span>;</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">" Maximum Flow Algorithm Process:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="comment">// Augment the flow while there is a path from source to sink</span></div><div class="line">  <span class="keyword">while</span>(BFS(residualGraph, N, sourceIdx, sinkIdx, prevs)) &#123;</div><div class="line">    <span class="comment">// find the maximum flow(minimum residual capacity) through the path found</span></div><div class="line">    <span class="keyword">int</span> pathFlow = INT_MAX;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=sinkIdx; v!=sourceIdx; v=prevs[v]) &#123;</div><div class="line">      <span class="keyword">int</span> u = prevs[v];</div><div class="line">      <span class="keyword">if</span>(residualGraph[u][v] &lt; pathFlow) &#123;</div><div class="line">        pathFlow = residualGraph[u][v];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// update residual capacities of the edges &amp; reverse edges along the augmenting path</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=sinkIdx; v!=sourceIdx; v=prevs[v]) &#123;</div><div class="line">      <span class="keyword">int</span> u = prevs[v];</div><div class="line">      residualGraph[u][v] -= pathFlow;</div><div class="line">      residualGraph[v][u] += pathFlow;</div><div class="line">      <span class="comment">// record flows</span></div><div class="line">      flowGraph[u][v] += pathFlow;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// update matching from augumenting path</span></div><div class="line">    <span class="keyword">int</span> curIdx = prevs[sinkIdx], prevIdx = prevs[curIdx];</div><div class="line">    <span class="keyword">while</span>(prevIdx != STARTPOINT) &#123;</div><div class="line">      <span class="comment">// -1 with source and sink</span></div><div class="line">      matchings[curIdx<span class="number">-1</span>] = prevIdx<span class="number">-1</span>;</div><div class="line">      matchings[prevIdx<span class="number">-1</span>] = curIdx<span class="number">-1</span>;</div><div class="line"></div><div class="line">      curIdx = prevs[prevIdx];</div><div class="line">      prevIdx = prevs[curIdx];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    maxFlow += pathFlow;</div><div class="line">    <span class="comment">// print current iteration's info</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t#"</span> &lt;&lt; iter++ &lt;&lt; <span class="string">" flow: "</span> &lt;&lt; setw(<span class="number">3</span>) &lt;&lt; pathFlow &lt;&lt; <span class="string">" Augmenting-path: "</span>;</div><div class="line">    PrintPath(g, prevs, sinkIdx);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// memory release</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">    <span class="keyword">delete</span>[] residualGraph[i];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">delete</span>[] residualGraph;</div><div class="line"> </div><div class="line">  <span class="comment">// show the flows</span></div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">" Maximum Flow Graph:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">bool</span> noflow;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u&lt;g.vertexNum; u++) &#123;</div><div class="line">    noflow = <span class="literal">true</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"   "</span> &lt;&lt; g.VertexNodes[u].data &lt;&lt; <span class="string">": "</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;g.vertexNum; v++) &#123;</div><div class="line">      <span class="keyword">if</span>(flowGraph[u+<span class="number">1</span>][v+<span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span> &lt;&lt; g.VertexNodes[v].data</div><div class="line">           &lt;&lt; <span class="string">"("</span> &lt;&lt; flowGraph[u+<span class="number">1</span>][v+<span class="number">1</span>] &lt;&lt; <span class="string">")\t"</span>;</div><div class="line">        noflow = <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(noflow) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> maxFlow;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> USE_GRAPH1</span></div><div class="line">    freopen(<span class="string">"Bigraph1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    freopen(<span class="string">"Bigraph2.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> matchings[g.vertexNum];</div><div class="line">  <span class="keyword">int</span> matchingSize = MaxMatchingbyMaxFlow(g, matchings);</div><div class="line">  </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Maximum Matching: #"</span> &lt;&lt; matchingSize &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  PrintMatching(g, matchings);</div><div class="line">  </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>代码实现细节如下：<ul>
<li><code>int MaxMatchingbyMaxFlow(Graph&amp; g, int matchings[])</code> 实现了和匈牙利算法中一样的函数接口，思路很简单，<code>residualGraph</code> 初始化为构造的流网络$G’$，然后调用最大流算法，得到的<strong>最大流</strong>即为返回的<strong>最大匹配数</strong>；此外，利用最大流算法每次迭代搜索到的增广路径更新匹配信息<code>matchings</code>。</li>
<li>因为二分图上任何匹配数目至多为$|V’| = min(|V_{\in U}|, |V_{\in V}|)$，所以流网络$G’$中最大流的值为$O(|V’|)$，因此，可以在$O(|V’|·|E’|) = O(|V|·|E|)$的时间内找出二分图的最大匹配。</li>
</ul>
</li>
<li>利用上述最大流方法得到的匹配信息和匈牙利算法有些许区别，但可以看出，都能正确得到最大匹配，同时也是完美匹配。<center><img src="/img/Algorithms/0016_ExampleBigraphMaxflow.png" width="420px" alt=""/></center>

</li>
</ul>
<figure class="highlight plain"><figcaption><span>Graph[1]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ g++ -DUSE_GRAPH1 BigraphMatchingbyMaxFlow.cpp -o BigraphMatchingbyMaxFlow</div><div class="line">$ ./BigraphMatchingbyMaxFlow </div><div class="line">The adjacent list for Bigraph&lt;U, V&gt; is:</div><div class="line"> 1(U)-&gt;7 5 </div><div class="line"> 2(U)-&gt;5 </div><div class="line"> 3(U)-&gt;6 5 </div><div class="line"> 4(U)-&gt;8 7 </div><div class="line"> 5(V)-&gt;3 2 1 </div><div class="line"> 6(V)-&gt;3 </div><div class="line"> 7(V)-&gt;4 1 </div><div class="line"> 8(V)-&gt;4 </div><div class="line"> Maximum Flow Algorithm Process:</div><div class="line">  #1 flow:   1 Augmenting-path: S-&gt;1-&gt;5-&gt;T</div><div class="line">  #2 flow:   1 Augmenting-path: S-&gt;3-&gt;6-&gt;T</div><div class="line">  #3 flow:   1 Augmenting-path: S-&gt;4-&gt;7-&gt;T</div><div class="line">  #4 flow:   1 Augmenting-path: S-&gt;2-&gt;5-&gt;1-&gt;7-&gt;4-&gt;8-&gt;T</div><div class="line"> Maximum Flow Graph:</div><div class="line">   1: -&gt;5(1)	-&gt;7(1)	</div><div class="line">   2: -&gt;5(1)	</div><div class="line">   3: -&gt;6(1)	</div><div class="line">   4: -&gt;7(1)	-&gt;8(1)	</div><div class="line">   5: -&gt;1(1)	</div><div class="line">   6: NULL</div><div class="line">   7: -&gt;4(1)	</div><div class="line">   8: NULL</div><div class="line"> </div><div class="line">Maximum Matching: #4</div><div class="line">  + 1&lt;--&gt;7</div><div class="line">  + 2&lt;--&gt;5</div><div class="line">  + 3&lt;--&gt;6</div><div class="line">  + 4&lt;--&gt;8</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>Graph[2]</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">$ g++ BigraphMatchingbyMaxFlow.cpp -o BigraphMatchingbyMaxFlow</div><div class="line">$ ./BigraphMatchingbyMaxFlow </div><div class="line">The adjacent list for Bigraph&lt;U, V&gt; is:</div><div class="line"> 1(U)-&gt;a 8 7 </div><div class="line"> 2(U)-&gt;c 8 </div><div class="line"> 3(U)-&gt;9 8 </div><div class="line"> 4(U)-&gt;c b 9 </div><div class="line"> 5(U)-&gt;c b a 9 </div><div class="line"> 6(U)-&gt;b 8 </div><div class="line"> 7(V)-&gt;1 </div><div class="line"> 8(V)-&gt;6 3 2 1 </div><div class="line"> 9(V)-&gt;5 4 3 </div><div class="line"> a(V)-&gt;5 1 </div><div class="line"> b(V)-&gt;6 5 4 </div><div class="line"> c(V)-&gt;5 4 2 </div><div class="line"> Maximum Flow Algorithm Process:</div><div class="line">  #1 flow:   1 Augmenting-path: S-&gt;1-&gt;7-&gt;T</div><div class="line">  #2 flow:   1 Augmenting-path: S-&gt;2-&gt;8-&gt;T</div><div class="line">  #3 flow:   1 Augmenting-path: S-&gt;3-&gt;9-&gt;T</div><div class="line">  #4 flow:   1 Augmenting-path: S-&gt;4-&gt;b-&gt;T</div><div class="line">  #5 flow:   1 Augmenting-path: S-&gt;5-&gt;a-&gt;T</div><div class="line">  #6 flow:   1 Augmenting-path: S-&gt;6-&gt;8-&gt;2-&gt;c-&gt;T</div><div class="line"> Maximum Flow Graph:</div><div class="line">   1: -&gt;7(1)	</div><div class="line">   2: -&gt;8(1)	-&gt;c(1)	</div><div class="line">   3: -&gt;9(1)	</div><div class="line">   4: -&gt;b(1)	</div><div class="line">   5: -&gt;a(1)	</div><div class="line">   6: -&gt;8(1)	</div><div class="line">   7: NULL</div><div class="line">   8: -&gt;2(1)	</div><div class="line">   9: NULL</div><div class="line">   a: NULL</div><div class="line">   b: NULL</div><div class="line">   c: NULL</div><div class="line">  </div><div class="line">Maximum Matching: #6</div><div class="line">  + 1&lt;--&gt;7</div><div class="line">  + 2&lt;--&gt;c</div><div class="line">  + 3&lt;--&gt;9</div><div class="line">  + 4&lt;--&gt;b</div><div class="line">  + 5&lt;--&gt;a</div><div class="line">  + 6&lt;--&gt;8</div></pre></td></tr></table></figure>
<h4 id="最大匹配与最大边独立集"><a href="#最大匹配与最大边独立集" class="headerlink" title="最大匹配与最大边独立集"></a>最大匹配与最大边独立集</h4><ul>
<li>边独立集即一个边集，满足边集中的任意两边不邻接。</li>
<li>极大边独立集(maximal edge independent set)：本身为边独立集，再加入任何边都不是。</li>
<li>最大边独立集(maximum edge independent set)：边最多的边独立集。</li>
<li>边独立数(edge independent number)：最大边独立集的边数。</li>
<li>边独立集又称匹配(matching)，相应的有极大匹配(maximal matching)，最大匹配(maximum matching)，匹配数(matching number)。</li>
</ul>
<h4 id="最大匹配与最小路径覆盖"><a href="#最大匹配与最小路径覆盖" class="headerlink" title="最大匹配与最小路径覆盖"></a>最大匹配与最小路径覆盖</h4><ul>
<li>给定有向图$G=(V, E)$，设$P$是$G$的一个简单路（顶点不相交）的集合。如果$V$中每个顶点恰好在$P$的一条路上，则称$P$是$G$的一个<strong>路径覆盖</strong>。$P$中路径可以从$V$的任何一个顶点开始，长度也是任意的，特别地，可以为0（单个点）。$G$的<strong>最小路径覆盖</strong>是$G$的所含路径条数$|P|$最少的路径覆盖。</li>
<li><strong>最小路径覆盖数＝$G$的点数$|V|$ - 最小路径覆盖$P$中的边的数目</strong>（$P$由边和点组成，且不出现重复点）$\Longrightarrow$ 最小路径覆盖$P$中的边数尽量多，但是又不能让两条边在同一个顶点相交。<ul>
<li>拆点：将每一个顶点$i$拆成两个顶点$U_i$和$V_i$。</li>
<li>根据原图中边的信息，从左半边$U$往右半边$V$引边，所有边的方向都是由$U$到$V$，即如果有边$(u→v)$，则在二分图$G’$中引入边$(U_u→V_v)$。</li>
<li>因此，所转化出的二分图$G’$的最大匹配数则是原图$G$中最小路径覆盖上的边数。因此<strong>最小路径覆盖数＝原图$G$的顶点数 - 二分图$G’$的最大匹配数</strong>便可以得解。</li>
</ul>
</li>
<li>简单证明：<strong>最小路径覆盖数＝$G$的点数$|V|$-$G’$的最大匹配数</strong><ul>
<li>首先，若最大匹配数为0，则二分图$G’$中无边，也就是说图$G$中不存在边，那么显然：最小路径覆盖数=$|V|$ - 最大匹配数=$|V|$ - 0=$|V|$。</li>
<li>若此时增加一条匹配边$(U_u→V_v)$，则在图$G$中，u、v在同一条路径上，最小路径覆盖数减少一个。继续增加匹配边，每增加一条，最小路径覆盖数减少一个，则公式：最小路径覆盖数=|V|-$G’$最大匹配数得证。</li>
</ul>
</li>
<li>提取最小路径覆盖？<ul>
<li>二分图$G’$的最大匹配中的匹配边对应的原图$G$中的边，加上未在边中的顶点，即为最小路径覆盖。 </li>
</ul>
</li>
</ul>
<h4 id="最大匹配与最小点覆盖"><a href="#最大匹配与最小点覆盖" class="headerlink" title="最大匹配与最小点覆盖"></a>最大匹配与最小点覆盖</h4><ul>
<li>顶点覆盖问题：输入一个图$G$和预算$b$，求$b$个能够覆盖到每条边的顶点。</li>
<li>最小覆盖要求用最少的点（假如是二分图，$U$集合或$V$集合的都行），让每条边都至少和其中一个点关联，即假如选了一个点就相当于覆盖了以它为端点的所有边，如何需要选择最少的点来覆盖途图中的所有的边？</li>
<li><strong>König定理</strong>：一个二分图中的最大匹配数等于这个图中的最小点覆盖数。<br><center><img src="/img/Algorithms/0016_Bigraph3.png" width="480px" alt=""/></center><ul>
<li>如上图，我们已经通过上述的匈牙利算法求出了最大匹配数：$M=3$，最大匹配：$(A→G)、(B→H)、(D→I)$。</li>
<li>匈牙利算法需要我们从左半边$U$的某个没有匹配的点，走出一条使得“一条没被匹配、一条已经匹配过，再下一条又没匹配这样交替地出现”的路（交错轨，增广轨）。但是，现在我们已经找到了最大匹配，已经不存在这样的路了。换句话说，我们能寻找到很多可能的增广路，但最后都以找不到“终点是还没有匹配过的点”而失败（如上图$[E→B→H→D→I]$和$[F→B→H→D→I]$）。我们给所有这样的点打上记号（用<font color="red">“√”</font>表示）：从右半边$V$（从左半边$U$出发的增广路径已经在匈牙利算法中搜索过，重复显然没有意义）的所有没有匹配过的点出发，按照增广轨“交替出现”的要求可以走到的所有点（最后走出的路径是很多条不完整的增广路），我们将这些点一一打上标记。</li>
<li>那么这些点（红色矩形圈出来的点）组成了最小点覆盖点集：<strong>右边所有没有打上记号的点，加上左边已经有记号的点</strong>。</li>
</ul>
</li>
<li><strong>König定理</strong>简单证明<ul>
<li>首先，为什么这样得到的点集，点的个数恰好有$M$个呢？<ul>
<li>答案很简单，因为这样得到的点集中的每个点都是某条匹配边的其中一个端点。<ul>
<li><strong>右边所有没有打上<font color="red">“√”</font>的点和左边已经有<font color="red">“√”</font>的点</strong>一定都是匹配边的端点。<ul>
<li>如果右半边的哪个点是没有匹配过的，那么它早就当成起点被标记了。</li>
<li>如果左半边的哪个点是没有匹配过的，那就走不到它那里去，否则就找到了一条完整的增广路径，与已经求出最大匹配矛盾。</li>
</ul>
</li>
<li>一条匹配边不可能左端点是标记了的，同时右端点是没标记的，不然的话右边的点就可以经过这条匹配边到达了（右半边到左半边通过非匹配边/左半边到右半边通过匹配边）。</li>
</ul>
</li>
<li>因此，最后我们圈起来的点数与匹配边数。</li>
</ul>
</li>
<li>其次，为什么这样得到的点集可以覆盖所有的边呢？<ul>
<li>答案同样简单。不可能存在某一条边，它的左端点是没有标记的，而右端点是有标记的。<ul>
<li>如果这条边不属于匹配边，那么左端点就可以通过这条边到达（右半边到左半边通过非匹配边/左半边到右半边通过匹配边），从而得到标记。</li>
<li>如果这条边属于我们的匹配边，那么右端点不可能是一条路径的起点，于是它的标记只能是从这条边的左端点过来的（匹配边的右端点不可能作为起点被标记），左端点就应该有标记。</li>
</ul>
</li>
</ul>
</li>
<li>最后，为什么这样得到的点集是最小的点覆盖集呢？<ul>
<li>这当然是最小的，不可能有比$M$还小的点覆盖集了，因为要覆盖这$M$条匹配边至少就需要$M$个点（匹配边互不相交）。</li>
</ul>
</li>
</ul>
</li>
<li>提取最小点覆盖？<ul>
<li>通过上述的方法对二分图$G$中的顶点进行标记，<strong>$V$中所有没有被打上记号的点，加上$U$中已经有记号的点</strong>，即为最小点覆盖。</li>
</ul>
</li>
</ul>
<h4 id="最大匹配与最大独立数"><a href="#最大匹配与最大独立数" class="headerlink" title="最大匹配与最大独立数"></a>最大匹配与最大独立数</h4><ul>
<li>独立集问题：给定一个图和整数$g$，目标是求图中的$g$个相互独立的顶点，即在任意两个这样的顶点间都不存在相连的边（或者说导出的子图是零图（没有边）的点集）。</li>
<li>简单证明：<strong>二分图最大独立集=顶点数-二分图最大匹配</strong><br><center><img src="/img/Algorithms/0016_Bigraph3MaxIndependentSet.png" width="480px" alt=""/></center><ul>
<li>上图，我们用红圈圈住的三个点（$B$、$D$、$G$）覆盖了所有边，这是我们证明的前提条件：已经达到最小覆盖，即条件①已经覆盖所有边；条件②所用的点数最小。</li>
<li>首先我们来证明其余点（$A$、$C$、$E$、$F$、$H$、$I$）组成的是一个独立集。<ul>
<li>如果有两个蓝圈点间有边相连，那么这条边则没有被覆盖，则与条件①矛盾，因此是独立集。</li>
</ul>
</li>
<li>再来证明这个独立集是最大的。<ul>
<li>如果我们要再增加这个独立集中的点，则需要把某个红圈点变成蓝圈点。而由<strong>最小覆盖数=最大匹配数</strong>的证明我们知道，每一个红圈点是最大匹配中的一个匹配点，也就是说每个红圈点至少连接了一条边。因此当我们将某个红圈点变成蓝圈点时，我们需要牺牲的蓝圈点的个数是≥1的。也就是说，我们最多只能找到顶点数量相等的其他独立集，而无法找到数量更大的。因此蓝圈点集必定为最大独立集。</li>
<li>蓝圈点数 = 总点数 - 红圈点数，即最大独立集=顶点数 - 最小覆盖集。</li>
</ul>
</li>
<li>上面已经证明的<strong>König定理：最小点覆盖数=最大匹配数</strong>，故有<strong>二分图最大独立数=顶点数-二分图最大匹配数</strong>。</li>
</ul>
</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://liam0205.me/2016/04/03/Hungarian-algorithm-in-the-maximum-matching-problem-of-bigraph/">二分图最大匹配问题与匈牙利算法的核心思想</a></li>
<li><a href="http://blog.csdn.net/hackbuteer1/article/details/7398008">二分图的最大匹配</a></li>
<li><a href="http://blog.csdn.net/smartxxyx/article/details/9672181">图的匹配问题与最大流问题(五)——计算二分图的最大匹配</a></li>
<li><a href="https://www.renfei.org/blog/bipartite-matching.html">二分图的最大匹配、完美匹配和匈牙利算法</a></li>
<li><a href="http://www.cnblogs.com/pony1993/archive/2012/07/25/2607738.html">二分图的最大匹配—匈牙利算法</a></li>
<li><a href="http://www.matrix67.com/blog/archives/116">二分图最大匹配的König定理及其证明</a></li>
<li><a href="http://dsqiu.iteye.com/blog/1689505">二分图大讲堂——彻底搞定最大匹配数（最小覆盖数）、最大独立数、最小路径覆盖、带权最优匹配</a></li>
<li><a href="http://m.blog.csdn.net/article/details?id=50011363">最大独立集=总数-最小覆盖集证明</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0015] Union Find Set（并查集）]]></title>
      <url>/2017/06/01/Algorithms_UnionFindSet/</url>
      <content type="html"><![CDATA[<h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><ul>
<li>并查集：并查集处理的是集合之间的关系，即 union，find。在这种数据类型中，N个不同元素被分成若干个组，每组是一个集合，这种集合叫做分离集合。并查集支持查找一个元素所属的集合和两个元素分别所属的集合的合并。注意：并查集只能进行合并操作，不能进行分割操作。</li>
<li>并查集支持以下操作：<ul>
<li><code>makeset(x)</code>：创建一个仅包含 x 的独立集合（分离集）；最初每个节点单独构成了一个分离集 ==&gt; 一组分离集</li>
<li><code>find(x)</code>：不断重复地检验节点对，判断其是否属于同一个集合？</li>
<li><code>union(x, y)</code>：每当增加了一条边，将与之相关的两个集合合并。<a id="more"></a></li>
</ul>
</li>
<li>并查集的实现原理<ul>
<li>并查集是使用树结构实现的<ul>
<li>初始化：准备 N 个节点来表示 N 个元素，最开始没有边。</li>
<li>为避免树的退化，对于每棵树，记录其高度 rank。</li>
<li>查询：查询两个节点是否在同一个集合，只需要查询他们是否具有相同的根。<center><img src="/img/Algorithms/0007_UnionFind_find.png" width="340px"/></center></li>
<li>合并：从一个分离集的根向另一个分离集的根连边，这样两棵树就变为了一棵树，也就把两个集合合并为一个了；除非将要合并的树等高，否则将不会出现合并后总高度增加的情形；如果合并时两棵树高度不同，那么从 rank 小的向 rank 大的连边。<center><img src="/img/Algorithms/0007_UnionFind_union.png" width="580px"/></center></li>
<li>路径压缩：每次 find 操作中，当循着一系列的父指针最终找到树的根后，改变所有这些父指针的目标，使其直接指向树根。<br><center><img src="/img/Algorithms/0007_UnionFind_find2.png" width="420px"/></center><ul>
<li>通过路径压缩，所有节点的等级都不会发生改变；节点的 rank 不再能解释为其下方子树的高度</li>
<li>union 操作只关注树的顶层，路径压缩不会对 union 操作产生影响，它将保持树的顶层不变</li>
<li>find 操作（不论是否采用路径压缩）仅仅触及树的内部</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><figcaption><span>并查集实现</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span>		<span class="comment">/* assert */</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">class</span> UnionFindSets &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> PI[MAX_VERTEX_NUM];</div><div class="line">    <span class="keyword">int</span> rank[MAX_VERTEX_NUM];</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    UnionFindSets(<span class="keyword">int</span> size) &#123;</div><div class="line">    	<span class="keyword">this</span>-&gt;size = size;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> vertexIdx=<span class="number">0</span>; vertexIdx&lt;size; vertexIdx++) &#123;</div><div class="line">    		PI[vertexIdx] = <span class="number">-1</span>;</div><div class="line">    		rank[vertexIdx] = <span class="number">-1</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeset</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	PI[x] = x;</div><div class="line">    	rank[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	</div><div class="line">        <span class="comment">// cout &lt;&lt; "&lt;find&gt;:" &lt;&lt; endl; </span></div><div class="line">        <span class="comment">// cout &lt;&lt; "\tPI[" &lt;&lt; x &lt;&lt; "]: " &lt;&lt; PI[x] &lt;&lt; endl;</span></div><div class="line">        <span class="comment">/*</div><div class="line">         * find(PI[x]): backtracking, finding the root node</div><div class="line">         * PI[x]=&lt;backtracking result&gt;: </div><div class="line">         *	directly connect the leaf node to the root node to achieve path compression</div><div class="line">         */</span></div><div class="line">        <span class="keyword">if</span>(x != PI[x]) &#123;</div><div class="line">        	PI[x] = find(PI[x]);</div><div class="line">        &#125;</div><div class="line">    	<span class="keyword">return</span> PI[x];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	assert(y &gt;= <span class="number">0</span> &amp;&amp; y &lt; size);</div><div class="line">        <span class="comment">// cout &lt;&lt; "&lt;unite&gt;: " &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">int</span> rx = find(x);</div><div class="line">        <span class="keyword">int</span> ry = find(y);</div><div class="line">        <span class="comment">// cout &lt;&lt; "\t" &lt;&lt; x &lt;&lt; "["  &lt;&lt; rx &lt;&lt; "]" &lt;&lt; y &lt;&lt; "[" &lt;&lt; ry &lt;&lt; "]" &lt;&lt; endl;</span></div><div class="line">    	assert(rx &gt;= <span class="number">0</span> &amp;&amp; rx &lt; size);</div><div class="line">    	assert(ry &gt;= <span class="number">0</span> &amp;&amp; ry &lt; size);</div><div class="line">        <span class="keyword">if</span>(rx == ry) &#123;</div><div class="line">        	<span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(rank[rx] &gt; rank[ry]) &#123;</div><div class="line">        	PI[ry] = rx;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            PI[rx] = ry;</div><div class="line">            <span class="keyword">if</span>(rank[rx] == rank[ry]) &#123;</div><div class="line">            	rank[ry] += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printset</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;Union&amp;Find set&gt;: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">    		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\tPI["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: "</span> &lt;&lt; PI[i]</div><div class="line">    			 &lt;&lt; <span class="string">"   "</span></div><div class="line">    			 &lt;&lt; <span class="string">"rank["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: "</span> &lt;&lt; rank[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h4><ul>
<li>Kruskal 最小生成树算法<br><center><img src="/img/Algorithms/0007_KruskalPseudo.png" width="720px"/></center><ul>
<li>起始于一个空的图。</li>
<li>通过逐条增加边来构造最小生成树：假如在构建最小生成树的过程中，我们已经选择了某些边并在向着正确的方向前进，下一步选择那条边呢？<ul>
<li>不断重复地选择未被选中的边中权重最轻的且不会形成环的一条。<ul>
<li>为保证连接等价类边的权值最短，算法首先对图中所有边按照权值进行排序。按权值由小到大依次选择边</li>
<li>不会形成环：每次选择一条边加入到现有的部分解中 ===&gt; 需要检验每一条侯选边(u-&gt;v) 的端点是否属于不同的连通分量，一旦选定了某条边，则将这条边添加到 MST 并将两个相关的连通分量将被合并。</li>
</ul>
</li>
</ul>
</li>
<li>Kruskal 最小生成树算法关键数据结构：并查集/分离集 (union-find/disjoint sets)<ul>
<li>Kruskal 算法开始有 n 个分别包含一个节点的集合（即 n 个分离集）；随着算法的进展，分离集的个数逐渐减少，直到算法的最后一步，分离集的个数变为 1，此时产生最小生成树。</li>
</ul>
</li>
</ul>
</li>
<li>基于并查集的 Kruskal 算法实现：</li>
</ul>
<figure class="highlight cpp"><figcaption><span>Kruskal 最小生成树</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>		<span class="comment">/* stdin */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>		<span class="comment">/* INT_MAX */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span>		<span class="comment">/* assert */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>			<span class="comment">/* priority_queue */</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line">  </div><div class="line"><span class="keyword">class</span> UnionFindSets &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> PI[MAX_VERTEX_NUM];</div><div class="line">    <span class="keyword">int</span> rank[MAX_VERTEX_NUM];</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    UnionFindSets(<span class="keyword">int</span> size) &#123;</div><div class="line">    	<span class="keyword">this</span>-&gt;size = size;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> vertexIdx=<span class="number">0</span>; vertexIdx&lt;size; vertexIdx++) &#123;</div><div class="line">    		PI[vertexIdx] = <span class="number">-1</span>;</div><div class="line">    		rank[vertexIdx] = <span class="number">-1</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeset</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	PI[x] = x;</div><div class="line">    	rank[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">        <span class="comment">// cout &lt;&lt; "&lt;find&gt;:" &lt;&lt; endl; </span></div><div class="line">        <span class="comment">// cout &lt;&lt; "\tPI[" &lt;&lt; x &lt;&lt; "]: " &lt;&lt; PI[x] &lt;&lt; endl;</span></div><div class="line">        <span class="comment">/*</div><div class="line">         * find(PI[x]): backtracking, finding the root node</div><div class="line">         * PI[x]=&lt;backtracking result&gt;: </div><div class="line">         *	directly connect the leaf node to the root node to achieve path compression</div><div class="line">         */</span></div><div class="line">        <span class="keyword">if</span>(x != PI[x]) &#123;</div><div class="line">        	PI[x] = find(PI[x]);</div><div class="line">        &#125;</div><div class="line">    	<span class="keyword">return</span> PI[x];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	assert(y &gt;= <span class="number">0</span> &amp;&amp; y &lt; size);</div><div class="line">        <span class="comment">// cout &lt;&lt; "&lt;unite&gt;: " &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">int</span> rx = find(x);</div><div class="line">        <span class="keyword">int</span> ry = find(y);</div><div class="line">        <span class="comment">// cout &lt;&lt; "\t" &lt;&lt; x &lt;&lt; "["  &lt;&lt; rx &lt;&lt; "]" &lt;&lt; y &lt;&lt; "[" &lt;&lt; ry &lt;&lt; "]" &lt;&lt; endl;</span></div><div class="line">    	assert(rx &gt;= <span class="number">0</span> &amp;&amp; rx &lt; size);</div><div class="line">    	assert(ry &gt;= <span class="number">0</span> &amp;&amp; ry &lt; size);</div><div class="line">        <span class="keyword">if</span>(rx == ry) &#123;</div><div class="line">        	<span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(rank[rx] &gt; rank[ry]) &#123;</div><div class="line">        	PI[ry] = rx;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            PI[rx] = ry;</div><div class="line">            <span class="keyword">if</span>(rank[rx] == rank[ry]) &#123;</div><div class="line">            	rank[ry] += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printset</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;Union&amp;Find set&gt;: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">    		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\tPI["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: "</span> &lt;&lt; PI[i]</div><div class="line">    			 &lt;&lt; <span class="string">"   "</span></div><div class="line">    			 &lt;&lt; <span class="string">"rank["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: "</span> &lt;&lt; rank[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">   </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  <span class="keyword">int</span> vertexIdx;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="comment">// cost for VertexNode to reach current MST</span></div><div class="line">  <span class="keyword">int</span> cost;</div><div class="line">  <span class="comment">// recording the pre-visit VertexNode in the path --&gt; restore a MST</span></div><div class="line">  VertexNode* prev;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">struct</span> Edge &#123;</div><div class="line">  <span class="keyword">int</span> fromIdx, toIdx;</div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Edge&amp; right) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> weight &gt; right.weight;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line">   </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].vertexIdx = i;</div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].prev = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="function">UnionFindSets <span class="title">sets</span><span class="params">(g.vertexNum)</span></span>;</div><div class="line">  <span class="comment">// use priority_queue for sorting the edges E by weight</span></div><div class="line">  priority_queue&lt;Edge&gt; EdgeQueue;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    sets.makeset(g.VertexNodes[i].vertexIdx);</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      Edge e;</div><div class="line">      e.fromIdx = g.VertexNodes[i].vertexIdx;</div><div class="line">      e.toIdx = head-&gt;adjVertexIdx;</div><div class="line">      e.weight = head-&gt;weight;</div><div class="line">      EdgeQueue.push(e);</div><div class="line"></div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nMST constructing: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">while</span>(!EdgeQueue.empty()) &#123;</div><div class="line">    Edge e = EdgeQueue.top();</div><div class="line">    EdgeQueue.pop();</div><div class="line">    <span class="comment">// cout &lt;&lt; "\npop: " &lt;&lt; e.fromIdx &lt;&lt; "-&gt;" &lt;&lt; e.toIdx &lt;&lt; "(" &lt;&lt; e.weight &lt;&lt; ")" &lt;&lt; endl;</span></div><div class="line">    <span class="keyword">if</span>(sets.find(e.fromIdx) != sets.find(e.toIdx)) &#123;</div><div class="line">      <span class="comment">/*</div><div class="line">       * 2 edges with same vertex in an undirect graph</div><div class="line">       *	but every VertexNode can only have on prev.</div><div class="line">       */</span></div><div class="line">      <span class="keyword">if</span>(g.VertexNodes[e.toIdx].prev != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      g.VertexNodes[e.toIdx].prev = &amp;g.VertexNodes[e.fromIdx];</div><div class="line">      g.VertexNodes[e.toIdx].cost = e.weight;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[e.fromIdx].data &lt;&lt; <span class="string">"--&gt;"</span> &lt;&lt; g.VertexNodes[e.toIdx].data</div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; e.weight &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      sets.unite(e.fromIdx, e.toIdx);</div><div class="line">      <span class="comment">// sets.printset();</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMST</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> cost = <span class="number">0</span>;</div><div class="line">  <span class="comment">// MST always starts from 0</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=g.vertexNum<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[i].prev != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"&lt;--"</span> &lt;&lt; g.VertexNodes[i].prev-&gt;data</div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; g.VertexNodes[i].cost &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">       cost += g.VertexNodes[i].cost;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"   cost: "</span> &lt;&lt; cost &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  freopen(<span class="string">"Prim.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line">  </div><div class="line">  Kruskal(g);</div><div class="line">   </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Minimum Spanning Tree: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  PrintMST(g);</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>构建并运行，结果如下：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ g++ Kruskal.cpp -o Kruskal</div><div class="line">$ ./Kruskal </div><div class="line">The adjacent list <span class="keyword">for</span> graph is:</div><div class="line"> 0-&gt;7(8) 1(4) </div><div class="line"> 1-&gt;2(8) 0(4) </div><div class="line"> 2-&gt;8(2) 5(4) 3(7) 1(8) </div><div class="line"> 3-&gt;5(14) 4(9) 2(7) </div><div class="line"> 4-&gt;5(10) 3(9) </div><div class="line"> 5-&gt;6(2) 4(10) 3(14) 2(4) </div><div class="line"> 6-&gt;8(6) 7(1) 5(2) </div><div class="line"> 7-&gt;8(7) 6(1) 0(8) </div><div class="line"> 8-&gt;7(7) 6(6) 2(2) </div><div class="line"> </div><div class="line">MST constructing: </div><div class="line">  + 6--&gt;7(1)</div><div class="line">  + 5--&gt;6(2)</div><div class="line">  + 8--&gt;2(2)</div><div class="line">  + 2--&gt;5(4)</div><div class="line">  + 1--&gt;0(4)</div><div class="line">  + 2--&gt;3(7)</div><div class="line">  + 2--&gt;1(8)</div><div class="line">  + 3--&gt;4(9)</div><div class="line"> </div><div class="line">Minimum Spanning Tree: </div><div class="line">  + 7&lt;--6(1)</div><div class="line">  + 6&lt;--5(2)</div><div class="line">  + 5&lt;--2(4)</div><div class="line">  + 4&lt;--3(9)</div><div class="line">  + 3&lt;--2(7)</div><div class="line">  + 2&lt;--8(2)</div><div class="line">  + 1&lt;--2(8)</div><div class="line">  + 0&lt;--1(4)</div><div class="line">   cost: 37</div></pre></td></tr></table></figure>
<ul>
<li>整棵最小生成树的构建过程如下：<center><img src="/img/Algorithms/0007_MSTKruskal.png" width="640px"/></center>

</li>
</ul>
<h4 id="Number-of-Islands"><a href="#Number-of-Islands" class="headerlink" title="Number of Islands"></a><a href="https://leetcode.com/problems/number-of-islands/#/description">Number of Islands</a></h4><p>　下面使用并查集解决 <strong>岛屿数量</strong> 问题，该问题描述如下：</p>
<blockquote>
<p>　Given a 2d grid map of <strong>‘1’</strong>s (land) and <strong>‘0’</strong>s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. <strong>You may assume all four edges of the grid are all surrounded by water</strong>.</p>
<ul>
<li><code>Example 1</code>:<br>　11110<br>　11010<br>　11000<br>　00000<br>Answer: 1</li>
<li><code>Example 2</code>:<br>　11000<br>　11000<br>　00100<br>　00011<br>Answer: 3</li>
</ul>
</blockquote>
<ul>
<li>问题分析<ul>
<li>问题实际就是寻找 0-1 2d 网格中由 1 表示的 land 的连通区域块的数目，所以首先是如何确定一个连通区域块，确定之后即可统计整个网格中的块数目即可。</li>
<li>可以通过 DFS 确定寻找连通区域块：由上至下/从左及右从一块 land 开始，向右/向下进行 DFS 遍历，当遍历结束时，即到达本岛屿的每一块 land，可以寻找下一块岛屿；为了避免重复遍历，需要将每一块 land 打上标签，标注已属于某个岛屿。</li>
<li>一个岛屿即为一个集合，通过遍历每块 land，通过集合的并操作将 land 依次并入各岛屿集合，最终统计岛屿集合的数目即可。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><figcaption><span>Number of Islands</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> UnionFindSets &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; PI;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rank;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    UnionFindSets(<span class="keyword">int</span> size) &#123;</div><div class="line">        PI.resize(size);</div><div class="line">        rank.resize(size);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">            PI[i] = <span class="number">-1</span>;</div><div class="line">            rank[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeset</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        PI[x] = x;</div><div class="line">        rank[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(PI[x] &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(x != PI[x]) &#123;</div><div class="line">            PI[x] = find(PI[x]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> PI[x];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> rx = find(x);</div><div class="line">        <span class="keyword">int</span> ry = find(y);</div><div class="line">        <span class="keyword">if</span>(rx==<span class="number">-1</span> || ry==<span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(rx == ry) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(rank[rx] &gt; rank[ry]) &#123;</div><div class="line">            PI[ry] = rx;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            PI[rx] = ry;</div><div class="line">            <span class="keyword">if</span>(rank[rx] == rank[ry]) &#123;</div><div class="line">                rank[ry] += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(grid.empty()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> rowSize = grid.size();</div><div class="line">        <span class="keyword">int</span> colSize = grid[<span class="number">0</span>].size();</div><div class="line">        <span class="function">UnionFindSets <span class="title">sets</span><span class="params">(rowSize*colSize)</span></span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;rowSize; row++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;colSize; col++) &#123;</div><div class="line">                <span class="keyword">int</span> gridSetIdx = row*colSize + col;</div><div class="line">                <span class="comment">// water grid not need to make set, still -1</span></div><div class="line">                <span class="keyword">if</span>(grid[row][col] == <span class="string">'0'</span>) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    sets.makeset(gridSetIdx);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// upper grid is land, need to unite for enlarging land</span></div><div class="line">                <span class="keyword">if</span>(row&gt;<span class="number">0</span> &amp;&amp; grid[row<span class="number">-1</span>][col]==<span class="string">'1'</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> upperSetIdx = (row<span class="number">-1</span>)*colSize + col;</div><div class="line">                    sets.unite(gridSetIdx, upperSetIdx);</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// left grid is land, need to unite for enlarging land</span></div><div class="line">                <span class="keyword">if</span>(col&gt;<span class="number">0</span> &amp;&amp; grid[row][col<span class="number">-1</span>]==<span class="string">'1'</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> leftSetIdx = row*colSize + (col<span class="number">-1</span>);</div><div class="line">                    sets.unite(gridSetIdx, leftSetIdx);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// count the number of united sets</span></div><div class="line">        <span class="keyword">int</span> unitedSetNum = <span class="number">0</span>;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; counted;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> setIdx=<span class="number">0</span>; setIdx&lt;rowSize*colSize; setIdx++) &#123;</div><div class="line">            <span class="keyword">int</span> unitedSetIdx = sets.find(setIdx);</div><div class="line">            <span class="keyword">if</span>(unitedSetIdx == <span class="number">-1</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!counted[unitedSetIdx]) &#123;</div><div class="line">                unitedSetNum++;</div><div class="line">                counted[unitedSetIdx] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> unitedSetNum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>代码实现细节<ul>
<li><strong>“0”</strong> 网格（water）不作为并查集合元素，每一个 <strong>“1”</strong> 网格（land）一开始为一个集合。</li>
<li>如果一个网格为 <strong>“1”</strong> ，那这个网格和它左方/上方为 <strong>“1”</strong> 的网格属于一个连通块，并到一个集合。</li>
<li>最后，遍历并查集合中的每个元素（忽略了 water 未初始化集合），对其中存在的集合进行计数。</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0014] Dynamic Programming(V) 一道习题]]></title>
      <url>/2017/05/26/Algorithms_Dynamic%20Programming(V)/</url>
      <content type="html"><![CDATA[<blockquote>
<ul>
<li>Consider the following game. A “dealer” produces a sequence $s_1, …, s_n$ of “cards”, face up, where each card $s_i$ has a value $v_i$. Then two players take turns picking a card from the sequence, but can only pick the first or the last card of the (remaining) sequence. The goal is to collect cards of largest total value. (For example, you can think of the cards as bills of different denominations.) Assume n is even.</li>
</ul>
<a id="more"></a>
<p>　(a) Show a sequence of cards such that it is not optimal for the first player to start by picking up the available card of larger value. That is, the natural greedy strategy is suboptimal.<br>　(b) Give an $O(n^2)$ algorithm to compute an optimal strategy for the first player. Given the initial sequence, your algorithm should precompute in $O(n^2)$ time some information, and then the first player should be able to make each move optimally in $O(1)$ time by looking up the precomputed information.</p>
</blockquote>
<ul>
<li>考虑如下博弈：发牌手准备了一摞扑克牌 $s_1, …, s_n$。从牌面上看，牌 $s_i$ 的价值为 $v_i$。现在两个玩家轮流拿牌，每人每次只能拿最前或最后的一张。玩家的目标是使所拿到的牌总价值最高（不妨想象这些牌都是有面值的筹码）。假设 $n$ 为偶数。<ul>
<li>请给出一个序列，使得先开始的玩家如果采取贪心策略（即每次取走能拿的牌中面值较大的一张），最终的牌总价值并不比另一个玩家大。</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Solution：&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>&#125;</div><div class="line">先手：<span class="number">3</span></div><div class="line">后手：<span class="number">10</span>（先手由于贪心损失最大牌值的一张牌）</div><div class="line">先手：<span class="number">2</span></div><div class="line">后手：<span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>给出一个 $O(n^2)$ 的算法，用于计算先开始玩家的最优策略。给定初始序列，该算法首先利用 $O(n^2)$ 的时间进行预先计算，然后在每次选择时，玩家只需通过查找预先计算的结果即可在 $O(1)$ 内做出最有选择。<br><font color="red">Solution：</font><br>　　$r(i, j)$ 表示在子串 $s[i, j]$ 中进行游戏时所获得的最大分数值（假设对手也总是采取最优的策略），设 $r_i$ 是在子串 $s[i, j]$ 中进行游戏时，先手第一步选择最前一张牌所能得到的分数； $r_j$ 是先手第一步选择最后一张牌所能得到的分数，则有：<br>　　$\begin{cases}<br>r_i = v_i + min(r(i+2, j), r(i+1, j-1))\cr<br>r_j = v_j + min(r(i+1, j-1), r(i, j-2))<br>\end{cases}$，当先手第一步选择最前一张牌后，在第二步的选择中，$r(i+2, j)$ 对应后手第一步选择剩下的最前一张牌，$r(i+1, j-1)$则是后手第一步选择剩下的牌中的最后一张；类似地，当先手第一步选择最后一张牌后，在第二步的选择中，$r(i+1, j-1)$ 对应后手第一步选择剩下的最前一张牌，$r(i, j-2)$则是后手第一步选择了最后一张牌。<br>　　子串的长度 <code>len</code> 从2, 4, …, 初始序列长度 <code>LEN</code>，然后遍历（$i =  0,1,…,LEN-len-1: s[i, i+len]$）所有可能的子串进行如上的预处理。<br>　　为了在 $O(1)$ 内做出最有选择，还需要记录对于每个子串，先手玩家第一步的选择 $c(i, j)：$<br>　　$\begin{cases}<br>if(r_i \gt r_j): c(i, j)=pickfront \cr<br>else: \qquad c(i, j)=pickback<br>\end{cases}$</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0013] 网络流：最大流（Max Flow）问题]]></title>
      <url>/2017/05/19/Algorithms_MaximizingFlow/</url>
      <content type="html"><![CDATA[<h4 id="网络流：最大流问题"><a href="#网络流：最大流问题" class="headerlink" title="网络流：最大流问题"></a>网络流：最大流问题</h4><ul>
<li>所谓网络：<ul>
<li>一个有向图 $G=(V, E)$</li>
<li>G中有两个特殊节点 $s, t \in V$，分别称为 G 中的源点(source) 和汇点(sink)。</li>
<li>G中每条边都有容量 $c_e \lt 0$。</li>
</ul>
</li>
<li>所谓流是指一种特定的输送方式，其中对每条边赋予一个变量 $f_e$，使其满足如下三个基本性质：<a id="more"></a>
<ul>
<li>容量限制(Capacity Constraints)：不超过边的容量，即对所有 $e \in E, 0 \leq f_e \leq c_e$</li>
<li>流量守恒(Flow Conservation)：对于 s 和 t  之外的任意节点 u，输入 u 的流量等于输出 u 的流量（流量是守恒的）：$\sum_{(w, u) \in E} f_{wu} = \sum_{(u, z) \in E} f_{uz} $</li>
<li>斜对称性(Skew Symmetry)：$ f_{uv} = -f_{vu}$</li>
</ul>
</li>
<li>网络流问题（NetWork Flow Problem）<ul>
<li>给定指定的一个有向图，其中有两个特殊的点：源 S 和汇 T，每条边有指定的容量(Capacity)，求满足条件的从 S 到 T 的最大流(MaxFlow)。</li>
</ul>
</li>
<li>最大流<ul>
<li>流的规模为由 s 流向 t 的总流量，由上面的流量的守恒律，其等于离开 s 的流量。</li>
<li>目标函数（最大化）：$ 规模(f) =  \sum_{(s, u) \in E} f_{su} = \sum_{(z, t) \in E} f_{zt} $</li>
</ul>
</li>
<li>其他相关定义<ul>
<li>容量网络(capacity network)&amp;流量网络(flow network)&amp;残留网络(residual network)<ul>
<li>网络就是有源、汇的有向图，关于什么的网络就是指边权的含义是什么。<center><img src="/img/Algorithms/0013_networkGraphSketch.png" width="540px"/></center></li>
<li>容量网络就是关于容量的网络。在求解问题的过程中，容量网络基本是不改变的。</li>
<li>流量网络就是关于流量的网络。在求解问题的过程中，流量网络通常在不断改变，但是总是满足上述三个性质；调整到最后就是最大流网络，同时也可以得到最大流值。</li>
<li>残量网络往往概括了容量网络和流量网络，是最为常用的，残量网络=容量网络-流量网络。</li>
</ul>
</li>
<li>增广路径(Augmenting path)：增广路径顾名思义就是能够增加流量的路径。增广路径 p 是残量网络中一条从源点 s 到汇点 t 的简单路径，在一条增广路径 p 上能够为每条边增加的流量的最大值为路径 p 的 <strong>残存容量(remaining capacity)</strong>：$c_f(p) = min \verb|{| c_f(u,v):(u,v) \in p \verb|}|$</li>
<li>割&amp;割集<ul>
<li>一个无向连通网络，去掉一个边集可以使其变成两个连通分量，则这个边集就是割集<ul>
<li>无向图的割集(Cut Set)：$C[A,B]$ 是将图 G 分为 A 和 B 两个点集（连通分量）的连接 A 和 B 之间的边的全集。</li>
</ul>
</li>
<li>带权图的割(Cut) 就是割集中边或者有向边的权和。<ul>
<li>最小割集当然就是权和最小的割集。</li>
</ul>
</li>
<li>在有向图网络 $G(V, E)$ 中, 割(S, T) 将 V 划分为 S 和 T=V-S，使得 s 属于 S 集合，t 属于 T 集合，割(S, T) 的容量是指从集合 S 到集合 T 所有边的容量之和。<center><img src="/img/Algorithms/0013_cutSketch.png" width="540px"/></center>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="最大流问题与线性规划"><a href="#最大流问题与线性规划" class="headerlink" title="最大流问题与线性规划"></a>最大流问题与线性规划</h4><p>　最大流问题可以转换为线性规划问题，而线性规划问题最著名的解法自然就是 <strong>单纯形法</strong>。这种算法非常奇特，其复杂度为在最坏情况下是指数级的，但其在实践中绝大多数的情况下表现出的效率非常令人满意。</p>
<ul>
<li>设$c_{uv}$ 代表边 u 到 v 最大允许的流量（capacity），$f_{uv}$ 代表 u 到 v 当前流量。</li>
<li>最大流可以表示为：<br>$$<br>  \Large{max}<br>  \normalsize{ \sum_{u:(s, u) \in E} f_{su} \quad }<br>  \Large{s.t.} \normalsize{<br>   \begin{cases} 0 \leq f_{uv} \leq c_{uv}, \forall (u, v) \in E \cr<br>   \sum_{w:(w, u) \in E} f_{wu} - \sum_{v:(u, v) \in E} f_{uv} = 0, \forall u \in V \backslash \verb|{| s, t \verb|}| \end{cases}<br>  }<br>$$</li>
<li>事实上，使用 <strong>单纯形法</strong> 解决网络最大流问题非常直观：<ol>
<li>从零流量开始</li>
<li>重复下述过程：<ul>
<li>选择一条从源点 s 到汇点 t 的合适路径</li>
<li>将该路径的流量增加到无法增加为止</li>
</ul>
</li>
</ol>
</li>
<li>每次迭代单纯形法寻找到 s→t 的一条路径，路径中的边有两种类型（如下图(b)中右图所示，可以同时存在这两种类型的边）：<br>  　　① 边在最初的网络中，且未达到最大流量，如下图(b)右图中的边 <strong>a→d</strong>；<br>  　　② 边的反向边在最初的网络中，如下图(c)右图中的边 <strong>d→a</strong>。<br><center><img src="/img/Algorithms/0013_residualGraphSketch.png" width="540px"/></center><ul>
<li>如果当前的流为 $f$，则对于第①种情况，边 $(u, v)$ 最多还能接受 $c_{uv} - f_{u, v}$ 的多余流量；而在第②种情况，最多增加的流量为 $f_{vu}$（取消 $(v, u)上的全部或部分流量$ ）。</li>
<li>这类增加流量的机会可以由 <strong>残量网络</strong> $G^f=(V, E^f)$ 来判定，该网络包含了所有的以上两种边，并标出了每条边的剩余流量：<br>$$<br>c^f =<br> \begin{cases} c_{uv} - f_{uv}, \quad 若(u, v) \in E 且 f_{uv} \lt c_{uv} \cr<br>f_{vu}, \qquad \quad 若(v, u) \in E 且 f_{uv} \gt 0 \end{cases}<br>$$</li>
</ul>
</li>
</ul>
<h4 id="最大流基本方法（Ford-Fulkerson）"><a href="#最大流基本方法（Ford-Fulkerson）" class="headerlink" title="最大流基本方法（Ford-Fulkerson）"></a>最大流基本方法（Ford-Fulkerson）</h4><ul>
<li>通过模拟单纯形法，我们得到了一个解决最大流问题的直接算法（Ford-Fulkerson）。该算法采取迭代的方式进行，每次先构造一个 $G^f$，然后在 $G^f$ 中寻找 s 到 t 的一条可行的增广（能够继续提高流量的）路径，找不到任何这样的路径时算法停止。</li>
<li>Ford-Fulkerson 方法<ul>
<li>Ford-Fulkerson 方法，即增广路方法，是一种迭代的方法，之所以称之为方法，而不是算法，因为FF(Ford-Fulkerson) 包含不同运行时间的几种实现。</li>
<li>Ford-Fulkerson 方法伪代码如下，解决了以下三个子问题：①<strong>while</strong>：要增广多少次？②<strong>augmenting path</strong>：如何找到一条增广路径？③<strong>update</strong>：如何增广？<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">FORD-FULKERSON-METHOD(G, s, t): </div><div class="line">   initialize flow f to <span class="number">0</span></div><div class="line">   <span class="keyword">while</span> there exists an augmenting path p, path-flow as its remaining capacity</div><div class="line">     <span class="keyword">do</span> augment flow path-flow along p to flow f</div><div class="line">     update residual graph</div><div class="line">   <span class="keyword">return</span> flow f</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>最大流算法 Ford-Fulkerson 方法最优性验证<ul>
<li>最大流最小割定理：设 $f$ 为流网络 $G = (V, E)$ 中的一个流，该流网络的源点为 s，汇点为t，则下面的条件是等价的：<ul>
<li>$f$ 是 $G$ 的一个最大流</li>
<li>残量网络 $G^f$ 不包含任何增广路径</li>
<li>$|f| = |C(S, T)|$，即最大流流量等于割 $C$ 的容量，割 $C=(S, T)$ 是流网络 $G$ 的最小割</li>
</ul>
</li>
<li>找到最大流 $f$ $\Longrightarrow$ 残量网络 $G^f$ 中已经无法找到任何由 s 到 t 的路径 $\Longrightarrow$ $(L, R)$ 为图 $G$ 的一个分割 $\begin{cases} L为 G^f 中 s 可达的所有节点集合 \cr R=V-L 为剩余的节点 \end{cases}$</li>
<li>对于任意流 $f$ 和任意 $(s, t)$ 分割 $(L, R)$，$流量(f) \leq 容量(L, R)$，由最大流最小割定理，最大流算法产生最小割，最小割对应于流的上限，这就是所求得流的最优性的保证。</li>
</ul>
</li>
<li>最大流算法的运行效率<ul>
<li>FORD-FULKERSON-METHOD 每个单次循环都是效率很高的，无论通过使用 <a href="http://durant35.github.io/2017/03/15/Algorithms_DFS/">DFS</a> 还是 <a href="http://durant35.github.io/2017/03/22/Algorithms_BFS/">BFS</a>，每次循环都只需要 $O(|E|)$ 的时间，但问题是，我们一共需要循环多少次呢？可以看出，循环次数的上线是所有边流量的最大值 C（每次循环只能增加 1 个流量），算法最坏情况为 $O(C|E|)$，然而 C 可能是一个很大的值！</li>
<li>采用广度优先搜索将使得找到的增广路径包含最少的边，则不管边的容量如何，C 如何，最终的迭代次数将不超过 $O(|V|·|E|)$（所有可能的路径总和）。因此，通过仔细地选择增广路径，可以将循环次数限制在 $O(|V|·|E|)$ 之内，在这种情况下，整个算法的时间复杂度为 $O(|V|·|E|^2)$。在 FORD-FULKERSON-METHOD 中通过 BFS 搜索增广路径，这就是<strong>Edmonds-Karp</strong> 算法（最短路径增广算法），其算法实现如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MaxFlow.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span>			<span class="comment">/* setw */</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>			<span class="comment">/* stdin */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>			<span class="comment">/* INT_MAX */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="keyword">int</span> capacity;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Alignment-requirement: the first char is expanded to 4(8) bytes in 32-bit(64-bit) machine</span></div><div class="line"><span class="comment">// sizeof(VertexNode) == 16(32)</span></div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  <span class="keyword">int</span> vertexIdx;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, capacity;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].vertexIdx = i;</div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; capacity;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;capacity = capacity;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data </div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;capacity &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(<span class="keyword">const</span> Graph&amp; g, <span class="keyword">int</span>* prevs, <span class="keyword">int</span> toIdx)</span> </span>&#123;</div><div class="line">  <span class="comment">// no previous node ==&gt; reach starting node </span></div><div class="line">  <span class="keyword">if</span> (prevs[toIdx] != <span class="number">-1</span>) &#123;</div><div class="line">    PrintPath(g, prevs, prevs[toIdx]);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[toIdx].data;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span>** graph, <span class="keyword">int</span> vertexNum, <span class="keyword">int</span> fromIdx, <span class="keyword">int</span> toIdx, <span class="keyword">int</span>* prevs)</span> </span>&#123;</div><div class="line">  <span class="comment">// cout &lt;&lt; "BFS" &lt;&lt; endl;</span></div><div class="line">  <span class="comment">// for(int u=0; u&lt;vertexNum; u++) &#123;</span></div><div class="line">  <span class="comment">// 	for(int v=0; v&lt;vertexNum; v++) &#123;</span></div><div class="line">  <span class="comment">// 		if(graph[u][v] &gt; 0) &#123;</span></div><div class="line">  <span class="comment">// 			cout &lt;&lt; u &lt;&lt; "-&gt;" &lt;&lt; v &lt;&lt; "(" &lt;&lt; graph[u][v] &lt;&lt; ") ";</span></div><div class="line">  <span class="comment">// 		&#125;</span></div><div class="line">  <span class="comment">// 	&#125;</span></div><div class="line">  <span class="comment">// 	cout &lt;&lt; endl;</span></div><div class="line">  <span class="comment">// &#125;</span></div><div class="line">  <span class="keyword">bool</span> visited[vertexNum];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> vertexIdx=<span class="number">0</span>; vertexIdx&lt;vertexNum; vertexIdx++) &#123;</div><div class="line">    visited[vertexIdx] = <span class="literal">false</span>;</div><div class="line">    prevs[vertexIdx] = <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; vertexIdxQueue;</div><div class="line">  vertexIdxQueue.push(fromIdx);</div><div class="line">  visited[fromIdx] = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">while</span> (!vertexIdxQueue.empty()) &#123;</div><div class="line">    <span class="keyword">int</span> u = vertexIdxQueue.front();</div><div class="line">    <span class="comment">// cout &lt;&lt; u &lt;&lt; " ";</span></div><div class="line">    <span class="keyword">if</span>(u == toIdx) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    vertexIdxQueue.pop();</div><div class="line"> </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;vertexNum; v++) &#123;</div><div class="line">      <span class="keyword">if</span>(!visited[v] &amp;&amp; graph[u][v] &gt; <span class="number">0</span>) &#123;</div><div class="line">        vertexIdxQueue.push(v);</div><div class="line">        visited[v] = <span class="literal">true</span>;</div><div class="line">        prevs[v] = u;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> visited[toIdx];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FordFulkerson</span><span class="params">(<span class="keyword">const</span> Graph&amp; g, <span class="keyword">const</span> VertexNode&amp; source, <span class="keyword">const</span> VertexNode&amp; sink)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> maxFlow = <span class="number">0</span>;</div><div class="line">  <span class="keyword">int</span> flowGraph[g.vertexNum][g.vertexNum];</div><div class="line">  <span class="comment">// initialize the residual graph</span></div><div class="line">  <span class="keyword">int</span>** residualGraph = <span class="keyword">new</span> <span class="keyword">int</span>*[g.vertexNum];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u&lt;g.vertexNum; u++) &#123;</div><div class="line">    residualGraph[u] = <span class="keyword">new</span> <span class="keyword">int</span>[g.vertexNum];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;g.vertexNum; v++) &#123;</div><div class="line">      residualGraph[u][v] = <span class="number">0</span>;</div><div class="line">      flowGraph[u][v] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> vertexIdx=<span class="number">0</span>; vertexIdx&lt;g.vertexNum; vertexIdx++) &#123;</div><div class="line">    adjVertexNode* head = g.VertexNodes[vertexIdx].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">// cout &lt;&lt; vertexIdx &lt;&lt; "--&gt;" &lt;&lt; head-&gt;adjVertexIdx &lt;&lt; endl;</span></div><div class="line">      residualGraph[vertexIdx][head-&gt;adjVertexIdx] = head-&gt;capacity;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// prevs array for storing the augmenting path</span></div><div class="line">  <span class="keyword">int</span> prevs[g.vertexNum];</div><div class="line">  <span class="keyword">int</span> iter = <span class="number">1</span>;</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">" Maximum Flow Algorithm Process:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="comment">// Augment the flow while there is a path from source to sink</span></div><div class="line">  <span class="keyword">while</span>(BFS(residualGraph, g.vertexNum, source.vertexIdx, sink.vertexIdx, prevs)) &#123;</div><div class="line">    <span class="comment">// find the maximum flow(minimum residual capacity) through the path found</span></div><div class="line">    <span class="keyword">int</span> pathFlow = INT_MAX;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=sink.vertexIdx; v!=source.vertexIdx; v=prevs[v]) &#123;</div><div class="line">      <span class="keyword">int</span> u = prevs[v];</div><div class="line">      <span class="keyword">if</span>(residualGraph[u][v] &lt; pathFlow) &#123;</div><div class="line">        pathFlow = residualGraph[u][v];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// update residual capacities of the edges &amp; reverse edges along the augmenting path</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=sink.vertexIdx; v!=source.vertexIdx; v=prevs[v]) &#123;</div><div class="line">      <span class="keyword">int</span> u = prevs[v];</div><div class="line">      residualGraph[u][v] -= pathFlow;</div><div class="line">      residualGraph[v][u] += pathFlow;</div><div class="line">      <span class="comment">// record flows</span></div><div class="line">      flowGraph[u][v] += pathFlow;</div><div class="line">    &#125;</div><div class="line">    maxFlow += pathFlow;</div><div class="line">    <span class="comment">// print current iteration's info</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t#"</span> &lt;&lt; iter++ &lt;&lt; <span class="string">" flow: "</span> &lt;&lt; setw(<span class="number">3</span>) &lt;&lt; pathFlow &lt;&lt; <span class="string">" Augmenting-path: "</span>;</div><div class="line">    PrintPath(g, prevs, sink.vertexIdx);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// memory release</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="keyword">delete</span>[] residualGraph[i];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">delete</span>[] residualGraph;</div><div class="line"> </div><div class="line">  <span class="comment">// show the flows</span></div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">" Maximum Flow Graph:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">bool</span> noflow;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u&lt;g.vertexNum; u++) &#123;</div><div class="line">    noflow = <span class="literal">true</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"   "</span> &lt;&lt; g.VertexNodes[u].data &lt;&lt; <span class="string">": "</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>; v&lt;g.vertexNum; v++) &#123;</div><div class="line">      <span class="keyword">if</span>(flowGraph[u][v] &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span> &lt;&lt; g.VertexNodes[v].data</div><div class="line">           &lt;&lt; <span class="string">"("</span> &lt;&lt; flowGraph[u][v] &lt;&lt; <span class="string">")\t"</span>;</div><div class="line">        noflow = <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(noflow) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> maxFlow;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> USE_FLOW1</span></div><div class="line">    freopen(<span class="string">"flow1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    freopen(<span class="string">"flow2.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  </div><div class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> USE_FLOW1</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" Maximum Flow: "</span> &lt;&lt; FordFulkerson(g, g.VertexNodes[<span class="number">0</span>], g.VertexNodes[<span class="number">6</span>]) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" Maximum Flow: "</span> &lt;&lt; FordFulkerson(g, g.VertexNodes[<span class="number">0</span>], g.VertexNodes[<span class="number">5</span>]) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><font color="red">算法实现细节分析如下：</font><ul>
<li><code>bool BFS(int** graph, int vertexNum, int fromIdx, int toIdx, int* prevs)</code> 函数通过广度优先搜索算法寻找边数目最少的增广路径，返回值表示能否寻找到这样的一条路径；假如存在这样的一条增广路径，<code>prevs</code> 数组则记录这样的一条增广路径：<strong>toIdx → prevs[toIdx] → prevs[prevs[toIdx]] → … → fromIdx</strong>。</li>
<li><code>residualGraph[u][v]</code> 通过邻接矩阵的方式维护一个残量网络，<code>flowGraph</code>则维护了流量网络的情况。</li>
<li><code>pathFlow</code> 则用于获取每次迭代寻找到的该增广路径的残存容量，用于更新残量网络和流量网络。<code>maxFlow</code> 则保留了最终的最大流量值。</li>
</ul>
</li>
<li>算法运行实例（一）<br>  <center><img src="/img/Algorithms/0013_demoFlow1.png" width="540px"/></center><ul>
<li>上图网络流对应的输入文件 <strong>flow1.txt</strong> 如下：</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">7</span> <span class="number">11</span></div><div class="line">s a b c d e t</div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">3</span></div><div class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">3</span></div><div class="line"><span class="number">0</span> <span class="number">3</span> <span class="number">4</span></div><div class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></div><div class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">10</span></div><div class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span></div><div class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">5</span></div><div class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span></div><div class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></div><div class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">2</span></div><div class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">5</span></div></pre></td></tr></table></figure>
<ul>
<li>编译构建，运行结果如下，过程可视化如上图。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ g++ -DUSE_FLOW1 MaxFlow.cpp -o MaxFlow</div><div class="line">$ ./MaxFlow </div><div class="line">The adjacent list for graph is:</div><div class="line"> s-&gt;c(4) b(3) a(3) </div><div class="line"> a-&gt;d(2) </div><div class="line"> b-&gt;d(1) a(10) </div><div class="line"> c-&gt;e(5) </div><div class="line"> d-&gt;t(2) e(1) c(1) </div><div class="line"> e-&gt;t(5) </div><div class="line"> t-&gt;NULL</div><div class="line"> </div><div class="line"> Maximum Flow Algorithm Process:</div><div class="line">  #1 flow:   2 Augmenting-path: s-&gt;a-&gt;d-&gt;t</div><div class="line">  #2 flow:   4 Augmenting-path: s-&gt;c-&gt;e-&gt;t</div><div class="line">  #3 flow:   1 Augmenting-path: s-&gt;b-&gt;d-&gt;e-&gt;t</div><div class="line"> Maximum Flow Graph:</div><div class="line">   s: -&gt;a(2)	-&gt;b(1)	-&gt;c(4)	</div><div class="line">   a: -&gt;d(2)	</div><div class="line">   b: -&gt;d(1)	</div><div class="line">   c: -&gt;e(4)	</div><div class="line">   d: -&gt;e(1)	-&gt;t(2)	</div><div class="line">   e: -&gt;t(5)	</div><div class="line">   t: NULL</div><div class="line"> Maximum Flow: 7</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li>算法运行实例（二）<br>  <center><img src="/img/Algorithms/0013_demoFlow2.png" width="420px"/></center><ul>
<li>上图网络流对应的输入文件 <strong>flow2.txt</strong> 如下：</li>
</ul>
</li>
<li>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span> <span class="number">10</span></div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">16</span></div><div class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">13</span></div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">10</span></div><div class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">12</span></div><div class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span></div><div class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">14</span></div><div class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">9</span></div><div class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">20</span></div><div class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">7</span></div><div class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">4</span></div></pre></td></tr></table></figure>
<ul>
<li>编译构建，运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ g++ MaxFlow.cpp -o MaxFlow</div><div class="line">$ ./MaxFlow </div><div class="line">The adjacent list for graph is:</div><div class="line"> 0-&gt;2(13) 1(16) </div><div class="line"> 1-&gt;3(12) 2(10) </div><div class="line"> 2-&gt;4(14) 1(4) </div><div class="line"> 3-&gt;5(20) 2(9) </div><div class="line"> 4-&gt;5(4) 3(7) </div><div class="line"> 5-&gt;NULL</div><div class="line"> </div><div class="line"> Maximum Flow Algorithm Process:</div><div class="line">  #1 flow:  12 Augmenting-path: 0-&gt;1-&gt;3-&gt;5</div><div class="line">  #2 flow:   4 Augmenting-path: 0-&gt;2-&gt;4-&gt;5</div><div class="line">  #3 flow:   7 Augmenting-path: 0-&gt;2-&gt;4-&gt;3-&gt;5</div><div class="line"> Maximum Flow Graph:</div><div class="line">   0: -&gt;1(12)	-&gt;2(11)	</div><div class="line">   1: -&gt;3(12)	</div><div class="line">   2: -&gt;4(11)	</div><div class="line">   3: -&gt;5(19)	</div><div class="line">   4: -&gt;3(7)	-&gt;5(4)	</div><div class="line">   5: NULL</div><div class="line"> Maximum Flow: 23</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li>基本概念：<ul>
<li><a href="http://blog.csdn.net/xzz_hust/article/details/22041173">网络流：最大流，最小割 基本概念及算法</a></li>
<li><a href="http://blog.csdn.net/smartxxyx/article/details/9275177">图的匹配问题与最大流问题(一)</a><ul>
<li>最大流问题跟线性规划又是如何产生联系的呢？</li>
</ul>
</li>
</ul>
</li>
<li>算法涉及概念补充：<a href="http://www.jianshu.com/p/1451e70909c8">最大流, 最小割问题及算法实现</a></li>
<li>算法实现细节：<ul>
<li><a href="http://www.cnblogs.com/gaochundong/p/ford_fulkerson_maximum_flow_algorithm.html">Ford-Fulkerson 最大流算法</a></li>
<li><a href="http://blog.csdn.net/smartxxyx/article/details/9293805">图的匹配问题与最大流问题（三）——最大流问题Ford-Fulkerson方法Java实现</a></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CPU 扫盲（核心数/线程数）]]></title>
      <url>/2017/05/16/hsw_CPUWipeoutIlliteracy/</url>
      <content type="html"><![CDATA[<p>　　处理器（CPU）决定了电脑的性能等级，是一个需要考虑的核心因素。CPU 从早期的单核，发展到现在的双核，多核。除了<strong>核心数</strong>之外，还有<strong>线程数</strong>之说，下面会对这两个概念进行扫盲。
　　</p>
<h4 id="CPU-个数"><a href="#CPU-个数" class="headerlink" title="CPU 个数"></a>CPU 个数</h4><p>　CPU 的个数是指物理上，也就是硬件上存在着几颗物理 CPU，指的是真实存在的处理器的个数，1个代表1颗、2个代表2颗 CPU 处理器。<br><a id="more"></a></p>
<h4 id="CPU-核心数"><a href="#CPU-核心数" class="headerlink" title="CPU 核心数"></a>CPU 核心数</h4><p>　一个核心就是一个物理线程，<strong>单核</strong>、<strong>双核</strong>、<strong>多核</strong>，指的就是物理核心的数目。
　　</p>
<h4 id="CPU-线程数"><a href="#CPU-线程数" class="headerlink" title="CPU 线程数"></a>CPU 线程数</h4><p>　CPU 的线程数概念仅仅只针对 Intel 的 CPU 才有用，因为它是通过 Intel 超线程技术来实现的，最早应用在 Pentium4 上。如果没有超线程技术，一个 CPU 核心对应一个线程（因此对于一个CPU，线程数总是大于或等于核心数的）。所以，对于 AMD 的 CPU 来说，只有核心数的概念，没有线程数的概念。<br>　CPU 之所以要增加线程数，是源于多任务处理的需要：线程数越多，越有利于同时运行多个程序，因为线程数等同于在某个瞬间 CPU 能同时并行处理的任务数。<br>　因此，线程数是一种逻辑的概念，简单地说，就是模拟出的 CPU 核心数。一个核心最少对应一个线程，但英特尔有个超线程技术可以把一个物理线程模拟出两个线程来用，充分发挥 CPU 性能，即一个核心可以有两个到多个线程。</p>
<h4 id="Linux-中获取处理器信息"><a href="#Linux-中获取处理器信息" class="headerlink" title="Linux 中获取处理器信息"></a>Linux 中获取处理器信息</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看 cpu 型号</span></div><div class="line">sudo dmidecode <span class="_">-s</span> processor-version</div><div class="line"><span class="comment"># 查看 cpu 个数</span></div><div class="line">grep <span class="string">'physical id'</span> /proc/cpuinfo | sort -u | wc <span class="_">-l</span></div><div class="line"><span class="comment"># 查看核心数</span></div><div class="line">grep <span class="string">'core id'</span> /proc/cpuinfo | sort -u | wc <span class="_">-l</span></div><div class="line"><span class="comment"># 查看线程数</span></div><div class="line">grep <span class="string">'processor'</span> /proc/cpuinfo | sort -u | wc <span class="_">-l</span></div></pre></td></tr></table></figure>
<p>　　</p>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> Architecture </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[一张图带你看 Ubuntu(Linux) 系统启动过程]]></title>
      <url>/2017/05/13/hsw_UbuntuSystemBootSequence/</url>
      <content type="html"><![CDATA[<p><center><img src="/img/hsw/BootProcess4Ubuntu.png" width="1600px"/></center><br><a id="more"></a></p>
<h3 id="计算机系统的启动过程"><a href="#计算机系统的启动过程" class="headerlink" title="计算机系统的启动过程"></a>计算机系统的启动过程</h3><blockquote>
<p><a href="https://blog.auroraka.com/2017/02/02/%e5%a4%9a%e7%b3%bb%e7%bb%9f%e6%8a%98%e8%85%be%e8%ae%b0/">Auroraka’s Blog：多系统折腾记——总结</a></p>
</blockquote>
<ol>
<li>计算机通电</li>
<li>CPU读取内置ROM芯片中的数据，BIOS或UEFI进行系统自检，并按照预先设置的优先级依次尝试寻找各储存器，并将控制权交给该储存设备(硬盘)</li>
<li>如果是BIOS启动，系统确定储存器分区表的分区以及操作系统所在的分区，并将控制权转交给操作系统。如果是EFI启动，系统首先确定分区表的分区，接着寻找文件系统格式为FAT32的分区，并按照其中的内容启动EFI系统，接着按照情况启动操作系统的boot loader，将控制权转交给操作系统</li>
<li>操作系统启动</li>
</ol>
<p>　　</p>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> Architecture </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0012] Dynamic Programming(IV)（Longest Palindromic Subsequence）]]></title>
      <url>/2017/05/12/Algorithms_LongestPalindromicSubsequence/</url>
      <content type="html"><![CDATA[<p>　所谓 <strong>回文（palindrome）</strong>，指的是正读和反读都是一样的。而 <strong>字符子串</strong> 和 <strong>字符子序列</strong> 的区别，在前面 <a href="http://durant35.github.io/2017/05/03/Algorithms_LongestCommonSubsequence/">算法设计与分析[0011] Dynamic Programming(III)（Longest Common Subsequence）</a> 中也有提到过，字符字串指的是字符串中连续的n个字符，而字符子序列指的是字符串中不一定连续但先后顺序与原字符串一致的n个字符。<br><a id="more"></a></p>
<h4 id="最长回文字符串"><a href="#最长回文字符串" class="headerlink" title="最长回文字符串"></a>最长回文字符串</h4><ul>
<li><a href="https://leetcode.com/problems/longest-palindromic-substring/#/description">5. Longest Palindromic Substring</a> 题目描述如下：<blockquote>
<p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.<br>> Example:<br>　Input: “babad”<br>　Output: “bab”<br>Note: “aba” is also a valid answer.<br>> Example:<br>　Input: “cbbd”<br>　Output: “bb”</p>
</blockquote>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = s.size();</div><div class="line">        <span class="comment">/*</div><div class="line">         * isPalindrome[i][j]: str[i...j] is a palindrome substring</div><div class="line">         * n ≤ 1000</div><div class="line">         */</span></div><div class="line">        <span class="keyword">bool</span> isPalindrome[n][n] = &#123;<span class="literal">false</span>&#125;;</div><div class="line">        <span class="comment">// &lt;1&gt; palindrome substring with length 2, a single char is a palindrome substring</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> strIdx=<span class="number">0</span>; strIdx&lt;n; strIdx++) &#123;</div><div class="line">            isPalindrome[strIdx][strIdx] = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// longest palindrome substring s[longestStartIdx,longestStartIdx+longestLen-1] with length:longestLen</span></div><div class="line">        <span class="keyword">int</span> longestStartIdx=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> longestLen = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// &lt;2&gt; palindrome substring with length 2</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> strIdx=<span class="number">0</span>; strIdx&lt;n<span class="number">-1</span>; strIdx++) &#123;</div><div class="line">            <span class="keyword">if</span>(s[strIdx+<span class="number">1</span>] == s[strIdx]) &#123;</div><div class="line">                isPalindrome[strIdx][strIdx+<span class="number">1</span>] = <span class="literal">true</span>;</div><div class="line">                longestLen = <span class="number">2</span>;</div><div class="line">                longestStartIdx = strIdx;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// &lt;3&gt; palindrome substring with length:len</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">3</span>; len&lt;=n; len++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> strIdx=<span class="number">0</span>; strIdx&lt;=n-len; strIdx++) &#123;</div><div class="line">                <span class="keyword">int</span> endIdx = strIdx+len<span class="number">-1</span>;</div><div class="line">                <span class="keyword">if</span>(s[endIdx] == s[strIdx] &amp;&amp; isPalindrome[strIdx+<span class="number">1</span>][endIdx<span class="number">-1</span>]) &#123;</div><div class="line">                    isPalindrome[strIdx][endIdx] = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">if</span>(len &gt; longestLen) &#123;</div><div class="line">                        longestLen = len;</div><div class="line">                        longestStartIdx = strIdx;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> s.substr(longestStartIdx, longestLen);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>代码实现细节<ul>
<li><code>isPalindrome[i][j]</code>：字符子串 $s[i][j]$ 是否是回文子串？</li>
<li>动态规划过程：依次遍历长度为 $1, 2, …, len, …, n(本题: \leq 1000)$ 的所有子串，判断子串 $s[strIdx, strIdx+len-1], strIdx \in [0, n-len]$ 是否为回文子串<ul>
<li>动态规划初始化①：长度为 1 的子串均为回文子串，即 $\qquad isPalindrome[i][i]=true, i \in [0, n)$</li>
<li>动态规划初始化②：长度为 2 的子串，相邻两个字符相同的子串也为回文子串，即 $\begin{cases} if(s[i] == s[i+1]): \cr \quad isPalindrome[i][i+1]=true \cr else: \cr \quad isPalindrome[i][i+1]=false \end{cases} i \in [0, n-1)$</li>
<li>动态规划填表过程 $isPalindrome[i][j]$：$\begin{cases} for 　 len=3, …, n: \cr \quad for 　 i=0, 1, …, n-len: \cr \qquad j=i+len-1 \cr \qquad if(s[i] == s[j] \&amp;\&amp; isPalindrome[i+1][j-1]): \cr \qquad \quad isPalindrome[i][j]=true \cr \qquad else: \cr \qquad \quad isPalindrome[i][j]=false \end{cases}$</li>
</ul>
</li>
<li>在动态规划过程，通过变量 <code>longestLen</code>记录在动态规划过程中发现的最长回文子串长度及该子串在原始子串中的起始下标 <code>longestStartIdx</code>。</li>
</ul>
</li>
<li><font color="blue">提取最长回文子串</font><ul>
<li>最终得到最长回文子串：$\qquad s[longestStartIdx…longestStartIdx+longestLen-1] $</li>
</ul>
</li>
</ul>
<h4 id="最长回文子序列"><a href="#最长回文子序列" class="headerlink" title="最长回文子序列"></a>最长回文子序列</h4><p>　对于任意字符子串，如果头尾字符相同：①由于子字符串必须是连续的，只有在该字符子串除去头尾字符后剩下的部分是回文的，该子字符串才是回文子串；②子序列，因为可以不连续，要求更宽松了，这种情况下，该子字符串存在一个长度至少为2的回文子序列，至于最长子序列，还要加上去掉首尾字符的字符串的最长子序列；<br>　如果首尾字符不同：①该子字符串一定不是回文子串；②对于最长回文子序列，为了尽可能增加长度（也许第二个字符正好与末尾字符相同/也许倒数第二个字符正好与首字符相同），最长回文子序列在去掉头的子字符串的最长回文子序列和去掉尾的子字符串的最长回文子序列中产生，为长度较大者。</p>
<ul>
<li><a href="https://leetcode.com/problems/longest-palindromic-subsequence/#/description">[516. Longest Palindromic Subsequence]</a> 解题思路<br>　基于上述思路，很容易想到如下的递归实现，不过由于递归中出现的多余计算、频繁的函数调用，在 leetcode 上提交会有：<strong>Time Limit Exceeded</strong> 超时错误。</li>
<li>  <figure class="highlight cpp"><figcaption><span>递归实现</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b?a:b)</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lps</span><span class="params">(<span class="keyword">char</span>* str, <span class="keyword">int</span> fromIdx, <span class="keyword">int</span> toIdx)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(fromIdx==toIdx) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(str[fromIdx] == str[toIdx]) &#123;</div><div class="line">        <span class="keyword">if</span>(toIdx-fromIdx==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lps(str, fromIdx+<span class="number">1</span>, toIdx<span class="number">-1</span>) + <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> max(lps(str, fromIdx+<span class="number">1</span>, toIdx), lps(str, fromIdx, toIdx<span class="number">-1</span>));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">return</span> lps(s, <span class="number">0</span>, n<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　基于上述思路的动态规划实现，定义的子问题与最长回文子串有明显出入。<br>　①<strong>子问题</strong>：设字符串为 s，长度为 n，$dp[fromIdx][toIdx]$：子字符串 $s(fromIdx…toIdx)$ 中的最长回文子序列长度。<br>　②与最长回文子串类似，依次遍历长度为 $1, 2, …, len, …, n(本题: \leq 1000)$ 的所有子串，计算 $s(fromIdx…fromIdx+len-1)$ 中的最长回文子序列长度 $dp[fromIdx][fromIdx+len-1]$<br>　　<strong>状态初始条件</strong>（1）：长度为 1 的子串均为回文子序列，即 $\qquad \qquad dp[i][i]=1, i \in [0, n)$<br>　　<strong>状态初始条件</strong>（2）：长度为 2 的子串，相邻两个字符相同的子串也为回文子序列，即 $\begin{cases} if(s[i] == s[i+1]): \cr \quad dp[i][i+1]=2 \cr else: \cr \quad dp[i][i+1]=0 \end{cases} i \in [0, n-1)$<br>　　<font color="red">注：代码实现中将<strong>状态初始条件（2）</strong>这一过程附带在下一步<strong>填表过程</strong>中。</font><br>　　<strong>状态转移方程</strong>（填表过程）：$\qquad \qquad \begin{cases} for 　 len=3, …, n: \cr \quad for 　 i=0, 1, …, n-len: \cr \qquad j=i+len-1 \cr \qquad if(s[i] == s[j]): \cr \qquad \quad dp[i][j]=dp[i+1][j-1]+2 \cr \qquad else: \cr \qquad \quad dp[i][j]=max(dp[i+1][j], dp[i][j-1]) \end{cases}$</p>
<ul>
<li>  <figure class="highlight cpp"><figcaption><span>动态规划实现</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b?a:b)</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(<span class="keyword">char</span>* s)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="comment">// dp[fromIdx][toIdx]: s(fromIdx,toIdx) is palindrome of length dp[fromIdx][toIdx]</span></div><div class="line">    <span class="keyword">int</span> dp[n][n];</div><div class="line">    </div><div class="line">    <span class="comment">// strings of length 1 are palindrome of length 1</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; idx&lt;n; idx++) &#123;</div><div class="line">        dp[idx][idx] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">2</span>; len&lt;=n; len++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> fromIdx=<span class="number">0</span>; fromIdx&lt;=n-len; fromIdx++) &#123;</div><div class="line">            <span class="keyword">int</span> toIdx = fromIdx + len - <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(s[fromIdx] == s[toIdx]) &#123;</div><div class="line">                <span class="keyword">if</span>(len==<span class="number">2</span>) &#123;</div><div class="line">                    dp[fromIdx][toIdx] = <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// s(fromIdx+1,toIdx-1) have smaller length:len-2</span></div><div class="line">                    dp[fromIdx][toIdx]= dp[fromIdx+<span class="number">1</span>][toIdx<span class="number">-1</span>] + <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// s(fromIdx+1,toIdx) &amp; s(fromIdx,toIdx-1) have smaller length:len-1 </span></div><div class="line">                dp[fromIdx][toIdx] = max(dp[fromIdx+<span class="number">1</span>][toIdx], dp[fromIdx][toIdx<span class="number">-1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><font color="blue">提取最长回文子序列</font><ul>
<li>利用动态规划过程的中间结果 <code>dp[i][j]</code>，使用与 <strong>提取最长公共子序列</strong> 一样的方法，能够提取出最长回文子序列。</li>
<li>在序列 s 中分别从头下标 <code>fromIdx: 0</code> 和尾下标 <code>toIdx: n-1</code> 向中间挪动，找出  <code>dp[i][j]</code> 个字符，即为提取的最长回文子序列。</li>
<li>如何在序列中向中间挪动呢？<ul>
<li><code>s[fromIdx]==s[toIdx]</code>，当前字符在最长回文子序列中，头尾下标同时向中间挪：<code>fromIdx++</code> &amp; <code>toIdx--</code>。</li>
<li><code>s[fromIdx]!=s[toIdx]</code>，当前字符不相同<ul>
<li><code>dp[fromIdx][toIdx-1]</code> 大，说明 <code>s[fromIdx]</code> 可能是最长回文子序列的下一个字符，需要挪动尾下标：<code>toIdx--</code>；</li>
<li>反之<code>dp[fromIdx+1][toIdx]</code> 大，则需要挪动头下标：<code>fromIdx++</code>。</li>
</ul>
</li>
</ul>
</li>
<li>挪动的边界条件：<code>while(fromIdx≤toIdx)</code><ul>
<li>出现 <code>fromIdx==toIdx</code> 后退出循环：最长回文子序列长度为奇数（如：”bab”），选择夹在原序列中最后一个相同字符间的任一字符作为唯一一个不成对字符。</li>
<li>直接因为 <code>fromIdx&lt;toIdx)</code> 退出循环：最长回文子序列长度为偶数（如：”bb”），原序列中最后一个相同字符间不存在其它字符。</li>
</ul>
</li>
<li>具体的代码实现如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> LPS;</div><div class="line">fromIdx = <span class="number">0</span>;</div><div class="line">toIdx = n<span class="number">-1</span>;</div><div class="line"><span class="keyword">while</span>(fromIdx&lt;=toIdx) &#123;</div><div class="line">    <span class="keyword">if</span>(s[fromIdx] == s[toIdx]) &#123;</div><div class="line">        LPS += s[fromIdx];</div><div class="line">        fromIdx++;</div><div class="line">        toIdx--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>(dp[fromIdx][toIdx<span class="number">-1</span>] &lt; dp[fromIdx+<span class="number">1</span>][toIdx]) &#123;</div><div class="line">            fromIdx++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            toIdx--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0011] Dynamic Programming(III)（Longest Common Subsequence）]]></title>
      <url>/2017/05/03/Algorithms_LongestCommonSubsequence/</url>
      <content type="html"><![CDATA[<p>　　子序列和子字符串的不同之处在于，子序列不需要是原序列上连续的字符。对于 <a href="http://www.lintcode.com/en/problem/longest-common-substring/">Longest Common Substring</a> 以及 <a href="http://www.lintcode.com/en/problem/longest-common-subsequence/"> Longest Common Subsequence</a> 这类题目，大多数需要用到 DP 的思想，其中，状态转移是关键。<br><a id="more"></a></p>
<h4 id="最长公共子字符串"><a href="#最长公共子字符串" class="headerlink" title="最长公共子字符串"></a>最长公共子字符串</h4><blockquote>
<p>Given two strings, find the longest common substring.<br>Return the length of it.</p>
<ul>
<li><strong>Example</strong><br>　Given A = “ABCD”, B = “CBCE”, return 2.</li>
</ul>
</blockquote>
<ul>
<li>$L(idxA, idxB)$：以 $A[idxA]$ 和 $B[idxB]$ 结尾的相同子字符串的最长长度。最长公共子字符串必然存在所有情况中以 A 序列中某个字符结尾，以 B 序列中某个字符结尾的一种情况，所以<strong>取所有可能情况中的最大值</strong>即为 Longest Common Substring 的长度。<ul>
<li>因为要求子串连续，所以对于 $A_{idxA}$ 与 $B_{idxB}$ 来讲，它们要么与之前的公共子串构成新的公共子串；要么就是不构成公共子串。<br>$$ L(idxA, idxB) =  \begin{cases}<br>  if（idxA==0||idxB==0）: \begin{cases} 1, A[idxA]==B[idxB] \cr 0, others \end{cases} \cr<br>  else-if（A[idxA]==B[idxB]）: L(idxA-1, idxB-1) + 1 \cr<br>  else: 0<br>  \end{cases}<br>$$</li>
<li>上述过程的示例图如下，可以看出只有对角线方向上的长度延伸，长度不能保留。<br><center><img src="/img/Algorithms/0011_LCStringProcessDemo.jpg" width="480px"/></center><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>: </div><div class="line">    <span class="comment">/**</div><div class="line">     * @param A, B: Two string.</div><div class="line">     * @return: the length of the longest common substring.</div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(<span class="built_in">string</span> &amp;A, <span class="built_in">string</span> &amp;B)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lenA = A.length();</div><div class="line">        <span class="keyword">int</span> lenB = B.length();</div><div class="line">        <span class="keyword">if</span>(lenA==<span class="number">0</span> || lenB==<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// L[idxA][idxB]: the largest length of LCS ending with A[idxA] and B[idxB] </span></div><div class="line">        <span class="keyword">int</span> L[lenA][lenB];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxB=<span class="number">0</span>; idxB&lt;lenB; idxB++) &#123;</div><div class="line">            L[<span class="number">0</span>][idxB] = B[idxB]==A[<span class="number">0</span>]? <span class="number">1</span> : <span class="number">0</span>; </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxA=<span class="number">0</span>; idxA&lt;lenA; idxA++) &#123;</div><div class="line">            L[idxA][<span class="number">0</span>] = A[idxA]==B[<span class="number">0</span>]? <span class="number">1</span> : <span class="number">0</span>; </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxA=<span class="number">1</span>; idxA&lt;lenA; idxA++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> idxB=<span class="number">1</span>; idxB&lt;lenB; idxB++)&#123;</div><div class="line">                L[idxA][idxB] = A[idxA]==B[idxB]? L[idxA<span class="number">-1</span>][idxB<span class="number">-1</span>]+<span class="number">1</span> : <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> maxLenIdx = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxA=<span class="number">0</span>; idxA&lt;lenA; idxA++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> idxB=<span class="number">0</span>; idxB&lt;lenB; idxB++)&#123;</div><div class="line">                <span class="keyword">if</span>(L[idxA][idxB] &gt; maxLen) &#123;</div><div class="line">                    maxLen = L[idxA][idxB];</div><div class="line">                    maxLenIdx = idxA;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxLen;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><font color="blue">提取最长公共子串</font><ul>
<li>使用变量 <code>maxLenIdx</code> 记录最长公共子串（长度 <code>maxLen</code> ）对应的结尾字符下标（序列 A/B 都可以），回退获取 <code>maxLen</code> 个字符即可。</li>
</ul>
</li>
</ul>
<h4 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h4><blockquote>
<p>Given two strings, find the longest common subsequence (<em>LCS</em>).<br>Your code should return the length of <em>LCS</em>.</p>
<ul>
<li><strong>Example</strong><br>　For “ABCD” and “EDCA”, the LCS is “A” (or “D”, “C”), return 1.<br>　For “ABCD” and “EACB”, the LCS is “AC”, return 2.</li>
</ul>
</blockquote>
<ul>
<li>$L(idxA, idxB)$：以 $A_{idxA}$ 结尾的子串（$A[0, 1, …, idxA], 0 \leq idxA \lt len_A$） 和 $B_{idxB}$ 结尾的子串（$B[0, 1, …, idxB], 0 \leq idxB \lt len_B$）最长公共子序列的长度。自然地，$L(len_A-1, len_B-1)$ 即为所求的最长公共子序列长度。</li>
<li>与子串不同，子序列可以是不连续的。<ul>
<li>$L(idxA, idxB)$ 与 $L(idxA-1, idxB-1)$ 两者其实只差 $A_{idxA}$ 和 $B_{idxB}$ 这一对字符。</li>
<li>如果 $A_{idxA}$ 和 $B_{idxB}$ 相同，那么就只要在以 $A_{idxA}$ 和以 $B_{idxB}$ 结尾的两个子串的最长公共子序列之后添上这个相同字符即可，这样就可以让长度增加一位。</li>
<li>如果 $A_{idxA}$ 和 $B_{idxB}$ 不同，两个子串在末尾添加一个字符后最长公共子序列并不能得到延伸。考虑到 $A_{idxA}$ 可能与 $B_{idxB-1}$ 相同或者 $B_{idxB}$ 会与 $A_{idxA-1}$ 相同，没能延伸的最长公共子序列只能在 $L(idxA, idxB-1)$ 和 $L(idxA-1, idxB)$ 存在，取更长的那个。</li>
<li>结合边界限制，最终得到的状态转移方程如下：<br>$$ L(idxA, idxB) =  \begin{cases}<br>  if（idxA==0）: \begin{cases} 1, B[idxB]==A[0] \cr L(0, idxB-1), others \end{cases} \cr<br>  else·if（idxB==0）: \begin{cases} 1, A[idxA]==B[0] \cr L(idxA-1, 0), others \end{cases} \cr<br>  else·if（A[idxA]==B[idxB]）: L(idxA-1, idxB-1) + 1 \cr<br>  else: max(L(idxA, idxB-1), L(idxA-1, idxB))<br>  \end{cases}<br>$$</li>
<li>上述过程的示例图如下，可以看出同样只有对角线方向上的长度延伸，不过长度可以在 <strong>上→下</strong> 和 <strong>左→右</strong> 方向上得到保留。<br><center><img src="/img/Algorithms/0011_LCSequenceProcessDemo.png" width="450px"/></center><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b?a:b)</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">/**</div><div class="line">     * @param A, B: Two strings.</div><div class="line">     * @return: The length of longest common subsequence of A and B.</div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(<span class="built_in">string</span> A, <span class="built_in">string</span> B)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> lenA = A.length();</div><div class="line">        <span class="keyword">int</span> lenB = B.length();</div><div class="line">        <span class="keyword">if</span>(lenA==<span class="number">0</span> || lenB==<span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// L[idxA][idxB]: the length of the LCS ending with A[idxA] and B[idxB]</span></div><div class="line">        <span class="keyword">int</span> L[lenA][lenB];</div><div class="line">        <span class="comment">// for recording LCS's tail element index</span></div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>, maxLenIdxA = <span class="number">0</span>, maxLenIdxB = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        L[<span class="number">0</span>][<span class="number">0</span>] = A[<span class="number">0</span>]==B[<span class="number">0</span>]? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxB=<span class="number">1</span>; idxB&lt;lenB; idxB++) &#123;</div><div class="line">            L[<span class="number">0</span>][idxB] = B[idxB]==A[<span class="number">0</span>]? <span class="number">1</span> : L[<span class="number">0</span>][idxB<span class="number">-1</span>];</div><div class="line">            </div><div class="line">            <span class="comment">// for recording LCS's tail element index</span></div><div class="line">            <span class="keyword">if</span>(L[<span class="number">0</span>][idxB] &gt; maxLen) &#123;</div><div class="line">                maxLen = L[<span class="number">0</span>][idxB];</div><div class="line">                maxLenIdxB = idxB;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxA=<span class="number">1</span>; idxA&lt;lenA; idxA++) &#123;</div><div class="line">            L[idxA][<span class="number">0</span>] = A[idxA]==B[<span class="number">0</span>]? <span class="number">1</span> : L[idxA<span class="number">-1</span>][<span class="number">0</span>];</div><div class="line">            </div><div class="line">            <span class="comment">// for recording LCS's tail element index</span></div><div class="line">            <span class="keyword">if</span>(L[idxA][<span class="number">0</span>] &gt; maxLen) &#123;</div><div class="line">                maxLen = L[idxA][<span class="number">0</span>];</div><div class="line">                maxLenIdxA = idxA;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idxA=<span class="number">1</span>; idxA&lt;lenA; idxA++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> idxB=<span class="number">1</span>; idxB&lt;lenB; idxB++) &#123;</div><div class="line">                <span class="keyword">if</span>(A[idxA] == B[idxB]) &#123;</div><div class="line">                    L[idxA][idxB] = L[idxA<span class="number">-1</span>][idxB<span class="number">-1</span>] + <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    L[idxA][idxB] = max(L[idxA][idxB<span class="number">-1</span>], L[idxA<span class="number">-1</span>][idxB]);</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="comment">// for recording LCS's tail element index</span></div><div class="line">                <span class="keyword">if</span>(L[idxA][idxB] &gt; maxLen) &#123;</div><div class="line">                    maxLen = L[idxA][idxB];</div><div class="line">                    maxLenIdxA = idxA;</div><div class="line">                    maxLenIdxB = idxB;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> L[lenA<span class="number">-1</span>][lenB<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><font color="blue">提取最长公共子序列</font><ul>
<li>使用变量 <code>maxLen</code> 记录最长公共子序列的长度，并通过变量 <code>maxLenIdxA</code> 和 <code>maxLenIdxB</code> 记录该最长长度序列末尾字符对应的序列 A 和序列 B 中的字符下标。</li>
<li>在序列 A 和 B 中分别从下标 <code>maxLenIdxA</code> 和 <code>maxLenIdxB</code> 向左挪动，找出  <code>maxLen</code> 个相同字符，即为提取的最长公共子序列。</li>
<li>如何在序列 A 和 B 中向左挪动呢？<ul>
<li><code>A[maxLenIdxA]==B[maxLenIdxB]</code>，当前字符相同，同时左挪（因为公共子序列的特点，此时二者肯定均为到达边界）：<code>maxLenIdxA--</code> &amp; <code>maxLenIdxB--</code>。</li>
<li><code>A[maxLenIdxA]!=B[maxLenIdxB]</code>，当前字符不相同<ul>
<li>有挪动到边界（0）的，只能挪动另一个还没到边界的；假如同时挪动到边界，由于  <code>maxLen</code> 的准确性，说明已经提取出最长公共子序列。</li>
<li><code>L[idxA][idxB-1]</code> 大，说明 <code>A[maxLenIdxA]</code> 可能与序列 B 中下一个字符相同，需要挪动序列 B：<code>maxLenIdxB--</code>；反之，则需要挪动序列 A：<code>maxLenIdxA--</code>。</li>
</ul>
</li>
</ul>
</li>
<li>具体的代码实现如下：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span> LCS;</div><div class="line"><span class="keyword">while</span>(maxLenIdxA&gt;=<span class="number">0</span> &amp;&amp; maxLenIdxB&gt;=<span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">if</span>(A[maxLenIdxA] == B[maxLenIdxB]) &#123;</div><div class="line">        LCS += A[maxLenIdxA];</div><div class="line">        maxLenIdxA--;</div><div class="line">        maxLenIdxB--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>(maxLenIdxA == <span class="number">0</span>) &#123;</div><div class="line">            maxLenIdxB--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(maxLenIdxB == <span class="number">0</span>) &#123;</div><div class="line">            maxLenIdxA--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(L[maxLenIdxA][maxLenIdxB<span class="number">-1</span>] &lt; L[maxLenIdxA<span class="number">-1</span>][maxLenIdxB]) &#123;</div><div class="line">                maxLenIdxB--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                maxLenIdxA--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0010] Longest Increasing Subsequence（最长递增子序列）]]></title>
      <url>/2017/04/28/Algorithms_LongestIncreasingSubsequence/</url>
      <content type="html"><![CDATA[<h4 id="300-Longest-Increasing-Subsequence"><a href="#300-Longest-Increasing-Subsequence" class="headerlink" title="300. Longest Increasing Subsequence"></a><a href="https://leetcode.com/problems/longest-increasing-subsequence/#/description">300. Longest Increasing Subsequence</a></h4><blockquote>
<p>Given an unsorted array of integers, find the length of longest increasing subsequence.<br>For example, Given [10, 9, 2, 5, 3, 7, 101, 18], The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length. </p>
</blockquote>
<ul>
<li>给出一个序列 $a_1, a_2, …, a_n$，求它的一个子序列（设为 $s_1, s_2, …, s_n$ ），使得这个子序列满足这样的性质：$ s_1 &lt; s_2 &lt; s_3 &lt;…&lt; s_n $ 并且这个子序列的长度最长，输出这个最长的长度。实际上，诸如最长下降子序列，最长不上升子序列等问题都可以看成同一个问题，仔细思考就会发现，这其实只是 $&lt;$ 符号定义上的问题，并不影响问题的实质。<a id="more"></a>
<h4 id="转化为图的最长路径问题（-O-N-2-）"><a href="#转化为图的最长路径问题（-O-N-2-）" class="headerlink" title="转化为图的最长路径问题（$O(N^2)$）"></a>转化为图的最长路径问题（$O(N^2)$）</h4></li>
<li>解决最长递增子序列的一种方法是将其转换为图的最长路径问题（可以说是一种归约思想）<ul>
<li>为序列中的每个元素 $a_i$ 建立一个对应的节点 i。</li>
<li>对于任意两个可能在某递增序列中存在递进关系的元素 $a_i$ 和 $a_j$（即，同时满足 $ i &lt; j $，且 $ a_i &lt; a_j $），增加一条连接二者对应节点的有向边 $i-&gt;j$。</li>
<li>基于简单的动态规划，寻找转化后的图中的最长路径。如下图：<center><img src="/img/Algorithms/0010_LISGraph.png" width="640px"/></center></li>
</ul>
</li>
<li>基于上述思路的代码实现如下：</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> graph[<span class="number">10000</span>][<span class="number">10000</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="comment">//sanity check</span></div><div class="line">    <span class="keyword">if</span>(numsSize &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fromIdx=<span class="number">0</span>; fromIdx&lt;numsSize; fromIdx++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> toIdx=fromIdx+<span class="number">1</span>; toIdx&lt;numsSize; toIdx++) &#123;</div><div class="line">            graph[fromIdx][toIdx] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// convert the sequence into a directed graph</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fromIdx=<span class="number">0</span>; fromIdx&lt;numsSize; fromIdx++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> toIdx=fromIdx+<span class="number">1</span>; toIdx&lt;numsSize; toIdx++) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[toIdx] &gt; nums[fromIdx]) &#123;</div><div class="line">                graph[fromIdx][toIdx] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// find the longest path &lt;--&gt; LIS</span></div><div class="line">    <span class="keyword">int</span> L[numsSize];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; idx&lt;numsSize; idx++) &#123;</div><div class="line">        <span class="keyword">int</span> localMax = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> fromIdx=<span class="number">0</span>; fromIdx&lt;=idx; fromIdx++) &#123;</div><div class="line">            <span class="keyword">if</span>(graph[fromIdx][idx] == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">if</span>(L[fromIdx] &gt; localMax) &#123;</div><div class="line">                    localMax = L[fromIdx];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        L[idx] = localMax + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> globalMax = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; idx&lt;numsSize; idx++) &#123;</div><div class="line">        <span class="keyword">if</span>(L[idx] &gt; globalMax) &#123;</div><div class="line">            globalMax = L[idx];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> globalMax;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><font color="red">需要特别留意的是：</font>存储转换后的图的邻接矩阵 graph，实际上应该是一个动态大小的二维数组，然而，由于 <strong>堆栈内存限制</strong>，只能将其预设为足够大小的二维数组，作为 <strong>全局</strong> 或者 <strong>static</strong> 变量在堆中开辟内存，避免 <strong>Runtime Error</strong>（堆栈溢出）的错误。</li>
<li>在求解转换后的图中的最长路径时，采用了动态规划的方法<ul>
<li>$L[idx]$ ：第 idx 个元素对应的节点的最长路径（从根（序列的第一个元素）出发）；</li>
<li>$L[idx+1]$ 显然为带有最大最长路径的前驱节点的最长路径+1。</li>
</ul>
</li>
<li>算法是可行准确的，但是运行效率就不敢恭维了。<br><img src="/img/Algorithms/0010_LISGraph_result.png" width="720px"/></li>
</ul>
<h4 id="动态规划（-O-N-2-）"><a href="#动态规划（-O-N-2-）" class="headerlink" title="动态规划（$O(N^2)$）"></a>动态规划（$O(N^2)$）</h4><ul>
<li>既然是动态规划法，那么最重要的自然就是寻找子问题，对于这个问题，我们找到他的子问题<ul>
<li>用$dp[idx]$ 来存放以 $a_{idx}$ 结尾的最大递增子序列长度。</li>
</ul>
</li>
<li>找到子问题之后，接下来就是关于子问题如何求解的问题（状态转移方程）<ul>
<li>想求以 $a_{idx}$ 结尾的最大递增子序列的长度，我们就需要遍历 $idx$ 之前的所有位置 $ i, i \in [1, idx-1]$，在这些 $ i $ 中，找出 $ a[i] &lt; a[idx]$，计算能产生最大 $dp[i]$ 的 $i$，之后就可以求出 $dp[idx]$： $dp[idx] = max(dp[i]) + 1, i \in [1, idx-1]  \&amp;\&amp;  a_i &lt; a_{idx}$。</li>
</ul>
</li>
<li>对序列中的每一个元素都计算以他们各自结尾的最大递增子序列的长度，这些长度的最大值，就是我们要求的问题 —— 序列的最大递增子序列。</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="comment">// sanity check</span></div><div class="line">    <span class="keyword">if</span>(numsSize &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// dp[idx]: the length of the LIS ending with the idx-th element</span></div><div class="line">    <span class="keyword">int</span> dp[numsSize];</div><div class="line">    <span class="comment">// prev[idx]:record the previous index of the LIS ending with the idx-th element</span></div><div class="line">    <span class="keyword">int</span> prev[numsSize];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; idx&lt;numsSize; idx++) &#123;</div><div class="line">        <span class="comment">// the maximum length of previous index LIS ending with an element not greater than current element </span></div><div class="line">        <span class="keyword">int</span> localIdxMax = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;idx; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] &lt; nums[idx] &amp;&amp; dp[i] &gt; localIdxMax) &#123;</div><div class="line">                localIdxMax = dp[i];</div><div class="line">                prev[idx] = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        dp[idx] = localIdxMax + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// the longest increasing subsequence should ending with one index-th element</span></div><div class="line">    <span class="keyword">int</span> totalMax = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">0</span>; idx&lt;numsSize; idx++) &#123;</div><div class="line">        <span class="keyword">if</span>(dp[idx] &gt; totalMax) &#123;</div><div class="line">            totalMax = dp[idx];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> totalMax;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>因为避免了将问题转化为图这一繁琐的步骤，所以虽然同为 $O(N^2)$ 的复杂度，这种方法效率明显提升了。<br><img src="/img/Algorithms/0010_dp_result.png" width="720px"/></li>
</ul>
<h4 id="耐心排序法（-O-N-logN-）"><a href="#耐心排序法（-O-N-logN-）" class="headerlink" title="耐心排序法（$O(N logN)$）"></a>耐心排序法（$O(N logN)$）</h4><ul>
<li>上面的解法时间复杂度仍然为 $O(N^2)$，仔细分析一下原因，之所以慢，是因为<font color="blue">对于每一个新的位置 $idx$ 都需要遍历 $idx$ 之前的所有位置 $ i, i \in [1, idx-1]$</font>，找出之前位置的最长递增子序列长度。我们是不是可以有一种方法能不用遍历之前所有的位置，而可以更快的确定 $i$ 的位置呢？<ul>
<li>举个例子，比如序列 $1, 3, 5, 2, 8, 4, 6$ 这个例子中，当到 6 时，我们一共可以有四种(1)不同长度；(2)保证该升序序列在同长度升序序列中末尾最小的升序序列<ul>
<li>1</li>
<li>1,2</li>
<li>1,2,4</li>
<li>1,2,4,6</li>
</ul>
</li>
<li>以上这些序列都是未来有可能成为最长序列的候选序列。这样，每来一个新的数，我们便按照以下规则更新这些序列：<ul>
<li>如果 $idx$ 元素比所有序列的末尾都大，说明有一个更长的递增序列产生，我们把最长的序列复制一遍，并加上这个元素。</li>
<li>如果 $idx$ 元素比所有序列的末尾都小，说明长度为1的序列可以更新了，更新为这个更小的末尾。</li>
<li>如果刚好在中间，则更新那个末尾数字刚刚大于等于自己的那个序列，说明那个长度的序列可以更新了。</li>
</ul>
</li>
</ul>
</li>
<li>基于上面的例子，我们可以推导出这样的一种思路<ul>
<li>$A[i]$ 数组用来记录长度为 $i$ 的递增子序列的末尾元素的最小值<ul>
<li>其中$ i \leq numsSize$</li>
<li>数组 $A[i]$ 的 size 为 $numsSize+1$</li>
<li>我们很容易能够得到关于数组 $A[i]$ 的一个性质：$i &lt; j$ 时，$A[i] &lt; A[j]$</li>
</ul>
</li>
<li>maxLen 变量记录当前的最长递增子序列的长度。</li>
<li>上述的更新规则就转变成对 $A[1, 2, i, maxLen]$ 数组进行更新。<ul>
<li>$A[1, 2, i, maxLen]$ 是有序的</li>
<li>更新操作只需要进行替换而不需要挪动——也就是说，我们可以使用二分查找，将<font color="blue">每个 $idx$ 元素对 $A[1, 2, i, maxLen]$ 数组的更新时间优化到 $O(logN)$（不需要 $O(N)$ 了）</font>，算法的时间复杂度就降低到了$O(N logN)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line"> * finds a minimum value greater than findingNum in findingArray[1, 2, ..., findingArraySize] and returns its position</div><div class="line"> *  findingArray should be in order</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>* findingArray, <span class="keyword">int</span> findingArraySize, <span class="keyword">int</span> findingNum)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> begin = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> end = findingArraySize;</div><div class="line">    <span class="keyword">while</span>(begin &lt;= end) &#123;</div><div class="line">        <span class="keyword">int</span> mid = begin + (end - begin)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(findingArray[mid] &gt; findingNum) &#123;</div><div class="line">            end = mid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(findingArray[mid] &lt; findingNum) &#123;</div><div class="line">            begin = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// return the same value position for covering</span></div><div class="line">            <span class="keyword">return</span> mid;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// return postion to insert after</span></div><div class="line">    <span class="keyword">return</span> begin;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="comment">// sanity check</span></div><div class="line">    <span class="keyword">if</span>(numsSize &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// A[i=1, 2, ..., maxLen]: the minimum value of the end element of the i-length increasing sequence</span></div><div class="line">    <span class="keyword">int</span> A[numsSize+<span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> maxLen;</div><div class="line">    </div><div class="line">    maxLen = <span class="number">1</span>;</div><div class="line">    A[<span class="number">1</span>] = nums[<span class="number">0</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> idx=<span class="number">1</span>; idx&lt;numsSize; idx++) &#123;</div><div class="line">        <span class="keyword">if</span>(nums[idx] &gt; A[maxLen]) &#123;</div><div class="line">            maxLen += <span class="number">1</span>;</div><div class="line">            A[maxLen] = nums[idx];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> pos = binarySearch(A, maxLen, nums[idx]);</div><div class="line">            A[pos] = nums[idx];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxLen;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>复杂度从 $O(N^2)$ 缩小到 $O(N logN)$，运行效率得到较大的提升。<br><img src="/img/Algorithms/0010_nlogn_result.png" width="720px"/></li>
</ul>
<h4 id="提取最长递增子序列"><a href="#提取最长递增子序列" class="headerlink" title="提取最长递增子序列"></a>提取最长递增子序列</h4><ul>
<li>规约为图的最长路径问题<ul>
<li>利用 $prev[numsSize]$ 数组记录每个最长路径 $L[idx]$ 的前驱节点元素下标 $prev[idx]$，通过 $prev[idx]$ 迭代还原出最长路径。</li>
<li>具体实现与下面的动态规划类似。</li>
</ul>
</li>
<li>动态规划  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// int totalMaxIdx = &lt;idx for toalMax element index&gt;;</span></div><div class="line"><span class="built_in">cout</span> &lt;&lt; nums[totalMaxIdx];</div><div class="line"><span class="keyword">int</span> prevIdx = prev[totalMaxIdx];</div><div class="line"><span class="keyword">while</span>(prevIdx != <span class="number">-1</span>) &#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; nums[prevIdx];</div><div class="line">  prevIdx = prev[prevIdx];</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>耐心排序法<ul>
<li>$A[i=1, 2, …, maxLen]$ 就是满足要求的最长递增子序列。</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0009] Dynamic Programming(II)（Maximum Sum/Product Subarray）]]></title>
      <url>/2017/04/23/Algorithms_Dynamic%20Programming(II)/</url>
      <content type="html"><![CDATA[<p>　本文通过 <strong><a href="https://leetcode.com/problems/maximum-subarray/#/description">53. Maximum Subarray</a> &amp; <a href="https://leetcode.com/problems/maximum-product-subarray/#/description">152. Maximum Product Subarray</a></strong> 分析根据动态规划思路进行问题求解中的一个关键环节：子问题的拆分和求解。<br><a id="more"></a></p>
<h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><ul>
<li>两道题解决的问题相似，都是求解给定序列中满足某种数学特征（和最大/乘积最大）的子序列，虽然不需要将该子序列输出。</li>
</ul>
<blockquote>
<p>Find the contiguous subarray within an array(containing at least one number) which has the largest sum/product.</p>
<ul>
<li>For example, given the array [-2,1,-3,4,-1,2,1,-5,4], the contiguous subarray [4,-1,2,1] has the largest sum = 6. </li>
<li>For example, given the array [2,3,-2,4], the contiguous subarray [2,3] has the largest product = 6. </li>
</ul>
</blockquote>
<ul>
<li>留意的关键字眼是：<code>containing at least one number</code>，所以给定序列至少有一个元素，这也启发我们可以将其作为特殊处理。</li>
</ul>
<h4 id="53-Maximum-Subarray-解题思路"><a href="#53-Maximum-Subarray-解题思路" class="headerlink" title="53. Maximum Subarray 解题思路"></a><a href="https://leetcode.com/problems/maximum-subarray/#/description">53. Maximum Subarray</a> 解题思路</h4><ul>
<li>思路一：$sums[j]$ 为序列前 j 个元素的最大子段和作为求解的子问题，则 $sum[n]$ 则为问题的答案。然而，如何利用 $sums[1, 2, …, j-1]$ 对 $sums[j]$ 进行求解呢？显然需要知道前 j 个元素的最大字段和的子段起始和终止位置，求解这个子问题的状态迁移显然比较复杂。</li>
<li>换一种思路。思路二：$sums[j]$ 为以第 j 个元素为结尾的子段的最大子段和作为求解的子问题，$max_{1 \leq j \leq n}(sums[j])$ 即为整个序列的最大子段和。而通过 $sums[j-1]$ 和当前元素 $nums[j]$ 即可计算以第 j 个元素为结尾的最大子段和 $sums[j]$，<code>状态转移方程</code> 如下：<br>$$ sums[j+1] = \begin{cases}  nums[j+1]　　　　　　sums[j] \lt 0 \cr sums[j] + nums[j+1]　others \end{cases}$$</li>
<li>根据思路二，<a href="https://leetcode.com/problems/maximum-subarray/#/description">53. Maximum Subarray</a> 解答如下：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> SizeofNums = nums.size();</div><div class="line">        <span class="keyword">if</span>(SizeofNums == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> sums[SizeofNums];</div><div class="line">        sums[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;SizeofNums; i++) &#123;</div><div class="line">            <span class="comment">// sums[i]: The largest sum of subarray ending with the i-th element</span></div><div class="line">            sums[i] = sums[i<span class="number">-1</span>]&lt;<span class="number">0</span> ? nums[i] : sums[i<span class="number">-1</span>]+nums[i]; </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// The largest sum of the whole array</span></div><div class="line">        <span class="keyword">int</span> largestSum = sums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;SizeofNums; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(largestSum &lt; sums[i]) &#123;</div><div class="line">                largestSum = sums[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> largestSum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>为了得到 <code>largestSum</code> 对应的子序列，我们可以通过变量 <code>startIdx</code> 记录以第 j 个元素结尾（<code>endIdx</code>）的最大子段和对应子序列的起始位置，$nums[startIdx, …, endIdx]$ 即为对应的子序列；另外，考虑到<strong>当前状态只与前一个状态有关</strong>，所以可以使用变量代替数组，节省内存，同时，避免获取<code>The largest sum of the whole array</code> 时的重复循环。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> SizeofNums = nums.size();</div><div class="line">        <span class="keyword">if</span>(SizeofNums == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// largest sum for the subarray ending with current element </span></div><div class="line">        <span class="keyword">int</span> curSum = nums[<span class="number">0</span>];</div><div class="line">        <span class="comment">// largest sum of subarray for the whole array</span></div><div class="line">        <span class="keyword">int</span> largestSum = curSum;</div><div class="line">        <span class="comment">// subarray[startIdx, endIdx] with largest sum for the whole array</span></div><div class="line">        <span class="keyword">int</span> startIdx = <span class="number">0</span>, endIdx = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;SizeofNums; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(curSum &lt; <span class="number">0</span>) &#123;</div><div class="line">                curSum = nums[i];</div><div class="line">                startIdx = i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                curSum = curSum + nums[i];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(curSum &gt; largestSum) &#123;</div><div class="line">                largestSum = curSum;</div><div class="line">                endIdx = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> largestSum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="152-Maximum-Product-Subarray-解题思路"><a href="#152-Maximum-Product-Subarray-解题思路" class="headerlink" title="152. Maximum Product Subarray 解题思路"></a><a href="https://leetcode.com/problems/maximum-product-subarray/#/description">152. Maximum Product Subarray</a> 解题思路</h4><ul>
<li>这一题的解题流程与上一题基本类似，但是要解决的关键问题是：状态转移，即如何根据上一个子问题（以第 j 个元素为结尾的子段的max product）的答案推算出当前子问题的结果。</li>
<li>从上一题的分析可以看出，当前子问题（以第 j 个元素为结尾的子段的max sum）的计算只需考虑上一个子问题的结果 $sum[j-1]$，$sum[j-1] &lt; 0$，因为是加法，显然可以将子问题结果忽略；$sum[j-1] &gt; 0$，$sum[j-1]$ 加上当前元素就是当前子问题的结果。</li>
<li>类似的问题，只不过换成乘积，子问题的求解就变得复杂了，需要考虑以下几种情况：<ul>
<li>当前元素是正数，max product可能是正正得正的情况，因为都是整数，乘积＞1，上一子问题的结果乘上当前元素即为当前子问题的答案</li>
<li>当前元素是负数，max product可能是负负得正的情况，因此需要维护以第 j 个元素为结尾的子段的min product（很大可能是负数）</li>
<li>另外，需要考虑上一个子问题的结果为0的情况</li>
<li>总之，乘积的最大值为上述三种情况之一<br>状态转移方程如下：<br>$$ maxProducts[j+1] = max(maxProducts[j-1]*nums[j], minProducts[j-1]*nums[j], nums[j])$$</li>
</ul>
</li>
<li><a href="https://leetcode.com/problems/maximum-product-subarray/#/description">152. Maximum Product Subarray</a> 解答如下：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> SizeofNums = nums.size();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(SizeofNums == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// The largest/least product of subarray ending with the i-th element</span></div><div class="line">        <span class="keyword">int</span> maxProducts[SizeofNums];</div><div class="line">        <span class="keyword">int</span> minProducts[SizeofNums];</div><div class="line">        maxProducts[<span class="number">0</span>] = minProducts[<span class="number">0</span>] = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;SizeofNums; i++) &#123;</div><div class="line">            <span class="comment">// positive with positive, negative with negative, ignore previous zero</span></div><div class="line">            maxProducts[i] = max( max(maxProducts[i<span class="number">-1</span>]*nums[i], minProducts[i<span class="number">-1</span>]*nums[i]), nums[i]);</div><div class="line">            <span class="comment">// positive with negative, negative with positive, ignore previous zero</span></div><div class="line">            minProducts[i] = min( min(maxProducts[i<span class="number">-1</span>]*nums[i], minProducts[i<span class="number">-1</span>]*nums[i]), nums[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// getting the largest product for the whole array</span></div><div class="line">        <span class="keyword">int</span> largestProduct = maxProducts[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;SizeofNums; i++) &#123;</div><div class="line">            <span class="keyword">if</span>(maxProducts[i] &gt; largestProduct) &#123;</div><div class="line">                largestProduct = maxProducts[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> largestProduct;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>与上一题类似，添加额外变量，也能实现节省内存，记录子段最大乘积对应子段（$nums[startIdx, endIdx]$）的起始和终止位置。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> SizeofNums = nums.size();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(SizeofNums == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// The largest/least product of subarray ending with the i-th element</span></div><div class="line">        <span class="keyword">int</span> largestProduct = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> leastProduct = nums[<span class="number">0</span>];</div><div class="line">        <span class="comment">// The largest product for the whole array</span></div><div class="line">        <span class="keyword">int</span> maxProduct = largestProduct;</div><div class="line">        <span class="comment">// subarray[startIdx, endIdx] with largest product for the whole array</span></div><div class="line">        <span class="keyword">int</span> startIdx = <span class="number">0</span>, endIdx = <span class="number">0</span>;</div><div class="line">        <span class="comment">// start index for largestProduct/leastProduct</span></div><div class="line">        <span class="keyword">int</span> startIdx_pos = startIdx, startIdx_neg = startIdx;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;SizeofNums; i++) &#123;</div><div class="line">            <span class="keyword">int</span> largestProduct_pre = largestProduct;</div><div class="line">            <span class="keyword">int</span> leastProduct_pre = leastProduct;</div><div class="line">            </div><div class="line">            <span class="comment">// positive with positive, negative with negative, ignore previous zero</span></div><div class="line">            largestProduct = max( max(largestProduct_pre*nums[i], leastProduct_pre*nums[i]), nums[i]);</div><div class="line">            <span class="keyword">if</span>((largestProduct_pre != nums[i]) &amp;&amp; (largestProduct == nums[i])) &#123;</div><div class="line">                startIdx_pos = i;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">// positive with negative, negative with positive, ignore previous zero</span></div><div class="line">            leastProduct = min( min(largestProduct_pre*nums[i], leastProduct_pre*nums[i]), nums[i]);</div><div class="line">            <span class="keyword">if</span>((leastProduct_pre != nums[i]) &amp;&amp; (leastProduct == nums[i])) &#123;</div><div class="line">                startIdx_neg = i;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(largestProduct &gt; maxProduct) &#123;</div><div class="line">                maxProduct = largestProduct;</div><div class="line">                <span class="keyword">if</span>(largestProduct_pre*nums[i] &gt; leastProduct_pre*nums[i]) &#123;</div><div class="line">                    startIdx = startIdx_pos;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    startIdx = startIdx_neg;</div><div class="line">                &#125;</div><div class="line">                endIdx = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> maxProduct;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0008] Dynamic Programming(I)（Unique Paths）]]></title>
      <url>/2017/04/13/Algorithms_Dynamic%20Programming(I)/</url>
      <content type="html"><![CDATA[<p>　本文通过 <strong>Unique Paths <a href="https://leetcode.com/problems/unique-paths/#/description">[I]</a> &amp; <a href="https://leetcode.com/problems/unique-paths-ii/#/description">[II]</a></strong> 两道题从普通的递归思路到动态规划两种方式的求解尝试，希望能够初步分析如何根据动态规划的思路，进行问题求解。<br><a id="more"></a></p>
<h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p><center><img src="/img/Algorithms/0008_robot_maze.png" width="380px"/></center></p>
<ul>
<li>两道题解决的问题相似，都是求解从格网图左上角（Start）→ 右下角（Finish）可行的路径总数，而且行走方向只有向下或者向右移动两种方式，只是在以下两个地方存在一些区别：<ul>
<li><a href="https://leetcode.com/problems/unique-paths/#/description">Unique Paths [I]</a> 行走的格网图不设立障碍，而 <a href="https://leetcode.com/problems/unique-paths-ii/#/description">Unique Paths [[II]</a> 中行走的格网图存在障碍，在可行路径选取上需要考虑避开障碍物的问题。</li>
<li>由于上面的区别，导致在输入上两道题有所不同：前者只需要输入格网图的大小（#row*#column）；后者则需要提供格网图的0-1矩阵（1表示网格存在障碍物）</li>
</ul>
</li>
</ul>
<h4 id="递归思想解答"><a href="#递归思想解答" class="headerlink" title="递归思想解答"></a>递归思想解答</h4><ul>
<li>由于每一步的行走策略只有两种，不是向下走就是向右走，因此，假设当前这一步完成后到达右下角（#row，#column），那么只有（#row-1，#column）向下走和（#row，#column-1）向右走这两种方式，所以可行的路径总数显然就是从起点（1，1）到这两个中间点的可行路径总数之和。</li>
<li>按照上述的思路，很容易通过递归的方式最终会退到起点（递归基），并通过递归函数返回得到总的可行路径数目。</li>
<li>需要注意的一点是，由于每一步只有向右或者向下两种策略，所以，并不需要递归回起点（1，1），当回退到（1，？）或（？，1）时，从起点到当前中间点，有且只有一条路径（一直向右走或者一直想下走）。</li>
<li><a href="https://leetcode.com/problems/unique-paths/#/description">Unique Paths [I]</a>  按照递归思路的解答如下：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="comment">// sanity check</span></div><div class="line">        <span class="keyword">if</span>(m&lt;<span class="number">1</span> || n&lt;<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// when m==1 or n==1, only directly down or directly right</span></div><div class="line">        <span class="keyword">if</span>(m==<span class="number">1</span> || n==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// left to right + up to down</span></div><div class="line">        <span class="keyword">return</span> uniquePaths(m, n<span class="number">-1</span>) + uniquePaths(m<span class="number">-1</span>, n);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://leetcode.com/problems/unique-paths-ii/#/description">Unique Paths [[II]</a> 则需要进一步考虑当前步是否可行的问题，倘若存在障碍物，显然此路不通，不应计入可行路径的统计，<code>return 0</code>。</li>
<li>另外，与 <a href="https://leetcode.com/problems/unique-paths/#/description">Unique Paths [I]</a> 不同，只有回退到起点，才能判断通过递归历经的网格所构成的路径是可行的。因为，只是回退到（1，？）或（？，1），一旦起点到该中间点的<code>向右直走路径</code>或<code>向下直走路径</code>中间出现任何一个障碍物，该路径都是不可行的。</li>
<li>以下是递归解答，留意与前一道题目在输入上的区别。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; obstacleGrid, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(obstacleGrid[m<span class="number">-1</span>][n<span class="number">-1</span>] == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// obstacleGrid[0][0] == 0</span></div><div class="line">        <span class="keyword">if</span>(m==<span class="number">1</span> &amp;&amp; n==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// left to right</span></div><div class="line">        <span class="keyword">if</span>(m==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> uniquePathsWithObstacles(obstacleGrid, m, n<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// up to down</span></div><div class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> uniquePathsWithObstacles(obstacleGrid, m<span class="number">-1</span>, n);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// up to down + left to right</span></div><div class="line">        <span class="keyword">return</span> uniquePathsWithObstacles(obstacleGrid, m<span class="number">-1</span>, n) + uniquePathsWithObstacles(obstacleGrid, m, n<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> rowSize = obstacleGrid.size();</div><div class="line">        <span class="keyword">int</span> colSize = obstacleGrid[<span class="number">0</span>].size();</div><div class="line">        </div><div class="line">        <span class="comment">// sanity check</span></div><div class="line">        <span class="keyword">if</span>((colSize &lt; <span class="number">1</span>) || (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) || (obstacleGrid[rowSize<span class="number">-1</span>][colSize<span class="number">-1</span>] == <span class="number">1</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> uniquePathsWithObstacles(obstacleGrid, rowSize, colSize);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><font color="red">递归思路解答对上述问题并不可行</font><ul>
<li>我们都知道，直接的递归实现，可读性强，但频繁的函数调用会造成一定的时间损耗，因此上述两题都存在 <code>Time Limit Exceeded</code> 的错误。</li>
<li>另一个更为关键的问题是，上述简单的递归实现，每次递归的时候都对从起点到达当前中间网格的可行路径数进行了重复计算，这种重复计算的代价是巨大的，往往需要好几层回退；假如能够避免这种冗余，肯定会带来巨大的提升。</li>
</ul>
</li>
</ul>
<h4 id="动态规划思路解答"><a href="#动态规划思路解答" class="headerlink" title="动态规划思路解答"></a>动态规划思路解答</h4><ul>
<li>动态规划思路就能很好解决上述的问题：回退的方式不好避免重复计算的问题（可能需要维护从起点到达每个网格可行路径总数的表，另外通过是否为<code>Inf</code>避免重复计算，为了让每次递归均能访问操作该表，需要将其置为全局变量），我们干脆换个方向，从起点出发，直到到达右下角；动态规划的过程就像是在填上述这样一个表。</li>
<li>通过递归回退+维护从起点到达每个网格可行路径总数的表避免冗余计算的方式（记忆化搜索），因为只有在右下角到起点的可行路径上的网格才会被计算，能够避开其他不必要的网格；但是，函数的调用显然有一定损耗。</li>
<li>动态规划这种填表的思路，会将所有网格对应的表项填满，但这种顺序进行的操作实现简易（通过一个数组，两三层循环即可实现），耗时也较少，因此在大多数问题（动态规划多余的计算数目并不算多）下较记忆化搜索有一定优势。</li>
<li><a href="https://leetcode.com/problems/unique-paths-ii/#/description">Unique Paths [[II]</a> 的动态规划解答关键已经在递归思路中体现，即：从起点到当前网格的可行路径总数为到左方网格（向右移动到达当前网格）及上方网格（向下移动达到当前网格）可行路径总数之和。<ul>
<li>需要注意的是，从起点到（1，？）或（？，1）的可行路径显然都只有一条（一直向右移动/一直向下移动）。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="comment">// sanity check</span></div><div class="line">        <span class="keyword">if</span>(m&lt;<span class="number">1</span> || n&lt;<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> paths[m][n];</div><div class="line">        <span class="comment">// paths(1, 1...n), left to right</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;n; col++) &#123;</div><div class="line">            paths[<span class="number">0</span>][col] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// paths(1...n, 1), up to down</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;m; row++) &#123;</div><div class="line">            paths[row][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">1</span>; row&lt;m; row++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">1</span>; col&lt;n; col++) &#123;</div><div class="line">                <span class="comment">// left to right + up to down</span></div><div class="line">                paths[row][col] = paths[row][col<span class="number">-1</span>] + paths[row<span class="number">-1</span>][col];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> paths[m<span class="number">-1</span>][n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://leetcode.com/problems/unique-paths-ii/#/description">Unique Paths [[II]</a> 思路基本一致，只是当当前网格存在障碍物，其到起点的可行路径显然不存在。<ul>
<li>另外，对于从起点到（1，？）或（？，1）可行路径的分析与递归思路解答时一致。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> rowSize = obstacleGrid.size();</div><div class="line">        <span class="keyword">int</span> colSize = obstacleGrid[<span class="number">0</span>].size();</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>((rowSize &lt; <span class="number">1</span>) || (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) || (obstacleGrid[rowSize<span class="number">-1</span>][colSize<span class="number">-1</span>] == <span class="number">1</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> paths[rowSize][colSize];</div><div class="line">        <span class="comment">// obstacleGrid[0][0] == 0 from above</span></div><div class="line">        paths[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// paths(1, 1...n)</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">1</span>; col&lt;colSize; col++) &#123;</div><div class="line">            paths[<span class="number">0</span>][col] = obstacleGrid[<span class="number">0</span>][col]==<span class="number">0</span> ? paths[<span class="number">0</span>][col<span class="number">-1</span>] : <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// paths(1...n, 1)</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">1</span>; row&lt;rowSize; row++) &#123;</div><div class="line">            paths[row][<span class="number">0</span>] = obstacleGrid[row][<span class="number">0</span>]==<span class="number">0</span> ? paths[row<span class="number">-1</span>][<span class="number">0</span>] : <span class="number">0</span>;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">1</span>; row&lt;rowSize; row++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">1</span>; col&lt;colSize; col++) &#123;</div><div class="line">                <span class="comment">// left to right + up to down</span></div><div class="line">                paths[row][col] = obstacleGrid[row][col]==<span class="number">0</span> ? (paths[row][col<span class="number">-1</span>] + paths[row<span class="number">-1</span>][col]) : <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> paths[rowSize<span class="number">-1</span>][colSize<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0007] Minimum Spanning Tree（最小生成树）]]></title>
      <url>/2017/04/06/Algorithms_Minimum%20Spanning%20Tree/</url>
      <content type="html"><![CDATA[<p>　本文将介绍带权图的最小生成树（Minimum Spanning Tree）算法：给定一个无向图 G，并且它的每条边均有权值，则 MST 是一个包括 G 的所有顶点及边的子集的图，这个子集保证图是连通的，并且子集中所有边的权值之和为所有子集中最小的。<br>　本文中介绍两种求解图的最小生成树的算法：Prim 算法和 Kruskal 算法，这两种算法都是贪心算法。一般而言，贪心策略不一定能保证找到全局最优解，但是对最小生成树问题来说，贪心策略能获得具有最小权值的生成树。<br><a id="more"></a></p>
<h4 id="Minimum-spanning-trees"><a href="#Minimum-spanning-trees" class="headerlink" title="Minimum spanning trees"></a>Minimum spanning trees</h4><ul>
<li>让所有节点都被连接的最佳边集合：不可能包含环。<ul>
<li>移除环中的任何一条边都会降低代价而不破坏<strong>连通性</strong>（所有节点都被连接）。</li>
</ul>
</li>
<li><strong>树</strong>是一种连通且无环的无向图。<ul>
<li>性质①：移除环中的任意一条边不会破坏图的连通性。</li>
<li>性质②：具有 n 个节点的树的边数为 n-1。<ul>
<li>n 个节点，n 个独立的连接部件。</li>
<li>边 ${u, v}$ 的两个顶点分别处于两个独立的连接部件，否则，必然已存在连接两者的一条路径， ${u, v}$ 将导致环的出现。</li>
<li>每添加一条边，总的连接部件数减少了 1，从 n 一步步减少到 1，需要添加 n-1 条边。</li>
</ul>
</li>
<li>性质③：任何一个连通无向图 $G = (V, E)$，若满足 $|E| = |V| - 1$，则其为树。<ul>
<li>如果 G 中包含一个环，则移除该环上任意一边，直到得到一个无环图。</li>
<li>G’ 是连通的（<code>性质①</code>），且无环，故为树，故 $|E’| = |V| - 1$（<code>性质②</code>），实际上并没有移除过任意一条边，其本身就是树，即 $G’ = G$。</li>
</ul>
</li>
<li>性质④：一个无向图是树，当且仅当在其任意两个节点间仅存在唯一路径。<ul>
<li>任意两个节点间都存在一条路径 ===&gt; 连通性</li>
<li>路径唯一 ===&gt; 无环，环必然使得任意两个节点间存在两条路径</li>
</ul>
</li>
</ul>
</li>
<li><strong>最小生成树</strong>：具有最小代价（总权重）的树<ul>
<li>图的生成树是它的一棵含有其所有顶点的无环连通子图，一幅加权图的最小生成树（MST）是它的一棵权值（树中的所有边的权值之和）最小的生成树。</li>
<li>树$T = (V, E’)$，其中 $E \subseteq E’$，使得权重 $weight(T) = \sum_{e \in E’} w_e$ 最小。</li>
</ul>
</li>
</ul>
<h4 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a>Prim 算法</h4><blockquote>
<p>References:</p>
<ul>
<li><a href="http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591446.html">6.3.2 最小支撑树树–Prim算法，基于优先队列的Prim算法，Kruskal算法，Boruvka算法，“等价类”UnionFind</a></li>
</ul>
</blockquote>
<ul>
<li>Prim 算法可以说是所有 MST 算法中最简单的，比较适用于稠密图。以图中任意一个顶点 s 开始，MST 初始化为 ：{ V(s), E(none) }（顶点，边），称之为“当前 MST”，选择与当前 MST 中所有顶点相关连的边中权值最小的边，并添加到当前 MST 中。这一过程一直迭代到图中所有顶点都添加到 MST 中为止。<ul>
<li>在迭代时，假设当前 MST 中顶点形成集合 $V(v_0, v_1, …)$，则对 $V(v_0, v_1, …)$ 中的每一个 $v_i$，遍历与其相邻的所有边，并找到权值最小的边。<center><img src="/img/Algorithms/0007_PrimPseudo.png" width="720px"/></center></li>
</ul>
</li>
<li>Prim 最小生成树算法与 <a href="http://durant35.github.io/2017/03/29/Algorithms_Some%20Shortest-path%20Algorithms/#Dijkstra-算法">Dijkstra 最短路径算法</a> 十分相似，只不过 Prim 算法里节点的值是该节点到当前最小生成树中所有节点的边中的最短长度，而 Dijkstra 算法中节点的值是该节点到源节点的当前最短路径长度。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>		<span class="comment">/* stdin */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>		<span class="comment">/* INT_MAX */</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="comment">// cost for VertexNode to reach current MST</span></div><div class="line">  <span class="keyword">int</span> cost;</div><div class="line">  <span class="comment">// recording the pre-visit VertexNode in the path --&gt; restore a MST</span></div><div class="line">  VertexNode* prev;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].prev = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(Graph&amp; g, <span class="keyword">int</span> start=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">  <span class="keyword">bool</span> visited[g.vertexNum];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    g.VertexNodes[i].cost = INT_MAX;</div><div class="line">    g.VertexNodes[i].prev = <span class="literal">NULL</span>;</div><div class="line">    visited[i] = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"MST constructing:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  g.VertexNodes[start].cost = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> vertexNuminMST = <span class="number">0</span>; vertexNuminMST &lt; g.vertexNum; vertexNuminMST++) &#123;</div><div class="line">    <span class="comment">// Pick the node not in current MST with smallest cost</span></div><div class="line">    <span class="keyword">int</span> minCost = INT_MAX;</div><div class="line">    <span class="keyword">int</span> pickIdx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">      <span class="keyword">if</span>(!visited[i] &amp;&amp; g.VertexNodes[i].cost&lt;minCost) &#123;</div><div class="line">        minCost = g.VertexNodes[i].cost;</div><div class="line">        pickIdx = i;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// other nodes are unreachable</span></div><div class="line">    <span class="keyword">if</span>(pickIdx == <span class="number">-1</span>) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    visited[pickIdx] = <span class="literal">true</span>;</div><div class="line">    <span class="comment">// select an edge</span></div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[pickIdx].prev != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[pickIdx].data &lt;&lt; <span class="string">"--&gt;"</span> &lt;&lt; g.VertexNodes[pickIdx].prev-&gt;data</div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; g.VertexNodes[pickIdx].cost &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    VertexNode* v = &amp;g.VertexNodes[pickIdx];</div><div class="line"> </div><div class="line">    <span class="comment">// update the cost(cost to current MST) for the successor vertex of current adding node</span></div><div class="line">    adjVertexNode* head = v-&gt;<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">// visited to avoid repeatedly update</span></div><div class="line">      <span class="keyword">if</span>(!visited[head-&gt;adjVertexIdx]</div><div class="line">        &amp;&amp; g.VertexNodes[head-&gt;adjVertexIdx].cost &gt; head-&gt;weight) &#123;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].cost = head-&gt;weight;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].prev = v;</div><div class="line">      &#125;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMST</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> cost = <span class="number">0</span>;</div><div class="line">  <span class="comment">// MST always starts from 0</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=g.vertexNum<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[i].prev != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"&lt;--"</span> &lt;&lt; g.VertexNodes[i].prev-&gt;data</div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; g.VertexNodes[i].cost &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">       cost += g.VertexNodes[i].cost;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"   cost: "</span> &lt;&lt; cost &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  freopen(<span class="string">"Prim.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  Prim(g);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Minimum Spanning Tree: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  PrintMST(g);</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>构建并运行，结果如下：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ g++ Prim.cpp -o Prim</div><div class="line">$ ./Prim</div><div class="line">The adjacent list <span class="keyword">for</span> graph is:</div><div class="line"> 0-&gt;7(8) 1(4) </div><div class="line"> 1-&gt;2(8) 0(4) </div><div class="line"> 2-&gt;8(2) 5(4) 3(7) 1(8) </div><div class="line"> 3-&gt;5(14) 4(9) 2(7) </div><div class="line"> 4-&gt;5(10) 3(9) </div><div class="line"> 5-&gt;6(2) 4(10) 3(14) 2(4) </div><div class="line"> 6-&gt;8(6) 7(1) 5(2) </div><div class="line"> 7-&gt;8(7) 6(1) 0(8) </div><div class="line"> 8-&gt;7(7) 6(6) 2(2) </div><div class="line"> </div><div class="line">MST constructing:</div><div class="line">  + 1--&gt;0(4)</div><div class="line">  + 2--&gt;1(8)</div><div class="line">  + 8--&gt;2(2)</div><div class="line">  + 5--&gt;2(4)</div><div class="line">  + 6--&gt;5(2)</div><div class="line">  + 7--&gt;6(1)</div><div class="line">  + 3--&gt;2(7)</div><div class="line">  + 4--&gt;3(9)</div><div class="line"> </div><div class="line">Minimum Spanning Tree: </div><div class="line">  + 8&lt;--2(2)</div><div class="line">  + 7&lt;--6(1)</div><div class="line">  + 6&lt;--5(2)</div><div class="line">  + 5&lt;--2(4)</div><div class="line">  + 4&lt;--3(9)</div><div class="line">  + 3&lt;--2(7)</div><div class="line">  + 2&lt;--1(8)</div><div class="line">  + 1&lt;--0(4)</div><div class="line">   cost: 37</div></pre></td></tr></table></figure>
<ul>
<li>整棵最小生成树的构建过程如下：<center><img src="/img/Algorithms/0007_MSTPrim.png" width="640px"/></center></li>
<li>上述无向图对应的输入文件 <code>Prim.txt</code> 如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">9 26</div><div class="line">0 1 2 3 4 5 6 7 8</div><div class="line">0 1 4</div><div class="line">0 7 8</div><div class="line">1 0 4</div><div class="line">1 2 8</div><div class="line">2 1 8</div><div class="line">2 3 7</div><div class="line">2 5 4</div><div class="line">2 8 2</div><div class="line">3 2 7</div><div class="line">3 4 9</div><div class="line">3 5 14</div><div class="line">4 3 9</div><div class="line">4 5 10</div><div class="line">5 2 4</div><div class="line">5 3 14</div><div class="line">5 4 10</div><div class="line">5 6 2</div><div class="line">6 5 2</div><div class="line">6 7 1</div><div class="line">6 8 6</div><div class="line">7 0 8</div><div class="line">7 6 1</div><div class="line">7 8 7</div><div class="line">8 2 2</div><div class="line">8 6 6</div><div class="line">8 7 7</div></pre></td></tr></table></figure>
<ul>
<li>从上述的实现过程可以发现，在遍历与顶点相邻的所有边寻找与当前 MST 最近的顶点时，需要进行循环判断，选择距离最近的边之后其余边的信息将被舍弃；在下次循环判断时这些舍弃的边又被再次参与“竞选”最近的边，这无疑带来了重复判断。可以引入一个 <strong>最小堆</strong>，堆中存放遍历过的边。在遍历与顶点相邻的所有边时，首先将连边添加到堆中，然后直接将堆顶的边取出并添加到 MST 中。这样就可以避免重复判断。<ul>
<li>基于 <code>std::priority_queue</code> 优先级队列的实现</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>		<span class="comment">/* stdin */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>		<span class="comment">/* INT_MAX */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>		<span class="comment">/* priority_queue */</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  <span class="keyword">int</span> vertexIdx;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="comment">// cost for VertexNode to reach current MST</span></div><div class="line">  <span class="keyword">int</span> cost;</div><div class="line">  <span class="comment">// recording the pre-visit VertexNode in the path --&gt; restore a MST</span></div><div class="line">  VertexNode* prev;</div><div class="line">  <span class="comment">/* reload compare operator for priority queue</div><div class="line">   * In order to achieve the minimum heap(in ascending order)</div><div class="line">   *   reload operator&lt;, redefine the priority to smaller one</div><div class="line">   */</span></div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> VertexNode&amp; right) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> cost &gt; right.cost;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].vertexIdx = i;</div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].prev = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(Graph&amp; g, <span class="keyword">int</span> start=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">  priority_queue&lt;VertexNode&gt; vertexQueue;</div><div class="line"> </div><div class="line">  <span class="keyword">bool</span> visited[g.vertexNum];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    g.VertexNodes[i].cost = INT_MAX;</div><div class="line">    g.VertexNodes[i].prev = <span class="literal">NULL</span>;</div><div class="line">    visited[g.VertexNodes[i].vertexIdx] = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  g.VertexNodes[start].cost = <span class="number">0</span>;</div><div class="line">  <span class="comment">// make priority queue, using cost-values as keys</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    vertexQueue.push(g.VertexNodes[i]);</div><div class="line">  &#125;</div><div class="line"> 	</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nMST constructing:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">while</span>(!vertexQueue.empty()) &#123;</div><div class="line">    <span class="comment">// print current priority queue</span></div><div class="line">    <span class="comment">// #define PRINT</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> PRINT</span></div><div class="line">    priority_queue&lt;VertexNode&gt; printQueue = vertexQueue;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">while</span>(!printQueue.empty()) &#123;</div><div class="line">      VertexNode tmp = printQueue.top();</div><div class="line">      printQueue.pop();</div><div class="line">      <span class="keyword">if</span>(tmp.cost != INT_MAX) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; tmp.data</div><div class="line">         	 &lt;&lt; <span class="string">"("</span></div><div class="line">           &lt;&lt; tmp.cost</div><div class="line">         	 &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"."</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line">    VertexNode v = vertexQueue.top();</div><div class="line"> </div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> PRINT</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\tpop: "</span> &lt;&lt; v.data &lt;&lt; <span class="string">"("</span>;</div><div class="line">    <span class="keyword">if</span>(v.cost != INT_MAX) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; v.cost;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"INF"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">" "</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line">    vertexQueue.pop();</div><div class="line">  </div><div class="line">    <span class="keyword">int</span> vertexIdx = v.vertexIdx;</div><div class="line">    <span class="comment">// cout &lt;&lt; "[" &lt;&lt; vertexIdx &lt;&lt; "]";</span></div><div class="line">    <span class="keyword">if</span>(visited[vertexIdx]) &#123;</div><div class="line">      <span class="meta">#<span class="meta-keyword">ifdef</span> PRINT</span></div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">      <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    visited[vertexIdx] = <span class="literal">true</span>;</div><div class="line">    <span class="comment">// an edge is selecting </span></div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[vertexIdx].prev != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[vertexIdx].data &lt;&lt; <span class="string">"--&gt;"</span> &lt;&lt; g.VertexNodes[vertexIdx].prev-&gt;data</div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; g.VertexNodes[vertexIdx].cost &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> PRINT</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push: "</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line">    adjVertexNode* head = v.<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">/*</div><div class="line">       * A node with different dist will be pushed repeatedly for smallest one</div><div class="line">       *  use visited(visited[vertexIdx]) flag to avoid not-smallest visit</div><div class="line">       * A node in known-region should't be repeatedly updated </div><div class="line">       *	use visited[head-&gt;adjVertexIdx]</div><div class="line">       */</span></div><div class="line">      <span class="keyword">if</span>(!visited[head-&gt;adjVertexIdx]</div><div class="line">        &amp;&amp; g.VertexNodes[head-&gt;adjVertexIdx].cost &gt; head-&gt;weight) &#123;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].cost = head-&gt;weight;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].prev = &amp;g.VertexNodes[v.vertexIdx];</div><div class="line">        vertexQueue.push(g.VertexNodes[head-&gt;adjVertexIdx]);</div><div class="line"></div><div class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> PRINT</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data</div><div class="line">           &lt;&lt; <span class="string">"("</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].cost &lt;&lt; <span class="string">")"</span></div><div class="line">           &lt;&lt; <span class="string">" "</span>;</div><div class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">      &#125;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> PRINT</span></div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMST</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> cost = <span class="number">0</span>;</div><div class="line">  <span class="comment">// MST always starts from 0</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=g.vertexNum<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[i].prev != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"&lt;--"</span> &lt;&lt; g.VertexNodes[i].prev-&gt;data</div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; g.VertexNodes[i].cost &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">       cost += g.VertexNodes[i].cost;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"   cost: "</span> &lt;&lt; cost &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  freopen(<span class="string">"Prim.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  Prim(g);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Minimum Spanning Tree: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  PrintMST(g);</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>构建并运行，结果如下：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ g++ Prim_queue.cpp -o Prim_queue</div><div class="line">$ ./Prim_queue </div><div class="line">The adjacent list <span class="keyword">for</span> graph is:</div><div class="line"> 0-&gt;7(8) 1(4) </div><div class="line"> 1-&gt;2(8) 0(4) </div><div class="line"> 2-&gt;8(2) 5(4) 3(7) 1(8) </div><div class="line"> 3-&gt;5(14) 4(9) 2(7) </div><div class="line"> 4-&gt;5(10) 3(9) </div><div class="line"> 5-&gt;6(2) 4(10) 3(14) 2(4) </div><div class="line"> 6-&gt;8(6) 7(1) 5(2) </div><div class="line"> 7-&gt;8(7) 6(1) 0(8) </div><div class="line"> 8-&gt;7(7) 6(6) 2(2) </div><div class="line"> </div><div class="line">MST constructing:</div><div class="line">  + 1--&gt;0(4)</div><div class="line">  + 7--&gt;0(8)</div><div class="line">  + 6--&gt;7(1)</div><div class="line">  + 5--&gt;6(2)</div><div class="line">  + 2--&gt;5(4)</div><div class="line">  + 8--&gt;2(2)</div><div class="line">  + 3--&gt;2(7)</div><div class="line">  + 4--&gt;3(9)</div><div class="line"> </div><div class="line">Minimum Spanning Tree: </div><div class="line">  + 8&lt;--2(2)</div><div class="line">  + 7&lt;--0(8)</div><div class="line">  + 6&lt;--7(1)</div><div class="line">  + 5&lt;--6(2)</div><div class="line">  + 4&lt;--3(9)</div><div class="line">  + 3&lt;--2(7)</div><div class="line">  + 2&lt;--5(4)</div><div class="line">  + 1&lt;--0(4)</div><div class="line">   cost: 37</div></pre></td></tr></table></figure>
<ul>
<li>整棵最小生成树的构建过程如下：<center><img src="/img/Algorithms/0007_MSTPrimqueue.png" width="640px"/></center>

</li>
</ul>
<h4 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h4><blockquote>
<p>References:</p>
<ul>
<li><a href="http://www.cnblogs.com/cielosun/p/5654539.html">并查集(union-find set)与Kruskal算法</a></li>
</ul>
</blockquote>
<ul>
<li>Prim 算法的思路是通过一次找出一条边添加到 MST 中，其中每一步都是要找到一条新的边并且关联到不断增长的当前 MST。Kruskal 算法也是一次找到一条边来不断构建 MST，但是与 Prim 算法不同的是，它要找到连接两棵树的一条边，这两棵树处于一个 MST 子树的分离的森林中，其中 MST 子树将不断增长。<ul>
<li>算法由一个包括 N 棵（单个顶点组成的）树的森林开始。然后持续完成合并两棵树的操作（使用最短的边连接它们），直至只剩下一棵树，这棵树就是最终的MST树。</li>
<li>Kruskal 算法的正确性源自所谓的分割性质<ul>
<li><strong>分割性质</strong>：设边集 X 是 $G = (V, E)$ 的某个生成树的一部分，选定任一节点集合 $S \subset V$，使得 X 中没有跨越 S 和 $V - S$ 的边。若 e 是跨越 S 和 $V - S$ 的权重最轻的边，则 $X \cup {e}$ 也是某个 MST 的一部分。<ul>
<li>有：对任意的分割，在 X 不含跨越分割的边（该边的一个端点属于 S，另一个端点属于 $V - S$ ）这一前提下，增加跨越该分割的权重最轻的边 e 总是安全的。</li>
<li>假设 X 是某个 MST T 的一部分，① e 恰好也在 T 中，无需证明；② e 不属于 T，通过改变 T 中的一条边可以构造一个与之不同的 MST T’，使得 T’ 包含  $X \cup {e}$；由于 T 是连通的，在 T 中必然存在一条路径连接 e 的两个端点，故增加 e 将形成一个环，这个环包含另外某条跨越分割 ${S, V - S}$ 的边 e’，将其移除，得到 $T’ = T \cup {e} - {e’}$；③  <code>性质①</code> 可证 T’ 是连通的；另，T’ 和 T 的边数相同，<code>性质②</code> 和 <code>性质③</code> 可知，T’ 也是树。</li>
<li>树T’ 代价：$ weight(T’) = weight(T) + w(e) - w(e’)$，<strong>e 是跨越 S 和 $V - S$ 的权重最轻的边</strong>，有 $w(e) \leq w(e’)$，从而  $weight(T) \leq weight(T’)$，由 T 是 MST，可知 $weight(T) = weight(T’)$，T’ 也是 MST。<center><img src="/img/Algorithms/0007_KruskalPseudo.png" width="720px"/></center></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Kruskal 最小生成树算法实现细节<ul>
<li>起始于一个空的图。</li>
<li>通过逐条增加边来构造最小生成树：假如在构建最小生成树的过程中，我们已经选择了某些边并在向着正确的方向前进，下一步选择那条边呢？<ul>
<li>不断重复地选择未被选中的边中权重最轻的且不会形成环的一条。<ul>
<li>为保证连接等价类边的权值最短，算法首先对图中所有边按照权值进行排序。按权值由小到大依次选择边</li>
<li>不会形成环：每次选择一条边加入到现有的部分解中 ===&gt; 需要检验每一条侯选边(u-&gt;v) 的端点是否属于不同的连通分量，一旦选定了某条边，则将这条边添加到 MST 并将两个相关的连通分量将被合并。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Kruskal 最小生成树算法关键数据结构：并查集/分离集 (union-find/disjoint sets)<ul>
<li>Kruskal 算法开始有 n 个分别包含一个节点的集合（即 n 个分离集）；随着算法的进展，分离集的个数逐渐减少，直到算法的最后一步，分离集的个数变为 1，此时产生最小生成树。</li>
<li>并查集：并查集处理的是集合之间的关系，即 union，find。在这种数据类型中，N个不同元素被分成若干个组，每组是一个集合，这种集合叫做分离集合。并查集支持查找一个元素所属的集合和两个元素分别所属的集合的合并。注意：并查集只能进行合并操作，不能进行分割操作。</li>
<li>并查集支持以下操作：<ul>
<li><code>makeset(x)</code>：创建一个仅包含 x 的独立集合（分离集）；最初每个节点单独构成了一个分离集 ==&gt; 一组分离集</li>
<li><code>find(x)</code>：不断重复地检验节点对，判断其是否属于同一个集合？</li>
<li><code>union(x, y)</code>：每当增加了一条边，将与之相关的两个集合合并。</li>
</ul>
</li>
<li>并查集的实现原理<ul>
<li>并查集是使用树结构实现的<ul>
<li>初始化：准备 N 个节点来表示 N 个元素，最开始没有边。</li>
<li>为避免树的退化，对于每棵树，记录其高度 rank。</li>
<li>查询：查询两个节点是否在同一个集合，只需要查询他们是否具有相同的根。<center><img src="/img/Algorithms/0007_UnionFind_find.png" width="340px"/></center></li>
<li>合并：从一个分离集的根向另一个分离集的根连边，这样两棵树就变为了一棵树，也就把两个集合合并为一个了；除非将要合并的树等高，否则将不会出现合并后总高度增加的情形；如果合并时两棵树高度不同，那么从 rank 小的向 rank 大的连边。<center><img src="/img/Algorithms/0007_UnionFind_union.png" width="580px"/></center></li>
<li>路径压缩：每次 find 操作中，当循着一系列的父指针最终找到树的根后，改变所有这些父指针的目标，使其直接指向树根。<br><center><img src="/img/Algorithms/0007_UnionFind_find2.png" width="420px"/></center><ul>
<li>通过路径压缩，所有节点的等级都不会发生改变；节点的 rank 不再能解释为其下方子树的高度</li>
<li>union 操作只关注树的顶层，路径压缩不会对 union 操作产生影响，它将保持树的顶层不变</li>
<li>find 操作（不论是否采用路径压缩）仅仅触及树的内部</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span>		<span class="comment">/* assert */</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">class</span> UnionFindSets &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> PI[MAX_VERTEX_NUM];</div><div class="line">    <span class="keyword">int</span> rank[MAX_VERTEX_NUM];</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    UnionFindSets(<span class="keyword">int</span> size) &#123;</div><div class="line">    	<span class="keyword">this</span>-&gt;size = size;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> vertexIdx=<span class="number">0</span>; vertexIdx&lt;size; vertexIdx++) &#123;</div><div class="line">    		PI[vertexIdx] = <span class="number">-1</span>;</div><div class="line">    		rank[vertexIdx] = <span class="number">-1</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeset</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	PI[x] = x;</div><div class="line">    	rank[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	</div><div class="line">        <span class="comment">// cout &lt;&lt; "&lt;find&gt;:" &lt;&lt; endl; </span></div><div class="line">        <span class="comment">// cout &lt;&lt; "\tPI[" &lt;&lt; x &lt;&lt; "]: " &lt;&lt; PI[x] &lt;&lt; endl;</span></div><div class="line">        <span class="comment">/*</div><div class="line">         * find(PI[x]): backtracking, finding the root node</div><div class="line">         * PI[x]=&lt;backtracking result&gt;: </div><div class="line">         *	directly connect the leaf node to the root node to achieve path compression</div><div class="line">         */</span></div><div class="line">        <span class="keyword">if</span>(x != PI[x]) &#123;</div><div class="line">        	PI[x] = find(PI[x]);</div><div class="line">        &#125;</div><div class="line">    	<span class="keyword">return</span> PI[x];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	assert(y &gt;= <span class="number">0</span> &amp;&amp; y &lt; size);</div><div class="line">        <span class="comment">// cout &lt;&lt; "&lt;unite&gt;: " &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">int</span> rx = find(x);</div><div class="line">        <span class="keyword">int</span> ry = find(y);</div><div class="line">        <span class="comment">// cout &lt;&lt; "\t" &lt;&lt; x &lt;&lt; "["  &lt;&lt; rx &lt;&lt; "]" &lt;&lt; y &lt;&lt; "[" &lt;&lt; ry &lt;&lt; "]" &lt;&lt; endl;</span></div><div class="line">    	assert(rx &gt;= <span class="number">0</span> &amp;&amp; rx &lt; size);</div><div class="line">    	assert(ry &gt;= <span class="number">0</span> &amp;&amp; ry &lt; size);</div><div class="line">        <span class="keyword">if</span>(rx == ry) &#123;</div><div class="line">        	<span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(rank[rx] &gt; rank[ry]) &#123;</div><div class="line">        	PI[ry] = rx;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            PI[rx] = ry;</div><div class="line">            <span class="keyword">if</span>(rank[rx] == rank[ry]) &#123;</div><div class="line">            	rank[ry] += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printset</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;Union&amp;Find set&gt;: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">    		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\tPI["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: "</span> &lt;&lt; PI[i]</div><div class="line">    			 &lt;&lt; <span class="string">"   "</span></div><div class="line">    			 &lt;&lt; <span class="string">"rank["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: "</span> &lt;&lt; rank[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>基于并查集的 Kruskal 算法实现：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>		<span class="comment">/* stdin */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>		<span class="comment">/* INT_MAX */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span>		<span class="comment">/* assert */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span>			<span class="comment">/* priority_queue */</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">class</span> UnionFindSets &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">int</span> PI[MAX_VERTEX_NUM];</div><div class="line">    <span class="keyword">int</span> rank[MAX_VERTEX_NUM];</div><div class="line">    <span class="keyword">int</span> size;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    UnionFindSets(<span class="keyword">int</span> size) &#123;</div><div class="line">    	<span class="keyword">this</span>-&gt;size = size;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> vertexIdx=<span class="number">0</span>; vertexIdx&lt;size; vertexIdx++) &#123;</div><div class="line">    		PI[vertexIdx] = <span class="number">-1</span>;</div><div class="line">    		rank[vertexIdx] = <span class="number">-1</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeset</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	PI[x] = x;</div><div class="line">    	rank[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">        <span class="comment">// cout &lt;&lt; "&lt;find&gt;:" &lt;&lt; endl; </span></div><div class="line">        <span class="comment">// cout &lt;&lt; "\tPI[" &lt;&lt; x &lt;&lt; "]: " &lt;&lt; PI[x] &lt;&lt; endl;</span></div><div class="line">        <span class="comment">/*</div><div class="line">         * find(PI[x]): backtracking, finding the root node</div><div class="line">         * PI[x]=&lt;backtracking result&gt;: </div><div class="line">         *	directly connect the leaf node to the root node to achieve path compression</div><div class="line">         */</span></div><div class="line">        <span class="keyword">if</span>(x != PI[x]) &#123;</div><div class="line">        	PI[x] = find(PI[x]);</div><div class="line">        &#125;</div><div class="line">    	<span class="keyword">return</span> PI[x];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    	assert(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; size);</div><div class="line">    	assert(y &gt;= <span class="number">0</span> &amp;&amp; y &lt; size);</div><div class="line">        <span class="comment">// cout &lt;&lt; "&lt;unite&gt;: " &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">int</span> rx = find(x);</div><div class="line">        <span class="keyword">int</span> ry = find(y);</div><div class="line">        <span class="comment">// cout &lt;&lt; "\t" &lt;&lt; x &lt;&lt; "["  &lt;&lt; rx &lt;&lt; "]" &lt;&lt; y &lt;&lt; "[" &lt;&lt; ry &lt;&lt; "]" &lt;&lt; endl;</span></div><div class="line">    	assert(rx &gt;= <span class="number">0</span> &amp;&amp; rx &lt; size);</div><div class="line">    	assert(ry &gt;= <span class="number">0</span> &amp;&amp; ry &lt; size);</div><div class="line">        <span class="keyword">if</span>(rx == ry) &#123;</div><div class="line">        	<span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(rank[rx] &gt; rank[ry]) &#123;</div><div class="line">        	PI[ry] = rx;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            PI[rx] = ry;</div><div class="line">            <span class="keyword">if</span>(rank[rx] == rank[ry]) &#123;</div><div class="line">            	rank[ry] += <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printset</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;Union&amp;Find set&gt;: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">    		<span class="built_in">cout</span> &lt;&lt; <span class="string">"\tPI["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: "</span> &lt;&lt; PI[i]</div><div class="line">    			 &lt;&lt; <span class="string">"   "</span></div><div class="line">    			 &lt;&lt; <span class="string">"rank["</span> &lt;&lt; i &lt;&lt; <span class="string">"]: "</span> &lt;&lt; rank[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  <span class="keyword">int</span> vertexIdx;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="comment">// cost for VertexNode to reach current MST</span></div><div class="line">  <span class="keyword">int</span> cost;</div><div class="line">  <span class="comment">// recording the pre-visit VertexNode in the path --&gt; restore a MST</span></div><div class="line">  VertexNode* prev;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Edge &#123;</div><div class="line">  <span class="keyword">int</span> fromIdx, toIdx;</div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Edge&amp; right) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> weight &gt; right.weight;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].vertexIdx = i;</div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].prev = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="function">UnionFindSets <span class="title">sets</span><span class="params">(g.vertexNum)</span></span>;</div><div class="line">  <span class="comment">// use priority_queue for sorting the edges E by weight</span></div><div class="line">  priority_queue&lt;Edge&gt; EdgeQueue;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    sets.makeset(g.VertexNodes[i].vertexIdx);</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      Edge e;</div><div class="line">      e.fromIdx = g.VertexNodes[i].vertexIdx;</div><div class="line">      e.toIdx = head-&gt;adjVertexIdx;</div><div class="line">      e.weight = head-&gt;weight;</div><div class="line">      EdgeQueue.push(e);</div><div class="line"></div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nMST constructing: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">while</span>(!EdgeQueue.empty()) &#123;</div><div class="line">    Edge e = EdgeQueue.top();</div><div class="line">    EdgeQueue.pop();</div><div class="line">    <span class="comment">// cout &lt;&lt; "\npop: " &lt;&lt; e.fromIdx &lt;&lt; "-&gt;" &lt;&lt; e.toIdx &lt;&lt; "(" &lt;&lt; e.weight &lt;&lt; ")" &lt;&lt; endl;</span></div><div class="line">    <span class="keyword">if</span>(sets.find(e.fromIdx) != sets.find(e.toIdx)) &#123;</div><div class="line">      <span class="comment">/*</div><div class="line">       * 2 edges with same vertex in an undirect graph</div><div class="line">       *	but every VertexNode can only have on prev.</div><div class="line">       */</span></div><div class="line">      <span class="keyword">if</span>(g.VertexNodes[e.toIdx].prev != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      g.VertexNodes[e.toIdx].prev = &amp;g.VertexNodes[e.fromIdx];</div><div class="line">      g.VertexNodes[e.toIdx].cost = e.weight;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[e.fromIdx].data &lt;&lt; <span class="string">"--&gt;"</span> &lt;&lt; g.VertexNodes[e.toIdx].data</div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; e.weight &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      sets.unite(e.fromIdx, e.toIdx);</div><div class="line">      <span class="comment">// sets.printset();</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMST</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> cost = <span class="number">0</span>;</div><div class="line">  <span class="comment">// MST always starts from 0</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=g.vertexNum<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</div><div class="line">    <span class="keyword">if</span>(g.VertexNodes[i].prev != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t+ "</span></div><div class="line">         &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"&lt;--"</span> &lt;&lt; g.VertexNodes[i].prev-&gt;data</div><div class="line">         &lt;&lt; <span class="string">"("</span> &lt;&lt; g.VertexNodes[i].cost &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">       cost += g.VertexNodes[i].cost;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"   cost: "</span> &lt;&lt; cost &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  freopen(<span class="string">"Prim.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  Kruskal(g);</div><div class="line">  </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Minimum Spanning Tree: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  PrintMST(g);</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>构建并运行，结果如下：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ g++ Kruskal.cpp -o Kruskal</div><div class="line">$ ./Kruskal </div><div class="line">The adjacent list <span class="keyword">for</span> graph is:</div><div class="line"> 0-&gt;7(8) 1(4) </div><div class="line"> 1-&gt;2(8) 0(4) </div><div class="line"> 2-&gt;8(2) 5(4) 3(7) 1(8) </div><div class="line"> 3-&gt;5(14) 4(9) 2(7) </div><div class="line"> 4-&gt;5(10) 3(9) </div><div class="line"> 5-&gt;6(2) 4(10) 3(14) 2(4) </div><div class="line"> 6-&gt;8(6) 7(1) 5(2) </div><div class="line"> 7-&gt;8(7) 6(1) 0(8) </div><div class="line"> 8-&gt;7(7) 6(6) 2(2) </div><div class="line"> </div><div class="line">MST constructing: </div><div class="line">  + 6--&gt;7(1)</div><div class="line">  + 5--&gt;6(2)</div><div class="line">  + 8--&gt;2(2)</div><div class="line">  + 2--&gt;5(4)</div><div class="line">  + 1--&gt;0(4)</div><div class="line">  + 2--&gt;3(7)</div><div class="line">  + 2--&gt;1(8)</div><div class="line">  + 3--&gt;4(9)</div><div class="line"> </div><div class="line">Minimum Spanning Tree: </div><div class="line">  + 7&lt;--6(1)</div><div class="line">  + 6&lt;--5(2)</div><div class="line">  + 5&lt;--2(4)</div><div class="line">  + 4&lt;--3(9)</div><div class="line">  + 3&lt;--2(7)</div><div class="line">  + 2&lt;--8(2)</div><div class="line">  + 1&lt;--2(8)</div><div class="line">  + 0&lt;--1(4)</div><div class="line">   cost: 37</div></pre></td></tr></table></figure>
<ul>
<li>整棵最小生成树的构建过程如下：<center><img src="/img/Algorithms/0007_MSTKruskal.png" width="640px"/></center></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0006] Some Shortest-path Algorithms（最短路径算法）]]></title>
      <url>/2017/03/29/Algorithms_Some%20Shortest-path%20Algorithms/</url>
      <content type="html"><![CDATA[<p>　本文介绍几种常见的最短路径算法：</p>
<ul>
<li>Breadth-first Search 无权最短路径算法；</li>
<li>Dijkstra 带权（非负权）图的单源最短路算法；</li>
<li>Bellman-Ford 带权（可负权）图的单源最短路算法；</li>
<li>Floyd-Warshall 带权（可负权）图的全源最短路算法，<br>　包括它们各自的<strong>使用条件&amp;范围</strong>，<strong>算法原理介绍</strong>以及<strong>代码实现</strong>。<a id="more"></a>
</li>
</ul>
<h4 id="Breadth-first-Search-无权最短路径算法"><a href="#Breadth-first-Search-无权最短路径算法" class="headerlink" title="Breadth-first Search 无权最短路径算法"></a>Breadth-first Search 无权最短路径算法</h4><ul>
<li><strong>BFS</strong> 适合边的权值均是 1（无权图）的最短路径问题，因为，假设 S 为起始点，<strong>BFS</strong> 每次都会先发现距离 S 为 k 的所有顶点，然后才会发现距离 S 为 k+1 的所有顶点。<br><center><img src="/img/Algorithms/0006_BFSPseudo.png" width="640px"/></center><br>① 对于外面的<code>while</code>循环，会执行|V|次，因为每个顶点入队出队一次。<br>② <code>dist(v)==∞</code> 说明节点 v 还没被访问，将其放入队列并更新<code>dist</code>值。<br>③ 里面的<code>for</code>循环一共会执行|E|次，即变长，所以该算法时间复杂度为O(|V|+|E|)。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>			<span class="comment">// for stdin</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>			<span class="comment">// for INT_MAX</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Alignment-requirement: the first char is expanded to 4(8) bytes in 32-bit(64-bit) machine</span></div><div class="line"><span class="comment">// sizeof(VertexNode) == 16(32)</span></div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="keyword">int</span> dist;</div><div class="line">  <span class="comment">// How to restore a shortest path: recording the pre-visit VertexNode in the path</span></div><div class="line">  VertexNode* preVertexNode;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">" "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Graph&amp; g, VertexNode&amp; Source)</span> </span>&#123;</div><div class="line">  <span class="built_in">queue</span>&lt;VertexNode*&gt; vertexQueue;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    g.VertexNodes[i].dist = INT_MAX;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  Source.dist = <span class="number">0</span>;</div><div class="line">  vertexQueue.push(&amp;Source);</div><div class="line">  <span class="keyword">while</span> (!vertexQueue.empty()) &#123;</div><div class="line">    VertexNode* v = vertexQueue.front();</div><div class="line">    vertexQueue.pop();</div><div class="line">    adjVertexNode* head = v-&gt;<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (g.VertexNodes[head-&gt;adjVertexIdx].dist == INT_MAX) &#123;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].dist = v-&gt;dist + <span class="number">1</span>;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].preVertexNode = v;</div><div class="line">        vertexQueue.push(&amp;g.VertexNodes[head-&gt;adjVertexIdx]);</div><div class="line">      &#125;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(Graph&amp; g, VertexNode* target)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (target-&gt;preVertexNode != <span class="literal">NULL</span>) &#123;</div><div class="line">    PrintPath(g, target-&gt;preVertexNode);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; target-&gt;data;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  freopen(<span class="string">"BFS.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(VertexNode) &lt;&lt; <span class="keyword">sizeof</span>(adjVertexNode*) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"  Source=&gt;Target\tPath"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> from=<span class="number">0</span>; from&lt;g.vertexNum; from++) &#123;</div><div class="line">    BFS(g, g.VertexNodes[from]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> to=<span class="number">0</span>; to&lt;g.vertexNum; to++) &#123;</div><div class="line">      <span class="keyword">if</span>(from == to) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; g.VertexNodes[from].data &lt;&lt; <span class="string">"==&gt;"</span> &lt;&lt; g.VertexNodes[to].data &lt;&lt; <span class="string">" \t\t("</span>;</div><div class="line">      PrintPath(g, &amp;g.VertexNodes[to]);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><img src="/img/Algorithms/0006_BFSGraph.png" width="640px"/></center>

<ul>
<li>忽略边的权值，该图对应的输入文件 <code>BFS.txt</code> 如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">6 18</div><div class="line">S A B C D T</div><div class="line">0 1</div><div class="line">0 3</div><div class="line">0 4</div><div class="line">1 0</div><div class="line">1 2 </div><div class="line">1 4</div><div class="line">2 1</div><div class="line">2 4</div><div class="line">2 5</div><div class="line">3 0</div><div class="line">3 4</div><div class="line">4 0</div><div class="line">4 1</div><div class="line">4 2</div><div class="line">4 3</div><div class="line">4 5</div><div class="line">5 2</div><div class="line">5 4</div></pre></td></tr></table></figure>
<ul>
<li>通过<code>g++</code>进行构建</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// -m32 option <span class="keyword">for</span> 32-bit execution</div><div class="line">g++ [-m32] BFS.cpp -o BFS</div></pre></td></tr></table></figure>
<p><a href="http://durant35.github.io/2017/03/22/Algorithms_BFS/#more">更多关于BFS算法的实现，可以点击阅读</a> </p>
<h4 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h4><blockquote>
<p>References:</p>
<ul>
<li><a href="http://www.cnblogs.com/skywang12345/p/3711512.html">Dijkstra算法(一)之 C语言详解</a></li>
<li><a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/07/31/2615833.html">最短路径—Dijkstra算法和Floyd算法</a></li>
</ul>
</blockquote>
<center><img src="/img/Algorithms/0006_DijkstraDerivation.png" width="480px"/></center>

<ul>
<li>Dijkstra <strong>算法推导</strong><ul>
<li>已知区域<code>S</code> 是包含 s 的某个顶点子集。</li>
<li>关于当前最短路径有很多单边扩展路径，其中 <code>u→v</code> 是最短的一条。</li>
<li>上图中，s 到 v 的最短路径即为这样一条路径：基于一条已知的最短路径中的某条边（如上图<code>s→u</code>）的扩展路径。<ul>
<li>推导条件：假设无负权，u 一定比 v 距离 s 更近，这意味着 u 在已知区域 S 中，否则将与 <strong>v 是 S 之外且与 s 距离最近的顶点</strong> 这一假设相矛盾。</li>
</ul>
</li>
<li>检查当前已知最短路径集合 S 的所有单边扩展路径，找到这些扩展路径中的最短路径，该路径的另一个端点即为加入 S 的下一个顶点。</li>
<li>提高算法的执行效率：基于这样一个事实，在算法的任意迭代步骤中，仅有的新扩展路径是那些连接最近加入到 S 中的顶点的路径，其它所有路径的长度之前已经计算过，无需重新计算。</li>
</ul>
</li>
</ul>
<center><img src="/img/Algorithms/0006_DijkstraPseudo.png" width="880px"/></center>

<ul>
<li>Dijkstra <strong>算法思想</strong> ：<ul>
<li>左图：① <code>dist(v)</code>：指向 v 的当前最短单边扩展路径的长度（对于与 S 不相邻的顶点，取值为 ∞）；② 每次 while 循环迭代的末尾，（1）存在一个值 d，使得从 s 到 S 中所有顶点的距离 ≤d。同时 s 到 S 外的所有顶点的距离≥d；（2）对于每个顶点 v，dist(v) 表示一条从 s 到 v 的最短路径的长度，该路径经过的顶点均在 S 中（如果不存在这样的路径，dist 为 ∞）。</li>
<li>右图：设 <code>G=(V，E)</code> 是一个带权有向图（无向可以转化为双向有向），把图中顶点集合<code>V</code>分成两组，第一组为已求出最短路径的顶点集合（用<code>S</code>表示，初始时 S 中只有一个源点，以后每求得一条最短路径 , 就将其加入到集合 S 中，直到全部顶点都加入到 S 中，算法就结束了），第二组为其余未确定最短路径的顶点集合（用<code>U</code>表示），按最短路径长度的递增次序依次把第二组的顶点加入 S 中。在加入的过程中，总保持从源点 v 到 S 中各顶点的最短路径长度不大于从源点 v 到 U 中任何顶点的最短路径长度。此外，每个顶点对应一个距离， S 中的顶点的距离就是从 v 到此顶点的最短路径长度， U 中的顶点的距离，是从 v 到此顶点只包括 S 中的顶点为中间顶点的当前最短路径长度。</li>
</ul>
</li>
<li>Dijkstra <strong>算法具体步骤</strong><br>  （1）初始时，S只包含源点，即S＝{v}，v的距离dist[v]为0。U包含除v外的其他顶点，U中顶点u距离dis[u]为边上的权值（若v与u有边）或 ∞（若u不是v的出边邻接点即没有边 <code>&lt;v→u&gt;</code>）。<br>  （2）从U中选取一个距离 v 最小的顶点 k，把 k，加入 S 中（该选定的距离（dist[k]）就是 v 到 k 的最短路径长度）。<br>  （3）以 k 为新考虑的中间点，修改 <code>U</code> 中各顶点的距离（松弛操作）：若从源点v到顶点u（u∈ U）的距离（经过顶点k）比原来距离（不经过顶点k）短，则修改顶点u的距离值，修改后的距离值等于顶点k的距离加上边上的权（即如果 <code>dist[k]+w[k,u]&lt;dist[u]</code>，那么把dist[u]更新成更短的距离 <code>dist[k]+w[k,u]</code>）。<br>  （4）重复步骤（2）和（3）直到所有顶点都包含在 <code>S</code> 中(要循环n-1次)。</li>
<li>基于数组实现的 Dijkstra 算法（<strong>void Dijkstra(Graph&amp; g, VertexNode&amp; Source)</strong> 函数）<ul>
<li>总共需要循环 |V| 次（步骤（4）），实现将所有节点添加进已知区域 S。</li>
<li>每次循环，需要选取一个距离最小的顶点（步骤（2）），需要对所有节点进行遍历（$O(|V|)$）。</li>
<li>在循环执行的过程中，该循环为了更新距离（步骤（3）），需要访问每条边一次（有向图的情况）或两次（无向图的情况），从而花费了 $O(|E|)$ 的时间。</li>
<li>该算法的整体运行时间为：$O(|V|^2)$</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>			<span class="comment">// for stdin</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>			<span class="comment">// for INT_MAX</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="comment">// weight: length on edges</span></div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Alignment-requirement: the first char is expanded to 4(8) bytes in 32-bit(64-bit) machine</span></div><div class="line"><span class="comment">// sizeof(VertexNode) == 16(32)</span></div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="keyword">int</span> dist;</div><div class="line">  <span class="comment">// How to restore a shortest path: recording the pre-visit VertexNode in the path</span></div><div class="line">  VertexNode* preVertexNode;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(Graph&amp; g, VertexNode&amp; Source)</span> </span>&#123;</div><div class="line">  <span class="keyword">bool</span> visited[g.vertexNum];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    g.VertexNodes[i].dist = INT_MAX;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">    visited[i] = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  Source.dist = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> vertexNuminS = <span class="number">0</span>; vertexNuminS &lt; g.vertexNum; vertexNuminS++) &#123;</div><div class="line">    <span class="comment">// Pick the node not in S with smallest dist</span></div><div class="line">    <span class="keyword">int</span> minDist = INT_MAX;</div><div class="line">    <span class="keyword">int</span> pickIdx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">      <span class="keyword">if</span>(!visited[i] &amp;&amp; g.VertexNodes[i].dist&lt;minDist) &#123;</div><div class="line">        minDist = g.VertexNodes[i].dist;</div><div class="line">        pickIdx = i;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// other nodes are unreachable</span></div><div class="line">    <span class="keyword">if</span>(pickIdx == <span class="number">-1</span>) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    visited[pickIdx] = <span class="literal">true</span>;</div><div class="line">    VertexNode* v = &amp;g.VertexNodes[pickIdx];</div><div class="line"></div><div class="line">    <span class="comment">// update the current new extended path and the predecessor vertex</span></div><div class="line">    adjVertexNode* head = v-&gt;<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">// visited to avoid repeatedly enqueue</span></div><div class="line">      <span class="keyword">if</span>(!visited[head-&gt;adjVertexIdx] &amp;&amp; g.VertexNodes[head-&gt;adjVertexIdx].dist </div><div class="line">        &gt; (v-&gt;dist + head-&gt;weight)) &#123;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].dist = v-&gt;dist + head-&gt;weight;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].preVertexNode = v;</div><div class="line">      &#125;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(Graph&amp; g, VertexNode* target)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (target-&gt;preVertexNode != <span class="literal">NULL</span>) &#123;</div><div class="line">    PrintPath(g, target-&gt;preVertexNode);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; target-&gt;data;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  freopen(<span class="string">"Dijkstra.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"  Source=&gt;Target\tShortest Distance\tPath"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> from=<span class="number">0</span>; from&lt;g.vertexNum; from++) &#123;</div><div class="line">    Dijkstra(g, g.VertexNodes[from]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> to=<span class="number">0</span>; to&lt;g.vertexNum; to++) &#123;</div><div class="line">      <span class="keyword">if</span>(from == to) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; g.VertexNodes[from].data &lt;&lt; <span class="string">"==&gt;"</span> &lt;&lt; g.VertexNodes[to].data </div><div class="line">        &lt;&lt; <span class="string">"\t\t\t"</span>;</div><div class="line">      <span class="keyword">if</span>(g.VertexNodes[to].dist == INT_MAX) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"INF"</span>;</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[to].dist;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">" \t\t("</span>;</div><div class="line">      PrintPath(g, &amp;g.VertexNodes[to]);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>基于 <a href="http://www.cplusplus.com/reference/queue/priority_queue/">std::priority_queue</a> 实现的 Dijkstra 算法（<strong>void Dijkstra(Graph&amp; g, VertexNode&amp; Source)</strong> 函数）<ul>
<li>由于使用了指针类型（<code>VertexNode*</code>）的优先级队列，需要声明额外的比较方法 <code>struct cmp</code>，重载其 <code>operator()</code>，并按以下方式声明：<code>priority_queue&lt;VertexNode*, vector&lt;VertexNode*&gt;, cmp&gt; vertexQueue;</code>，而不能通过直接重载优先级队列元素类型的比较函数 <code>operator&lt;</code>。</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>			<span class="comment">// for stdin</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>			<span class="comment">// for INT_MAX</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Alignment-requirement: the first char is expanded to 4(8) bytes in 32-bit(64-bit) machine</span></div><div class="line"><span class="comment">// sizeof(VertexNode) == 16(32)</span></div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="keyword">int</span> dist;</div><div class="line">  <span class="comment">// How to restore a shortest path: recording the pre-visit VertexNode in the path</span></div><div class="line">  VertexNode* preVertexNode;</div><div class="line"></div><div class="line">  <span class="comment">/*</div><div class="line">  bool operator&lt; (VertexNode* a, VertexNode* b) &#123;</div><div class="line">    return a-&gt;dist &gt; b-&gt;dist;</div><div class="line">  &#125;;*/</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/* compare struct for priority queue</div><div class="line"> * In order to achieve the minimum heap(in ascending order)</div><div class="line"> *   reload operator&lt;, redefine the priority to smaller one</div><div class="line"> */</span></div><div class="line"><span class="keyword">struct</span> cmp &#123;</div><div class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(VertexNode* a, VertexNode* b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> a-&gt;dist &gt; b-&gt;dist;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(Graph&amp; g, VertexNode&amp; Source)</span> </span>&#123;</div><div class="line">  priority_queue&lt;VertexNode*, <span class="built_in">vector</span>&lt;VertexNode*&gt;, cmp&gt; vertexQueue;</div><div class="line">  <span class="keyword">bool</span> visited[g.vertexNum];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    g.VertexNodes[i].dist = INT_MAX;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">    visited[i] = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  Source.dist = <span class="number">0</span>;</div><div class="line">  vertexQueue.push(&amp;Source);</div><div class="line"> </div><div class="line">  <span class="keyword">while</span>(!vertexQueue.empty()) &#123;</div><div class="line">    VertexNode* v = vertexQueue.top();</div><div class="line">    <span class="comment">// cout &lt;&lt; "pop: " &lt;&lt; v-&gt;data &lt;&lt; " ";</span></div><div class="line">    vertexQueue.pop();</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> vertexIdx = v - g.VertexNodes;</div><div class="line">    <span class="keyword">if</span>(visited[vertexIdx]) &#123;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    visited[vertexIdx] = <span class="literal">true</span>;</div><div class="line"> </div><div class="line">    adjVertexNode* head = v-&gt;<span class="built_in">list</span>;</div><div class="line">    <span class="comment">// cout &lt;&lt; "push: ";</span></div><div class="line">    <span class="comment">// relax operation: update the estimated distance for all adjacent vertex </span></div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">/*</div><div class="line">       * A node with different dist will be pushed repeatedly for smallest one</div><div class="line">       *  use visited(visited[vertexIdx]) flag to avoid not-smallest visit</div><div class="line">       * A node in known-region should't be repeatedly updated </div><div class="line">       *	use visited[head-&gt;adjVertexIdx]</div><div class="line">       */</span> </div><div class="line">      <span class="keyword">if</span>(!visited[head-&gt;adjVertexIdx] &amp;&amp; g.VertexNodes[head-&gt;adjVertexIdx].dist </div><div class="line">        &gt; (v-&gt;dist + head-&gt;weight)) &#123;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].dist = v-&gt;dist + head-&gt;weight;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].preVertexNode = v;</div><div class="line">        vertexQueue.push(&amp;g.VertexNodes[head-&gt;adjVertexIdx]);</div><div class="line">        <span class="comment">// cout &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; " ";</span></div><div class="line">      &#125;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// cout &lt;&lt; endl;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(Graph&amp; g, VertexNode* target)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (target-&gt;preVertexNode != <span class="literal">NULL</span>) &#123;</div><div class="line">    PrintPath(g, target-&gt;preVertexNode);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; target-&gt;data;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  freopen(<span class="string">"Dijkstra.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="comment">//freopen("BellmanFord.txt", "r", stdin);</span></div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"  Source=&gt;Target\tShortest Distance\tPath"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> from=<span class="number">0</span>; from&lt;g.vertexNum; from++) &#123;</div><div class="line">    Dijkstra(g, g.VertexNodes[from]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> to=<span class="number">0</span>; to&lt;g.vertexNum; to++) &#123;</div><div class="line">      <span class="keyword">if</span>(from == to) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; g.VertexNodes[from].data &lt;&lt; <span class="string">"==&gt;"</span> &lt;&lt; g.VertexNodes[to].data </div><div class="line">        &lt;&lt; <span class="string">"\t\t\t"</span>;</div><div class="line">      <span class="keyword">if</span>(g.VertexNodes[to].dist == INT_MAX) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"INF"</span>;</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[to].dist;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">" \t\t("</span>;</div><div class="line">      PrintPath(g, &amp;g.VertexNodes[to]);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><font color="red">注意：</font><ul>
<li>基于优先级队列实现的 Dijkstra 算法，为了保证每次迭代均能够获取未知区域中距离源点最近的顶点，存在将一个节点重复入队的情况。当该节点被加入到已知区域时，这种重复入队保证其距离为最短距离；此后，队列中存在该节点的残留节点（距离不是最短距离）的可能，需要滤除这些残留节点。</li>
<li><strong>Dijkstra 算法</strong> 中，已知区域内的顶点距离确定是最短距离，因此不应由于新节点的加入而发生更新。对于正权图，不会对已知区域内的节点进行松弛操作；对于负权图，则可能发生，因此需要对松弛操作节点范围进行限制。<center><img src="/img/Algorithms/0006_DijkstraGraph.png" width="800px"/></center></li>
</ul>
</li>
<li>上图对应的输入文件 <code>Dijkstra.txt</code> 如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">6 18</div><div class="line">S A B C D T</div><div class="line">0 1 1</div><div class="line">0 3 2</div><div class="line">0 4 5</div><div class="line">1 0 1</div><div class="line">1 2 2</div><div class="line">1 4 5</div><div class="line">2 1 2</div><div class="line">2 4 1</div><div class="line">2 5 4</div><div class="line">3 0 2</div><div class="line">3 4 3</div><div class="line">4 0 5</div><div class="line">4 1 5</div><div class="line">4 2 1</div><div class="line">4 3 3</div><div class="line">4 5 1</div><div class="line">5 2 4</div><div class="line">5 4 1</div></pre></td></tr></table></figure>
<ul>
<li>通过<code>g++</code>进行构建</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g++ Dijkstra.cpp -o Dijkstra</div></pre></td></tr></table></figure>
<ul>
<li><font color="red">更新：</font>基于优先级队列实现的 Dijkstra 算法存在问题，<code>priority_queue&lt;vertexnode*, vector&lt;vertexnode*=&quot;&quot;&gt;, cmp&gt; vertexQueue;</code> 优先级队列保存的是节点的指针，为了保证从队头都能取得距离源点距离最近的节点，同一个节点（不同的距离值）会被重复入队；然而由于存入的是指针，对即将入队的节点的松弛操作同样会影响到先前入队的同一个节点（不同的距离值），破坏了原先的优先队列顺序（可能是基于 heap 实现），造成优先级队列操作异常，故修正为如下代码：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>			<span class="comment">// for stdin</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>			<span class="comment">// for INT_MAX</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Alignment-requirement: the first char is expanded to 4(8) bytes in 32-bit(64-bit) machine</span></div><div class="line"><span class="comment">// sizeof(VertexNode) == 16(32)</span></div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  <span class="keyword">int</span> vertexIdx;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="keyword">int</span> dist;</div><div class="line">  <span class="comment">// How to restore a shortest path: recording the pre-visit VertexNode in the path</span></div><div class="line">  VertexNode* preVertexNode;</div><div class="line">  <span class="comment">/* reload compare operator for priority queue</div><div class="line">   * In order to achieve the minimum heap(in ascending order)</div><div class="line">   *   reload operator&lt;, redefine the priority to smaller one</div><div class="line">   */</span></div><div class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> VertexNode&amp; right) <span class="keyword">const</span> &#123;</div><div class="line">    <span class="keyword">return</span> dist &gt; right.dist;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].vertexIdx = i;</div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(Graph&amp; g, VertexNode&amp; Source)</span> </span>&#123;</div><div class="line">  priority_queue&lt;VertexNode&gt; vertexQueue;</div><div class="line">  <span class="keyword">bool</span> visited[g.vertexNum];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    g.VertexNodes[i].dist = INT_MAX;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">    visited[i] = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  Source.dist = <span class="number">0</span>;</div><div class="line">  <span class="comment">// void push( const value_type&amp; value );</span></div><div class="line">  vertexQueue.push(Source);</div><div class="line"> </div><div class="line">  <span class="keyword">while</span>(!vertexQueue.empty()) &#123;</div><div class="line">    VertexNode v = vertexQueue.top();</div><div class="line">    <span class="comment">// cout &lt;&lt; "pop: " &lt;&lt; v.data &lt;&lt; " ";</span></div><div class="line">    vertexQueue.pop();</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> vertexIdx = v.vertexIdx;</div><div class="line">    <span class="keyword">if</span>(visited[vertexIdx]) &#123;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    visited[vertexIdx] = <span class="literal">true</span>;</div><div class="line"> </div><div class="line">    adjVertexNode* head = v.<span class="built_in">list</span>;</div><div class="line">    <span class="comment">// cout &lt;&lt; "push: ";</span></div><div class="line">    <span class="comment">// relax operation: update the estimated distance for all adjacent vertex </span></div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="comment">/*</div><div class="line">       * A node with different dist will be pushed repeatedly for smallest one</div><div class="line">       *  use visited(visited[vertexIdx]) flag to avoid not-smallest visit</div><div class="line">       * A node in known-region should't be repeatedly updated </div><div class="line">       *	use visited[head-&gt;adjVertexIdx]</div><div class="line">       */</span> </div><div class="line">      <span class="keyword">if</span>(!visited[head-&gt;adjVertexIdx] &amp;&amp; g.VertexNodes[head-&gt;adjVertexIdx].dist </div><div class="line">        &gt; (v.dist + head-&gt;weight)) &#123;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].dist = v.dist + head-&gt;weight;</div><div class="line">        g.VertexNodes[head-&gt;adjVertexIdx].preVertexNode = &amp;g.VertexNodes[v.vertexIdx];</div><div class="line">        vertexQueue.push(g.VertexNodes[head-&gt;adjVertexIdx]);</div><div class="line">        <span class="comment">// cout &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; " ";</span></div><div class="line">      &#125;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// cout &lt;&lt; endl;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(Graph&amp; g, VertexNode* target)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (target-&gt;preVertexNode != <span class="literal">NULL</span>) &#123;</div><div class="line">    PrintPath(g, target-&gt;preVertexNode);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; target-&gt;data;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  <span class="comment">//freopen("Dijkstra.txt", "r", stdin);</span></div><div class="line">  freopen(<span class="string">"BellmanFord.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"  Source=&gt;Target\tShortest Distance\tPath"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> from=<span class="number">0</span>; from&lt;g.vertexNum; from++) &#123;</div><div class="line">    Dijkstra(g, g.VertexNodes[from]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> to=<span class="number">0</span>; to&lt;g.vertexNum; to++) &#123;</div><div class="line">      <span class="keyword">if</span>(from == to) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; g.VertexNodes[from].data &lt;&lt; <span class="string">"==&gt;"</span> &lt;&lt; g.VertexNodes[to].data </div><div class="line">        &lt;&lt; <span class="string">"\t\t\t"</span>;</div><div class="line">      <span class="keyword">if</span>(g.VertexNodes[to].dist == INT_MAX) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"INF"</span>;</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[to].dist;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">" \t\t("</span>;</div><div class="line">      PrintPath(g, &amp;g.VertexNodes[to]);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Bellman-Ford-算法"><a href="#Bellman-Ford-算法" class="headerlink" title="Bellman-Ford 算法"></a>Bellman-Ford 算法</h4><blockquote>
<p>References:</p>
<ul>
<li><a href="https://www.renfei.org/blog/weighted-shortest-path.html">带权最短路 Dijkstra, SPFA, Bellman-Ford, ASP, Floyd-Warshall 算法分析</a></li>
</ul>
</blockquote>
<ul>
<li>查看从 <strong>s</strong> 到 <strong>t</strong> 的最短路径<br><center><img src="/img/Algorithms/0006_BellmanFordSketch.png" width="480px"/></center><ul>
<li>该路径最多含有 $|V|-1$ 条边。<ul>
<li>因为最短路径肯定是个简单路径，不可能包含回路的：如果包含回路，且回路的权值和为正的，那么去掉这个回路，可以得到更短的路径；如果回路的权值是负的，那么肯定没有解了</li>
<li>图有 $|V|$ 个点，又不能有回路，所以最短路径最多 $|V|-1$ 边</li>
</ul>
</li>
<li>如果执行的更新操作按照以下顺序 $(s, u_1), (u_, u_2), …, (u_k, t)$（更新序列） 进行（只要保证上述更新操作全部按顺序执行即可，并不要求上述更新操作是连续进行的），最终 t 的最短路径一定是正确的。<ul>
<li>最短路的局部最优性：中间即便穿插其它 update 操作，也不会影响最短路径。</li>
<li>其它 update 操作是否在这些边上进行无关紧要，同样，图上其它部分进行的 update 操作也不对上述最短路产生影响。</li>
<li>即，update 操作是安全的。</li>
</ul>
</li>
<li>Dijkstra 算法所运行的更新序列是经过选择的。<ul>
<li>选择基于这一假设：从起始点 <strong>s</strong> 到任意顶点 <strong>v</strong> 的最短路径一定会经过比 <strong>v</strong> 距离  <strong>s</strong> 更近的顶点。</li>
<li>当边的长度可以为负值时，这一假设将不再成立，如下图：从 S 到 A 的最短路径经过 B，而 B 却比 A 距离 S 更远！<center><img src="/img/Algorithms/0006_DijkstraNegativeEdge.png" width="200px"/></center></li>
</ul>
</li>
<li>为了求出负权图的最短路径，我们需要保证一个合理的更新序列。但是：我们预先并不知道所求的最短路径（如 <code>s-&gt;t</code>），因此不能确保按照正确的顺序更新了正确的边（$s→u_1, u_1→u_2, …, u_k→t$）<ul>
<li>解决方案：<strong>每次迭代更新所有的边</strong><ul>
<li>由于多余的更新操作总是无害的，因此算法（几乎）可以正确运行。</li>
<li>每条边更新 $|V|-1$ 次（任何含有 $|V|$ 个顶点的图两个点之间的最短路最多含有 $|V|-1$ 条边，每次迭代均能找到从起始点 <strong>s</strong> 出发的最短路上的一条边），时间复杂度为 $O(|V|·|E|)$</li>
<li>如果某次循环没有更新操作发生，后续的迭代也不会有更新操作，可以利用这一性质避免无效的计算。<center><img src="/img/Algorithms/0006_BellmanFordPseudo.png" width="640px"/></center></li>
</ul>
</li>
</ul>
</li>
<li>算法实现中唯一一个需要注意的问题就是负值圈 (negative-cost cycle)。<ul>
<li>负值圈指的是，权值总和为负的圈。如果存在这种圈，我们可以在里面滞留任意长而不断减小最短路径长，因此这种情况下最短路径是不存在的。</li>
<li>对于 Bellman-Ford 算法来说，判断负值圈存在的方法是：在 $|V|-1$ 次循环之后再执行一次循环，如果还有更新操作发生，则说明存在负值圈。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>			<span class="comment">// for stdin</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>			<span class="comment">// for INT_MAX</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="comment">// weight: length on edges</span></div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Alignment-requirement: the first char is expanded to 4(8) bytes in 32-bit(64-bit) machine</span></div><div class="line"><span class="comment">// sizeof(VertexNode) == 16(32)</span></div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">  <span class="keyword">int</span> dist;</div><div class="line">  <span class="comment">// How to restore a shortest path: recording the pre-visit VertexNode in the path</span></div><div class="line">  VertexNode* preVertexNode;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BellmanFord</span><span class="params">(Graph&amp; g, VertexNode&amp; Source)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    g.VertexNodes[i].dist = INT_MAX;</div><div class="line">    g.VertexNodes[i].preVertexNode = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  Source.dist = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> vertexNum=<span class="number">0</span>; vertexNum&lt;=g.vertexNum; vertexNum++) &#123;</div><div class="line">    <span class="keyword">bool</span> updated = <span class="literal">false</span>;</div><div class="line">    <span class="comment">// update all edges</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> VertexIdx=<span class="number">0</span>; VertexIdx&lt;g.vertexNum; VertexIdx++) &#123;</div><div class="line">      adjVertexNode* head = g.VertexNodes[VertexIdx].<span class="built_in">list</span>;</div><div class="line">      <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(g.VertexNodes[VertexIdx].dist != INT_MAX</div><div class="line">          &amp;&amp; g.VertexNodes[head-&gt;adjVertexIdx].dist &gt; (g.VertexNodes[VertexIdx].dist + head-&gt;weight)) &#123;</div><div class="line">          g.VertexNodes[head-&gt;adjVertexIdx].dist = g.VertexNodes[VertexIdx].dist + head-&gt;weight;</div><div class="line">          g.VertexNodes[head-&gt;adjVertexIdx].preVertexNode = &amp;g.VertexNodes[VertexIdx];</div><div class="line">          updated = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        head = head-&gt;next;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// shortest path got after any round which no update occurred</span></div><div class="line">    <span class="keyword">if</span>(!updated) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// negative cycles exist</span></div><div class="line">    <span class="keyword">if</span>(vertexNum == g.vertexNum &amp;&amp; updated) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// should never reach here</span></div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(Graph&amp; g, VertexNode* target)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (target-&gt;preVertexNode != <span class="literal">NULL</span>) &#123;</div><div class="line">    PrintPath(g, target-&gt;preVertexNode);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; target-&gt;data;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  <span class="comment">//freopen("Dijkstra.txt", "r", stdin);</span></div><div class="line">  freopen(<span class="string">"BellmanFord.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"  Source=&gt;Target\tShortest Distance\tPath"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> from=<span class="number">0</span>; from&lt;g.vertexNum; from++) &#123;</div><div class="line">    <span class="keyword">if</span>(!BellmanFord(g, g.VertexNodes[from])) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Failed to find shortest path: negative cycles exist..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> to=<span class="number">0</span>; to&lt;g.vertexNum; to++) &#123;</div><div class="line">      <span class="keyword">if</span>(from == to) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; g.VertexNodes[from].data &lt;&lt; <span class="string">"==&gt;"</span> &lt;&lt; g.VertexNodes[to].data </div><div class="line">        &lt;&lt; <span class="string">"\t\t\t"</span> &lt;&lt; g.VertexNodes[to].dist &lt;&lt; <span class="string">" \t\t("</span>;</div><div class="line">      PrintPath(g, &amp;g.VertexNodes[to]);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对于非负权图 Bellman-Ford 算法和 Dijkstra 算法都能得到相同的正确解。<center><img src="/img/Algorithms/0006_DijkstraGraph.png" width="800px"/></center><br><center><img src="/img/Algorithms/0006_BellmanFordGraph.png" width="720px"/></center></li>
<li>Dijkstra 算法难以处理负权图的最短路径问题，主要原因便是上面提到的前提假设不成立，比如，S 到 A 的最短路经过 $(S, G)$，然而 $|(S, A)| &lt; |(S, G)|$。 <center><img src="/img/Algorithms/0006_DijkstravsBellmanFord.png" width="720px"/></center></li>
<li>上图对应的输入文件 <code>BellmanFord.txt</code> 如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">8 12</div><div class="line">S A B C D E F G</div><div class="line">0 1 7</div><div class="line">0 7 8</div><div class="line">1 5 2</div><div class="line">2 1 1</div><div class="line">2 3 1</div><div class="line">3 4 3</div><div class="line">4 5 -1</div><div class="line">5 2 -2</div><div class="line">6 1 -4</div><div class="line">6 5 -1</div><div class="line">7 6 1</div></pre></td></tr></table></figure>
<h4 id="Floyd-Warshall-算法"><a href="#Floyd-Warshall-算法" class="headerlink" title="Floyd-Warshall 算法"></a>Floyd-Warshall 算法</h4><blockquote>
<p>References:</p>
<ul>
<li><a href="http://www.cnblogs.com/gaochundong/p/floyd_warshall_algorithm.html">Floyd-Warshall 全源最短路径算法</a></li>
<li><a href="http://www.wutianqi.com/?p=1903">最短路径算法—Floyd(弗洛伊德)算法分析与实现(C/C++)</a></li>
<li><a href="https://www.renfei.org/blog/weighted-shortest-path.html">带权最短路 Dijkstra, SPFA, Bellman-Ford, ASP, Floyd-Warshall 算法分析</a></li>
</ul>
</blockquote>
<ul>
<li>解决单源最短路径问题的方案有 Dijkstra 算法和 Bellman-Ford 算法，对于全源最短路径问题（All-Pairs Shortest Paths Problem）可以认为是单源最短路径问题（Single Source Shortest Paths Problem）的推广，即分别以每个顶点作为源顶点并求其至其它顶点的最短距离（如运行<strong>Bellman-Ford 最短路径算法</strong>（由于可能存在负边），这样下来总的运行时间将是$O(|V|^2 E)$，事实上有一种稍好的选择，其运行时间为$O(|V|^3)$，正是本节介绍的基于动态规划的 <strong>Floyd-Warshall 算法</strong>）。</li>
<li>Floyd-Warshall 算法采用动态规划方案来解决在一个有向图（无向图可以转化为双向有向） G = (V, E) 上每对顶点间的最短路径问题，即全源最短路径问题，其中图 G 允许存在权值为负的边，但不存在权值为负的回路。</li>
<li>Floyd-Warshall <strong>算法思想</strong><ul>
<li>最短路径算法中的最优子结构：两顶点之间的最短路径包含路径上其它顶点的最短路径。<ul>
<li>具体描述为：对于给定的带权图 $G = (V, E)$，设 $p = \lt v_1, v_2, …,v_n \gt$ 是从 $v_1$ 到 $v_n$ 的最短路径，那么对于任意 i 和 j，$1≤i≤j≤n, p_{ij} (shortestPath(i, j, k)) = \lt v_i, v_{i+1}, …, v_j \gt$ 为 p 中从顶点 $v_i$ 到 $v_j$ 的一条子路径，那么 $p_{ij}$ 是顶点 $v_i$ 到 $v_j$ 的最短路径。</li>
</ul>
</li>
<li>从任意节点 i 到任意节点 j 的最短路径不外乎2种可能：①直接从 i 到 j；②从 i 经过若干个中间节点 k 到 j。<ul>
<li>dist(i, j, k)：从顶点 i 到 j 的仅使用节点 ${1, 2, …, k}$ 作为中间节点的最短路径长度。</li>
<li>$ dist(i, j, 0) = \begin{cases} |E(i, j)| \cr \infty, else \end{cases} $    </li>
<li>当我们在中间节点集中加入一个新的顶点 k 时，需要对所有的节点对 $(i，j)$ 检查是否使用 k 作为中间节点会得到更短的路径。$i → j $ 的使用了 k 和其它编号较小（＜k）的中间节点的最短路径最多经过 k 一次（假设没有负环），通过使用已经计算得到的 i 到 k 和 k 到 j 的使用了较小编号顶点的最短路径长度能够求解 $i → j $ 的最短路径长度。</li>
<li>$ shortestPath(i, j, k) = min(shortestPath(i, j, k-1), shortestPath(i, k, k-1) + shortestPath(k, j, k-1))$<center><img src="/img/Algorithms/0006_FloydSketch.png" width="540px"/></center></li>
</ul>
</li>
<li>Floyd-Warshall 算法的设计基于了如下观察。设带权图 G = (V, E) 中的所有顶点 V = {1, 2, . . . , n}，考虑一个顶点子集 {1, 2, . . . , k}。对于任意对顶点 i, j，考虑从顶点 i 到 j 的所有路径的中间顶点都来自该子集 {1, 2, . . . , k}，设 p 是该子集中的最短路径。Floyd-Warshall 算法描述了 p 与 i, j 间最短路径及中间顶点集合 {1, 2, . . . , k - 1} 的关系，该关系依赖于 k 是否是路径 p 上的一个中间顶点。<br><center><img src="/img/Algorithms/0006_FloydPseudo.png" width="720px"/></center><ul>
<li>①②：不允许路径 $i → j$ 上出现任何的中间节点；不存在直接连接 i 和 j 的边时，$dist(i, j, 0) = \infty$。</li>
<li>③：注意 k，i，j 三重循环的顺序，算法的时间复杂度为 $O(|V|^3)$；另外，$dist(?, ?, k)$ 只与 $dist(?, ?, k-1)$ 有关，使用二维数组即可维护只使用 {1, 2, …, k-1, k} 作为中间节点的最短距离信息，无需开辟三维空间，空间复杂度为 $O(|V|^2)$。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>			<span class="comment">// for stdin</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>			<span class="comment">// for INT_MAX</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VERTEX_NUM    26</span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> adjVertexNode &#123;</div><div class="line">  <span class="keyword">int</span> adjVertexIdx;</div><div class="line">  <span class="comment">// weight: length on edges</span></div><div class="line">  <span class="keyword">int</span> weight;</div><div class="line">  adjVertexNode* next;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Alignment-requirement: the first char is expanded to 4(8) bytes in 32-bit(64-bit) machine</span></div><div class="line"><span class="comment">// sizeof(VertexNode) == 8(16)</span></div><div class="line"><span class="keyword">struct</span> VertexNode &#123;</div><div class="line">  <span class="keyword">char</span> data;</div><div class="line">  adjVertexNode* <span class="built_in">list</span>;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">struct</span> Graph &#123;</div><div class="line">  VertexNode VertexNodes[MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> vertexNum;</div><div class="line">  <span class="keyword">int</span> edgeNum;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateGraph</span> <span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i, j, edgeStart, edgeEnd, weight;</div><div class="line">  adjVertexNode* adjNode;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex and edge num (vertex-num edge-num):" &lt;&lt;endl;</span></div><div class="line">  <span class="built_in">cin</span> &gt;&gt; g.vertexNum &gt;&gt; g.edgeNum;</div><div class="line">  <span class="comment">//cout &lt;&lt; "Please input vertex information (v1)/n note: every vertex info end with Enter" &lt;&lt;endl;</span></div><div class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; g.VertexNodes[i].data; <span class="comment">// vertex data info.</span></div><div class="line">    g.VertexNodes[i].<span class="built_in">list</span> = <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//cout &lt;&lt; "input edge information(start end):" &lt;&lt; endl;</span></div><div class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>; j&lt;g.edgeNum; j++)	&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; edgeStart &gt;&gt; edgeEnd &gt;&gt; weight;</div><div class="line"> </div><div class="line">    <span class="comment">// insert new adjacent VertexNode at the begining of the adjacent list</span></div><div class="line">    adjNode = <span class="keyword">new</span> adjVertexNode;</div><div class="line">    adjNode-&gt;adjVertexIdx = edgeEnd;</div><div class="line">    adjNode-&gt;weight = weight;</div><div class="line">    adjNode-&gt;next = g.VertexNodes[edgeStart].<span class="built_in">list</span>;</div><div class="line">    g.VertexNodes[edgeStart].<span class="built_in">list</span> = adjNode;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAdjList</span><span class="params">(<span class="keyword">const</span> Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"The adjacent list for graph is:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; g.vertexNum; i++) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; g.VertexNodes[i].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    adjVertexNode* head = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[head-&gt;adjVertexIdx].data &lt;&lt; <span class="string">"("</span> &lt;&lt; head-&gt;weight &lt;&lt; <span class="string">") "</span>;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteGraph</span><span class="params">(Graph&amp; g)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    adjVertexNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>(g.VertexNodes[i].<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</div><div class="line">      tmp = g.VertexNodes[i].<span class="built_in">list</span>;</div><div class="line">      g.VertexNodes[i].<span class="built_in">list</span> = g.VertexNodes[i].<span class="built_in">list</span>-&gt;next;</div><div class="line">      <span class="keyword">delete</span> tmp;</div><div class="line">      tmp = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FloydWarshall</span><span class="params">(Graph&amp; g, <span class="keyword">int</span> dists[][MAX_VERTEX_NUM], <span class="keyword">int</span> paths[][MAX_VERTEX_NUM])</span> </span>&#123;</div><div class="line">  <span class="comment">// dists[i][j]=INT_MAX; dists[i][i]=0;</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;g.vertexNum; j++) &#123;</div><div class="line">      dists[i][j] = (i==j)? <span class="number">0</span>:INT_MAX;</div><div class="line">      paths[i][j] = j;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// edge&lt;i,j&gt; exists, update dists[i][j]=|edge&lt;i,j&gt;|</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> VertexIdx=<span class="number">0</span>; VertexIdx&lt;g.vertexNum; VertexIdx++) &#123;</div><div class="line">    adjVertexNode* head = g.VertexNodes[VertexIdx].<span class="built_in">list</span>;</div><div class="line">    <span class="keyword">while</span> (head != <span class="literal">NULL</span>) &#123;</div><div class="line">      dists[VertexIdx][head-&gt;adjVertexIdx] = head-&gt;weight;</div><div class="line">      head = head-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;g.vertexNum; k++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;g.vertexNum; i++) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;g.vertexNum; j++) &#123;</div><div class="line">        <span class="keyword">if</span>(dists[i][k] != INT_MAX &amp;&amp; dists[k][j] != INT_MAX</div><div class="line">          &amp;&amp; (dists[i][k] + dists[k][j]) &lt; dists[i][j]) &#123;</div><div class="line">          dists[i][j] = dists[i][k] + dists[k][j];</div><div class="line">          paths[i][j] = k;</div><div class="line">          <span class="comment">// negative cycle exists when and only when dists[i][i]&lt;0</span></div><div class="line">          <span class="keyword">if</span>(i == j &amp;&amp; dists[i][j] &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125; </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// backtracking for the path</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintPath</span><span class="params">(Graph&amp; g, <span class="keyword">int</span> paths[][MAX_VERTEX_NUM], <span class="keyword">int</span> fromIdx, <span class="keyword">int</span> toIdx)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> vertexIdx = fromIdx;</div><div class="line">  <span class="keyword">while</span>(vertexIdx != toIdx) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[vertexIdx].data &lt;&lt; <span class="string">"-&gt;"</span>;</div><div class="line">    vertexIdx = paths[vertexIdx][toIdx];</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; g.VertexNodes[vertexIdx].data;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span> </span>&#123;</div><div class="line">  <span class="comment">//freopen("Dijkstra.txt", "r", stdin);</span></div><div class="line">  freopen(<span class="string">"BellmanFord.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line"> </div><div class="line">  Graph g;</div><div class="line">  CreateGraph(g);</div><div class="line">  PrintAdjList(g);</div><div class="line"> </div><div class="line">  <span class="keyword">int</span> dists[MAX_VERTEX_NUM][MAX_VERTEX_NUM];</div><div class="line">  <span class="keyword">int</span> paths[MAX_VERTEX_NUM][MAX_VERTEX_NUM];</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">if</span>(!FloydWarshall(g, dists, paths)) &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Failed to find shortest path: negative cycles exist..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"  Source=&gt;Target\tShortest Distance\tPath"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> from=<span class="number">0</span>; from&lt;g.vertexNum; from++) &#123;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> to=<span class="number">0</span>; to&lt;g.vertexNum; to++) &#123;</div><div class="line">        <span class="keyword">if</span>(from == to) &#123;</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t"</span> &lt;&lt; g.VertexNodes[from].data &lt;&lt; <span class="string">"==&gt;"</span> &lt;&lt; g.VertexNodes[to].data </div><div class="line">          &lt;&lt; <span class="string">"\t\t\t"</span>;</div><div class="line">        <span class="keyword">if</span>(dists[from][to] == INT_MAX) &#123;</div><div class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">"INF"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">cout</span> &lt;&lt; dists[from][to];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">" \t\t("</span>;</div><div class="line">        PrintPath(g, paths, from, to);</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">   </div><div class="line">  DeleteGraph(g);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>dists[][]</code> 数组初始化为各顶点间的原本距离（不存在直连边时距离为 $\infty$），最后存储各顶点间的最短距离。</li>
<li><code>paths[][]</code> 数组保存最短路径，与当前迭代的次数有关。初始化都为目标顶点下标，表示没有中间顶点。在求 <code>dists[i][j]</code> 过程中，<code>paths[i][j]</code> 存放从顶点$v_i$ 到顶点 $v_j$ 的中间顶点编号不大于 <code>k</code> 的最短路径上前一个结点的编号。在算法结束时，由二维数组 <code>paths</code> 的值回溯，可以得到从顶点 $v_i$ 到顶点 $v_j$ 的最短路径。</li>
<li>通过 <code>g++</code> 进行构建</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g++ FloydWarshall.cpp -o FloydWarshall</div></pre></td></tr></table></figure>
<ul>
<li><strong>Floyd-Warshall 算法</strong> 适用于非负权无向图<center><img src="/img/Algorithms/0006_FloydGraph.png" width="720px"/></center></li>
<li><strong>Floyd-Warshall 算法</strong> 同样适用于负权有向图<center><img src="/img/Algorithms/0006_FloydGraphNegative.png" width="720px"/></center></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0005] Breadth First Search（广度优先搜索）]]></title>
      <url>/2017/03/22/Algorithms_BFS/</url>
      <content type="html"><![CDATA[<p>　本文主要介绍 <strong>BFS</strong> 的 <em>C++</em> 和 <em>C</em> 语言实现，并借助 <a href="https://leetcode.com/">LeetCode</a> 上的一道题，说说基本的 <strong>BFS</strong> 在问题求解中的应用。</p>
<h3 id="What’s-B-readth-F-irst-S-earch"><a href="#What’s-B-readth-F-irst-S-earch" class="headerlink" title="What’s B(readth)F(irst)S(earch)"></a>What’s B(readth)F(irst)S(earch)</h3><p>　广度优先搜索算法（Breadth First Search），又叫宽度优先搜索，或横向优先搜索。是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。<br><a id="more"></a></p>
<p><center><img src="/img/Algorithms/0005_binarytree.png" width="480px"/></center><br>　如上图所示的二叉树，A 节点第一个访问的，然后顺序是 B、C，然后再是 D、E、F、G。</p>
<h3 id="BFS（C-）"><a href="#BFS（C-）" class="headerlink" title="BFS（C++）"></a>BFS（C++）</h3><ul>
<li><em>C++</em> 中借助队列数据结构来保证这个访问的顺序。由于队列是先进先出的顺序，因此可以先将左子树入队，然后再将右子树入队，这样一来，左子树结点就存在队头，可以先被访问到（<strong>void breadthFirstSearch(Tree root)</strong> ）。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// BFS.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ELEMENT char</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORMAT <span class="meta-string">"%c"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_NUM 15</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node &#123;</div><div class="line">    ELEMENT data;</div><div class="line">    <span class="keyword">struct</span> Node* left;</div><div class="line">    <span class="keyword">struct</span> Node* right;</div><div class="line">&#125;* Tree;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * Binary Tree Constructor</div><div class="line"> *  1. construct in preorder</div><div class="line"> *  2. '#' means no left child or right child</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">binaryTreeConstructor</span><span class="params">(Tree &amp;root, ELEMENT data[])</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(index &gt;= NODE_NUM) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    ELEMENT ele = data[index++];</div><div class="line">    <span class="keyword">if</span>(ele == <span class="string">'#'</span>) &#123;</div><div class="line">        root = <span class="literal">NULL</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        root = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line">        root-&gt;data = ele;</div><div class="line">        binaryTreeConstructor(root-&gt;left, data);</div><div class="line">        binaryTreeConstructor(root-&gt;right, data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">breadthFirstSearch</span><span class="params">(Tree root)</span> </span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;Node *&gt; treeQueue;			<span class="comment">// using queue in STL</span></div><div class="line">    treeQueue.push(root);</div><div class="line">    Node* curNode;</div><div class="line">    <span class="keyword">while</span>(!treeQueue.empty()) &#123;</div><div class="line">        curNode = treeQueue.front();</div><div class="line">        treeQueue.pop();</div><div class="line">        <span class="built_in">printf</span>(FORMAT, curNode-&gt;data);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(curNode-&gt;left) &#123;</div><div class="line">            treeQueue.push(curNode-&gt;left);	<span class="comment">// push left child first</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(curNode-&gt;right) &#123;</div><div class="line">            treeQueue.push(curNode-&gt;right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ELEMENT data[NODE_NUM] = &#123;<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'D'</span>, <span class="string">'#'</span>, <span class="string">'#'</span>, <span class="string">'E'</span>, <span class="string">'#'</span>, <span class="string">'#'</span>, <span class="string">'C'</span>, <span class="string">'F'</span>,<span class="string">'#'</span>, <span class="string">'#'</span>, <span class="string">'G'</span>, <span class="string">'#'</span>, <span class="string">'#'</span>&#125;;</div><div class="line">    Tree tree;</div><div class="line">    binaryTreeConstructor(tree, data);</div><div class="line"> </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Traversal using BFS: "</span>);</div><div class="line">    breadthFirstSearch(tree);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　构建运行，结果如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gary@xxx:xxx$ g++ BFS.cpp -o BFS</div><div class="line">gary@xxx:xxx$ ./BFS </div><div class="line">Traversal using BFS: ABCDEFG</div></pre></td></tr></table></figure></p>
<h3 id="BFS（C）"><a href="#BFS（C）" class="headerlink" title="BFS（C）"></a>BFS（C）</h3><ul>
<li><em>C语言</em> 中采取类似的策略，不过需要手动实现一个队列功能（<strong>void bfs(Node tree[], int vertexIndex, bool visited[])</strong>）。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// BFS.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NODENUM 7            	<span class="comment">// node number</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ELEMENT char</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORMAT <span class="meta-string">"%c "</span></span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;<span class="literal">false</span>, <span class="literal">true</span>&#125; <span class="keyword">bool</span>;</div><div class="line"> </div><div class="line"><span class="comment">// structure for adjacency lists</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AdjList &#123;</div><div class="line">  <span class="keyword">int</span> vertexIndex;</div><div class="line">  <span class="keyword">struct</span> AdjList* next;</div><div class="line">&#125; AdjList;</div><div class="line"> </div><div class="line"><span class="comment">// Graphic node structure</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">  ELEMENT data;			<span class="comment">// data area</span></div><div class="line">  <span class="keyword">struct</span> AdjList* listAdj; 	<span class="comment">// pointing to neighbouring node</span></div><div class="line">&#125; Node;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">createTree</span><span class="params">(Node[])</span></span>;</div><div class="line"><span class="comment">// return the location of current vertex data in array, -1 if not exit. </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">locate</span><span class="params">(<span class="keyword">char</span>, Node[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseBFS</span><span class="params">(Node[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Node[], <span class="keyword">int</span>, <span class="keyword">bool</span>[])</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeRelease</span><span class="params">(Node[])</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</div><div class="line">  Node tree[NODENUM+<span class="number">1</span>];</div><div class="line"> </div><div class="line">  <span class="keyword">if</span>(createTree(tree)) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"BFS result as follow:\n"</span>);</div><div class="line">    traverseBFS(tree);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line"> </div><div class="line">    treeRelease(tree);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Create graphic fail!\n"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * 1. create a tree by entering all nodes' value and edges of the tree</div><div class="line"> * 2. store the tree in an adjacency list</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">createTree</span><span class="params">(Node tree[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i,location;</div><div class="line">  <span class="keyword">char</span> c;</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Input all nodes's value(should be in [A&lt;sub&gt;Z]||[a&lt;/sub&gt;z]):\n"</span>);</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NODENUM; i++) &#123;</div><div class="line">    tree[i].data = getchar();</div><div class="line">    <span class="keyword">if</span>(tree[i].data &lt; <span class="string">'A'</span> || (tree[i].data &gt; <span class="string">'Z'</span> &amp;&amp; tree[i].data &lt; <span class="string">'a'</span>) || tree[i].data &gt; <span class="string">'z'</span>) &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"Node's value should be in [A&lt;sub&gt;Z]||[a&lt;/sub&gt;z]\n"</span>);</div><div class="line">      <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// eliminate '\n'</span></div><div class="line">  getchar();</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nInput the directly connected nodes, given a node:\n"</span>);</div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; NODENUM; i++) &#123;</div><div class="line">    <span class="built_in">putchar</span>(tree[i].data);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    c = getchar();</div><div class="line">    tree[i].listAdj = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>((location = locate(c, tree)) != <span class="number">-1</span>) &#123;</div><div class="line">      AdjList* newAdjVertex = (AdjList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AdjList));</div><div class="line">      newAdjVertex-&gt;vertexIndex = location;</div><div class="line">      newAdjVertex-&gt;next = <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line">      <span class="comment">// insert an adjacent node, as the head need to be dealt with separately </span></div><div class="line">      <span class="keyword">if</span>(tree[i].listAdj == <span class="literal">NULL</span>) &#123;</div><div class="line">        tree[i].listAdj = newAdjVertex;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        AdjList* temp = tree[i].listAdj;</div><div class="line">        <span class="keyword">while</span>(temp-&gt;next != <span class="literal">NULL</span>) &#123;</div><div class="line">          temp = temp-&gt;next;</div><div class="line">        &#125;</div><div class="line">        temp-&gt;next = newAdjVertex;</div><div class="line">      &#125;</div><div class="line"> </div><div class="line">      <span class="comment">// '\n' will lead to exit</span></div><div class="line">      c = getchar();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// return the index of the given node in the node array, -1 if not exist.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">locate</span><span class="params">(ELEMENT givenVal, Node tree[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> location;</div><div class="line">  <span class="keyword">for</span>(location = NODENUM<span class="number">-1</span>; location&gt;=<span class="number">0</span>; location--) &#123;</div><div class="line">    <span class="keyword">if</span>(tree[location].data == givenVal) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> location;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseBFS</span><span class="params">(Node tree[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> visited[NODENUM];</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NODENUM; i++) &#123;</div><div class="line">    visited[i] = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// need to traverse all nodes, avoid not-connected graph</span></div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NODENUM; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(!visited[i]) &#123;</div><div class="line">      bfs(tree, i, visited);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Node tree[], <span class="keyword">int</span> vertexIndex, <span class="keyword">bool</span> visited[])</span> </span>&#123;</div><div class="line">  <span class="comment">/*</div><div class="line">   * 采用队列，访问一个节点并让其入队，然后按照同样的方法访问其兄弟节点，访问完毕</div><div class="line">   * 然后再从队列里按顺序再拉出一个节点来，继续访问</div><div class="line">   */</span></div><div class="line">  <span class="keyword">int</span> treeQueue[NODENUM];</div><div class="line">  <span class="keyword">int</span> popIdx=<span class="number">0</span>, pushIdx=<span class="number">0</span>;</div><div class="line">  AdjList *pAdjList;</div><div class="line"></div><div class="line">  <span class="built_in">printf</span>(FORMAT, tree[vertexIndex].data);</div><div class="line">  visited[vertexIndex] = <span class="literal">true</span>;</div><div class="line">  treeQueue[<span class="number">0</span>] = vertexIndex;			<span class="comment">// insert the first node</span></div><div class="line"> </div><div class="line">  <span class="keyword">while</span>(popIdx &lt;= pushIdx) &#123;</div><div class="line">    vertexIndex = treeQueue[popIdx++];		<span class="comment">// pop one by one in the queue</span></div><div class="line">    pAdjList = tree[vertexIndex].listAdj;</div><div class="line">    <span class="keyword">while</span>(pAdjList != <span class="literal">NULL</span>) &#123;</div><div class="line">      vertexIndex = pAdjList-&gt;vertexIndex;</div><div class="line">      <span class="keyword">if</span>(!visited[vertexIndex]) &#123;</div><div class="line">        <span class="built_in">printf</span>(FORMAT, tree[vertexIndex].data);</div><div class="line">        visited[vertexIndex] = <span class="literal">true</span>;</div><div class="line">        treeQueue[++pushIdx] = vertexIndex;	<span class="comment">// push adjacent nodes into the queue </span></div><div class="line">      &#125;</div><div class="line">      pAdjList = pAdjList-&gt;next;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// reslease the dynamically allocated memory</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeRelease</span><span class="params">(Node tree[])</span> </span>&#123;</div><div class="line">  AdjList *p, *temp;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NODENUM; i++) &#123;</div><div class="line">    p = tree[i].listAdj;</div><div class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</div><div class="line">      temp = p;</div><div class="line">      p = p-&gt;next;</div><div class="line">      <span class="built_in">free</span>(temp);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　构建运行，结果如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">gary@xxx:xxx$ g++ BFS.c -o BFS</div><div class="line">gary@xxx:xxx$ ./BFS</div><div class="line">Input all nodes<span class="string">'s value(should be in [A&lt;sub&gt;Z]||[a&lt;/sub&gt;z]):</div><div class="line">ABCDEFG</div><div class="line"> </div><div class="line">Input the directly connected nodes, given a node:</div><div class="line">A BC</div><div class="line">B ADE</div><div class="line">C AFG</div><div class="line">D B</div><div class="line">E B</div><div class="line">F C</div><div class="line">G C</div><div class="line">BFS result as follow:</div><div class="line">A B C D E F G</span></div></pre></td></tr></table></figure></p>
<h3 id="102-amp-107-Binary-Tree-Level-Order-Traversal-I-amp-II"><a href="#102-amp-107-Binary-Tree-Level-Order-Traversal-I-amp-II" class="headerlink" title="102&amp;107. Binary Tree Level Order Traversal I&amp;II"></a><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/#/description">102&amp;107. Binary Tree Level Order Traversal I&amp;II</a></h3><ul>
<li>Description<blockquote>
<p>　Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).<br>　For example:<br>　Given binary tree [3,9,20,null,null,15,7],</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="number">3</span></div><div class="line"> / \</div><div class="line"><span class="number">9</span>  <span class="number">20</span></div><div class="line">  /  \</div><div class="line"> <span class="number">15</span>   <span class="number">7</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>　return its level order traversal as:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">   [<span class="number">3</span>],</div><div class="line">   [<span class="number">9</span>,<span class="number">20</span>],</div><div class="line">   [<span class="number">15</span>,<span class="number">7</span>]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>　即：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">给定一个二叉树，返回按层级顺序遍历的每个节点的值。</div><div class="line"> </div><div class="line">从左到右，逐层遍历。</div><div class="line"> </div><div class="line">例如：</div><div class="line">给定一个二叉树 &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,#,#,<span class="number">15</span>,<span class="number">7</span>&#125;，</div><div class="line">    <span class="number">3</span></div><div class="line">   / \</div><div class="line">  <span class="number">9</span>  <span class="number">20</span></div><div class="line">    /  \</div><div class="line">   <span class="number">15</span>   <span class="number">7</span></div><div class="line">返回它的层级顺序遍历结果为：</div><div class="line">[</div><div class="line">  [<span class="number">3</span>],</div><div class="line">  [<span class="number">9</span>,<span class="number">20</span>],</div><div class="line">  [<span class="number">15</span>,<span class="number">7</span>]</div><div class="line">]</div><div class="line"><span class="number">102</span>&amp;<span class="number">107</span> 都是这样的问题，只不过前者返回从上至下每一层的所有节点，后者则按照从下到上的顺序。</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>解题思路<ul>
<li>是一个典型的 <strong>BFS</strong> 遍历的问题，因为 <strong>BFS</strong> 遍历的过程就是一个按层由上至下访问的过程；问题的难点在于，如何区分哪些节点属于哪一层，然后，按照遍历顺序（已经是满足要求的从左到右的顺序），将节点的值插入到每一层对应的向量里面</li>
<li>一开始想到的方式是，<strong>BFS</strong> 遍历通过队列 <strong>queue</strong> 实现，基本的 <strong>BFS</strong> 遍历队列维护的只有节点，想要知道每个节点对应的深度，可以维护一个既包含节点又包含节点深度的队列，可以考虑使用 <strong>map</strong> 字典。</li>
</ul>
</li>
<li>Solution &amp; Analysis<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        <span class="keyword">if</span>(!root) &#123;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="comment">// pair's int for recording depth</span></div><div class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, TreeNode*&gt;&gt; treeQueue;</div><div class="line">        treeQueue.push(make_pair(<span class="number">0</span>, root));</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(!treeQueue.empty()) &#123;</div><div class="line">            <span class="keyword">int</span> curDepth = treeQueue.front().first;</div><div class="line">            TreeNode* curNode = treeQueue.front().second;</div><div class="line">            treeQueue.pop();</div><div class="line">            </div><div class="line">            <span class="keyword">while</span>(result.size() &lt; curDepth+<span class="number">1</span>) &#123;</div><div class="line">                result.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">            &#125;</div><div class="line">            result[curDepth].push_back(curNode-&gt;val);</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(curNode-&gt;left) &#123;</div><div class="line">                treeQueue.push(make_pair(curDepth+<span class="number">1</span>, curNode-&gt;left));</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(curNode-&gt;right) &#123;</div><div class="line">                treeQueue.push(make_pair(curDepth+<span class="number">1</span>, curNode-&gt;right));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　另外需要注意的是  <strong>Line: 27-29</strong>。一开始我们并不知道这个树有多少层，即 <strong>result</strong> 结果集的大小，可以利用 <strong>vector</strong> 自带的动态增长功能灵活检测。<br>　<strong>Accepted</strong>，不过耗时：6ms，感觉挺长的…</p>
<ul>
<li>问题 <strong>107</strong> 只需要将上述得到的结果集反转一下就可以了，可以直接使用 <code>&lt;algorithm&gt;</code> 库中的 <strong>reverse</strong> 函数直接调用（如下），不过耗时较大。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reverse(result.begin(), result.end());</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　使用自己实现的反转函数（如下）效率更高，提交信息号称快了 <strong>3ms</strong>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">orderReverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> depth;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line">        <span class="keyword">for</span>(depth=<span class="number">0</span>; depth&lt;result.size()/<span class="number">2</span>; depth++) &#123;</div><div class="line">            tmp = result[result.size()<span class="number">-1</span> - depth];</div><div class="line">            result[result.size()<span class="number">-1</span> - depth] = result[depth];</div><div class="line">            result[depth] = tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>其他思路的实现<br>　采用递归实现的 <strong>DFS</strong> 同样能获取树节点的分层信息。 在 <strong>DFS</strong> 的过程中可以直接记录一下当前递归到第几层，就可能找到当前节点对应着哪一行向量；为了满足在同一层中，所有节点按照从左到右的顺序排列，我们需要让遍历节点的顺序也同样满足先到左边子树的节点，再到右边子树的节点，可以通过先递归处理左子树，再处理右子树来实现。<br>　此外，与上面解答类似的，由于我们一开始并不知道整个子树的层数，所以需要根据当前的层数去动态结果集中每层节点对应的向量数量。<br>　代码实现起来比较简单，不过，由于频繁的递归调用，运行时间较长，耗时：<strong>9ms</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="keyword">int</span> depth, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!root) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// dynamically increase the size of result</span></div><div class="line">        <span class="keyword">if</span> (result.size() &lt;= depth)&#123;</div><div class="line">            result.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// put current node's value into corresponding depth index</span></div><div class="line">        result[depth].push_back(root-&gt;val);</div><div class="line">        </div><div class="line">        <span class="comment">// recursive to child nodes, first left child, then right</span></div><div class="line">        dfs(root-&gt;left, depth+<span class="number">1</span>, result);</div><div class="line">        dfs(root-&gt;right, depth+<span class="number">1</span>, result);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        dfs(root, <span class="number">0</span>, result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　下面这一种实现，思路则更加直接：假如每次循环都把上一层的所有节点的左右子树（假如存在）遍历一遍，则会把当前层中的所有节点也遍历一遍；遍历是从根节点出发的，按照这一思路进行迭代，每次循环中将当前循环遍历的当前层所有节点更新成上一层节点；先左子树后右子树以及从0开始遍历上一层的所有节点信息可以保证每一层的节点符合从左往右的顺序。<br>　这种方式，感觉每个节点都需要遍历两次（一次通过上一层节点左右子树的方式；一次为了遍历下一层节点所作的遍历），所以时间也比较长，耗时：<strong>6ms</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        <span class="keyword">if</span>(!root) &#123;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// record last-layer nodes</span></div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; lastDepth;</div><div class="line">        lastDepth.push_back(root);</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(lastDepth.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line">            <span class="built_in">vector</span>&lt;TreeNode*&gt; curDepth;</div><div class="line">            </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;lastDepth.size(); i++) &#123;</div><div class="line">                TreeNode* curNode = lastDepth[i];</div><div class="line">                tmp.push_back(curNode-&gt;val);</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(curNode-&gt;left) &#123;</div><div class="line">                    curDepth.push_back(curNode-&gt;left);</div><div class="line">                &#125;</div><div class="line">                 <span class="keyword">if</span>(curNode-&gt;right) &#123;</div><div class="line">                    curDepth.push_back(curNode-&gt;right);</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span>(tmp.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                result.push_back(tmp);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            lastDepth = curDepth;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>　最后一种方法，利用这样一种特点：每一层所有节点的左右子树遍历完，则下一层的所有所有节点也被遍历一遍。使用队列这种数据结构实现 <strong>BFS</strong>，通过向队列中插入额外分割符作为实现层与层之间节点的区分，问题变成何时能够插入这样一个分隔符？这就用到上面的特点，即，当我从队列中取出一个分隔符时，说明上一层的所有节点已经从队列中取出，而且根据上一层所有节点遍历到的所有下一层的节点已经放入队列，因此，此时就需要插入一个分隔符。<br>　这种方法与普通的 <strong>BFS</strong> 遍历过程几乎一样，每个节点也只是遍历一遍（额外的分隔符其实并不多吧…），耗时最少：<strong>3ms</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; result;</div><div class="line">    result.clear();</div><div class="line">    <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">queue</span>&lt;TreeNode*&gt; S;</div><div class="line">    S.push(root);</div><div class="line">    S.push(<span class="literal">NULL</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</div><div class="line">    <span class="keyword">while</span>(!S.empty())&#123;</div><div class="line">      <span class="comment">// travesal current level</span></div><div class="line">      TreeNode* curNode = S.front();</div><div class="line">      S.pop();</div><div class="line">      <span class="keyword">if</span>(curNode != <span class="literal">NULL</span>) &#123;</div><div class="line">        tmp.push_back(curNode-&gt;val);</div><div class="line">        <span class="keyword">if</span>(curNode-&gt;left) &#123;</div><div class="line">          S.push(curNode-&gt;left);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(curNode-&gt;right) &#123;</div><div class="line">          S.push(curNode-&gt;right);</div><div class="line">        &#125;</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>(!tmp.empty()) &#123;	</div><div class="line">          S.push(<span class="literal">NULL</span>);</div><div class="line">          result.push_back(tmp);</div><div class="line">          tmp.clear();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>　
　</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0004] Depth First Search（深度优先搜索）]]></title>
      <url>/2017/03/15/Algorithms_DFS/</url>
      <content type="html"><![CDATA[<p>　本文主要介绍 <strong>DFS</strong> 的 <em>C++</em> 和 <em>C</em> 语言实现，并借助 <a href="https://leetcode.com/">LeetCode</a> 上的一道题，说说基本的 <strong>DFS</strong> 在问题求解中的应用。</p>
<h3 id="What’s-D-epth-F-irst-S-earch"><a href="#What’s-D-epth-F-irst-S-earch" class="headerlink" title="What’s D(epth)F(irst)S(earch)"></a>What’s D(epth)F(irst)S(earch)</h3><p>　深度优先搜索算法（Depth First Search），是搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点 <strong>N</strong> 的所有边都己被探寻过，搜索将回溯到发现节点 <strong>N</strong> 的那条边的起始节点，这一过程一直进行到已发现从源节点可达的所有节点为止。<br>　如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。<br><a id="more"></a></p>
<p><center><img src="/img/Algorithms/0004_binarytree.png" width="480px"/></center><br>　如上图所示的二叉树，A 是第一个访问的，然后顺序是 B、D，然后是 E。接着再是 C、F、G。</p>
<h3 id="DFS（C-）"><a href="#DFS（C-）" class="headerlink" title="DFS（C++）"></a>DFS（C++）</h3><ul>
<li><em>C++</em> 中借助堆栈数据结构来保证这个访问的顺序。由于堆栈是后进先出的顺序，由此可以先将右子树压栈，然后再对左子树压栈，这样一来，左子树结点就存在了栈顶上，因此某结点的左子树能在它的右子树遍历之前被遍历。这样一来，在遍历了根结点后，就开始遍历左子树，最后才是右子树（v<strong>oid depthFirstSearch(Tree root) </strong>）。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DFS.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ELEMENT char</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORMAT <span class="meta-string">"%c"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NODE_NUM 15</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node &#123;</div><div class="line">    ELEMENT data;</div><div class="line">    <span class="keyword">struct</span> Node* left;</div><div class="line">    <span class="keyword">struct</span> Node* right;</div><div class="line">&#125;* Tree;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * Binary Tree Constructor</div><div class="line"> *  1. construct in preorder</div><div class="line"> *  2. '#' means no left child or right child</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">binaryTreeConstructor</span><span class="params">(Tree &amp;root, ELEMENT data[])</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(index &gt;= NODE_NUM) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    ELEMENT ele = data[index++];</div><div class="line">    <span class="keyword">if</span>(ele == <span class="string">'#'</span>) &#123;</div><div class="line">        root = <span class="literal">NULL</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        root = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</div><div class="line">        root-&gt;data = ele;</div><div class="line">        binaryTreeConstructor(root-&gt;left, data);</div><div class="line">        binaryTreeConstructor(root-&gt;right, data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">depthFirstSearch</span><span class="params">(Tree root)</span> </span>&#123;</div><div class="line">    <span class="built_in">stack</span>&lt;Node *&gt; treeStack;                    <span class="comment">// using stack in STL</span></div><div class="line">    treeStack.push(root);</div><div class="line">    Node* curNode;</div><div class="line">    <span class="keyword">while</span>(!treeStack.empty()) &#123;</div><div class="line">        curNode = treeStack.top();</div><div class="line">        treeStack.pop();</div><div class="line">        <span class="built_in">printf</span>(FORMAT, curNode-&gt;data);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(curNode-&gt;right) &#123;</div><div class="line">            treeStack.push(curNode-&gt;right);     <span class="comment">// push right child first</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(curNode-&gt;left) &#123;</div><div class="line">            treeStack.push(curNode-&gt;left);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ELEMENT data[NODE_NUM] = &#123;<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'D'</span>, <span class="string">'#'</span>, <span class="string">'#'</span>, <span class="string">'E'</span>, <span class="string">'#'</span>, <span class="string">'#'</span>, <span class="string">'C'</span>, <span class="string">'F'</span>,<span class="string">'#'</span>, <span class="string">'#'</span>, <span class="string">'G'</span>, <span class="string">'#'</span>, <span class="string">'#'</span>&#125;;</div><div class="line">    Tree tree;</div><div class="line">    binaryTreeConstructor(tree, data);</div><div class="line"> </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Traversal using DFS: "</span>);</div><div class="line">    depthFirstSearch(tree);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　构建运行，结果如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gary@xxx:xxx$ g++ DFS.cpp -o DFS</div><div class="line">gary@xxx:xxx$ ./DFS</div><div class="line">Traversal using DFS: ABDECFG</div></pre></td></tr></table></figure></p>
<h3 id="DFS（C）"><a href="#DFS（C）" class="headerlink" title="DFS（C）"></a>DFS（C）</h3><ul>
<li><em>C语言</em> 中采取类似的策略，使用的是递归调用这个“堆栈”（<strong>void dfs(Node tree[], int vertexIndex, bool visited[])</strong>）。<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DFS.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NODENUM 7            	<span class="comment">// node number</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ELEMENT char</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORMAT <span class="meta-string">"%c "</span></span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;<span class="literal">false</span>, <span class="literal">true</span>&#125; <span class="keyword">bool</span>;</div><div class="line"></div><div class="line"><span class="comment">// structure for adjacency lists</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AdjList &#123;</div><div class="line">  <span class="keyword">int</span> vertexIndex; </div><div class="line">  <span class="keyword">struct</span> AdjList* next;</div><div class="line">&#125; AdjList;</div><div class="line">  </div><div class="line"><span class="comment">// Graphic node structure</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">  ELEMENT data;			<span class="comment">// data area</span></div><div class="line">  <span class="keyword">struct</span> AdjList* listAdj; 	<span class="comment">// pointing to neighbouring node</span></div><div class="line">&#125; Node;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">createTree</span><span class="params">(Node[])</span></span>;</div><div class="line"><span class="comment">// return the location of current vertex data in array, -1 if not exit. </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">locate</span><span class="params">(<span class="keyword">char</span>, Node[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseDFS</span><span class="params">(Node[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node[], <span class="keyword">int</span>, <span class="keyword">bool</span>[])</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeRelease</span><span class="params">(Node[])</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</div><div class="line">  Node tree[NODENUM+<span class="number">1</span>];</div><div class="line"> </div><div class="line">  <span class="keyword">if</span>(createTree(tree)) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"DFS result as follow:\n"</span>);</div><div class="line">    traverseDFS(tree);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line"> </div><div class="line">    treeRelease(tree);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Create graphic fail!\n"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> EXIT_SUCCESS;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * 1. create a tree by entering all nodes' value and edges of the tree</div><div class="line"> * 2. store the tree in an adjacency list</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">createTree</span><span class="params">(Node tree[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i,location;</div><div class="line">  <span class="keyword">char</span> c;</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Input all nodes's value(should be in [A&lt;sub&gt;Z]||[a&lt;/sub&gt;z]):\n"</span>);</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NODENUM; i++) &#123;</div><div class="line">    tree[i].data = getchar();</div><div class="line">    <span class="keyword">if</span>(tree[i].data &lt; <span class="string">'A'</span> || (tree[i].data &gt; <span class="string">'Z'</span> &amp;&amp; tree[i].data &lt; <span class="string">'a'</span>) || tree[i].data &gt; <span class="string">'z'</span>) &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"Node's value should be in [A&lt;sub&gt;Z]||[a&lt;/sub&gt;z]\n"</span>);</div><div class="line">      <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// eliminate '\n'</span></div><div class="line">  getchar();</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nInput the directly connected nodes, given a node:\n"</span>);</div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; NODENUM; i++) &#123;</div><div class="line">    <span class="built_in">putchar</span>(tree[i].data);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    c = getchar();</div><div class="line">    tree[i].listAdj = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">while</span>((location = locate(c, tree)) != <span class="number">-1</span>) &#123;</div><div class="line">      AdjList* newAdjVertex = (AdjList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AdjList));</div><div class="line">      newAdjVertex-&gt;vertexIndex = location;</div><div class="line">      newAdjVertex-&gt;next = <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line">      <span class="comment">// insert an adjacent node, as the head need to be dealt with separately </span></div><div class="line">      <span class="keyword">if</span>(tree[i].listAdj == <span class="literal">NULL</span>) &#123;</div><div class="line">        tree[i].listAdj = newAdjVertex;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        AdjList* temp = tree[i].listAdj;</div><div class="line">        <span class="keyword">while</span>(temp-&gt;next != <span class="literal">NULL</span>) &#123;</div><div class="line">          temp = temp-&gt;next;</div><div class="line">        &#125;</div><div class="line">        temp-&gt;next = newAdjVertex;</div><div class="line">      &#125;</div><div class="line"> </div><div class="line">      <span class="comment">// '\n' will lead to exit</span></div><div class="line">      c = getchar();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// return the index of the given node in the node array, -1 if not exist.</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">locate</span><span class="params">(ELEMENT givenVal, Node tree[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> location;</div><div class="line">  <span class="keyword">for</span>(location = NODENUM<span class="number">-1</span>; location&gt;=<span class="number">0</span>; location--) &#123;</div><div class="line">    <span class="keyword">if</span>(tree[location].data == givenVal) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> location;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverseDFS</span><span class="params">(Node tree[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">bool</span> visited[NODENUM];</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NODENUM; i++) &#123;</div><div class="line">    visited[i] = <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// need to traverse all nodes, avoid not-connected graph</span></div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NODENUM; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(!visited[i]) &#123;</div><div class="line">      dfs(tree, i, visited);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node tree[], <span class="keyword">int</span> vertexIndex, <span class="keyword">bool</span> visited[])</span> </span>&#123;</div><div class="line">  AdjList *pAdjList;</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(FORMAT, tree[vertexIndex].data);</div><div class="line">  visited[vertexIndex] = <span class="literal">true</span>;</div><div class="line"> </div><div class="line">  pAdjList = tree[vertexIndex].listAdj;</div><div class="line">  <span class="keyword">while</span>(pAdjList != <span class="literal">NULL</span>) &#123;</div><div class="line">    vertexIndex = pAdjList-&gt;vertexIndex;</div><div class="line">    <span class="keyword">if</span>(!visited[vertexIndex]) &#123;</div><div class="line">      dfs(tree, vertexIndex, visited);</div><div class="line">    &#125;</div><div class="line">    pAdjList = pAdjList-&gt;next;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// reslease the dynamically allocated memory</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">treeRelease</span><span class="params">(Node tree[])</span> </span>&#123;</div><div class="line">  AdjList *p, *temp;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;NODENUM; i++) &#123;</div><div class="line">    p = tree[i].listAdj;</div><div class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</div><div class="line">      temp = p;</div><div class="line">      p = p-&gt;next;</div><div class="line">      <span class="built_in">free</span>(temp);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　构建运行，结果如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">gary@xxx:xxx$ g++ DFS.c -o DFS</div><div class="line">gary@xxx:xxx$ ./DFS</div><div class="line">Input all nodes<span class="string">'s value(should be in [A&lt;sub&gt;Z]||[a&lt;/sub&gt;z]):</div><div class="line">ABCDEFG</div><div class="line"> </div><div class="line">Input the directly connected nodes, given a node:</div><div class="line">A BC</div><div class="line">B ADE</div><div class="line">C AFG</div><div class="line">D B</div><div class="line">E B</div><div class="line">F C</div><div class="line">G C</div><div class="line">DFS result as follow:</div><div class="line">A B D E C F G</span></div></pre></td></tr></table></figure></p>
<h3 id="112-amp-113-Path-Sum-I-amp-II"><a href="#112-amp-113-Path-Sum-I-amp-II" class="headerlink" title="112.&amp;113. Path Sum I&amp;II"></a><a href="https://leetcode.com/problems/path-sum/#/description">112.&amp;113. Path Sum I&amp;II</a></h3><ul>
<li>Description<blockquote>
<p>　Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.<br>　For example:<br>　Given the below binary tree and sum = 22,</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      <span class="number">5</span></div><div class="line">     / \</div><div class="line">    <span class="number">4</span>   <span class="number">8</span></div><div class="line">   /   / \</div><div class="line">  <span class="number">11</span>  <span class="number">13</span>  <span class="number">4</span></div><div class="line"> /  \      \</div><div class="line"><span class="number">7</span>    <span class="number">2</span>      <span class="number">1</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>return true, as there exist a root-to-leaf path <strong>5-&gt;4-&gt;11-&gt;2</strong> which sum is 22.<br>　即：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">给定一个二叉树root和一个和sum，</div><div class="line"> </div><div class="line">决定这个树是否存在一条从根到叶子的路径使得沿路所有节点的和等于给定的sum。</div><div class="line"> </div><div class="line">例如：</div><div class="line">给定如下二叉树和sum=<span class="number">22</span>，</div><div class="line">              <span class="number">5</span></div><div class="line">             / \</div><div class="line">            <span class="number">4</span>   <span class="number">8</span></div><div class="line">           /   / \</div><div class="line">          <span class="number">11</span>  <span class="number">13</span>  <span class="number">4</span></div><div class="line">         /  \      \</div><div class="line">        <span class="number">7</span>    <span class="number">2</span>      <span class="number">1</span></div><div class="line">返回真，因为这里存在一条根叶路径（<span class="number">5</span>-&gt;<span class="number">4</span>-&gt;<span class="number">11</span>-&gt;<span class="number">2</span>），它的和为<span class="number">22</span>。</div><div class="line"> </div><div class="line"><span class="number">112</span>&amp;<span class="number">113</span> 都是这样的问题，只不过前者只需要判断是否存在，后者则需要遍历所有节点以得到所有满足条件情况：</div><div class="line">　<span class="keyword">return</span></div><div class="line">　[</div><div class="line">   　[<span class="number">5</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">2</span>],</div><div class="line">   　[<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">　]</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>解题思路<ul>
<li>是一个典型的 <strong>DFS</strong> 遍历的问题，因为需要遍历 <strong>root-&gt;leaf</strong> 这样一类路径，通过递归实现。</li>
<li>需要考虑的是在 path 上传递的变量（递归调用过程中传递的参数），<strong>问题 112</strong> 只需要传递 <strong>root-&gt;当前节点</strong> 的求和（这里通过 <strong>Sum</strong> 减去当前节点值的方式），如下：</li>
</ul>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasPathSum</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        <span class="comment">// 1. An empty tree</span></div><div class="line">        <span class="keyword">if</span>(!root) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 2. A leaf, check sum</span></div><div class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</div><div class="line">            <span class="keyword">return</span> (root-&gt;val == sum);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 3. Not a leaf, recursive to a child node(|| for "exist")</span></div><div class="line">        <span class="keyword">return</span> hasPathSum(root-&gt;left, sum-(root-&gt;val)) || hasPathSum(root-&gt;right, sum-(root-&gt;val));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><strong>问题 113</strong> 除了传递 <strong>Sum</strong> 外，还需要传递 <strong>root-&gt;leaf</strong> 路径上的节点值。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pathSum(TreeNode* root, <span class="keyword">int</span> sum) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pathSet;</div><div class="line">        <span class="comment">// 1. An empty tree, return empty path Set</span></div><div class="line">        <span class="keyword">if</span>(root) &#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path;</div><div class="line">            dfs(root, sum, path, pathSet);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> pathSet;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="keyword">int</span> sum, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; curPath, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; pathSet)</span> </span>&#123;</div><div class="line">        curPath.push_back(root-&gt;val);</div><div class="line">        sum -= root-&gt;val;</div><div class="line">        </div><div class="line">        <span class="comment">// 2. A leaf reached</span></div><div class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</div><div class="line">            <span class="keyword">if</span>(sum==<span class="number">0</span>) &#123;</div><div class="line">                pathSet.push_back(curPath);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 3. Recursive to a child node</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">                dfs(root-&gt;left, sum, curPath, pathSet);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(root-&gt;right) &#123;</div><div class="line">                dfs(root-&gt;right, sum, curPath, pathSet);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// backtracking</span></div><div class="line">        curPath.pop_back();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>　此外还需要留意 <strong>backtracking</strong> 部分，因为对于 <strong>Sum</strong>，是一个形式参数，当递归函数返回时，不影响调用函数中的 <strong>Sum</strong>，但对于引用参数 <strong>curPath</strong> 就不一样了，因此，需要在递归函数返回前进行回溯，保证 <strong>curPath</strong> 始终记录 <strong>root-&gt;当前节点</strong> 路径上的节点值。</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0003] 一道阿里巴巴面试题（2017） ]]></title>
      <url>/2017/03/10/Algorithms_An%20Alibaba%20Interview%20Question/</url>
      <content type="html"><![CDATA[<p>　本文通过一道阿里面试题（下图），说说关于该题的字符串最长子串的查找问题。</p>
<p><center><img src="/img/Algorithms/0003_alibaba_2017.png" width="1024px"/></center><br><a id="more"></a></p>
<h4 id="转化问题1：求一个字符串中连续出现次数最多的子串"><a href="#转化问题1：求一个字符串中连续出现次数最多的子串" class="headerlink" title="转化问题1：求一个字符串中连续出现次数最多的子串"></a>转化问题1：求一个字符串中连续出现次数最多的子串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span> sub_str[<span class="number">2000</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_substr</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> str_len = <span class="built_in">strlen</span>(str);</div><div class="line">     <span class="keyword">int</span> i, j, k;</div><div class="line">     <span class="keyword">int</span> tmp_cnt = <span class="number">0</span>;</div><div class="line"> </div><div class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; str_len; i++) &#123;</div><div class="line">         <span class="keyword">for</span> (j = i+<span class="number">2</span>; j &lt; str_len; j++) &#123;</div><div class="line">             <span class="keyword">int</span> n = j-i;                                                     <span class="comment">//sub string length</span></div><div class="line">             tmp_cnt = <span class="number">1</span>;</div><div class="line">             <span class="keyword">if</span> (<span class="built_in">strncmp</span>(&amp;str[i], &amp;str[j], n) == <span class="number">0</span>) &#123;  <span class="comment">//compare n-lengths strings</span></div><div class="line">                 tmp_cnt++;                                             <span class="comment">//they are equal, so add count</span></div><div class="line">                 <span class="keyword">for</span> (k = j+n; k &lt; str_len; k += n) &#123;      <span class="comment">//consecutive checking</span></div><div class="line">                     <span class="keyword">if</span> (<span class="built_in">strncmp</span>(&amp;str[i], &amp;str[k], n) == <span class="number">0</span>) &#123;</div><div class="line">                         tmp_cnt++;</div><div class="line">                     &#125;</div><div class="line">                     <span class="keyword">else</span> &#123;</div><div class="line">                         <span class="keyword">break</span>;</div><div class="line">                     &#125;</div><div class="line">                 &#125;</div><div class="line">                 <span class="keyword">if</span> (count &lt; tmp_cnt) &#123;</div><div class="line">                     count = tmp_cnt;</div><div class="line">                     <span class="built_in">memcpy</span>(sub_str, &amp;str[i], n);        <span class="comment">//record the sub string</span></div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">     <span class="keyword">char</span> str[<span class="number">2000</span>];</div><div class="line">     <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</div><div class="line">     find_substr(str);</div><div class="line">     <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, sub_str);</div><div class="line">     <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分析：</p>
<ul>
<li>对于连续出现的子串，我们可以以候选子串长度作为step</li>
<li>通过指定step长度的滑动窗口，统计候选子串出现的次数，并计数</li>
<li>维护出现次数最多的子串<h4 id="转化问题2：求一个字符串中出现次数最多的子串-不一定是连续的"><a href="#转化问题2：求一个字符串中出现次数最多的子串-不一定是连续的" class="headerlink" title="转化问题2：求一个字符串中出现次数最多的子串(不一定是连续的)"></a>转化问题2：求一个字符串中出现次数最多的子串(不一定是连续的)</h4>　假设存在一个长度为 N 的子串 S 出现的次数最多。那么它具有哪些特点呢？</li>
<li>S的任一子串的出现次数不少于 S 的出现次数 </li>
<li>S中不会出现重复的子串字符 </li>
<li>S中不会出现重复的字符 </li>
<li>组成 S 的每一个字符、每一个子串的出现次数都和 S 一样<br>　“S 中不会出现重复的字符”，“组成 S 的每一个字符、每一个子串的出现次数都和 S 一样”！有了这个结论，问题就简单了。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mostTimesSubstring.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFSIZE 1024</span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">deque</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt; strlist;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> npos = <span class="number">-1</span>;</div><div class="line"><span class="function"><span class="keyword">const</span> <span class="built_in">string</span> <span class="title">ignoreChars</span><span class="params">(<span class="string">" /t/n/r"</span>)</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">IgnoreChar</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (ignoreChars.find(c) != npos);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// return the max count</span></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">TextSummary</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; text, <span class="keyword">unsigned</span> usecount[], <span class="keyword">int</span> Num4Chars)</span></span>&#123;</div><div class="line">    <span class="keyword">unsigned</span> max_count, i;</div><div class="line"> </div><div class="line">    <span class="built_in">memset</span>(usecount, <span class="number">0</span>, Num4Chars*<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>));</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; text.length(); usecount[<span class="keyword">unsigned</span>(text[i++])]++);</div><div class="line"> </div><div class="line">    <span class="keyword">for</span>(max_count = i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(IgnoreChar(i)) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span>(usecount[i] &gt; max_count) max_count = usecount[i];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> max_count;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// check whether current substring splicing one more char also reach max count</span></div><div class="line"><span class="function"><span class="keyword">char</span> <span class="title">StringTryGrowthOneChar</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; text, <span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">int</span> maxcount, <span class="keyword">unsigned</span>* usecount)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    <span class="built_in">string</span>::size_type pos;</div><div class="line">    <span class="keyword">char</span> c = <span class="number">0</span>;</div><div class="line"> </div><div class="line">    pos = text.find(str);</div><div class="line">    <span class="keyword">if</span>(pos == npos)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> </div><div class="line">    <span class="comment">// not the max count char</span></div><div class="line">    c = text[pos + str.length()];</div><div class="line">    <span class="keyword">if</span>(usecount[<span class="keyword">unsigned</span>(c)] &lt; maxcount)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> </div><div class="line">    <span class="comment">// make sure every char in this growing substring also reach max count</span></div><div class="line">    <span class="keyword">for</span>(count = <span class="number">0</span>; pos + str.length() + <span class="number">1</span> &lt; text.length(); pos += str.length())&#123;</div><div class="line">        pos = text.find(str, pos);</div><div class="line">        <span class="keyword">if</span>(pos == npos) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">if</span>(c != text[pos + str.length()]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintResult</span><span class="params">(<span class="keyword">const</span> strlist&amp; result)</span></span>&#123;</div><div class="line">    strlist::const_iterator citer;</div><div class="line"> </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"The result substrings :"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(citer = result.begin(); citer != result.end(); citer++)&#123;</div><div class="line">        <span class="comment">// substring should longer than 2 chars</span></div><div class="line">        <span class="keyword">if</span>((*citer).length() &gt; <span class="number">1</span>)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'"'</span> &lt;&lt; *citer &lt;&lt; <span class="string">'"'</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total : "</span> &lt;&lt; result.size() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</div><div class="line">    <span class="keyword">unsigned</span> usecount[<span class="number">256</span>];</div><div class="line">    <span class="keyword">char</span> buffer[BUFFSIZE], c;</div><div class="line">    <span class="keyword">unsigned</span> count, i;</div><div class="line">    <span class="built_in">string</span> text;</div><div class="line">    strlist result;</div><div class="line"> </div><div class="line">    <span class="keyword">while</span>(!feof(<span class="built_in">stdin</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(fgets(buffer, <span class="keyword">sizeof</span>(buffer), <span class="built_in">stdin</span>))</div><div class="line">            text = buffer;</div><div class="line"> </div><div class="line">        <span class="comment">// Count the number of occurrences of characters</span></div><div class="line">        count = TextSummary(text, usecount, <span class="keyword">sizeof</span>(usecount)/<span class="keyword">sizeof</span>(*usecount));</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Max count :"</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(<span class="number">1</span> &gt;= count)&#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No longest substring!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// result holds the substring reach max count</span></div><div class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(usecount)/<span class="keyword">sizeof</span>(*usecount); i++)&#123;</div><div class="line">            <span class="keyword">if</span>(usecount[i] == count)</div><div class="line">                result.push_back(<span class="built_in">string</span>(<span class="number">1</span>, <span class="keyword">char</span>(i)));</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        <span class="comment">// substring growing for more substrings</span></div><div class="line">        <span class="keyword">for</span>(strlist::iterator iter = result.begin(); iter != result.end(); iter++)&#123;</div><div class="line">            c = StringTryGrowthOneChar(text, *iter, count, usecount);</div><div class="line">            <span class="keyword">if</span>(c)</div><div class="line">                result.push_back(*iter + <span class="built_in">string</span>(<span class="number">1</span>, c));</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        PrintResult(result);</div><div class="line">        result.clear();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>编译构建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ g++ -o mostTimesSubstring mostTimesSubstring.cpp</div></pre></td></tr></table></figure></p>
<p>算法分析：</p>
<ul>
<li>找到文本中的出现次数最高的单个字符组成的子串，放入一个队列中</li>
<li>从队列的头部开始，对每一个子串 S 进行处理，找到文本中该子串出现的任意一个位置 P，判断文本中紧随 S 之后的字符 C 是否的出现次数是最多的<ul>
<li>如果 C 的出现次数不是最多的，结束。</li>
<li>如果 C 的出现次数是最多的，搜索文本中的每一个 S 并判断紧随其后的字符是否是 C <ul>
<li>如果文本中的每一个 S 之后都存在字符 C ，将 S + C 生成的子串放入结果集中</li>
<li>如果文本中出现 S 之后的字符不是 C ，结束。 </li>
</ul>
</li>
<li>如此，直至到达队列尾。</li>
</ul>
</li>
</ul>
<h4 id="回到这道面试题"><a href="#回到这道面试题" class="headerlink" title="回到这道面试题"></a>回到这道面试题</h4><ul>
<li>该题统计的是：子串出现次数与子串长度的乘积，问题是，是否这个乘积的最大值总是：（1）出现次数最多的；（2）长度最长的，显然不是</li>
<li>问题分析1：我们需要穷举所有子串并计数各自出现的次数，最终获取乘积最大的子串</li>
<li>问题分析2：能否不穷举，对上述算法进行变形？</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0002] Divide and Conquer——FFT（快速傅里叶变换）]]></title>
      <url>/2017/03/04/Algorithms_FFT/</url>
      <content type="html"><![CDATA[<p>　本文介绍 <strong>Divide and Conquer（分而治之）</strong> 的一种典型算法，<strong>FFT</strong>（快速傅里叶变换）。</p>
<h3 id="DFT"><a href="#DFT" class="headerlink" title="DFT"></a>DFT</h3><p>DFT：$X[k] = \sum_{n=0}^{N-1} x[n] e^{-j \frac{2 \pi k}{N} n}, k = 0, 1, 2, …, N-1$</p>
<ul>
<li>for each k: <strong>N</strong> complex mults, <strong>N-1</strong> complex adds</li>
<li>$e^{-j \frac{2 \pi k}{N} n}$ 预计算并保存在计算机中</li>
<li>$O(N^2)$ computations for direct <strong>DFT</strong> $\Longrightarrow$ $O(N log_2 N)$ for <strong>FFT</strong><a id="more"></a>
<h3 id="FFT-算法原理"><a href="#FFT-算法原理" class="headerlink" title="FFT 算法原理"></a>FFT 算法原理</h3>　做出如下定义：$W_N = e^{-j \frac{2 \pi}{N}}$，则：$W_N^{kn} = e^{-j \frac{2 \pi k}{N} n}$，具有如下性质：</li>
</ul>
<ol>
<li>$W_N^{kN} = e^{-j 2 \pi k } = 1$</li>
<li>复共轭对称：$W_N^{k(N-n)} = W_N^{-kn)} = (W_N^{kn})^{*}$</li>
<li>周期性：$W_N^{kn} = W_N^{k(N+n))} = W_N^{(k+N)n}$</li>
</ol>
<p>　假设 $N = 2^m$，separate $x[n]$ into even and odd-indexed subsequences<br>　$ X[k] = \sum_{n=0}^{N-1} x[n] W_N^{kn} =  \sum_{n \in even} x[n] W_N^{kr} + \sum_{n \in odd} x[n] W_N^{kr} $<br>　$ X[k] = \sum_{r=0}^{\frac{N}{2}-1} x[2r] W_N^{k 2r} +  \sum_{r=0}^{\frac{N}{2}-1} x[2r+1] W_N^{k(2r+1)} $<br>　　　$ = \sum_{r=0}^{\frac{N}{2}-1} x[2r] (W_N^2)^{kr} +  W_N^k \sum_{r=0}^{\frac{N}{2}-1} x[2r+1] (W_N^2)^{kr} $<br>　But：$W_N^2 = e^{-j \frac{2 \pi}{N} 2} = e^{-j \frac{2 \pi}{\frac{N}{2}}} = W_{\frac{N}{2}}$<br>　$ X[k] = \sum_{r=0}^{\frac{N}{2}-1} x[2r] W_{\frac{N}{2}}^{kr} +  W_N^k \sum_{r=0}^{\frac{N}{2}-1} x[2r+1] W_{\frac{N}{2}}^{kr} $<br>　　　$ = X_e[k]  + W_N^k X_o[k]$<br>　其中，$X_e[k]$：N/2 DFT of even samples，$X_o[k]$：N/2 DFT of odd samples，$X[k] \Rightarrow$ sum of 2 N/2 point DFTs<br>　<br>　举$N=8$作为一个例子，根据上述的思路进行一次二分，如下图：</p>
<center><img src="/img/Algorithms/0002_FFT complexity 1.png" width="720px"/></center><br>　左边按照普通的 <strong>DFT</strong> 计算（$O(n^2)$的时间复杂度）得到$x_e[0…3]$和$x_o[0…3]$，需要$(\frac{N}{2})^2·2$ 次乘法；$W_8^{0…7}$ 的预计算需要 $N$ 次乘法；最后的 $X[0…7]$ 的计算每一项都需要一次乘法，总共需要 $N$ 次乘法。故通过一次二分得出的计算复杂度估计为 $\frac{N^2}{2} + N$<br><center><img src="/img/Algorithms/0002_FFT complexity 2.png" width="720px"/></center><br>　按照这种思路，继续二分下去（如下图），得到 <strong>FFT</strong> 算法的最终时间复杂度：$O(N log_2 N)$<br><center><img src="/img/Algorithms/0002_FFT diagram(N=8).png" width="800px"/></center>

<h3 id="FFT算法实现"><a href="#FFT算法实现" class="headerlink" title="FFT算法实现"></a>FFT算法实现</h3><ul>
<li>源代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// FFT.cpp</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> M_PI  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI 3.14159265358979323846  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 1024*16</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VALUE_MAX 1000</span></div><div class="line"> </div><div class="line"><span class="comment">// define a complex structure</span></div><div class="line"><span class="keyword">struct</span> Complex_ &#123; </div><div class="line">    <span class="keyword">double</span> real; </div><div class="line">    <span class="keyword">double</span> imagin; </div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Complex_ Complex;</div><div class="line"><span class="comment">// define complex computation: add/subtract/multiply</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Complex_Add</span><span class="params">(Complex* src1, Complex* src2, Complex* dst)</span></span>&#123; </div><div class="line">    dst-&gt;real = src1-&gt;real + src2-&gt;real; </div><div class="line">    dst-&gt;imagin = src1-&gt;imagin + src2-&gt;imagin; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Complex_Sub</span><span class="params">(Complex* src1, Complex* src2, Complex* dst)</span></span>&#123; </div><div class="line">    dst-&gt;real = src1-&gt;real - src2-&gt;real; </div><div class="line">    dst-&gt;imagin = src1-&gt;imagin - src2-&gt;imagin; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Complex_Multiply</span><span class="params">(Complex* src1, Complex* src2, Complex* dst)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> r1 = <span class="number">0.0</span>, r2 = <span class="number">0.0</span>; </div><div class="line">    <span class="keyword">double</span> i1 = <span class="number">0.0</span>, i2 = <span class="number">0.0</span>;</div><div class="line">    r1 = src1-&gt;real; </div><div class="line">    i1 = src1-&gt;imagin; </div><div class="line">    r2 = src2-&gt;real; </div><div class="line">    i2 = src2-&gt;imagin;</div><div class="line">    dst-&gt;real = r1*r2 - i1*i2;</div><div class="line">    dst-&gt;imagin = i1*r2 + r1*i2; </div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">// get W_N^k </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getWN</span><span class="params">(<span class="keyword">double</span> k, <span class="keyword">double</span> N, Complex* dst)</span></span>&#123; </div><div class="line">    <span class="keyword">double</span> x = <span class="number">2.0</span>*M_PI*k/N; </div><div class="line">    dst-&gt;real = <span class="built_in">cos</span>(x);</div><div class="line">    dst-&gt;imagin = -<span class="built_in">sin</span>(x); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// input generator</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_generator</span><span class="params">(<span class="keyword">double</span>* data, <span class="keyword">int</span>  n)</span></span>&#123; </div><div class="line">    srand((<span class="keyword">int</span>)time(<span class="number">0</span>)); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;SIZE; i++)&#123; </div><div class="line">        data[i] = rand()%VALUE_MAX;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,data[i]);  </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * normal DFT algorithm, with O(n^2) complexity</div><div class="line"> */</span> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFT</span><span class="params">(<span class="keyword">double</span>* src, Complex* dst, <span class="keyword">int</span> size)</span> </span>&#123; </div><div class="line">    <span class="keyword">clock_t</span> start, end; </div><div class="line">    start = clock(); </div><div class="line">    <span class="comment">// 2 cycle, each with step of 1, size n, so O(n*n)</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;size; m++)&#123; </div><div class="line">        <span class="keyword">double</span> real = <span class="number">0.0</span>;  </div><div class="line">        <span class="keyword">double</span> imagin = <span class="number">0.0</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;size; n++)&#123;  </div><div class="line">            <span class="keyword">double</span> x = M_PI*<span class="number">2</span>*m*n;  </div><div class="line">            real += src[n]*<span class="built_in">cos</span>(x/size);  </div><div class="line">            imagin += src[n]*(-<span class="built_in">sin</span>(x/size));  </div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        dst[m].imagin = imagin;  </div><div class="line">        dst[m].real = real;  </div><div class="line">        <span class="keyword">if</span>(imagin &gt;= <span class="number">0.0</span>)</div><div class="line">        	<span class="built_in">printf</span>(<span class="string">"%lf+%lfj\n"</span>, real, imagin); </div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lf%lfj\n"</span>, real, imagin);</div><div class="line">    &#125; </div><div class="line">    end = clock(); </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"DFT use time :%lf for Datasize of:%d\n"</span>,(<span class="keyword">double</span>)(end-start)/CLOCKS_PER_SEC, size); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">IDFT</span><span class="params">(Complex* src, Complex* dst, <span class="keyword">int</span> size)</span> </span>&#123; </div><div class="line">    <span class="keyword">clock_t</span> start, end; </div><div class="line">    start = clock(); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>; m&lt;size; m++) &#123; </div><div class="line">        <span class="keyword">double</span> real = <span class="number">0.0</span>;  </div><div class="line">        <span class="keyword">double</span> imagin = <span class="number">0.0</span>;  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;size; n++) &#123;  </div><div class="line">            <span class="keyword">double</span> x = M_PI*<span class="number">2</span>*m*n/size;  </div><div class="line">            real += src[n].real*<span class="built_in">cos</span>(x)-src[n].imagin*<span class="built_in">sin</span>(x);  </div><div class="line">            imagin += src[n].real*<span class="built_in">sin</span>(x)+src[n].imagin*<span class="built_in">cos</span>(x);  </div><div class="line">                </div><div class="line">        &#125;  </div><div class="line">        real /= SIZE;  </div><div class="line">        imagin /= SIZE;</div><div class="line">  </div><div class="line">        <span class="keyword">if</span>(dst != <span class="literal">NULL</span>)&#123;  </div><div class="line">            dst[m].real = real;  </div><div class="line">            dst[m].imagin = imagin;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span>(imagin &gt;= <span class="number">0.0</span>)  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lf+%lfj\n"</span>, real, imagin);  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lf%lfj\n"</span>, real, imagin);  </div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    end=clock(); </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"IDFT use time :%lfs for Datasize of:%d\n"</span>, (<span class="keyword">double</span>)(end-start)/CLOCKS_PER_SEC,size); </div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">// define FFT initialization data, remapping</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">FFT_remap</span><span class="params">(<span class="keyword">double</span>* src, <span class="keyword">int</span> N)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span>(N == <span class="number">1</span>) </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">  </div><div class="line">    <span class="keyword">double</span>* temp = (<span class="keyword">double</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>)*N); </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) </div><div class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)  </div><div class="line">            temp[i/<span class="number">2</span>] = src[i];  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            temp[(N+i)/<span class="number">2</span>] = src[i];</div><div class="line">  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) </div><div class="line">        src[i] = temp[i];</div><div class="line">  </div><div class="line">    <span class="built_in">free</span>(temp);</div><div class="line">  </div><div class="line">    FFT_remap(src, N/<span class="number">2</span>); </div><div class="line">    FFT_remap(src+N/<span class="number">2</span>, N/<span class="number">2</span>);</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">double</span>* src, Complex* dst, <span class="keyword">int</span> N)</span></span>&#123; </div><div class="line">    FFT_remap(src, N);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) </div><div class="line">    	<span class="built_in">printf</span>(<span class="string">"%lf\n"</span>, src[i]);</div><div class="line"> </div><div class="line">    <span class="keyword">clock_t</span> start, end; </div><div class="line">    start = clock(); </div><div class="line">    <span class="keyword">int</span> n = N;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"> </div><div class="line">    <span class="comment">// get number of stage</span></div><div class="line">    <span class="keyword">int</span> stage = <span class="number">0</span>; </div><div class="line">    <span class="keyword">while</span>(n /= <span class="number">2</span>) &#123; </div><div class="line">        stage++;  </div><div class="line">    &#125;</div><div class="line">    n = stage; </div><div class="line">    <span class="keyword">if</span>(N != (<span class="number">1</span>&lt;&lt;n)) </div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line"> </div><div class="line">    Complex* src_complex = (Complex*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Complex)*N);</div><div class="line">    <span class="keyword">if</span>(src_complex == <span class="literal">NULL</span>)</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123; </div><div class="line">        src_complex[i].real = src[i];  </div><div class="line">        src_complex[i].imagin = <span class="number">0</span>;  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123; </div><div class="line">        k = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;N; j++) &#123; </div><div class="line">            <span class="keyword">if</span>((j/(<span class="number">1</span>&lt;&lt;i))%<span class="number">2</span> == <span class="number">1</span>) &#123;  </div><div class="line">                Complex WNk;  </div><div class="line">                getWN(k, N, &amp;WNk);</div><div class="line"> </div><div class="line">                Complex_Multiply(&amp;src_complex[j], &amp;WNk, &amp;src_complex[j]);  </div><div class="line">                k += <span class="number">1</span>&lt;&lt;(k-i<span class="number">-1</span>);</div><div class="line">                Complex temp;  </div><div class="line">                <span class="keyword">int</span> neighbour = j-(<span class="number">1</span>&lt;&lt;(i));  </div><div class="line">                temp.real = src_complex[neighbour].real;  </div><div class="line">                temp.imagin = src_complex[neighbour].imagin;  </div><div class="line">                Complex_Add(&amp;temp, &amp;src_complex[j], &amp;src_complex[neighbour]);  </div><div class="line">                Complex_Sub(&amp;temp, &amp;src_complex[j], &amp;src_complex[j]);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">                k = <span class="number">0</span>;  </div><div class="line">        &#125;  </div><div class="line">       </div><div class="line">    &#125; </div><div class="line">     </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</div><div class="line">   		<span class="keyword">if</span>(src_complex[i].imagin &gt;= <span class="number">0.0</span>) &#123; </div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%lf+%lfj\n"</span>, src_complex[i].real, src_complex[i].imagin); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">else</span> </div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%lf%lfj\n"</span>, src_complex[i].real, src_complex[i].imagin);	</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</div><div class="line">    dst[i].imagin = src_complex[i].imagin;  </div><div class="line">    dst[i].real = src_complex[i].real;  </div><div class="line">  &#125;</div><div class="line">    end = clock();</div><div class="line"> </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"FFT use time :%lfs for Datasize of:%d\n"</span>,(<span class="keyword">double</span>)(end-start)/CLOCKS_PER_SEC, N); </div><div class="line">       </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123; </div><div class="line">    <span class="keyword">double</span> input[SIZE]; </div><div class="line">    Complex dst[SIZE]; </div><div class="line">    input_generator(input, SIZE); </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">    DFT(input, dst, SIZE);</div><div class="line"> </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n"</span>); </div><div class="line">    FFT(input, dst, SIZE);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　</p>
<ul>
<li>编译构建<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gcc -o FFT FFT.cpp -lm</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　</p>
<ul>
<li>测试结果<blockquote>
<p>DFT use time :33.963164 for Datasize of:16384<br>FFT use time :0.090624s for Datasize of:16384</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析[0001] Divide and Conquer ]]></title>
      <url>/2017/02/26/Algorithms_Divide%20and%20Conquer/</url>
      <content type="html"><![CDATA[<p>　本周的 part 是 <strong>Divide and Conquer（分而治之）</strong>。<br><a id="more"></a></p>
<h4 id="169-Majority-Element"><a href="#169-Majority-Element" class="headerlink" title="169. Majority Element "></a><a href="https://leetcode.com/problems/majority-element/?tab=Description">169. Majority Element </a></h4><ul>
<li>Level: Easy</li>
<li>Description<blockquote>
<p>　Given an array of size n, find the <strong>majority element</strong>. The <strong>majority element</strong> is the element that appears more than $⌊ n/2 ⌋$ times.<br>　You may assume that the array is non-empty and the majority element always exist in the array.</p>
</blockquote>
</li>
<li>解题思路<ul>
<li><strong>Majority Element</strong>: A majority element in an array A[] of size n is an element that appears more than n/2 times（显然，只有唯一一个）</li>
<li>可以通过构造 size 为 n 的向量表计数每个数字出现的次数（$O(n)$ 线性时间复杂度），在计数过程中，一旦发现 $count &gt; n/2$ 即可返回，该数字即为要找的 <strong>Majority Element</strong></li>
<li>细想发现，使用数组构建的向量表，通过下标直接访问的方式，必须满足一个前提条件：n 个元素必须 $\in [0, n)$，所以感觉需要维护两个 size 为 n 的数组，一个保存出现的数字 $elements[0…n)$，另一个是对应的计数 $count[0…n)$，但是这样问题就出现了：在一遍遍历计数每个数字出现的次数过程中，为了找到对应的 $count[0…n)$ 下标，需要对  $elements[0…n)$ 进行查找</li>
<li>考虑了以上的情况，决定使用 C++ 中的 <strong>map</strong> 字典来实现上述的想法，避免手动维护这样一个字典功能带来的低效率和繁琐工作量（毕竟是 Easy）</li>
</ul>
</li>
<li>Solution &amp; Analysis<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="number">1</span> == nums.size()) &#123;</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; table;</div><div class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator table_iter = table.end();</div><div class="line"> </div><div class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter=nums.begin(); iter!=nums.end(); iter++)&#123;</div><div class="line">            <span class="keyword">if</span>(table.end() == table.find(*iter))&#123;</div><div class="line">                table.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(*iter, <span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                table[*iter]++;</div><div class="line">                <span class="keyword">if</span>(table[*iter] &gt; nums.size()/<span class="number">2</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> (*iter);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　<font color="green">Accepted</font>，不过耗时：<strong>38ms</strong>，应该有更高效的方式。</p>
<ul>
<li>补充<ul>
<li>有一种算法：<a href="http://www.cs.utexas.edu/~moore/best-ideas/mjrty/">A Linear Time Majority Vote Algorithm</a> ，其思路如下<blockquote>
<ol>
<li>Initialize index and count of majority element:  majorityElement = 0, count = 0</li>
<li>Loop for n = 0 to size – 1<br>　(c)If count == 0<br>　　majorityElement = a[n]<br>　　count = 1<br>　(b)If majorityElement == a[n]<br>　　count++<br>　(b)Else<br>　　count–;</li>
<li>Return majorityElement</li>
</ol>
</blockquote>
</li>
<li>代码实现如下，其时间复杂度只有：13 ms，大大降低了<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>, n, majorityElement;</div><div class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; numsSize; n++) &#123;</div><div class="line">  <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</div><div class="line">      majorityElement = nums[n];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (nums[n] == majorityElement) &#123;</div><div class="line">      count++;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">      count--;</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">    count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; numsSize; n++)&#123;</div><div class="line">  <span class="keyword">if</span> (nums[n] == majorityElement) &#123;</div><div class="line">      count++;</div><div class="line">  &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (count &gt; numsSize/<span class="number">2</span>)&#123;</div><div class="line">  <span class="keyword">return</span> majorityElement;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>+ </p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Digital Image Process]]></title>
      <url>/2017/02/04/cv_Digital-Image-Process(pg_2016)/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Books：<a href="http://durant35.github.io/pdf/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86(%E5%86%88%E8%90%A8%E9%9B%B7%E6%96%AF)%E4%B8%AD%E8%AF%91%E7%AC%AC%E4%B8%89%E7%89%88.pdf" alt="数字图像处理（冈萨雷斯）">数字图像处理（冈萨雷斯）</a><br>Codes：<a href="https://github.com/Durant35/Courses/tree/master/dip">https://github.com/Durant35/Courses/tree/master/dip</a></p>
</blockquote>
<h3 id="第2章-数字图像基础"><a href="#第2章-数字图像基础" class="headerlink" title="第2章 数字图像基础"></a>第2章 数字图像基础</h3><ul>
<li>取样和量化</li>
<li>空间和灰度分辨率<ul>
<li>空间分辨率：空间分辨率是图像在单位面积内像素的个数，表示了图像的空间细节分辨能力</li>
<li>灰度分辨率：灰度分辨率指的是在纯黑和纯白之间灰度级别的多少，指的是图像对灰度变化细节的分辨能力<a id="more"></a></li>
</ul>
</li>
<li>图像内插</li>
<li>像素间的一些基本关系<ul>
<li>$N_4(p)$；$N_8(p) = N_4(p) + N_D(p)$（对角像素） 4领域/8领域</li>
<li>距离度量 $D_e(p, q)$<ul>
<li>城市街区距离：$p(x, y)$；$q(s, t)$；$D_4(p, q) = |x-s| + |y-t|$</li>
<li>棋盘距离：$p(x, y)$；$q(s, t)$；$D_4(p, q) = |x-s| + |y-t|$</li>
<li>邻接性：</li>
<li>4 邻接；8邻接：二义性（像素到另一个像素有多条路径）</li>
<li>m 邻接：p是q的m邻接，首先p，q具有V中的数值；<br>-（i）p在$N_4(q)$中或<br>-（ii）p在$N_D(q)$且$N_4(p)∩N_4(q)$中没有V值（为空或不为空但没有V值）</li>
</ul>
</li>
<li>Path：从一个像素到另一个像素的一个像素序列<ul>
<li>4-path：一个路径上的相邻像素互为4邻接</li>
<li>8-path：一个路径上的相邻像素互为8-neighbors</li>
<li>闭合通路：一个有限区域的边界形成一条闭合通路</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第6章-彩色图像处理"><a href="#第6章-彩色图像处理" class="headerlink" title="第6章 彩色图像处理"></a>第6章 彩色图像处理</h3><ul>
<li>人眼对彩色的敏感程度要远远高于对灰度级别的敏感程度</li>
<li>CMY/CMYK（青色 深红色 黄色 黑色）$\begin{bmatrix} C\\ M \\Y \end{bmatrix} = \begin{bmatrix} 1 \\1 \\1\end{bmatrix} - \begin{bmatrix} R \\G \\B\end{bmatrix}$</li>
<li>HSI（色调 饱和度 强度）<ul>
<li>色调，饱和度和强度<ul>
<li>色调（Hue）：与光波的波长有关，它表示人的感官对不同颜色的感受</li>
<li>饱和度（Saturation）：表示颜色的纯度，纯光谱色是完全饱和的</li>
<li>强度（Intensity）：颜色的明亮程度</li>
</ul>
</li>
<li>强度轴：$(0, 0, 0) \rightarrow (1, 1, 1) $</li>
<li>色调平面<ul>
<li>$强度轴 + 彩色点 \Rightarrow 三角面$</li>
<li>$R(0°) \rightarrow G(120°) \rightarrow B(240°)$</li>
</ul>
</li>
<li>饱和度（纯度）<ul>
<li>纯色被白光稀释的程度</li>
<li>以与强度轴的距离为函数</li>
</ul>
</li>
<li>$RGB \rightarrow HSI$　RGB归一化到$[0, 1]$<ul>
<li>$ H[0, 360] = \begin{cases} \theta, &amp;B \leq G \cr 360 - \theta, &amp;B \gt G \end{cases} $，其中$ \theta = arccos\{\frac{\frac{1}{2}[(R-G)+(R-B])}{[(R-G)^2 + (R-B)(G-B)]^\frac{1}{2}} \}$</li>
<li>$ S[0, 1] = 1 - \frac{3}{R+G+B}[min(R, G, B)] $，纯色值为 1</li>
<li>$ I[0, 1] = \frac{1}{3}(R + G + B) $，黑色值为 0/白色值为 1</li>
</ul>
</li>
<li>$HSI \rightarrow RGB$　$H[0, 360]; S[0, 1]; I[0, 1]$<ul>
<li>$ 0° \leq H \le 120°，\begin{cases} B = I(1-S) \cr R = I[1 + \frac{ScosH}{cos(60° - H)}] \cr G = 3I - (R+B) \end{cases} $</li>
<li>$ 120° \leq H \le 240°，H = H - 120°，\begin{cases} R = I(1-S) \cr G = I[1 + \frac{ScosH}{cos(60° - H)}] \cr B = 3I - (R+G) \end{cases} $</li>
<li>$ 240° \leq H \le 360°，H = H - 240°，\begin{cases} G = I(1-S) \cr B = I[1 + \frac{ScosH}{cos(60° - H)}] \cr R = 3I - (G+B) \end{cases} $</li>
</ul>
</li>
<li>HSI 模型更符合人眼对颜色的解释，该模型可以在彩色图像中从携带的彩色信息中将色度信息（色调和饱和度）和强度信息的分量分开</li>
</ul>
</li>
<li>伪彩色：基于一种指定的规则对灰度值赋以颜色的处理<ul>
<li>一幅单色图像<center><img src="/img/CV/dip/PseudoColorProcessing_single.png" width="360px"/></center></li>
<li>多幅单色图像<center><img src="/img/CV/dip/PseudoColorProcessing_multiple.png" width="420px"/></center></li>
</ul>
</li>
<li>全彩色图像：全彩色传感器采集的图像<br>$ \begin{cases} 分别处理每一个向量 \cr 直接处理彩色像素 \end{cases} \Longleftarrow[条件] \begin{cases} ①处理必须对于向量和标量都可用 \cr ②对向量的每一个分量的操作对于其他分量必须是独立的 \end{cases} $</li>
<li>独立于设备的彩色模型：<code>CIEL*a*b*</code>（亮度；红减绿；绿减蓝）<ul>
<li>没有可直接显示的格式（需要变换到另外的彩色空间），但其色域包括整个可见光谱，并可以准确地表示任何显示设备，打印设备或输入设备的颜色</li>
<li>通常的彩色显设备是不能显示自然界所有颜色，仅限于该显示器的三原色所构成的三角形内，不能完全覆盖整个色度图</li>
</ul>
</li>
<li>色调范围（主调类型）：颜色强度的基本分布<ul>
<li>高主调：高（亮）强度处</li>
<li>中主调</li>
<li>低主调：低（暗）亮度处</li>
</ul>
</li>
<li>单独对彩色图像的分量进行直方图均衡通常是不明智的，应当均匀地展开这种彩色灰度，而保持彩色本身（即色调）不变$ \Rightarrow $ 转换到HSI彩色空间进行直方图处理</li>
<li>彩色图像的噪声内容在每个彩色通道中具有相同的特性，但噪声对不同的彩色通道所造成的影响不同</li>
<li>彩色图像平滑<ul>
<li>领域平均平滑可以在每个彩色平面的基础上执行，其结果与使用RGB彩色向量执行平均效果是相同的</li>
</ul>
</li>
<li>彩色图像锐化<ul>
<li>一个向量的拉普拉斯被定义为一个向量，其分量等于输入向量的各个标量分量的拉普拉斯</li>
</ul>
</li>
</ul>
<h3 id="第3章-灰度变换与空间滤波"><a href="#第3章-灰度变换与空间滤波" class="headerlink" title="第3章 灰度变换与空间滤波"></a>第3章 灰度变换与空间滤波</h3><ul>
<li>空间域 vs 变换域<ul>
<li>空间域：直接以图像中的像素操作为基础</li>
<li>空间域处理$ \begin{cases} 灰度变换：在图像的单个像素上操作，主要以对比度/阈值处理为目的（图像增强/图像分割） \cr 空间滤波：图像中每一个像素的领域处理 \end{cases} $</li>
<li>变换域：先把一幅图像变换到变换域，在变换域中进行处理，然后反变换把处理的结果返回到空间域</li>
</ul>
</li>
<li>点处理技术 vs 领域处理技术</li>
<li>图像增强<ul>
<li>对图像进行加工，使其结果对于特定的应用比原始图像更合适的一种处理</li>
<li>“特定”：面向问题，没有通用的“理论”；效果没办法量化</li>
</ul>
</li>
<li>基本的灰度变换函数<ul>
<li>图像反转<ul>
<li>$ S = L - 1 - r，（r \in [0, L-1]）$</li>
<li>增强嵌入在一幅图像的暗区域中的白色或灰色细节，特别是当黑色面积在尺寸上占主导地位时</li>
</ul>
</li>
<li>对数变换<ul>
<li>$ S = clog(1+r)，（c为常数，r \geq 0） $</li>
<li>扩展图像中的暗像素的值，同时压缩更高灰度级的值 $\Longleftrightarrow$ 反对数</li>
<li>压缩像素值变化较大的图像的动态范围，如傅里叶频谱$（0，10^6）\Longrightarrow$ 图像显示系统通常不能如实地再现如此大的范围</li>
</ul>
</li>
<li>幂律（伽马）变换<ul>
<li>$ S = cr^{\gamma}，（c，\gamma为正常数） $</li>
<li>参数性质<ul>
<li>$ \gamma \gt 1 $，（越大越）扩展高灰度级值（亮部的细节）</li>
<li>$ \gamma \lt 1 $，（越小越）扩展低灰度级值（暗部的细节）</li>
</ul>
</li>
<li>有些计算机系统内置部分伽马校正，因为计算机屏幕内部自带伽马校正，改变伽马值不仅会改变亮度，而且会改变彩色图像中的 R，G，B 比率<ul>
<li>整体偏暗的对比度增强</li>
<li>“冲淡”外观的灰度级压缩</li>
</ul>
</li>
</ul>
</li>
<li>分阶级性变换函数<ul>
<li>对比度拉伸：特定灰度级范围斜率变化大（低于 k 的灰度级更暗，高于 k 的灰度级更亮）</li>
<li>灰度级分层：特定灰度级范围的亮度进行不同赋值（例如二值化）</li>
<li>比特平面分层<ul>
<li>$ \begin{cases} 高阶比特：视觉上很重要的大部分数据 \cr 低阶比特：更精细的灰度细节 \end{cases} $ $\Longrightarrow$ 图像压缩：4个高阶比特平面将允许我们从可接受的细节来重建原图像</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>直方图处理<ul>
<li>概述<ul>
<li>灰度级范围为$[0, L-1]$的数字图像的直方图：$h(r_k) = n_k$，$r_k$ 是第 k 级灰度值，$n_k$ 是 $r_k$ 的像素个数</li>
<li>归一化：$p(r_k) = \frac{n_k}{MN}$，灰度级 $r_k$ 在图像中出现的概率</li>
<li>图像的直方图反映了图像的明暗程度以及对比强度，对比度适中的图像通常具有均匀分布的直方图<ul>
<li>低对比度图像具有较窄的直方图，且集中于灰度级的中部；高对比度图像中直方图的分量覆盖了很宽的灰度级范围，而且像素的分布没有太不均匀</li>
<li>若一幅图像的像素倾向于占据整个可能灰度级并且分布均匀，则该图像会有高对比度的外观并展示灰色调的较大变化</li>
</ul>
</li>
</ul>
</li>
<li>直方图均衡化<ul>
<li>直方图均衡化变换（直方图线性变换）<br>　　$ S_k = T(r_k) = (L-1) \sum_{j=0}^k p_r(r_j) = \frac{L-1}{MN}  \sum_{j=0}^k n_j，k=0, 1, 2, 3, …, L-1$</li>
<li>“自动的”：因为图像有相同的内容，直方图均衡导致的对比度增强足以补偿图像在视觉上难以区分灰度级的差别</li>
</ul>
</li>
<li>直方图匹配（直方图规定化）<ul>
<li>Histogram Matching（Specification）：是指对一副图像进行变换，使其直方图与另一幅图像的直方图或特定函数形式的直方图匹配；是用户处理图像后，产生特殊直方图的方法</li>
<li>步骤<ol>
<li>计算直方图 $p_r(r)$，获取直方图均衡变换 $S_k$，把 $S_k$ 四舍五入到 $[0, L-1]$ 范围内的整数</li>
<li>计算变换函数：$G(z_q) = (L-1) \sum_{i=0}^{q} p_z(z_i)$，其中 $q=0, 1, 2, 3, …, L-1$，$p_z(z_i)$ 是规定的直方图</li>
<li>把 G 的值四舍五入到 $[0, L-1]$ 范围整数，存储在查找表中</li>
<li>满足最接近 $S_k$ 的 $G(z_q)$ 的 $z_q$ 值即为直方图规定化后的像素值（当满足给定的 $S_k$ 的 $z_q$ 值多于一个时，选择最小的 $z_q$ 值）</li>
</ol>
</li>
</ul>
</li>
<li>局部直方图均衡化：增强小区域的细节</li>
<li>在图像增强中使用直方图统计<ul>
<li>统计量<ul>
<li>平均灰度：$m = \sum_{i=0}^{L-1} r_i p(r_i)$ 或（取样均值）$m = \frac{1}{MN} \sum_{x=0}^{M-1} \sum_{y=0}^{N-1} f(x, y)$</li>
<li>灰度方差：$\mu_2(r) = \sum_{i=0}^{L-1} (r_i - m)^2 p(r_i)$ 或（取样方差）$\sigma^2 = \frac{1}{MN} \sum_{x=0}^{M-1} \sum_{y=0}^{N-1} [f(x, y) - m]^2$</li>
<li>n阶矩：$\mu_{n}(r) = \sum_{i=0}^{L-1} (r_i - m)^n p(r_i)$</li>
</ul>
</li>
<li>根据统计量判断<ul>
<li>判断一个区域在点 $(x, y)$ 是暗还是亮：$m_{S_{xy}} \leq km_G$，其中 $m_{S_{xy}}$ 为局部平均灰度，$m_G$ 为全局均值</li>
<li>判断一个区域的对比度是否可作为低对比度区域：$k_1 \sigma_G \leq \sigma_{S_{xy}} \leq k_2 \sigma_G$（标准差为 0 的区域需排除）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>空间滤波（线性空间滤波器；非线性空间滤波器）<ul>
<li>一个邻域（典型的是一个较小的矩形；奇数尺寸，最小 $3x3$）</li>
<li>对该邻域包围的图像像素执行的预定义操作<ul>
<li>一个 mxn 的滤波器 $\omega(x, y), m=2a+1, n=2b+1$</li>
<li>操作：$g(x, y) = \sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)f(x+s, y+t) $（一般空间滤波器旋转180°后保持不变）</li>
</ul>
</li>
</ul>
</li>
<li>相关 vs 卷积<ul>
<li>1D<ul>
<li>要求：n 必须满足 $g(n)$ 完全滑过 $f(n)$</li>
<li>卷积需要将 $g(n)$ 旋转180°（怎么补零？）$ \Longleftarrow \begin{cases} 卷积：(f \otimes g)[n] = \sum_{m=0}^{N-1} f(m)g(n-m)  \cr 相关：(f \circ g)[n] = \sum_{m=0}^{N-1} f(m)g(n+m) \end{cases} $</li>
</ul>
</li>
<li>2D<ul>
<li>对所有位移变量 x 和 y 求值，以便 $\omega$ 的所有元素访问 $f$ 的每一个像素</li>
<li>$ \Longrightarrow \begin{cases}  卷积：\omega (x, y) \otimes f(x, y) =  \sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)f(x-s, y-t) \cr  相关：\omega (x, y) \circ f(x, y) =  \sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)f(x+s, y+t)  \end{cases} $</li>
</ul>
</li>
</ul>
</li>
<li>平滑空间滤波器：用于模糊处理 $\Rightarrow$ 降低噪声<ul>
<li>平滑线性滤波器（均值滤波器）：响应是包含在滤波器模板邻域内的像素的简单平均值</li>
<li>降低了图像灰度的“尖锐”变化，比如典型的随机噪声就由灰度级急剧变化组成</li>
<li>图像边缘也是由图像灰度尖锐变化带来的特性 $\Rightarrow$ 边缘模糊的负面效应</li>
</ul>
</li>
<li>盒状滤波器 vs 加权平均<ul>
<li>随着距中心点的距离的增加而减小系数值的加权策略 $\Rightarrow$ 降低模糊<br>　　$g(x, y) = \frac{\sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)f(x+s, y+t)}{\sum_{s=-a}^a \sum_{t=-b}^b \omega(s, t)}$</li>
<li>空间均值处理：模糊图像，较小物体的灰度与背景混在一起，较大物体变得像“斑点”而易于检测</li>
</ul>
</li>
<li>统计排序（非线性）滤波器<ul>
<li>响应以滤波器包围的区域中所包含像素的排序为基础，使用统计排序结果决定的值代替中心像素的值</li>
<li>中值滤波器 最大值滤波器</li>
</ul>
</li>
<li>锐化空间滤波器：突出灰度的过渡部分<ul>
<li>$ \begin{cases}  图像模糊：通过在空间域用像素邻域平均法实现 \Rightarrow 积分 \cr  锐化可以用空间微分来实现 \Rightarrow 增强边缘和其它突变（如噪声），而削弱灰度变化缓慢的区域 \end{cases} $<center><img src="/img/CV/dip/Grayscale_changes.png" width="540px"/></center></li>
<li>微分<ul>
<li>一阶微分：$\frac{\partial f}{\partial x} = f(x+1) - f(x)$，用到下一个点，“预测未来”</li>
<li>二阶微分：$\frac{\partial^2 f}{\partial^2 x} = f(x+1) + f(x-1) - 2f(x)$</li>
<li>数字图像中的边缘在灰度上常常类似于斜坡过渡，一阶微分会产生较粗的边缘，二阶微分产生由零分开的一个像素宽的双边缘。二阶微分在增强细节方面要比一阶微分好的多，适合锐化图像</li>
</ul>
</li>
<li>拉普拉斯算子：$\nabla^2 f = \frac{\partial^2 f}{\partial^2 x} + \frac{\partial^2 f}{\partial^2 y}$<ul>
<li>是一个各向同性滤波器：响应与作用的图像的突变方向无关；将原图像旋转后进行滤波处理给出的结果与先滤波再旋转的结果相同</li>
<li>$\nabla^2 f(x, y) = f(x+1, y) + f(x-1, y) + f(x, y+1) + f(x, y-1) - 4f(x, y)$</li>
<li>上面公式只是四种算子中的一个<br>　　$\begin{bmatrix} 0 &amp; 1 &amp; 0 \\  1 &amp; -4 &amp; 1 \\  0 &amp; 1 &amp; 0 \end{bmatrix}$ $\begin{bmatrix} 1 &amp; 1 &amp; 1 \\  1 &amp; -8 &amp; 1 \\  1 &amp; 1 &amp; 1 \end{bmatrix}$ $\begin{bmatrix} 0 &amp; -1 &amp; 0 \\  -1 &amp; 4 &amp; -1 \\  0 &amp; -1 &amp; 0 \end{bmatrix}$ $\begin{bmatrix} -1 &amp; -1 &amp; -1 \\  -1 &amp; 8 &amp; -1 \\  -1 &amp; -1 &amp; -1 \end{bmatrix}$</li>
<li>输入图像 $f(x, y)$，锐化后的图像 $g(x, y)$：$g(x, y) = f(x, y) + c[\nabla^2 f(x, y)]$，c 的符号与中心系数 $[f(x, y)]$ 的符号相反<ol>
<li>任意阶微分都是线性操作，$\nabla^2 f(x, y)$ 也是一个线性算子</li>
<li>将原图像和拉普拉斯图像叠加，可以复原背景特性并保持拉普拉斯锐化处理的结果（强调灰度的突变，并不强调灰度缓慢变化的区域）</li>
<li>通过拉普拉斯变换增强了图像中灰度突变处的对比度，使图像中的细节部分得到了增强，并良好地保留了图像的基本色调</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>非锐化掩蔽<ul>
<li>从原图像中减去一幅非锐化（平滑/模糊过的）图像 $\bar{f}(x, y) \leftarrow$ 高斯滤波器模糊</li>
<li>非锐化模板：$g_{mask}(x, y) = f(x, y) - \bar{f}(x, y)$</li>
<li>$g(x, y) =  f(x, y) + k * g_{mask}(x, y)$<ul>
<li>$k = 1$：非锐化掩蔽</li>
<li>$k \gt 1$：高提升滤波</li>
</ul>
</li>
</ul>
</li>
<li>梯度与 Sobel 算子<ul>
<li>梯度<ul>
<li>$\nabla f = grad(f) = \begin{bmatrix} \frac{\partial f}{\partial x} \\ \frac{\partial f}{\partial y} \end{bmatrix}$</li>
<li>$\nabla f $ 为向量，幅度值 $M(x, y) = mag(\nabla f) = \sqrt{g_x^2 + g_y^2}$，不是线性算子，因为做了平方和平方根操作</li>
<li>$\Longrightarrow M(x, y) ≈|g_x| + |g_y|$，仍保留灰度的相对变化，虽然通常丢失了方向性</li>
</ul>
</li>
<li>Sobel 算子<ul>
<li>$M(x, y) ≈|(z_7 + 2z_8 + z_9) - (z_1 + 2z_2 + z_3)| + |(z_3 + 2z_6 + z_9) - (z_1 + 2z_4 + z_7)|$</li>
<li>矩阵形式：$\begin{bmatrix} z_1 &amp; z_2 &amp; z_3 \\  z_4 &amp; z_5 &amp; z_6 \\  z_7 &amp; z_8 &amp; z_9 \end{bmatrix}$ $\begin{bmatrix} -1 &amp; -2 &amp; -1 \\  0 &amp; 0 &amp; 0 \\  1 &amp; 2 &amp; 1 \end{bmatrix}$ $\begin{bmatrix} -1 &amp; 0 &amp; 1 \\  -2 &amp; 0 &amp; 2 \\  -1 &amp; 0 &amp; 1 \end{bmatrix}$</li>
</ul>
</li>
</ul>
</li>
<li>应用多种互补的图像增强技术<ol>
<li><font color="green">拉普拉斯操作</font>作为一种二阶微分算子在图像细节增强方面，它是最好的，但这会导致产生比梯度操作更多的噪声</li>
<li><font color="green">梯度操作（Sobel 算子）</font>对噪声和小细节响应要比拉普拉斯变换操作的响应弱，而且可以通过<font color="green">均值滤波器</font>进行平滑而进一步降低</li>
<li>拉普拉斯图像与平滑处理后的梯度图像相乘，<font color="green">乘积</font>会保留灰度变化强烈区域的细节，同时降低灰度变化相对平坦区域的噪声</li>
<li>具有重要边缘内容的梯度图像，边缘要比拉普拉斯图像突出，乘积的关键目的：强边缘的优势和可见噪声的减少</li>
<li>锐化/平滑过程从感知方法上没有影响图像灰度的动态变化，通过<font color="green">幂律变换</font>可以增大锐化后图像的动态范围</li>
</ol>
</li>
</ul>
<h3 id="第4章-频率域滤波"><a href="#第4章-频率域滤波" class="headerlink" title="第4章 频率域滤波"></a>第4章 频率域滤波</h3><ul>
<li>一维连续<ul>
<li>傅里叶变换对<br>$ F(\mu) = \zeta\{f(t)\} = \int_{-\infty}^{\infty} f(t) e^{-j2\pi \mu t}\, dt$<br>$ f(t) = \zeta^{-1}\{F(\mu)\} = \int_{-\infty}^{\infty} F(\mu) e^{j2\pi \mu t}\, d\mu$</li>
<li>卷积<br>$ f(t) \bigotimes h(t) = \int_{-\infty}^{\infty} f(\tau) h(t- \tau) \, d\tau = F(\mu)H(\mu) = \sum_{n=-\infty}^{\infty}f(n\Delta T)h(t - n\Delta T)$</li>
</ul>
</li>
<li>一维离散<ul>
<li>$f(t)$ 的 M 个样本组成集合 $\{f_n\} = f(x)$</li>
<li>$M$ 个复数离散值的傅里叶变换样本集合 ${f_m} = F(\mu)$<br>$ F(\mu) = \sum_{x=0}^{M-1} f(x) e^{-j2\pi \frac{\mu x}{M} }，\mu = 0, 1, 2, …, M-1$<br>$ f(x) = \frac{1}{M}\sum_{\mu =0}^{M-1} F(\mu) e^{j2\pi \frac{\mu x}{M} }，x = 0, 1, 2, …, M-1$</li>
</ul>
</li>
<li>二维<ul>
<li>连续<br>$ F(\mu, \nu) = \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} f(x, y) e^{-j2\pi(\mu t + \nu z)}\, dt\, dz$<br>$ f(t, z) = \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} F(\mu, \nu) e^{j2\pi(\mu t + \nu z)}\, d\mu \, d\nu$</li>
<li>离散<br>$ F(\mu, \nu) = \sum_{x=0}^{M-1} \sum_{y=0}^{N-1} f(x, y) e^{-j2\pi(\frac{\mu x}{M} + \frac{\nu y}{N})}$<br>$ f(x, y) = \frac{1}{MN}\sum_{\mu =0}^{M-1} \sum_{\nu =0}^{N-1} F(\mu, \nu) e^{j2\pi(\frac{\mu x}{M} + \frac{\nu y}{N})}$</li>
</ul>
</li>
<li>使用DFT时，图像和滤波器的大小必须相同<ol>
<li>$MxN$ 的图像 $f$</li>
<li>进行 $PxQ$ 填充成 $f_p$（$P\geq2M-1, Q\geq2N-1$）</li>
<li>$(-1)^{x+y}$ 乘以 $f_p$</li>
<li>$f_p$ 的傅里叶变换（DFT）生成 $F_p$</li>
<li>滤波器扩容成 $PxQ$，关于中心对称化后生成 $H(u, v)$</li>
<li>$H(u, v)F_p \Rightarrow G(u, v)$</li>
<li>计算 $G(u, v)$ 的 IDFT，得到 $\zeta^{-1}[G(u, v)]$</li>
<li>处理后得到图像 $g_p = \{ real[\zeta^{-1}[G(u, v)]] \}(-1)^{x+y}$</li>
<li>裁剪 $g_p$ 的前 M 行和前 N 列得到最终的结果</li>
</ol>
</li>
<li>空间模板 [转换]$\Longrightarrow$ 频率域滤波器 $H(u, v)$<ol>
<li>$h(x, y)$ 扩充成 $h_p(x, y)$</li>
<li>$(-1)^{x+y}$ 乘以 $h_p(x, y)$ 以便频率域滤波器“中心化”</li>
<li>计算上述结果的 DFT</li>
<li>滤波器 $H(u, v)$ 必须是纯虚函数，将得到的 DFT 实部置零</li>
<li>$H(u, v)$ 等于 $(-1)^{x+y}$ 乘以上述结果，隐含着 $h(x, y)$ 被移到 $h_p(x, y)$ 的中心</li>
</ol>
</li>
<li>傅里叶频谱<ul>
<li>傅里叶频谱中心点对应于空间域的平均灰度或背景灰度</li>
<li>从中心点离开，低频信息对应慢变化的分量，如大体轮廓，背景等平滑部分</li>
<li>进一步离开中心点，较高频率对应变化越来越快的灰度级，如边缘，细节，噪声</li>
</ul>
</li>
</ul>
<h3 id="第5章-图像复原与重建"><a href="#第5章-图像复原与重建" class="headerlink" title="第5章 图像复原与重建"></a>第5章 图像复原与重建</h3><ul>
<li>图像退化/复原过程的模型<ul>
<li>$G(u, v) = H(u, v)F(u, v) + N(u, v)$<center><img src="/img/CV/dip/restoration_model.png" width="580px"/></center></li>
</ul>
</li>
<li>图像增强 vs 图像复原<ul>
<li>图像增强主要是一个主观过程，首要目标是处理图像，使其比原始图像更适合于特定应用，如对比度增强</li>
<li>图像复原大部分过程是一个客观过程，利用退化现象的先验知识来重建或复原被退化的原始图像</li>
</ul>
</li>
<li>噪声模型<ul>
<li>高斯噪声<br><center><img src="/img/CV/dip/Noise_Gaussian.png" width="780px"/></center><ul>
<li>去噪：均值，中点</li>
</ul>
</li>
<li>瑞利噪声<br><center><img src="/img/CV/dip/Noise_Rayleigh.png" width="620px"/></center><ul>
<li>近似歪斜，比较胖</li>
<li>去噪：</li>
</ul>
</li>
<li>伽马噪声<br><center><img src="/img/CV/dip/Noise_Gamma.png" width="640px"/></center><ul>
<li>比较尖</li>
<li>去噪：</li>
</ul>
</li>
<li>指数噪声<br><center><img src="/img/CV/dip/Noise_Exp.png" width="580px"/></center><ul>
<li>去噪：</li>
</ul>
</li>
<li>均匀噪声<br><center><img src="/img/CV/dip/Noise_Uniform.png" width="580px"/></center><ul>
<li>去噪：中点</li>
</ul>
</li>
<li>脉冲噪声<br><center><img src="/img/CV/dip/Noise_Impulse.png" width="540px"/></center><ul>
<li>去噪：谐波均值，逆谐波均值，中值，最大值/最小值</li>
</ul>
</li>
<li>周期噪声<ul>
<li>傅里叶共轭点，近似圆</li>
<li>去噪：低通，带通……</li>
</ul>
</li>
<li>如何获取$ N(u, v) $？<ul>
<li>在图像的平坦区域取一小块自图像做直方图，与已有的噪声模型作对比</li>
</ul>
</li>
</ul>
</li>
<li>常见滤波器降噪情况<ul>
<li>高斯或者均匀随机噪声 $ \Longleftarrow  \begin{cases} 均值滤波平滑一幅图像中的局部变化，虽然模糊了结果，但降低了噪声 \cr 几何均值丢失的图像细节更少 \end{cases} $ </li>
<li>谐波均值对盐噪声较好，不适用于椒噪声，善于处理像高斯噪声</li>
<li>逆谐波均值，$ Q \gt 0 $，椒噪声；$ Q \lt 0 $，盐噪声；$ Q = 0 $为算数均值滤波</li>
<li>中值滤波器：比相同尺寸的线性平滑滤波器引起的模糊更小，在存在单极或双极脉冲噪声（椒噪声 and/or 盐噪声）的情况下，尤其有效</li>
<li>最大值降椒噪声，最小值降盐噪声</li>
<li>中点滤波器对于随机分布噪声工作得最好（高斯/均匀）</li>
</ul>
</li>
<li>高斯噪声和椒盐噪声混合的情况<ol>
<li>修正的阿尔法均值滤波器，降噪方面更好</li>
<li>算术均值和几何均值由于脉冲噪声的存在并没有起到良好的作用</li>
<li>使用中值滤波器重复地进行处理$\Longrightarrow$会使得图像变模糊，细节损失<br>$\Longrightarrow$ 自适应中值滤波器：<br><center><img src="/img/CV/dip/AdaptiveMidianFilter.png" width="580px"/></center><ul>
<li>A层确保$Z_{med}（Z_{min} \lt Z_{med} \lt Z_{max}）$ 不是脉冲，B层确保$Z_{xy}（Z_{min} \lt Z_{xy} \lt Z_{max}）$不是脉冲</li>
<li>动态增大窗口</li>
<li>不改变“中心灰度级”，减少图像中的失真</li>
<li>去除椒盐噪声（脉冲噪声），平滑其他非脉冲噪声，并减少诸如物体边界细化或粗化等失真</li>
</ul>
</li>
<li>自适应局部降噪降噪：$\hat{f}(x, y) = g(x, y) \frac{ \sigma^2_{\eta} }{ \sigma^2_L }[g(x, y) - m_L]$<ul>
<li>参数说明<ul>
<li>滤波器作用于局部区域$S_{xy}$</li>
<li>$\sigma^2_{\eta}$ ：污染 $f(x, y)$ 以形成 $g(x, y)$ 的噪声的方差</li>
<li>$m_L$ ：$S_{xy}$中像素的局部均值</li>
<li>$\sigma^2_L$ ：$S_{xy}$中像素的局部方差</li>
</ul>
</li>
<li>计算结果为局部均值或保留原始像素</li>
<li>高局部方差与边缘相关，因此能够保护边缘</li>
</ul>
</li>
</ol>
</li>
<li>逆滤波存在的问题<br>$$ \hat{F}(u, v) = F(u, v) + \frac{N(u, v)}{H(u, v)} $$<ul>
<li>$H(u, v)$ 为零或为非常小的值</li>
<li>解决问题的一种方法是限制滤波的频率，使其接近于频谱原点</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> CV </category>
            
            <category> dip </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令小纸条]]></title>
      <url>/2017/02/04/linux_LinuxCommandNotes/</url>
      <content type="html"><![CDATA[<h3 id="压缩-解压"><a href="#压缩-解压" class="headerlink" title="压缩/解压"></a>压缩/解压</h3><ul>
<li><strong>tar</strong> 压缩</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar -zcvf dst.tar.gz /src-dir</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>tar</strong> 解压</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar -xvf src.tar.gz</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>zip</strong> 压缩<a id="more"></a></li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ zip -r dst.zip /src-dir</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>zip</strong> 解压</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ unzip src.zip <span class="_">-d</span> .</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>.tar.gz</strong> 解压</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gzip <span class="_">-d</span> xxx.tar.gz</div><div class="line">tar -xvf xxx.tar</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><ul>
<li><strong>scp</strong> 上传</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp  -P port-number -rp host-path-src user@remote:/path-dst</div></pre></td></tr></table></figure>
<ul>
<li><strong>scp</strong> 下载</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp -r user@remote:/path-src host-path-dst</div></pre></td></tr></table></figure>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ul>
<li>查看进程信息（如：<strong>PID</strong>）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ps -aux [| grep key-word]</div></pre></td></tr></table></figure>
<ul>
<li>查看 线程-资源 使用情况</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ top -c <span class="_">-d</span> 1</div></pre></td></tr></table></figure>
<h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><ul>
<li><strong>端口</strong> 占用情况</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ netstat -anp [| grep target-port]</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>查看监听端口<center><img src="/img/programPearls/linux/netstat.jpg" alt="netstat" width="720px"/></center></li>
<li>扫描局域网内已经分配了哪些 ip</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap <span class="_">-s</span>P 192.168.1.0/24</div></pre></td></tr></table></figure>
<ul>
<li>通过上述命令可以检测出整个<code>192.168.1.0</code>局域网内在用的主机 ip</li>
</ul>
</li>
<li>查看一台主机开放了哪些端口</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -PS host-ip</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="挂载-解挂"><a href="#挂载-解挂" class="headerlink" title="挂载/解挂"></a>挂载/解挂</h3><ul>
<li>解挂</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo umount <span class="_">-l</span> mount-dir</div></pre></td></tr></table></figure>
<ul>
<li>挂载</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看挂载设备 /dev/sd?</span></div><div class="line">$ sudo fdisk <span class="_">-l</span></div><div class="line"><span class="comment"># 需要时创建挂载点</span></div><div class="line">$ mkdir mount-point-dir</div><div class="line"><span class="comment"># 挂载设备</span></div><div class="line">$ sudo mount /dev/sd? mount-point-dir</div></pre></td></tr></table></figure>
<h3 id="快速查找"><a href="#快速查找" class="headerlink" title="快速查找"></a>快速查找</h3><ul>
<li>文件名查找</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find <span class="string">"name-string"</span> find-path</div></pre></td></tr></table></figure>
<ul>
<li>文件内容查找</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ grep -r -i <span class="string">"content-string"</span> find-path</div></pre></td></tr></table></figure>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ul>
<li>批量重命名（<strong>*.cpp</strong>全部变成<strong>*.c</strong>）</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># "\" 指代相同内容</span></div><div class="line">$ rename -v s/\.cpp/\.c/ *</div></pre></td></tr></table></figure>
<h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ul>
<li>内核版本信息</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ uname -r</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ul>
<li>查看文件权限信息（注意文件夹和文件的区别）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ls -al</div><div class="line">total 36</div><div class="line">drwxrwxr-x 8 gary gary 4096 3月  17 15:19 .</div><div class="line">drwxrwxr-x 4 gary gary 4096 3月   9 14:13 ..</div><div class="line">drwxrwxr-x 3 gary gary 4096 3月  19 14:38 carControl</div><div class="line">-rw-rw-rw- 1 gary gary 1029 3月   9 14:15 emergencyBrake.ino</div><div class="line">[   权限 ][link][拥有者][群组][文件容量][修改日期][    文件名     ]</div></pre></td></tr></table></figure>
<p><center><img src="/img/programPearls/linux/file_permission.png" alt="file permission" width="540px"/></center></p>
<ul>
<li>修改文件<code>rwx</code>权限，常见的有：777（所有权限）；666（可读写）；用户可执行</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo chmod 777 [-R] file-name</div><div class="line">$ sudo chmod u+x file-name</div></pre></td></tr></table></figure>
<ul>
<li>文件拥有者:群组</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo chown owner:group file-name</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><ul>
<li>查看所有磁盘信息（分区信息/设备号/容量）</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ sudo fdisk <span class="_">-l</span></div><div class="line">Disk /dev/sda: 238.5 GiB, 256060514304 bytes, 500118192 sectors</div><div class="line">Units: sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 512 bytes</div><div class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</div><div class="line">Disklabel <span class="built_in">type</span>: gpt</div><div class="line">Disk identifier: 0FB0B3E3-ECDE-4418-9524-FEC93395F2A7</div><div class="line"> </div><div class="line">Device         Start       End   Sectors   Size Type</div><div class="line">/dev/sda1       2048   1050623   1048576   512M EFI System</div><div class="line">/dev/sda2    1050624 483579903 482529280 230.1G Linux filesystem</div><div class="line">/dev/sda3  483579904 500117503  16537600   7.9G Linux swap</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">$ sudo fdisk /dev/sdb </div><div class="line"> </div><div class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): m</div><div class="line"> </div><div class="line">Help:</div><div class="line"> </div><div class="line">  DOS (MBR)</div><div class="line">   a   toggle a bootable flag</div><div class="line">   b   edit nested BSD disklabel</div><div class="line">   c   toggle the dos compatibility flag</div><div class="line"> </div><div class="line">  Generic</div><div class="line">   d   delete a partition</div><div class="line">   F   list free unpartitioned space</div><div class="line">   l   list known partition types</div><div class="line">   n   add a new partition</div><div class="line">   p   <span class="built_in">print</span> the partition table</div><div class="line">   t   change a partition <span class="built_in">type</span></div><div class="line">   v   verify the partition table</div><div class="line">   i   <span class="built_in">print</span> information about a partition</div><div class="line"> </div><div class="line">  Misc</div><div class="line">   m   <span class="built_in">print</span> this menu</div><div class="line">   u   change display/entry units</div><div class="line">   x   extra functionality (experts only)</div><div class="line"> </div><div class="line">  Script</div><div class="line">   I   load disk layout from sfdisk script file</div><div class="line">   O   dump disk layout to sfdisk script file</div><div class="line"> </div><div class="line">  Save &amp; Exit</div><div class="line">   w   write table to disk and <span class="built_in">exit</span></div><div class="line">   q   quit without saving changes</div><div class="line"> </div><div class="line">  Create a new label</div><div class="line">   g   create a new empty GPT partition table</div><div class="line">   G   create a new empty SGI (IRIX) partition table</div><div class="line">   o   create a new empty DOS partition table</div><div class="line">   s   create a new empty Sun partition table</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>格式化分区</li>
<li>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Linux: EXT3/EXT4</span></div><div class="line"><span class="comment"># ext3 文件格式</span></div><div class="line">sudo mkfs.ext3 Device</div><div class="line"><span class="comment"># ext4 文件格式</span></div><div class="line">sudo mkfs.ext4 Device</div><div class="line"><span class="comment"># Window: FAT32(4G)/NTFS</span></div><div class="line"><span class="comment"># fat32 文件格式</span></div><div class="line">sudo mkdosfs -F 32 Device</div><div class="line"><span class="comment"># ntfs 文件格式</span></div><div class="line">sudo mkfs.ntfs Device</div><div class="line"> </div><div class="line"><span class="comment"># 分区标签</span></div><div class="line">sudo mlabel -i Device ::label</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="编译-amp-链接-amp-装载"><a href="#编译-amp-链接-amp-装载" class="headerlink" title="编译&amp;链接&amp;装载"></a>编译&amp;链接&amp;装载</h3><ul>
<li><code>ldconfig</code>运行时库（动态链接库）装载<blockquote>
<p><a href="https://durant35.github.io/2017/08/08/linux_ldconfig4RuntimeLibraries/">ldconfig：[load]运行时库管理</a></p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> bash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim几步走]]></title>
      <url>/2017/02/04/tool_vim%E5%87%A0%E6%AD%A5%E8%B5%B0/</url>
      <content type="html"><![CDATA[<p>　通过 <strong>sudo apt-get install vim</strong> 即可安装 <strong>vim</strong>，也能通过 <a href="https://github.com/amix/vimrc">vimrc</a> 之类安装大神们的各种自适配的高级 <strong>vim</strong>。<br>　本文旨在记录开发过程中用过的 <strong>vim</strong> 操作。　　<br><a id="more"></a></p>
<blockquote>
<p>Reference: <a href="http://www.cnblogs.com/wsine/p/5517005.html">Wsnie’s Linux之Vim学习</a></p>
</blockquote>
<h3 id="一般模式下的常见操作"><a href="#一般模式下的常见操作" class="headerlink" title="一般模式下的常见操作"></a>一般模式下的常见操作</h3><ul>
<li>光标移动</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">j或down方向键</td>
<td style="text-align:center">向下移动一个字符</td>
</tr>
<tr>
<td style="text-align:center">k或up方向键</td>
<td style="text-align:center">向上移动一个字符</td>
</tr>
<tr>
<td style="text-align:center">h或left方向键</td>
<td style="text-align:center">向左移动一个字符</td>
</tr>
<tr>
<td style="text-align:center">l或right方向键</td>
<td style="text-align:center">向右移动一个字符</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+f或PageUp键</td>
<td style="text-align:center">屏幕向前移动一页</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+b或PageDown键</td>
<td style="text-align:center">屏幕向后移动一页</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">向后移动一个词</td>
</tr>
<tr>
<td style="text-align:center">e</td>
<td style="text-align:center">向前移动一个词</td>
</tr>
<tr>
<td style="text-align:center">e</td>
<td style="text-align:center">向后移动一个词到词尾</td>
</tr>
<tr>
<td style="text-align:center">ge</td>
<td style="text-align:center">向前移动一个词到词头</td>
</tr>
<tr>
<td style="text-align:center">g_</td>
<td style="text-align:center">到本行最后一个不是blank字符的位置</td>
</tr>
<tr>
<td style="text-align:center">0或Shift+6</td>
<td style="text-align:center">移动到行首</td>
</tr>
<tr>
<td style="text-align:center">$或Shift+4</td>
<td style="text-align:center">移动到行尾</td>
</tr>
<tr>
<td style="text-align:center">gg</td>
<td style="text-align:center">移动到首行</td>
</tr>
<tr>
<td style="text-align:center">G</td>
<td style="text-align:center">移动到尾行</td>
</tr>
<tr>
<td style="text-align:center">nG</td>
<td style="text-align:center">移动到第n行</td>
</tr>
</tbody>
</table>
<ul>
<li>增删改查</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">x</td>
<td style="text-align:center">向后删除一个字符</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:center">向前删除一个字符</td>
</tr>
<tr>
<td style="text-align:center">dd</td>
<td style="text-align:center">删除/剪切当前所在的行</td>
</tr>
<tr>
<td style="text-align:center">ndd</td>
<td style="text-align:center">删除/剪切当前行及其之后的共n行</td>
</tr>
<tr>
<td style="text-align:center">dw</td>
<td style="text-align:center">向后删除一个词</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td style="text-align:center">在当前字符前插入，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">在当前字符后插入，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">I</td>
<td style="text-align:center">在当前行的行首插入，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">在当前行的行尾插入，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">o</td>
<td style="text-align:center">在当前行的下一行插入新的一行，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">O</td>
<td style="text-align:center">在当前行的上一行插入新的一行，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">再输入一个字符，向后替换一个字符</td>
</tr>
<tr>
<td style="text-align:center">R</td>
<td style="text-align:center">连续输入字符，向后连续替换字符，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">yy</td>
<td style="text-align:center">复制当前行</td>
</tr>
<tr>
<td style="text-align:center">nyy</td>
<td style="text-align:center">在当前行开始，向下复制n行</td>
</tr>
<tr>
<td style="text-align:center">np</td>
<td style="text-align:center">在当前行开始，向下粘贴已经复制的内容n次</td>
</tr>
<tr>
<td style="text-align:center">P</td>
<td style="text-align:center">在当前行开始，向上粘贴已经复制的内容</td>
</tr>
<tr>
<td style="text-align:center">v</td>
<td style="text-align:center">进入选定模式，移动光标选定字符，可复制剪切删除，按esc退出</td>
</tr>
<tr>
<td style="text-align:center">u</td>
<td style="text-align:center">还原上一步的操作</td>
</tr>
</tbody>
</table>
<h3 id="命令模式下的常见操作"><a href="#命令模式下的常见操作" class="headerlink" title="命令模式下的常见操作"></a>命令模式下的常见操作</h3><table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/word</td>
<td style="text-align:center">向后搜索字符串word，按n继续搜索</td>
</tr>
<tr>
<td style="text-align:center">?word</td>
<td style="text-align:center">向前搜索字符串word，按n继续搜索</td>
</tr>
<tr>
<td style="text-align:center">:w</td>
<td style="text-align:center">保存文本</td>
</tr>
<tr>
<td style="text-align:center">:q</td>
<td style="text-align:center">退出</td>
</tr>
<tr>
<td style="text-align:center">:q!</td>
<td style="text-align:center">放弃修改，强制退出</td>
</tr>
<tr>
<td style="text-align:center">:wq</td>
<td style="text-align:center">保存并退出</td>
</tr>
</tbody>
</table>
<h3 id="我的典型操作"><a href="#我的典型操作" class="headerlink" title="我的典型操作"></a>我的典型操作</h3><table>
<thead>
<tr>
<th style="text-align:center">按键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0y$</td>
<td style="text-align:center">拷贝当前行</td>
</tr>
<tr>
<td style="text-align:center">ye</td>
<td style="text-align:center">从当前位置拷贝到本单词的最后一个字符</td>
</tr>
<tr>
<td style="text-align:center">gU</td>
<td style="text-align:center">变大写</td>
</tr>
<tr>
<td style="text-align:center">gu</td>
<td style="text-align:center">变小写</td>
</tr>
<tr>
<td style="text-align:center">在 Insert 模式下，你可以输入一个词的开头，按如下组合键，ctrl+x ctrl+n 或者 ctrl+x ctrl+p</td>
<td style="text-align:center">自动补齐</td>
</tr>
<tr>
<td style="text-align:center">v<strong>→</strong>d/y<strong>→</strong>p</td>
<td style="text-align:center">剪切/复制粘贴</td>
</tr>
</tbody>
</table>
<h3 id="第三方参考"><a href="#第三方参考" class="headerlink" title="第三方参考"></a>第三方参考</h3><ul>
<li>RiHui-Song’s Blog 的 <a href="https://rh-song.github.io/2016/07/15/vim/#more">本文意在记录vim的使用以及相关的配置</a><ul>
<li>在linux下vim中文出现乱码问题</li>
<li>vim：MarkDown preview</li>
<li>vim添加markdown语法高亮</li>
</ul>
</li>
<li><a href="http://coolshell.cn/articles/5426.html">简明 VIM 练级攻略</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> 小工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Summer-trainning in July, 2016]]></title>
      <url>/2017/02/04/TACourses_Summer-trainning-in-July,2016/</url>
      <content type="html"><![CDATA[<blockquote>
<p>摘自 <a href="https://rh-song.github.io/2016/07/18/Summer-training/#more">RiHui-Song’s Blog：Summer-training</a></p>
</blockquote>
<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>　本文主要记录SMIE最后一次初级实训学习的主要内容。包括了大概是三个阶段：</p>
<ul>
<li>准备阶段：学习测量仪器，回顾C语言编程；</li>
<li>熟悉阶段：在FPGA上运行HelloWorld，开发小应用，如跑马灯等，最后还了解了uc/os这样一个实时操作系统；</li>
<li>开发阶段：使用PWM波以及H桥控制车轮，使用超声模块控制让小车感知外界状况，从而进行控制，最后可以使用PID控制理论优化小车的控制。<a id="more"></a>
</li>
</ul>
<h3 id="学习仪器"><a href="#学习仪器" class="headerlink" title="学习仪器"></a>学习仪器</h3><ul>
<li>学会使用示波器，可以用来观察从ADC，PWM波等等信号。</li>
<li>学会使用万用表测电压，电阻，电流。<center><img src="/img/TA-Cources/Summer-training2016/Oscilloscope.png" width="420px"/></center>

</li>
</ul>
<h3 id="回顾c语言编程"><a href="#回顾c语言编程" class="headerlink" title="回顾c语言编程"></a>回顾c语言编程</h3><ul>
<li>条件判断</li>
<li>循环：for loop &amp; while loop</li>
<li>数组：<ul>
<li>使用下标访问</li>
<li>使用指针访问</li>
</ul>
</li>
<li>函数使用：<ul>
<li>递归</li>
<li>迭代</li>
</ul>
</li>
<li>链表：<ul>
<li>结构体声明和使用</li>
<li>指针使用</li>
<li>链表结构和基本操作</li>
</ul>
</li>
<li>位操作<ul>
<li>位操作将十进制表示成二进制数</li>
<li>位操作实现某一位的反转，或者某一位不变其它位反转等</li>
</ul>
</li>
</ul>
<h3 id="C语言进阶"><a href="#C语言进阶" class="headerlink" title="C语言进阶"></a>C语言进阶</h3><ul>
<li>使用header file，source file以及main file。尝试尽可能的复用。</li>
<li>C语言与安全性<ul>
<li>数组越界</li>
<li>判断逻辑不全</li>
<li>变量没有初始化</li>
<li>内存泄露</li>
<li>没有考虑非法输入</li>
</ul>
</li>
</ul>
<h3 id="FPGA编程"><a href="#FPGA编程" class="headerlink" title="FPGA编程"></a>FPGA编程</h3><ul>
<li>FPGA：DE0-Nano board<center><img src="/img/TA-Cources/Summer-training2016/DE0-Nano.jpg" width="340px"/></center></li>
<li>使用自带软件测试FPGA完好</li>
<li>在FPGA上运行HelloWorld工程</li>
<li>实现LED Sliding Pattern（闪烁模式之类）</li>
<li>使用中断<ul>
<li>中断的原理和运行机制</li>
</ul>
</li>
</ul>
<h3 id="FPGA上编程进阶"><a href="#FPGA上编程进阶" class="headerlink" title="FPGA上编程进阶"></a>FPGA上编程进阶</h3><ul>
<li>在IDE：eclipse上进行Debug</li>
<li>ADC:<ul>
<li>FPDA上有一个ADC的硬件模块</li>
</ul>
</li>
</ul>
<h3 id="PWM-Pulse-Width-Modulation"><a href="#PWM-Pulse-Width-Modulation" class="headerlink" title="PWM(Pulse Width Modulation)"></a>PWM(Pulse Width Modulation)</h3><ul>
<li>Duty cycle 占空比<center><img src="/img/TA-Cources/Summer-training2016/what_is_PWM.png"  width="640px"/></center></li>
<li>Why PWM?<ul>
<li>Digital voltage control: 只能控制1和0</li>
<li>需要最大电压的x%则让占空比为x%</li>
</ul>
</li>
<li>产生PWM的方法：<ul>
<li>软件方法<ul>
<li>使用计数器</li>
<li>使用中断？</li>
</ul>
</li>
<li>硬件方法<ul>
<li>Hardware PWM IP &lt;– NIOS core</li>
<li>moto_setting(),能产生2个PWM波</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="H桥"><a href="#H桥" class="headerlink" title="H桥"></a>H桥</h3><ul>
<li>低电流做控制，产生大电流去驱动电机</li>
<li>PWM波控制H桥驱动电机，使小车前进，后退，转弯等<center><img src="/img/TA-Cources/Summer-training2016/H-Bridge.png"  width="720px"/></center>

</li>
</ul>
<h3 id="超声模块"><a href="#超声模块" class="headerlink" title="超声模块"></a>超声模块</h3><ul>
<li>超声模块是：KS103<br><center><img src="/img/TA-Cources/Summer-training2016/KS103.png"  width="360px"/></center><ul>
<li>VCC: Power Pin</li>
<li>SDA/TX: data pin in I2C bus/TX pin in uart bus</li>
<li>SCL/RX: clock pin in I2C bus/RX pin in uart bus</li>
<li>GND: power ground pin</li>
<li>Mode: Select the communication mode.<ul>
<li>High Level(VCC): I2C</li>
<li>Low Level (GND): Uart</li>
</ul>
</li>
</ul>
</li>
<li>使用流程：<center><img src="/img/TA-Cources/Summer-training2016/how_to_use_KS103.png"  width="480px"/></center></li>
<li>接线：<ul>
<li>使用Uart模式：<ul>
<li>超声TX接入FPGA的RX，超声的RX接入FPGA的TX</li>
</ul>
</li>
<li>使用I2C模式：<ul>
<li>data pin &amp; clock pin</li>
</ul>
</li>
</ul>
</li>
<li>编程时的端口查找：<ul>
<li>结合QSF文件以及FPGA用户手册</li>
</ul>
</li>
</ul>
<h3 id="uc-OS-实时嵌入式操作系统"><a href="#uc-OS-实时嵌入式操作系统" class="headerlink" title="uc/OS 实时嵌入式操作系统"></a>uc/OS 实时嵌入式操作系统</h3><ul>
<li>以上都是bare metal hardware（裸跑）上编程，然后编译我们需要的程序</li>
<li>如果需要完成复杂的多任务，可以考虑跑在一个操作系统上（嵌入式操作系统，如uc/OS）<ul>
<li>多任务（线程）</li>
<li>信号量</li>
<li>临界区访问<center><img src="/img/TA-Cources/Summer-training2016/uc-OS.png"  width="480px"/></center>

</li>
</ul>
</li>
</ul>
<h3 id="PID控制"><a href="#PID控制" class="headerlink" title="PID控制"></a>PID控制</h3><ul>
<li>p：比例系数，I：积分系数，D：微分系数</li>
<li>使用PI控制，因为高阶噪声，所以不使用D</li>
<li>如下图，其中e(t) = r(t) - y(t)<center><img src="/img/TA-Cources/Summer-training2016/PID.png"  width="480px"/></center>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo，md源文件内容修改预览页面刷新无效]]></title>
      <url>/2017/02/02/hexo-md%E6%BA%90%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E4%BF%AE%E6%94%B9%E9%A2%84%E8%A7%88%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%97%A0%E6%95%88/</url>
      <content type="html"><![CDATA[<p>　　之前在 <strong>Window</strong> 下面通过 <strong>hexo s</strong> 启动本地服务器，通过浏览器预览，对md源文件的当前修改能够通过网页刷新出来。这段时间在 <strong>Linux</strong> 上部署，就一直出现刷新页面无效的情况，必须重新启动服务器才能刷新，有时甚至还需要通过 <strong>hexo g</strong> 重新解析源文件才能成功刷新。之前有段时间也以为是 <strong>Linux</strong> 对带有中文名称的md源文件支持不好的缘故，因为将那些不能成功刷新的源文件的文件名修改下，去掉所有的中文字符后，就可以刷新有效了。</p>
<p>　　不过，今天尝试了这个方法，居然不行了，不知道是不是因为升级了 <strong>Hexo</strong> 的缘故，不过，却发现了更有效的解决方法，可以不用考虑源文件文件名的问题。</p>
<a id="more"></a>
<p>　　解决办法很简单，就是通过使用 <strong>hexo generate</strong> 的 <strong>watch</strong> 参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g --watch</div></pre></td></tr></table></figure></p>
<p>　　开启 <strong>hexo generate</strong> 的实时监控，对当前修改的源文件进行实时解析，这样浏览器刷新预览的就是最新的源文件解析的结果了。<br>　　<br>　　注意：<br>　　+ 使用 <strong>Typora</strong>编辑器 <strong>Hexo</strong> 的md源文件进行编写，在上述操作中会有奇怪的现象，详见 <a href="https://github.com/hexojs/hexo/issues/2245">hexo server 运行时自动更新出错把页面文章全部清空</a>。<br>　　+ <strong>hexo s</strong> 命令好像默认是会自动开启 <strong>hexo generate</strong> 的实时监控，上述操作显得画蛇添足；不过，万一像我一样呢？可能你就需要尝试一下上面的命令了。<br>　　+ 笔者最后放弃了 <strong>Typora</strong>编辑器，也没选择安装 <strong>Markdown</strong> 预览插件的 <strong>Sublime Text</strong>，而是选择了<a href="https://remarkableapp.github.io/linux/download.html">Remarkable</a>，下载官网提供的.deb，按照下面命令即可安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo dpkg -i remarkable_*.deb</div><div class="line">$ sudo apt-get install -f</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RaspberryPi, Use an external wireless card(ComFast-WU855P)]]></title>
      <url>/2017/01/25/raspberry_using_an_external_wireless_card(CF-WU855P)/</url>
      <content type="html"><![CDATA[<p>　　树莓派3已经自带无线网卡，这是一种极大的便捷，真正将树莓派变成躲在一个角落里，安静地搞事情的计算机。然而对于树莓派B+或者树莓派2，除了少数免驱的外接无线网卡外（树莓派系统已经自带了驱动），大多数外接无线网卡还是需要经过配置才能使用的，下面就介绍使用过的一款无线网卡（<a href="http://en.comfast.com.cn/product/WirelessAdapter/item-155.html">ComFast-WU855P</a>）的驱动配置过程，该无线网卡采用 <strong>REALTEK8192</strong> 高阶芯片（从<a href="https://detail.tmall.com/item.htm?spm=a230r.1.14.1.JY6QbF&amp;id=37237024789&amp;cm_id=140105335569ed55e27b&amp;abbucket=6&amp;skuId=57539293852">淘宝</a>上了解到的，不知道对不对），这是一款常用的芯片，本文安装的驱动理论上对采用该芯片的无线网卡都是可用的。</p>
<a id="more"></a>
<h4 id="COMFAST-WU855P"><a href="#COMFAST-WU855P" class="headerlink" title="COMFAST-WU855P"></a>COMFAST-WU855P</h4><p>　　本文使用的是与下图这款无线网卡类似的 <strong>COMFAST </strong> 的一款无线网卡产品。</p>
<center><img src="/img/raspberrypi/COMFAST.jpg" width="320px"/></center>

<h4 id="以内核模块的形式编译安装RTL8192驱动"><a href="#以内核模块的形式编译安装RTL8192驱动" class="headerlink" title="以内核模块的形式编译安装RTL8192驱动"></a>以内核模块的形式编译安装RTL8192驱动</h4><blockquote>
<p>Reference：<a href="http://www.geek-workshop.com/thread-16077-1-1.html">树莓派2编译天猫魔盘驱动（8192eu）</a></p>
</blockquote>
<p>　　注意，下面的所有操作都是通过 <strong>ssh</strong> 直接在树莓派上进行构建，所以相对耗时。通过交叉编译环境进行构建则速度明显加快，不过配置交叉编译环境过程也不是那么简单，有兴趣的同学可以尝试一下。<br>　　具体的步骤如下：</p>
<ol>
<li><p>下载内核源代码，为编译 <strong>RTL8192</strong> 驱动模块做准备</p>
<ul>
<li>下载 <strong>rpi-source</strong> 程序</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/Workspace</div><div class="line">$ mkdir wireless &amp;&amp; <span class="built_in">cd</span> wireless</div><div class="line">$ wget https://raw.githubusercontent.com/notro/rpi-source/master/rpi-source</div><div class="line">$ chmod a+x rpi-source</div></pre></td></tr></table></figure>
<ul>
<li>运行 <strong>rpi-source</strong>，这个程序会根据当前内核信息去官方github上下载相应的源码，下载根据网络需要一些时间（我大概等了15分钟）。</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./rpi-source</div></pre></td></tr></table></figure>
<ul>
<li>下载程序需要一些依赖，根据提示通过 <strong>apt-get</strong> 安装即可，</li>
</ul>
<blockquote>
<p>ERROR:<br><strong>bc is NOT installed. Needed by ‘make modules_prepare’. On Raspbian, run ‘sudo apt-get install bc’ to install it.</strong><br><strong>*** ncurses-devel is NOT installed. Needed by ‘make menuconfig’. On Raspbian sudo apt-get install libncurses5-dev</strong><br>　　<br>这里我就需要安装下面几个依赖：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install bc</div><div class="line">$ sudo apt-get install libncurses5-dev</div><div class="line">$ ./rpi-source</div></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>下载程序运行中间的部分打印信息如下：</li>
</ul>
<blockquote>
<p><strong>Saving to: ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e.tar.gz’</strong><br><strong>/home/pi/linux-fa     [          &lt;=&gt;   ] 129.96M  1.92MB/s   in 73s</strong><br><strong>2017-02-03 05:46:58 (1.79 MB/s) - ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e.tar.gz’ saved [136269962]</strong><br><strong>Unpack kernel source…</strong><br><strong>*** Create symlink: /home/pi/linux</strong><br><strong>*** Create /lib/modules/<ver>/{build,source} symlinks</strong><br><strong>*** Kernel source already installed: /home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e</strong></p>
</blockquote>
<p>因此会在 <strong>“~ 目录”</strong> 下看到（如下图），此外还创建了一些快捷方式，总之，就是为下一步编译内核模块做好准备。</p>
<center><img src="/img/raspberrypi/rpi-source_result.png" width="420px"/></center></li>
<li><p>获取 <strong>RTL8192</strong> 驱动源代码，构建并安装  <strong>RTL8192</strong> 内核模块</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/wireless</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/Mange/rtl8192eu-linux-driver.git</div><div class="line"><span class="comment"># or</span></div><div class="line"><span class="comment"># git clone https://github.com/pvaret/rtl8192cu-fixes.git</span></div><div class="line">$ <span class="built_in">cd</span> &lt;your-git-clone-driver&gt;</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
<p>注：亲测两个仓库的代码都可以编译构建。</p>
<ul>
<li>可能会出现的问题</li>
</ul>
<blockquote>
<p>Makefile:616: arch/armv6l/Makefile: No such file or directory<br>make[1]: *** No rule to make target ‘arch/armv6l/Makefile’.  Stop.<br>make[1]: Leaving directory ‘/home/pi/linux-fa00f31867d8f7b7bb2ad2eb6c35f32fa468ca1e’<br>Makefile:1335: recipe for target ‘modules’ failed<br>make: *** [modules] Error 2</p>
</blockquote>
<ul>
<li>解决的方法是，根据提示创建通过 <strong>arch/armv6l</strong> 到 <strong>arm</strong> 的软链接，</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># `uname -r`是uname -r命令返回的结果，会自适应到不同的内核版本</span></div><div class="line">$ <span class="built_in">cd</span> /lib/modules/`uname -r`/build</div><div class="line"><span class="comment"># 根据错误提示，参考博文是作 **arch/armv7l** 的软连接，我这里是 **arch/armv6l**</span></div><div class="line">$ ln -sf arm arch/armv6l</div></pre></td></tr></table></figure>
<ul>
<li>顺利进行编译构建（树莓派B+大约需要17分钟），然后安装到系统目录下：</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> &lt;your-git-clone-driver&gt;</div><div class="line">$ make</div><div class="line">$ sudo make install</div></pre></td></tr></table></figure>
</li>
<li><p>加载  <strong>RTL8192</strong> 内核模块</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo modprobe 8192eu</div></pre></td></tr></table></figure>
<p>然后，插上USB无线网卡，<strong>ifconfig</strong> 或者 <strong>iwconfig</strong> 应该可以看到 <strong>wlan0</strong>，如下图：</p>
<center><img src="/img/raspberrypi/wireless_result.png" width="540px"/></center>

</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> RaspberryPi </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[RaspberryPi, enable ssh without UI]]></title>
      <url>/2017/01/25/raspberry_enable-ssh-without-UI/</url>
      <content type="html"><![CDATA[<p>　　可能是我写录的树莓派系统image有问题吧，小伙伴都说默认应该是打开22端口，支持ssh的；但是我做的几张SD卡的系统都是不打开的，我很纳闷，怀疑用的是假的镜像吧。前几次都发生在实验室，显示器，HDMI线应有尽有，启动系统，简单地通过界面在系统的 <strong>Preferences</strong> 中开启ssh端口即可。然而这一次，发生在家里（因为之前一直没空写个关于树莓派外置无线网卡驱动安装的教程，想着利用寒假回家弄一弄），家里哪有实验室那么好的环境，所以，甭想通过界面操作开启。</p>
<p>　　那究竟能不能通过直接修改SD卡里面的image文件内容，不用UI的方式，开启ssh端口呢？通过下面的捣鼓发现，这是可行的。</p>
<a id="more"></a> 
<h4 id="SD卡里面就保存着树莓派系统"><a href="#SD卡里面就保存着树莓派系统" class="headerlink" title="SD卡里面就保存着树莓派系统"></a>SD卡里面就保存着树莓派系统</h4><p>　　SD卡里面有两个分区，系统文件保存在非 <strong>boot</strong> 分区中，如下图：</p>
<center><img src="/img/raspberrypi/sd_card.png" width="480px"/></center><br>　　<strong>/usr/bin/raspi-config</strong> 就是树莓派<strong>Preferences</strong>操作对应的配置文件，我们用编辑器（Sublime-Text）打开该文件，<strong>CTRL+F</strong> 找到与 <strong>ssh</strong> 配置相关的部分，即下图显示的 <strong>do_ssh()</strong>。通过<strong>enable</strong>和<strong>start</strong>字段可以推测，该部分的两条命令应该是对应于界面操作里面勾选启用<strong>ssh</strong>对应的操作，通过这两条命令，应该可以开启系统的<strong>ssh</strong>端口！<br><br><center><img src="/img/raspberrypi/raspi-config.jpg" width="360px"/></center>

<h4 id="将开启端口命令自启动"><a href="#将开启端口命令自启动" class="headerlink" title="将开启端口命令自启动"></a>将开启端口命令自启动</h4><p>　　我的想法是，要不让这两条命令开机启动吧，看看上一步的猜测是不是真的有效。<strong>/etc/rc.local</strong> 是配置系统自启动的文件，我们将与开启<strong>ssh</strong>端口相关的两条命令添加到 <strong>exit 0</strong> 之前，如下图所示。</p>
<center><img src="/img/raspberrypi/rc.local.jpg" width="360px"/></center>

<h4 id="nmap来检测"><a href="#nmap来检测" class="headerlink" title="nmap来检测"></a>nmap来检测</h4><p>　　上面的操作真的能得偿所愿吗？我们需要验证一下，看能否<strong>ssh</strong>进去已经启动的树莓派系统。然而问题又来了，树莓派的<strong>ip</strong>是哪一个呀？很不幸，我的树莓派是插在小米3路由器，笔记本连着小米3路由器的无线网络，不过，小米3路由器是通过无线桥接到一个信号还不错，通过<strong>WiFi万能钥匙</strong> 破解出密码的不知道是邻居哪家里面的网。无线桥接，<strong>DHCP</strong>全都由桥接的路由器管理，小弟不才，撞不出人家的管理密码。咋办呢？这里介绍一个强大的工具，<strong><a href="http://blog.csdn.net/keepsmi1e/article/details/9370049">nmap</a></strong>。</p>
<p>　　通过下面的命令可以扫描出局域网内所有的ip地址（进行ping扫描，打印出对扫描做出响应的主机，这里通过笔记本的ip可以知道整个局域网是192.168.1.0网段）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nmap -sP 192.168.1.0/24</div></pre></td></tr></table></figure>
<p>　　然后，把树莓派一拔一插，对比前后两次打印的ip地址列表的情况，就能找出树莓派的ip地址了。</p>
<p>　　也可以通过 <strong>nmap</strong> 命令查看一台主机开放了哪些端口，如下图。    </p>
<center><img src="/img/raspberrypi/nmap4ssh.jpg" width="360px"/></center>

<p>　　树莓派确实把<strong>ssh</strong>端口开放了，直接<strong>ssh</strong>也能够顺利进入树莓派系统，问题解决了。</p>
<h4 id="还原自启动，即可大功告成"><a href="#还原自启动，即可大功告成" class="headerlink" title="还原自启动，即可大功告成"></a>还原自启动，即可大功告成</h4><p>　　有必要每次系统启动都去开放 <strong>ssh</strong> 端口吗？可能没这个必要，因为经过两条命令的操作后，应该会修改系统的一些变量或者状态位，这些操作应该不是掉电还原的，否则，在第一节中，关闭ssh端口就不需要额外的两条命令了吧。我们不妨再试试。</p>
<p>　　既可以直接在起来的系统中将自启动文件 <strong>/etc/rc.local</strong> 还原，当然也可以像第一节中那样，还是对SD卡的内容进行修改。</p>
<p>　　还原<strong>rc.local</strong>，再把SD卡插回去或者<strong>reboot</strong>系统，还是能够顺利通过<strong>ssh</strong>进入树莓派系统的，大功告成。    </p>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> RaspberryPi </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[8 sort functions using python]]></title>
      <url>/2017/01/24/python_sort-Functions/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[libpcap, 32-bit&64-bit]]></title>
      <url>/2016/10/10/linux_libpcap%2032-bit$64-bit/</url>
      <content type="html"><![CDATA[<p>　情况是这样的，在之前讲过的回播 <strong>.pcap</strong> 数据的 <strong>Velodyne_player</strong> 程序中，需要调用 <strong>Winpcap</strong> (其实就是 <strong>libpcap</strong> 的 Win挫版) 的 API 解析 <strong>.pcap</strong> 数据，再通过 UDP 发送出去。我们的 <strong>Velodyne_player</strong> 是一个 <strong>Win32</strong> 的程序，显然调用的就是32位的 <strong>Winpcap</strong> 库的 API； 后来我们也移植了一个 <strong>.pcap</strong> 采集程序的 Linux 版本，结果，用该 Linux 版本采集程序采集到的 <strong>.pcap</strong> 数据却没办法用我们 Win 下的 <strong>Velodyne_player</strong> 回播。后来发现，我们的 Linux 版本的采集程序用的是64位的 <strong>libpcap</strong> 库(因为系统是64位的 Ubuntu16.04，默认安装的就是64位的 <strong>libpcap</strong> 库)，64位和32位的 <strong>libpcap</strong>，在时间戳上有很关键的区别，下面是开源的 <strong>pcap.h</strong> 中的声明:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line"> * Generic per-packet information, as supplied by libpcap.</div><div class="line"> *</div><div class="line"> * The time stamp can and should be a "struct timeval", regardless of</div><div class="line"> * whether your system supports 32-bit tv_sec in "struct timeval",</div><div class="line"> * 64-bit tv_sec in "struct timeval", or both if it supports both 32-bit</div><div class="line"> * and 64-bit applications.  The on-disk format of savefiles uses 32-bit</div><div class="line"> * tv_sec (and tv_usec); this structure is irrelevant to that.  32-bit</div><div class="line"> * and 64-bit versions of libpcap, even if they're on the same platform,</div><div class="line"> * should supply the appropriate version of "struct timeval", even if</div><div class="line"> * that's not what the underlying packet capture mechanism supplies.</div><div class="line"> */</span></div><div class="line"><span class="keyword">struct</span> pcap_pkthdr &#123;</div><div class="line">  <span class="keyword">struct</span> timeval ts;	<span class="comment">/* time stamp */</span></div><div class="line">  bpf_u_int32 caplen;	<span class="comment">/* length of portion present */</span></div><div class="line">  bpf_u_int32 len;	<span class="comment">/* length this packet (off wire) */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　对于上面遇到的问题，我们想到的解决办法是，移植的 Linux 版本采集程序生成32位的，而不是目前的64位。因为现在装的是64位的 <strong>libpcap</strong>(64位系统使然)，那接下来的问题便是，如何在64位的 <strong>Ubuntu16.04</strong> 上面安装32位的 <strong>libpcap</strong> 库，然后生成我们需要的32位数据采集程序(-m32 or -m64)。</p>
<h3 id="Generate-32-bit-exes-depending-on-libpcap"><a href="#Generate-32-bit-exes-depending-on-libpcap" class="headerlink" title="Generate 32-bit exes depending on libpcap"></a>Generate 32-bit exes depending on libpcap</h3><ol>
<li><p>64位系统默认安装的包都是64位的，所以，64位的 <strong>Ubuntu16.04</strong> 安装64位的 <strong>libpcap</strong> 库比较简单。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/347788/how-can-i-install-libpcap-header-files-on-ubuntu-12-04">How can I install libpcap header files on Ubuntu 12.04?</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ sudo apt-get install libpcap0.8 libpcap0.8-dev libpcap-dev</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>64位的 <strong>Ubuntu16.04</strong> 安装32位的 <strong>libpcap</strong> 库则比较麻烦一点。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/654079/libpcap-32-bit-on-64-bit-ubuntu">libpcap 32 bit on 64 bit Ubuntu</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># enable multiarch support for i386 architecture</span></div><div class="line">xxx@...$ sudo dpkg --add-architecture i386</div><div class="line"><span class="comment"># update the source </span></div><div class="line">xxx@...$ sudo apt-get update</div><div class="line"><span class="comment"># now, you can install the pcap library</span></div><div class="line">xxx@...$ sudo apt-get install libpcap0.8:i386 libpcap0.8-dev:i386 libpcap-dev:i386</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>装了32位的 <strong>libpcap</strong> 库，并不意味着你就能编译32位的，<strong>libpcap</strong> 应用程序，因为，64位系统默认并没有32位应用程序需要的基本库(诸如<strong>C/C++标准库</strong>)，所以需要安装好基本库环境。</p>
<blockquote>
<p>Reference: <a href="http://askubuntu.com/questions/709893/14-04-01-32-bit-missing-g-64-bit-include-files-when-cross-compiling">14.04.01 32-bit: Missing g++ 64-bit include files when cross-compiling</a></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ sudo apt-get install g++-multilib</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>安装好32位的基本库，还有 <strong>libpcap</strong> 后，我们就能生成需要的32位程序了。步骤很简单，源代码不需要修改，在 <strong>CodeBlocks</strong> 中只需要在项目对应的 <strong>Build Option</strong> 中将 <strong>-m64</strong> 调整为 <strong>-m32</strong>；对于其他构建方式(如 <strong>cmake</strong>)，方法应该类似，核心都是 <strong>-m32</strong> 还是 <strong>-m64</strong> 作为构建参数。</p>
</li>
</ol>
<h3 id="Linux-下如何查看程序-库信息"><a href="#Linux-下如何查看程序-库信息" class="headerlink" title="Linux 下如何查看程序/库信息"></a>Linux 下如何查看程序/库信息</h3><p>1.查看导出信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xxx@...$ nm -D xxx.so/xxx.out</div><div class="line">xxx@...$ nm -g xxx.a</div><div class="line"><span class="comment"># or using objdump</span></div><div class="line">xxx@...$ objdump -tT xxx.so</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>nm [option]:</strong><br>-A 在每个符号信息的前面打印所在对象文件名称；<br>-C 输出demangle过了的符号名称；<br>-D 打印动态符号；<br>-l 使用对象文件中的调试信息打印出所在源文件及行号；<br>-n 按照地址/符号值来排序；<br>-u 打印出那些未定义的符号</p>
</blockquote>
<p>2.查看依赖库信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看动态依赖库信息</span></div><div class="line">xxx@...$ ldd xxx.so/xxx.out</div></pre></td></tr></table></figure></p>
<p>3.查看程序/库位数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ objdump <span class="_">-a</span> xxx.a/xxx.so/xxx.out</div></pre></td></tr></table></figure></p>
<blockquote>
<p>输出结果: elf32-i386或elf64-x86-64</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> pcap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Key Word Engineering]]></title>
      <url>/2016/10/09/OverlappingSounds_Key%20Word%20Engineering/</url>
      <content type="html"><![CDATA[<h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><blockquote>
<p><strong>AI</strong>（Artificial Intelligence），人工智能<br><strong>ATM</strong>（asynchronous transfer mode），异步传输模式<br><strong>ARPA</strong>（Advanced Research Projects Agency），（美国国防部）高级研究计划署<br><strong>AR</strong>（augmented reality），增强实现<br><strong>ADSL</strong>（Asymmetrical Dingital Subscriber Loop），非对称数字用户环线<a id="more"></a><br>acoustic coupler，声音耦合器<br>Active Directory，活动目录<br>affinity，绑定<br>affinity group，地缘组<br>agent，代理<br>agent-based interface，代理人界面<br>agility，敏捷性<br>air waves，无线电波<br>algorithm，算法<br>analog，模拟的<br>animation，动画<br>annotation，注解，注释<br>answering machine，电话应答机<br>antenna，天线<br>application pool，应用程序池<br>architecture decay，架构腐坏<br>ARPAnet，ARPA网<br>aspect ratio，屏幕高宽比<br>atomic opreation，原子操作<br>atomic transaction，原子事务<br>atomicity，原子性<br>authentication，身份验证<br>authorization，授权<br>automation，自动化<br>autonomous，独立性<br>availability，可用性<br>availability set，可用性集</p>
</blockquote>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><blockquote>
<p><strong>bps</strong>（bits per second），比特/秒<br><strong>BS</strong>（browser-server），浏览器-服务器<br>backpane，底板<br>backward compatibility，向后兼容性<br>bandwidth，带宽<br>bar code，条形码<br>baseline，准线<br>baud，波特<br>bit，比特<br>bitnik，比特族<br>bottleneck，瓶颈<br>broadcast，（无线电或电视）广播<br>bug，缺陷<br>built-in，内置的，内建的；嵌入的；内置<br>business layer，业务层<br>business intelligence，商业智能<br>byte，字节</p>
</blockquote>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><blockquote>
<p><strong>CC</strong>（carbon copy），复写本，副本；抄送<br><strong>CPU</strong>（Central Processing Unit），中央处理器<br><strong>CA</strong>（Certificate Authority），证书认证机构<br><strong>CS</strong>（client-server），客户端-服务器<br><strong>CRT</strong>（cathode ray tube），阴极射线管<br>Cache/Caching，缓存<br>call stack，调用堆栈<br>carriage return，回车<br>cell，单元<br>certificate，（数字）证书<br>channel，信道，频道<br>character，字符<br>check in，签入<br>check out，签出<br>chip，芯片<br>cipher，密码<br>claim，声明<br>clone，克隆，复制<br>cloud computing，云计算<br>cloud service，云服务<br>cluster，集群<br>clustered index，聚集索引<br>coaxial cable，同轴电缆<br>command，命令<br>command prompt，命令行提示<br>commingled bits，混合的比特<br>communication，通信<br>community，社区<br>committed，已提交（的）<br>compatibility，兼容性<br>comcurrency，并发<br>concurrency mode，并发模式<br>conditional compilation，条件编译<br>conditional compilation statement，条件编译语句<br>configuration，配置，设置<br>connection string，连接字符串<br>consistenct，一致性<br>constructor，构造函数<br>container，容器<br>context，上下文<br>continuous integration，持续集成<br>contribute，贡献<br>Contributor License Agreement，贡献者许可协议<br>convert，转换<br>cookie，Cookie<br>corruption，损毁<br>crash，（程序）崩溃<br>crash dump，故障转储<br>crytography，密码术<br>cursor，光标<br>cybraian，电脑族<br>cyberspace，电脑空间</p>
</blockquote>
<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><blockquote>
<p><strong>DL</strong>（Deep Learning），深度学习<br><strong>DM</strong>（data mining），数据挖掘<br><strong>DI</strong>（dependenct injection），依赖注入<br>dashboard，仪表盘<br>data layer，数据层<br>data integrity，数据完整性<br>deployment，部署<br>derives from 继承<br>diagnostics，诊断<br>directive，指令<br>discussion forum，论坛<br>distributed system，分布式系统<br>dummy function，虚构函数<br>durability，持久性</p>
</blockquote>
<h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><blockquote>
<p><strong>EAP</strong>（Early Assessment Program），早期评估版本<br>Egress，流出<br>elasticity，弹性<br>entity，实体<br>erosion，侵蚀<br>exception handling，异常处理<br>explanatory figures，图示</p>
</blockquote>
<h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><blockquote>
<p><strong>FDD</strong>（Floopy Disk Drive），软盘<br>failover，容错转移<br>failure domain，故障域<br>fat client，胖客户端<br>follow up，跟进<br>foreign key，外键<br>forward，转发<br>full-duplex，全双工<br><strong>FPP</strong>（Full Packaged Product），零售版</p>
</blockquote>
<h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><blockquote>
<p>Geo-Replication，地域复制<br>Geo Redundant，地域冗余</p>
</blockquote>
<h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><blockquote>
<p><strong>HDD</strong>（Hard Disk Drive），硬盘<br>handle，句柄<br>High Avaliability，高可用性<br>Homogeneous，同质化<br>Horizontal Scale，水平缩放<br>Hosting，宿主<br>Hybrid Cloud，混合云</p>
</blockquote>
<h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><blockquote>
<p><strong>Iaas</strong>（Infrastructure as a Service），设施即服务<br>Idempotent Operation，幂等操作<br>Identity Provider，身份提供方<br>image，镜像<br>ingesting，摄取<br>ingress，流入<br>input endpoint，输入端点<br>Instance InputEndpoint，实例输入端点<br>Intercept，截取<br>Internal Endpoint，内部端点<br>Isolation，隔离性</p>
</blockquote>
<h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><blockquote>
</blockquote>
<h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><blockquote>
</blockquote>
<h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><blockquote>
<p>Legacy system，遗留系统<br>license，许可证<br>lifetime，生命周期<br>linked resource，链接的资源<br>load-balancing，负载平衡<br>load balancer，负载平衡器<br>log，日志<br>loose coupling，松耦合</p>
</blockquote>
<h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><blockquote>
<p>Mainframe，主机<br>Maintainability，可维护性<br>Management Key，管理密钥<br>Media Service，媒体服务<br>Merge，合并<br>Metadata，元数据<br>Middleware，中间件<br>Mobile Service，移动服务<br>Mock Object，模拟对象<br>Multitenancy，多租户<br>Multitier Architecture，多层体系结构<br>Multi-factor Authentication，多重验证</p>
</blockquote>
<h3 id="N"><a href="#N" class="headerlink" title="N"></a>N</h3><blockquote>
<p>Namespace，命名空间，名称空间<br>Non-clustered Index，非聚集索引<br>node，节点<br>normalize，规格化，归一化<br>notification hub，通知中心<br>N-Tier，N 层（结构）</p>
</blockquote>
<h3 id="O"><a href="#O" class="headerlink" title="O"></a>O</h3><blockquote>
<p>On-demand (media)，点播（媒体）<br>Optimistic Concurrency，乐观并发控制<br>Overview，概览<br>over-post，过度提交</p>
</blockquote>
<h3 id="P"><a href="#P" class="headerlink" title="P"></a>P</h3><blockquote>
<p><strong>Paas</strong>（Platform as a Service），平台即服务<br>partition，分区<br>Pay as You Go，即用即付<br>peek，查看<br>performance counter，性能计数器<br>Pessimistic Concurrency，悲观并发控制<br>Point-to-Site，点到站点<br>polling，轮询<br>presentation layer，表现层<br>private cloud，私有云<br>priority queue，优先级队列<br>probe，探测器<br>process，进程<br>production，生产（环境）<br>protocol，协议<br>proxy，代理<br>public cloud，公有云<br>push，推送</p>
</blockquote>
<h3 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h3><blockquote>
<p>Quota，配额</p>
</blockquote>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><blockquote>
<p>Rack，机架<br>real-time，即时、实时<br>Redundancy，冗余<br>Redundant，冗余（的）<br>Refactor，重构<br>relay，中继<br>Relevancy，适切性<br>Reliability，可靠性<br>Relying Party，依赖方<br>Repository，存储库；仓储；仓库<br>request pipeline，请求管道<br>reserved，专属<br>reverse proxy module，反向代理模块<br>retail，零售版<br>Rich Client，丰富客户端<br>Ripple Effect，涟漪效应<br>Rolling Upgrade，滚动升级<br>round-robin，轮流（分配）；轮叫<br>round-tripping，还原；回传；往返，往返切换<br>router，路由器</p>
</blockquote>
<h3 id="S"><a href="#S" class="headerlink" title="S"></a>S</h3><blockquote>
<p><strong>Saas</strong>（Software as a Service），软件即服务<br><strong>SSL</strong>（Security Socket Layer），安全套接层<br><strong>SLA</strong>（Service Level Agreement），服务水平协议<br>Scalability，缩放性<br>Scale，缩放<br>Scale Out，向外缩放<br>Scale Up，向上缩放<br>Schema (database)，架构（数据）<br>Schema (xml)，架构（xml）<br>Security Token，安全令牌<br>Self-signed Certificate，自签名证书<br>Serializable，可序列化<br>Server Affinity，服务器绑定<br>Service Bus，服务总线<br>Service Contract，服务合同<br>Service Provider，服务提供方<br>Shopping cart，购物车<br>Signature，签名<br>snapshot，快照<br>Staging，过渡（环境）<br>Sticky Session，黏性会话<br>Stickyness，黏性；黏度<br>Sign in，登录<br>Sign out，注销<br>Site-to-Site，站点到站点<br>Storage Account，存储账户<br>Subnet，子网<br>Sub-region，子地域<br>Subscription，订阅</p>
</blockquote>
<h3 id="T"><a href="#T" class="headerlink" title="T"></a>T</h3><blockquote>
<p>Tenant，租户<br>Terminus，端点<br>Thin Client，瘦客户端<br>Thread Pool，线程池<br>Thread Starvation，线程饥荒<br>Throttle，节流；限速<br>Timestamp，时间戳<br>Throughput，吞吐量<br>Topology，拓扑结构<br>Token，令牌<br>(Code) Tracing，（代码）追踪<br>Transaction，事务<br>Transient Error，瞬时错误</p>
</blockquote>
<h3 id="U"><a href="#U" class="headerlink" title="U"></a>U</h3><blockquote>
<p>Ubiquitous Computing，普存计算<br>under-post，提交不足<br>Unit test，单元测试<br>Uncommitted，未提交（的）<br>Update Domain，更新域</p>
</blockquote>
<h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><blockquote>
<p><strong>VOL</strong> 或 <strong>VLO</strong>（Volume Licensing for Organizations），团体批量许可证；大量采购授权合约<br>Vertical Scale，垂直缩放<br>VIP，虚拟 IP（或不译）<br>VIP Swap，VIP 交换<br>Virtual Network，虚拟网络<br>Virtual Machine，虚拟机</p>
</blockquote>
<h3 id="W"><a href="#W" class="headerlink" title="W"></a>W</h3><blockquote>
<p><strong>WMI</strong>（Windows Management Instrumentation），Windows 管理规范<br><strong>WINS</strong>（Windows Internet Name Service），Windows Internet 命名服务<br>Wearable Device，可穿戴设备<br>Web Role，网站角色<br>Web Service，网络服务<br>Web Sites，网站<br>wireless communication，无线通讯<br>Worker Role，辅助角色<br>Workflow，工作流<br>workgroup，工作组</p>
</blockquote>
<h3 id="X"><a href="#X" class="headerlink" title="X"></a>X</h3><blockquote>
<p><strong>XOR</strong>（Exclusive OR），异或<br>X.509v3 certificate，X.509 证书</p>
</blockquote>
<h3 id="Y"><a href="#Y" class="headerlink" title="Y"></a>Y</h3><blockquote>
</blockquote>
<h3 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h3><blockquote>
<p>Zero-downtime Upgrade，零停机升级<br>zip disk，压缩磁盘<br>zone，区域<br>zone list，区域列表<br>zone transfer，区域传送</p>
</blockquote>
<p>　　</p>
<blockquote>
<p><strong>References:</strong></p>
<ul>
<li><a href="http://www.cnblogs.com/linJie1930906722/p/5768669.html">计算机专业术语对照</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Key-words </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客主题Yelee迁移笔记(二)]]></title>
      <url>/2016/10/07/hexo_Yelee%20Migrant%20Note(2)/</url>
      <content type="html"><![CDATA[<p>　本文记录了 <strong>Hexo</strong> 首页与归档博文排序如何自定义，想实现的功能是 <strong>index</strong> 按照修改日期排序，最近修改的文章置顶显示；<strong>Archives</strong> 归档则按照默认的创建时间前后排序。<br><a id="more"></a></p>
<blockquote>
<p>Reference: <a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/">解决Hexo置顶问题</a></p>
</blockquote>
<p>　Hexo 目录下的 <strong>node_modules</strong> 中存放跟 <strong>hexo generator</strong> 命令相关的 hexo 模块，其中 <strong>/hexo-generator-index/lib/generator.js</strong> 还有  <strong>/hexo-generator-archive/lib/generator.js</strong> 分别用于生成 <strong>index</strong> 和 <strong>Archives</strong> 归档页面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</div><div class="line"> </div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</div><div class="line"> </div><div class="line">  <span class="comment">//comment following 1 line</span></div><div class="line">  <span class="comment">//var posts = locals.posts.sort('-date');</span></div><div class="line"> </div><div class="line">  <span class="comment">//add following 5 lines </span></div><div class="line">  <span class="keyword">var</span> posts = locals.posts;</div><div class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> b.updated - a.updated;</div><div class="line">    <span class="comment">//return a.date - b.date;</span></div><div class="line">  &#125;);</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    <span class="attr">perPage</span>: config.index_generator.per_page,</div><div class="line">    <span class="attr">layout</span>: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    <span class="attr">format</span>: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">__index</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识ROS自主导航]]></title>
      <url>/2016/10/03/ROS_ROS_Navigation_GettingStarted/</url>
      <content type="html"><![CDATA[<p>　　To add navigation to a robot, we need to launch 3 nodes:</p>
<blockquote>
<ul>
<li>map_server: to provide the static map {“*.yaml” &amp; “*.pgm”}, against which the robot will localize and plan.</li>
<li>amcl: to localize the robot against the static map.</li>
<li>move_base: to handle global planning and local control for the robot.</li>
</ul>
</blockquote>
<p>　　<strong>amcl</strong> 是移动机器人二维环境下的概率定位系统，它实现了自适应(或 <strong>kdl</strong> 采样)的 <strong>蒙特卡洛定位</strong> 方法，其中针对已有的地图使用 <strong>粒子滤波器</strong> 跟踪一个机器人的姿态。</p>
<p>　　<strong>move_base</strong> 提供了 ROS 导航的配置，运行，交互接口，主要包括两个部分：</p>
<blockquote>
<p>　(1) 全局路径规划：根据给定的目标位置进行总体路径的规划<br>　(2) 局部路径规划：根据附近的障碍物信息进行躲避路线规划<br><a id="more"></a></p>
</blockquote>
<h3 id="amcl"><a href="#amcl" class="headerlink" title="amcl"></a>amcl</h3><p>　　<font color="blue">amcl(Adaptive Monte Carlo Localization) —-&gt; pose(position, oriention) &lt;—- map 坐标系</font></p>
<blockquote>
<p>自主定位</p>
<ul>
<li>全局定位：通过测机器人的绝对未知来定位，定位的精度较高，并且可以用来修复局部定位的定位误差</li>
<li>局部定位：通过测量相对于机器人初始位置的距离和方向来确定当前的位姿，但随着时间的累计造成定位的误差较大，无法精确定位</li>
</ul>
</blockquote>
<p>　　AMCL maintains a set of poses, representing where it thinks the robot might be, each of these candidate pose has associated with a probability: higher-probability poses are more likely to be where the robot actually is.</p>
<p>　　<font color="green">When amcl first starts up, you have to give it the initial pose(position and oriention) of the robot as this is something amcl cannot figure out on its own.</font></p>
<p>　　As the robot moves around ,the sensor readings are compared to the readings that would be expected for each of the poses, according to the map:</p>
<blockquote>
<ul>
<li>consistent with the map, probablity <strong>↗</strong></li>
<li>inconsistent with the map, probablity <strong>↘</strong></li>
</ul>
</blockquote>
<p>　　Over time, candidate poses with very low probability go away, while those with high probability stick around.</p>
<h3 id="move-base"><a href="#move-base" class="headerlink" title="move_base"></a>move_base</h3><p>　在 ROS 的导航中，首先会通过全局路径规划，计算出机器人到目标位置的全局路线，这一功能是 <strong>navfn</strong> 这个包实现的。</p>
<blockquote>
<p>　<strong>navfn</strong> 通过 <strong>Dijkstra</strong> 最优路径的算法，计算 costmap 上的最小花费路径，作为机器人的全局路线。(将来在算法上应该还会加入 <strong>A*</strong> 算法)</p>
</blockquote>
<p>　本地的实时规划是利用 <strong>base_local_planner</strong> 包实现的，该包使用 <strong>Trajectory Rollout</strong> 和 <strong>Dynamic Window Approaches</strong> 算法计算每个周期内应该行驶的速度和角度(dx, dy, dtheta velocities)</p>
<blockquote>
<p>　<strong>base_local_planner</strong> 这个包通过地图数据，通过算法搜索到达目标的多条路径，利用一些评价标准(是否会撞到障碍物，所需要的时间等等)，选取最优的路径，并且计算所需要的实时速度和角度。<br>　<strong>Trajectory Rollout</strong> 和 <strong>Dynamic Window Approaches</strong> 算法的主要思路如下：<br>　(1) 采样机器人当前的状态(dx, dy, dtheta)<br>　(2) 针对每个采样速度，计算机器人以该速度行驶一段时间后的状态，得出一条行驶路线<br>　(3) 利用一些评价标准为多条路线打分<br>　(4) 根据打分，选择最优路线<br>　(5) 重复上面的过程</p>
</blockquote>
<p>　<strong>move_base</strong> 有一下几个重要的配置文件：</p>
<ul>
<li>costmap_common_params.yaml(通用代价地图参数):<blockquote>
<p> We define our laser to be an observation source, as a result, data published on the scan topic will be used to update the costmaps, both inserting obstacles(marking) and asserting free space(clearing).<br>　<font color="green">footprint; observation_source</font></p>
</blockquote>
</li>
<li>global_common_params.yaml(全局规划代价地图参数):<blockquote>
<p> Tell the global costmap to use a static map (to be provided by the map server) and that it should do its reasoning in the map frame, while it should consider the canonical(基底) frame of the robot to be base_link.<br>　<font color="green">global_frame; robot_base_frame; static_map</font></p>
</blockquote>
</li>
<li>local_common_params.yaml(局部规划代价地图参数):<blockquote>
<p> Tell the local costmap to use a small rolling window: the robot always remains at the center of the window, with obstacle data outside the window being discarded, and potentially reobserved later, as the robot moves.</p>
</blockquote>
</li>
</ul>
<h3 id="costmap-2d"><a href="#costmap-2d" class="headerlink" title="costmap_2d"></a>costmap_2d</h3><blockquote>
<ul>
<li>Provides an implementation of a 2D costmap that takes in sensor data from the world, builds a 2D or 3D occupancy grid od the data and inflates costs in a 2D costmap based on the occupancy grid and a user specificed radius.</li>
<li>Also provides support for map_server based intialization of a costmap, rolling window based costmaps, and parameter based subscription and configuration of sensor topics.</li>
</ul>
</blockquote>
<p>　　在 ROS 的导航中，<strong>costmap_2d</strong> 这个包主要负责根据传感器的信息建立和更新二维或三维的地图。ROS 的地图(costmap) 采用网格(grid)的形式，每个网格的值从 <strong>0~255</strong> 分为三种状态: 占有(有障碍物)，无用(空闲的)，未知。因此有五种状态：</p>
<blockquote>
<p>　(1) Lethal(致命的)：机器人中心与该网格的中心重合，此时机器人必然与障碍物冲突<br>　(2) Possibly circumscribed(外切)：网格的外切圆与机器人的轮廓外切，此时机器人相当于靠在障碍物附近，所以不一定冲突<br>　(3) Inscribed(内切)：网格外切圆与机器人的轮廓内切，此时的机器人必然与障碍物冲突<br>　(4) Free space(自由空间)：没有障碍物的空间<br>　(5) Unknown：未知的空间</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sudo, unable to resolve host]]></title>
      <url>/2016/10/03/linux_sudo_unable_to_resolve_host/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Reference:<br>　<a href="http://askubuntu.com/questions/59458/error-message-when-i-run-sudo-unable-to-resolve-host-none">Error message when I run sudo: unable to resolve host (none)</a></p>
</blockquote>
<p>　现象是这样的。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...:~$ sudo <span class="literal">true</span></div><div class="line">sudo: unable to resolve host (...)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　解决的方法如下。</p>
<blockquote>
<p>Two things to check (assuming your machine is called my-machine, you can change this as appropriate):</p>
<ul>
<li>That the /etc/hostname file contains just the name of the machine.</li>
<li>That /etc/hosts has an entry for localhost. It should have something like:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1    localhost.localdomain localhost</div><div class="line">127.0.1.1    my-machine</div></pre></td></tr></table></figure>
</li>
</ul>
<p>If either of these files aren’t correct (since you can’t sudo), you may have to reboot the machine into recovery mode and make the modifications, then reboot to your usual environment.</p>
</blockquote>
<p>　我遇到的问题是，通过UI系统设置修改了机器名，<strong>/etc/hostname</strong> 是修改过来了，但是 <strong>/etc/hosts</strong> 中却还是保留了原来的机器名。<br>　这个问题，在使用 <strong>Networking-ROS</strong> 的运行过程中使得通过网络连接的分布式 <strong>master</strong> 和 <strong>slave</strong> 无法正常通讯。</p>
]]></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ROS Basics]]></title>
      <url>/2016/10/02/ROS_ROS_Basics/</url>
      <content type="html"><![CDATA[<p>　　ROS 基本概念以及经常使用的命令。</p>
<h3 id="ROS-文件系统"><a href="#ROS-文件系统" class="headerlink" title="ROS 文件系统"></a>ROS 文件系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取软件包有关信息</span></div><div class="line">xxx@...$ rospack find [package-name]</div><div class="line"><span class="comment"># 查看环境变量(ROS_PACKAGE_PATH)</span></div><div class="line">xxx@...$ <span class="built_in">export</span> | grep ROS</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="ROS-package"><a href="#ROS-package" class="headerlink" title="ROS package"></a>ROS package</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看一级依赖包信息，内容大致为 packages.xml 所示信息</span></div><div class="line">xxx@...$ rospack depends1 [package-name]</div><div class="line"></div><div class="line"><span class="comment"># catkin_make 构建，基于 cmake</span></div><div class="line">xxx@...$ catkin_make [make-targets] [-DCMAKE_INSTALL_PREFIX=xxx]</div></pre></td></tr></table></figure>
<h3 id="ROS-服务和参数"><a href="#ROS-服务和参数" class="headerlink" title="ROS 服务和参数"></a>ROS 服务和参数</h3><blockquote>
<p>服务是节点之间通讯的一种方式 {request –&gt; response}<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosservice list</div><div class="line">xxx@...$ rosservice <span class="built_in">type</span> [service-name]</div><div class="line">xxx@...$ rosservice call [service-name] [args]</div></pre></td></tr></table></figure></p>
<p>参数服务器操作<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosparam list</div><div class="line">xxx@...$ rosparam <span class="built_in">set</span>/get [param-name]</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="ROS-调试"><a href="#ROS-调试" class="headerlink" title="ROS 调试"></a>ROS 调试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun rqt_console rqt_console</div><div class="line"> </div><div class="line">xxx@...$ rosrun rqt_logger_level rqt_logger_level</div><div class="line"> </div><div class="line"><span class="comment"># 检查 ROS 系统</span></div><div class="line">xxx@...$ roswtf</div></pre></td></tr></table></figure>
<h3 id="ROS-节点"><a href="#ROS-节点" class="headerlink" title="ROS 节点"></a>ROS 节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示当前运行的 ROS 节点信息</span></div><div class="line">xxx@...$ rosnode list</div><div class="line"> </div><div class="line"><span class="comment"># 返回一个特定节点信息</span></div><div class="line">xxx@...$ rosnode info /&lt;node-name&gt;</div><div class="line"> </div><div class="line"><span class="comment"># 启动某个节点，需要明确该节点属于哪个package</span></div><div class="line">xxx@...$ rosrun [package-name] [node-name]</div><div class="line"> </div><div class="line"><span class="comment"># 在运行所有 ROS 程序节点前 master 节点必须先要运行起来</span></div><div class="line"><span class="comment"># roslaunch 会自动先启动 master 节点</span></div><div class="line">xxx@...$ roscore</div></pre></td></tr></table></figure>
<h3 id="ROS-话题"><a href="#ROS-话题" class="headerlink" title="ROS 话题"></a>ROS 话题</h3><p>　　<font color="blue">通过 <strong>rqt_graph</strong> 命令显示当前系统运行情况动态图，能准确了解系统的整体框架！</font><br>    <img src="/img/ROS/navigation_rqt_graph.png" /><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun rqt_graph rqt_graph</div></pre></td></tr></table></figure></p>
<p>　　其他的有关 ROS topic 的命令对于了解整个系统数据流向，数据信息(如频率，数据类型等)有极大的辅助作用！<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示某个话题上发布的数据</span></div><div class="line">xxx@...$ rostopic <span class="built_in">echo</span> /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 分别显示所有发布和订阅的话题及其类型的详细信息</span></div><div class="line">xxx@...$ rostopic list -v</div><div class="line"> </div><div class="line"><span class="comment"># 显示某个topic所有的发布节点和订阅节点</span></div><div class="line">xxx@...$ rostopic info /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据类型</span></div><div class="line">xxx@...$ rostopic <span class="built_in">type</span> /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 发布数据到topic</span></div><div class="line"><span class="comment">#  &#123;-1&#125; 发布一条消息后马上退出,option</span></div><div class="line"><span class="comment">#  &#123;-r ?&#125; 稳定频率?hz的命令流,option</span></div><div class="line">xxx@...$ rostopic pub &#123;-1&#125; /[topic] [msg_type] &#123;-r ?&#125; -- [args]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据发布频率</span></div><div class="line">xxx@...$ rostopic hz /[topic]</div><div class="line"> </div><div class="line"><span class="comment"># 查看数据变化图形</span></div><div class="line">xxx@...$ rosrun rqt_plot rqt_plot</div></pre></td></tr></table></figure></p>
<p>1.节点中如何按照一定频率发布 topic<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="keyword">double</span> frequency)</span></span>;</div><div class="line"><span class="keyword">while</span>(ros::ok())&#123;</div><div class="line">  ros::spinOnce();</div><div class="line">  loop_rate.sleep();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li><strong>ros::spin()</strong>　blocks until ros invokes a shutdown(频率与callback函数相关！！)</li>
<li><strong>ros::spinOnce()</strong> handles the event and return immediatey(可控频率！)</li>
</ul>
</blockquote>
<p>2.节点中如何订阅 topic<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ros::NodeHandle n;</div><div class="line">ros::Publisher pub = n.advertise(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;topic, </div><div class="line">       <span class="keyword">uint32_t</span> queue_size, <span class="keyword">bool</span> latch=<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>3.<font color="blue"><strong>消息调试可能的步骤!!!</strong></font><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rostopic list -v</div><div class="line">xxx@...$ rostopic info /&lt;topic-name&gt;</div><div class="line">xxx@...$ rosrun tf view_frame</div></pre></td></tr></table></figure></p>
<h3 id="使用-roslaunch"><a href="#使用-roslaunch" class="headerlink" title="使用 roslaunch"></a>使用 roslaunch</h3><p>　　启动定义在　<strong>launch</strong> 文件中的多个节点<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ roslaunch [package] [file-name.launch]</div></pre></td></tr></table></figure></p>
<p>　　<strong>roslaunch</strong> 在大型系统中的使用技巧</p>
<ol>
<li><p>高层次的 launch 文件应该简短，利用 <strong>include</strong> 指令将系统的组成部分和 <strong>ROS parameter</strong> 引用过来即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">"$(find package-name)/.../..."</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>当一个给定类型的消息在不同的情况下发布在不同的 topic 上，可以使用 <strong>remapping</strong>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"topic-name"</span> <span class="attr">to</span>=<span class="string">"xxx"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>参数</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 声明和使用</div><div class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">value</span>=<span class="string">"xxx"</span>/&gt;</span></div><div class="line">$(arg name)</div><div class="line"># 通过*.yaml文件加载</div><div class="line">#  通过 ns 划分 namespace</div><div class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">"*.yaml"</span> <span class="attr">command</span>=<span class="string">"load"</span> [<span class="attr">ns</span>=<span class="string">"xxx"</span>] /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>launch 文件的重用以及参数覆盖(当前文件声明覆盖外部文件声明)应少用为妙。</p>
</li>
</ol>
<h3 id="tf-坐标变换树"><a href="#tf-坐标变换树" class="headerlink" title="tf 坐标变换树"></a>tf 坐标变换树</h3><p>　　<font color="blue"><strong>tf</strong> 变换树定义了不同坐标系之间的平移和旋转变换关系，通过 <strong>rqt_tf_tree</strong> 命令查看当前系统 <strong>tf 变换树</strong> 能够有效的对系统缺漏做出判断！</font><br>    <center><img src="/img/ROS/slam_tf_tree.png" width="640px"/></center><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看the tree of frame</span></div><div class="line">xxx@...$ rosrun rqt_tf_tree rqt_tf_tree</div><div class="line"><span class="comment"># 查看一对不同坐标间的变换</span></div><div class="line">xxx@...$ rosrun tf tf_echo [reference_frame] [target_frame]</div></pre></td></tr></table></figure></p>
<blockquote>
<p>ROS 使用 <strong>tf</strong> 来决定机器人的位置和静态地图中的传感器数据，但是 <strong>tf</strong> 中没有机器人的速度信息，所以导航功能包要求机器人能够通过里程计信息源发布包含速度信息的里程计(数据类型: <strong>nav_msgs/Odometry</strong>), <strong>“/odom”</strong></p>
</blockquote>
<h3 id="rosbag-数据操作"><a href="#rosbag-数据操作" class="headerlink" title="rosbag 数据操作"></a>rosbag 数据操作</h3><ol>
<li><p>记录数据</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosbag record -o &lt;file-name&gt; /scan /tf /&lt;topic-name&gt;...</div><div class="line"><span class="comment"># CTRL+C to generate &lt;file-name&gt;.bag</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据仿真</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosbag play &lt;file-name&gt;.bag --clock</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="保存-SLAM-地图"><a href="#保存-SLAM-地图" class="headerlink" title="保存 SLAM 地图"></a>保存 SLAM 地图</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ roslaunch hector_slam_example hector_hokoyo.launch</div></pre></td></tr></table></figure>
<blockquote>
<p>Hector SLAM is running and the real-time map is constructing under map server</p>
</blockquote>
<p>　　建图完成后从 <strong>map server</strong> 获取地图数据，进行保存<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ rosrun map_server map_saver <span class="_">-f</span> &lt;file-name&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>会在当前目录生成地图数据 <strong><file-name>.pgm</strong> 和 <strong><file-name>.yaml</strong><br>    <center><img src="/img/ROS/lab510.png" width="502px"/></center></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> ROS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Embedded System 2016]]></title>
      <url>/2016/10/01/TACouses_Embedded_System_2016/</url>
      <content type="html"><![CDATA[<p>　　嵌入式系统实验课大概涉及的内容有以下几个部分:<br>    <center><img src="/img/TA-Cources/ES2016/dol_framework.png" width="640px"/></center><br>　　主体就涵盖了三条纵线一条横线，functional simulation，Hds simulation，analysis model 是三纵，如何通过三纵得到的数据迭代获取 application 和 architecture 的最佳 mapping 为一横。<br><a id="more"></a></p>
<blockquote>
<ol>
<li><p>DOL Framework的了解，入门编程，功能仿真<br>1.1 <strong><font color="green">DOL + systemC</font></strong><br>　Functional Simulation，包括分析，动手编程修改 example 模型<br>1.2 <strong><font color="green">MPARM + RTEMS OS</font></strong><br>　System Synthesis(Hds，硬件相关软件层)，mparm<br>1.3 <strong><font color="green">MATLAB + RTC/MPA</font></strong><br>　Analysis Model分析，MPA(<strong>Modular Performance Analysis</strong>)，获取当前 mapping 的各项参数，如: Backlog, Delay，用于迭代的back-annotation。</p>
</li>
<li><p>解决 <strong>Application</strong> 到 <strong>Architecture</strong> 的 <strong>Mapping</strong>: <strong>DES(Design Space Exploration)</strong> 探索，使用 <strong>EXPO</strong> 并进行数据分析。</p>
 <center><img src="/img/TA-Cources/ES2016/dse_cycle.png" width="420px"/></center>　</li>
<li>DeadLock 死锁问题</li>
<li>KPN 模型设计与分析</li>
</ol>
</blockquote>
<h3 id="D-istributed-O-peration-L-ayer"><a href="#D-istributed-O-peration-L-ayer" class="headerlink" title="D(istributed)O(peration)L(ayer)"></a><font color="green">D</font>(istributed)<font color="green">O</font>(peration)<font color="green">L</font>(ayer)</h3><blockquote>
<p><center><img src="/img/TA-Cources/ES2016/SHAPES.png" width="640px"/></center><br>上图描述了 <strong>DOL</strong> 的整体框架以及所使用的工具链<br>　VSP: Virtual SHAPES Platform</p>
<p><center><img src="/img/TA-Cources/ES2016/dol_basic_structure.png" width="520px"/></center><br>上图描述了 <strong>DOL</strong> 的整体流程：<br>　1). <strong>DOL Specification</strong>，包括 <code>*.c</code>, <code>*.h</code>, <code>*.xml</code> 定义的 <strong>application</strong>, <code>*.xml</code> 定义的 <strong>architecture</strong> 和 <strong>mapping</strong><br>　2). 自动化生成 SystemC 代码，并基于 SystemC 进行 <strong>Functional Simulation</strong><br>　3). 自动化生成 MPARM 平台上运行的二进制代码，进行 <strong>Cycle Accurate Simulation</strong><br>　4). 利用上述两种 Simulation 产生的 <strong>Log files</strong> 生成 <strong>MPA Model</strong>，进行 <strong>RTC</strong> 等相关分析</p>
<p><center><img src="/img/TA-Cources/ES2016/what_is_mapping.png" width="520px"/></center><br>接下来会介绍两种 <strong>DOL Software Synthesis</strong>:</p>
<ul>
<li>基于 <strong>SystemC</strong> 的功能仿真</li>
<li>基于 <strong>RTEMS(real-time executive for multiprocessor systems)</strong> 和 <strong>MPARM</strong> 的模拟仿真(Cycle Accurate Simulation)</li>
</ul>
</blockquote>
<p>1.DOL &amp; SystemC for <font color="green">Functional Simulation</font><br>    <center><img src="/img/TA-Cources/ES2016/dol_overview.png" width="420px"/></center></p>
<blockquote>
<p>Step 1: Flattening of the process network description</p>
<ul>
<li>Java class XMLFlattener, XMLFlattener creates a Java class that can generate the flattened XML file<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java dol.helper.flattener.XMLFlattener pn.xml Generator</div><div class="line">javac Generator.java</div><div class="line">java Generator.java &gt; flattened_pn.xml</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Step 2: Flattening of the generated XML file</p>
<ul>
<li>Flattened XML file <strong><font color="blue">— dotty —&gt;</font></strong> representation of the process network<br>　　To generate a network description displayable by dotty, use dol with the -D flag.<br>　　To specify the process network file, use the -P flag.<br>　　The -c flag is used to enable a basic consistency check of the process network，dol will check whether each port is connected to some channel, for instance<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java dol.main.Main -P flattened_pn.xml -D dotty_pn.dot -c</div><div class="line">dotty dotty_pn.dot</div></pre></td></tr></table></figure>
</li>
</ul>
<p><center><img src="/img/TA-Cources/ES2016/Hds_synthesis.png" width="420px"/></center></p>
<ul>
<li>Flattened XML file + C source code <strong><font color="blue">— dol —&gt;</font></strong> executable SystemC application<br>　　To generate the source code for an executable systemC application, use dol with the -H flag<br>　　dol will create a directory with the specified name containing all required source files for generating a systemC application, including a Makefile<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># copy *.c &amp; *.h</span></div><div class="line">cp <span class="variable">$sourcefiles</span> ./src</div><div class="line">java dol.main.Main -P flattened_pn.xml -H systemc -c</div><div class="line"><span class="built_in">cd</span> systemc/src</div><div class="line">make</div><div class="line">./sc_application</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li><font color="red">Assignment</font><br>　a. How to configure DOL environment in your computer?<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># check your system environment</span></div><div class="line">xxx@...:~$ sudo lsb_release <span class="_">-a</span></div><div class="line"> </div><div class="line"><span class="comment"># The requirements:</span></div><div class="line"><span class="comment">#  C/C++ environment: compiler, linker</span></div><div class="line"><span class="comment">#  Java environment: javac, java</span></div><div class="line"><span class="comment">#  Build environment: make, Ant (version 1.6.5 or greater)</span></div><div class="line"><span class="comment"># check your gcc</span></div><div class="line">xxx@...:~$ gcc -v</div><div class="line">xxx@...:~$ sudo apt-get install ant</div><div class="line"><span class="comment"># install Java environment</span></div><div class="line">xxx@...:~$ sudo apt-cache search openjdk-*</div><div class="line">xxx@...:~$ sudo apt-get install openjdk-&lt;your cache jdk version&gt;-jdk</div><div class="line"><span class="comment"># check installation success or not</span></div><div class="line">xxx@...:~$ java -version</div><div class="line"> </div><div class="line"><span class="comment"># 配置 DOL 依赖: SystemC</span></div><div class="line"><span class="comment"># SystemC environment (version 2.1 or greater)</span></div><div class="line"><span class="comment">#  File: systemc-2.3.1.tar</span></div><div class="line"><span class="comment">#  链接：http://www.accellera.org/downloads/standards/systemc/files</span></div><div class="line">xxx@...:&lt;sub&gt;$ <span class="built_in">cd</span> &lt;/sub&gt;/Workspace/DOL</div><div class="line">xxx@...:~$ tar -zxvf systemc-2.3.1.tgz</div><div class="line">xxx@...:~$ rm systemc-2.3.1.tgz</div><div class="line"><span class="comment"># 1. Change to the top level directory (systemc-2.3.1)</span></div><div class="line">xxx@...:&lt;sub&gt;$ <span class="built_in">cd</span> &lt;/sub&gt;/Workspace/DOL/systemc-2.3.1</div><div class="line">xxx@...:~$ <span class="built_in">pwd</span></div><div class="line"><span class="comment"># 2. Create a temporary directory, e.g.,</span></div><div class="line">xxx@...:~$ mkdir objdir</div><div class="line"><span class="comment"># 3. Change to the temporary directory, e.g.,</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> objdir</div><div class="line"><span class="comment"># 4. Configure the package for your system, e.g.,</span></div><div class="line">xxx@...:~$ ../configure CXX=g++ --disable-async-updates</div><div class="line"><span class="comment"># 5. Compile the package.</span></div><div class="line">xxx@...:~$ make</div><div class="line"><span class="comment"># 6. [option] verify the compiled package by testing the example suite.</span></div><div class="line">xxx@...:~$ make check</div><div class="line"><span class="comment"># 7. Install the package.</span></div><div class="line">xxx@...:~$ make install</div><div class="line"><span class="comment"># 8. You can now remove the temporary directory, .e.g,</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> ..</div><div class="line">xxx@...:~$ rm -rf objdir</div><div class="line"><span class="comment"># Alternatively, you can keep the temporary directory to allow you to:</span></div><div class="line"><span class="comment">#  a) Experiment with the examples.</span></div><div class="line"><span class="comment">#  b) Later uninstall the package. </span></div><div class="line"><span class="comment">#    To clean up the temporary directory, enter:</span></div><div class="line">xxx@...:~$ make clean</div><div class="line"><span class="comment">#    To uninstall the package, enter:</span></div><div class="line">xxx@...:~$ make uninstall</div><div class="line"> </div><div class="line"><span class="comment"># 配置 DOL</span></div><div class="line"><span class="comment">#  wget http://www.tik.ee.ethz.ch/~shapes/downloads/dol_ethz.zip</span></div><div class="line">xxx@...:&lt;sub&gt;$ <span class="built_in">cd</span> &lt;/sub&gt;/Workspace/DOL</div><div class="line">xxx@...:~$ unzip dol_ethz.zip</div><div class="line">xxx@...:~$ rm dol_ethz.zip </div><div class="line"><span class="comment"># 修改 build_zip.xml 文件</span></div><div class="line">xxx@...:~$ vim build_zip.xml</div><div class="line"><span class="comment"># 找到下面这段话，修改成上面编译的 SystemC 所在的位置，</span></div><div class="line"><span class="comment">#  &lt;property name="systemc.inc" value="YYY/include"/&gt;</span></div><div class="line"><span class="comment">#  &lt;property name="systemc.lib" value="YYY/lib-linux/libsystemc.a"/&gt;</span></div><div class="line"><span class="comment"># 把YYY改成上面pwd的结果（注意，对于64位系统的机器，lib-linux要改成lib-linux64）</span></div><div class="line"><span class="comment"># 编译 DOL，若成功会显示 BUILD SUCCESSFUL</span></div><div class="line">xxx@...:~$ ant <span class="_">-f</span> build_zip.xml all</div><div class="line"><span class="comment"># 接着可以试试运行第一个例子</span></div><div class="line"><span class="comment"># 进入build/bin/mian路径下</span></div><div class="line">xxx@...:~$ <span class="built_in">cd</span> build/bin/main</div><div class="line"><span class="comment"># 然后构建，运行第一个例子</span></div><div class="line">xxx@...:~$ ant <span class="_">-f</span> runexample.xml -Dnumber=1</div></pre></td></tr></table></figure>
</li>
</ul>
<font color="blue"><strong>Q&amp;A</strong></font>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">1.build_zip.xml无法保存</div><div class="line">Ans：sudo gedit build_zip.xml</div><div class="line"> </div><div class="line">2.最后一步build failed</div><div class="line">  出现在中文系统，在dol/build/bin/main下的runexample.xml 215-217行需要注释或者删掉</div><div class="line">Ans: 找到</div><div class="line"><span class="tag">&lt;<span class="name">tstamp</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">format</span> <span class="attr">property</span>=<span class="string">"touch.time"</span></div><div class="line">          <span class="attr">pattern</span>=<span class="string">"MM/dd/yyyy hh:mm aa"</span></div><div class="line">          <span class="attr">offset</span>=<span class="string">"-5"</span> <span class="attr">unit</span>=<span class="string">"second"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tstamp</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">touch</span> <span class="attr">datetime</span>=<span class="string">"$&#123;touch.time&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"example$&#123;number&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">touch</span>&gt;</span></div><div class="line">修改为：</div><div class="line"><span class="comment">&lt;!--     </div><div class="line">&lt;tstamp&gt;</div><div class="line">  &lt;format property="touch.time"</div><div class="line">          pattern="MM/dd/yyyy hh:mm aa"</div><div class="line">          offset="-5" unit="second"/&gt;</div><div class="line">&lt;/tstamp&gt;</div><div class="line">&lt;touch datetime="$&#123;touch.time&#125;"&gt;</div><div class="line">  &lt;fileset dir="example$&#123;number&#125;"/&gt;</div><div class="line">&lt;/touch&gt; </div><div class="line">--&gt;</span></div><div class="line"> </div><div class="line">3.make和ant有什么不一样</div><div class="line">Ans: MAKE是基于C语言；ant是基于Java语言</div><div class="line"> </div><div class="line">4.第一次build successful, 但是最后build failed</div><div class="line">Ans: 这个问题大致上是JAVA的问题</div><div class="line">  对于这个问题，安装JDK可以解决，sudo apt-get install openjdk-?-jdk可以解决</div><div class="line"> </div><div class="line">5.sudo apt-get install openjdk-?-jdk后，build还是有问题</div><div class="line">Ans: 可能因为安装了多个版本的JAVA，需要设置一下JAVA的环境变量</div><div class="line"> </div><div class="line">6.有人遇到pthread_mutex_tryloc,什么鬼的</div><div class="line">Ans: 表示摊手，因为在编译Systemc时，</div><div class="line">    sudo ../configure CXX=g++ --disable-async-updates，</div><div class="line">  这是systemc的相关设置，已经禁用了pthread。</div><div class="line">  如果按照上述语句configure还出现问题的，试试重新安装一遍。</div><div class="line"> </div><div class="line">7.PPT上最后一个图示可以画出来的吗？</div><div class="line">Ans：可以，在build/bin/main 的exmaple文件里有面个*.dot文件，双击就可以看到了</div><div class="line"> </div><div class="line">...</div></pre></td></tr></table></figure>
<p>　b. Analyze DOL framework by some example.<br>　c. Write your DOL Apps based on above analysis.</p>
<p>2.<font color="green">MPARM Simulation</font> with RTEMS OS<br>    <center><img src="/img/TA-Cources/ES2016/MPARM_simulation.png" width="540px"/></center></p>
<ul>
<li><font color="red">Assignment</font><br>　a. Configure and run MPARM simulation.<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Step1: Install requirement: MATLAB</span></div><div class="line"><span class="comment">#  安装MATLAB_R2014A</span></div><div class="line"><span class="comment"># 1. 步入ISO所在路径，sudo mount MATHWORKS_R2014A.iso MATLAB_R2014A/ 挂载MATHWORKS_R2014A.iso到MATLAB_R2014A</span></div><div class="line">x@.:~$ mkdir MATLAB_R2014A</div><div class="line">x@.:~$ sudo mount MATHWORKS_R2014A.iso MATLAB_R2014A/</div><div class="line"> </div><div class="line"><span class="comment"># 2. 启动安装</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> MATLAB_R2014A/</div><div class="line">x@.:~$ sudo ./install</div><div class="line"> </div><div class="line"><span class="comment"># 3. 选择是否在线安装时，选否，即 install manually without using the internet</span></div><div class="line"><span class="comment">#  让输入key，输入 12313-94680-65562-90832</span></div><div class="line"><span class="comment">#  文件安装路径选择依照自己习惯，一般为：/usr/local/</span></div><div class="line">x@.:~$ sudo umount -v MATLAB_R2014A/</div><div class="line">x@.:~$ sudo rm -rf MATLAB_R2014A/</div><div class="line"> </div><div class="line"><span class="comment"># 4. 步入  /usr/local/MATLAB/R2014a/bin， sudo ./matlab，即可启动 MATLAB，说明成功安装并破解</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin</div><div class="line">x@.:~$ sudo ./matlab</div><div class="line"> </div><div class="line"><span class="comment"># 5. 不使用Internet手动激活，使用：破解/Crack/license_405329_R2014a.lic文件</span></div><div class="line"><span class="comment">#  此外，将 破解/Crack/Linux/libmwservices.so 复制到 MATLAB/R2014a/bin/glnxa64/ （可能需要通过命令mv或者cp）</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> &lt;ISO所在路径&gt;</div><div class="line">x@.:~$ unzip MATHWORKS_R2014A_Crack.zip</div><div class="line">x@.:~$ sudo cp Crack/Linux/libmwservices.so /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin/glnxa64/</div><div class="line">x@.:~$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/bin</div><div class="line"><span class="comment">#  MATLAB已经破解，正常启动</span></div><div class="line">x@.:~$ sudo ./matlab</div><div class="line"> </div><div class="line"><span class="comment"># 6. 制作 MATLAB 快捷启动 (matlab-support)</span></div><div class="line"><span class="comment">#  sudo apt-get install matlab-support	按照要求填写目录即可</span></div><div class="line"><span class="comment">#  任意 Terminal下 键入命令：matlab 即可启动，如果报错，需要键入 sudo matlab</span></div><div class="line">x@.:~$ sudo apt-get install matlab-support</div><div class="line"><span class="comment"># Location of MATLAB installation(s): /usr/local/MATLAB/R2014a</span></div><div class="line"><span class="comment"># Authorized user for MATLAB: &lt;empty&gt;</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"> </div><div class="line"><span class="comment"># 7. [option]更改 MATLAB 默认文件夹</span></div><div class="line"><span class="comment">#  在 MATLAB 命令行键入 edit pathdef，在 pathdef.m 文件最末尾添加： cd 你要设置的默认目录 即可。</span></div><div class="line"><span class="comment"># 8. 配置RTC ToolBox 说明</span></div><div class="line"><span class="comment">#  链接: http://www.mpa.ethz.ch/Rtctoolbox/Download</span></div><div class="line"><span class="comment">#  rtc_toobox.zip is the same contents as tecsexperiments-2010-10-22-final/testbed/matlab/rtc</span></div><div class="line"><span class="comment"># Extract the downloaded zip package. The extracted directory will contain a directory called rtc.</span></div><div class="line"><span class="comment"># Copy or move the directory rtc to its final installation destination, e.g. to $MATLAB$/toolbox/rtc</span></div><div class="line">x@.:~$ sudo unzip rtc_toobox.zip <span class="_">-d</span> /usr/<span class="built_in">local</span>/MATLAB/R2014a/toolbox/</div><div class="line">x@.:~$ sudo matlab</div><div class="line"><span class="comment"># Open Matlab and change to the rtc directory:</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$MATLAB</span>$/toolbox/rtc</div><div class="line"><span class="comment"># Run:</span></div><div class="line">rtc_install</div><div class="line"><span class="comment"># Now you can start using the RTC Toolbox. To explore the functionality of the RTC Toolbox, try the following:</span></div><div class="line"><span class="built_in">help</span> rtc</div><div class="line"><span class="comment"># Uninstalling the Real-Time Calculus (RTC) Toolbox:</span></div><div class="line">rtc_uninstall</div><div class="line"><span class="comment"># You may now delete the directory $MATLAB$/toolbox/rtc </span></div><div class="line">x@.:~$ sudo rm -rf /usr/<span class="built_in">local</span>/MATLAB/R2014a/toolbox/rtc</div><div class="line"> </div><div class="line"><span class="comment"># Step2: Configure testbed environment</span></div><div class="line"><span class="comment"># 1. 修改 mparm/RTEMS-os/install-rtems/arm-rtems/arm_bare_bsp/Makefile.inc 中'prefix'和'exec_prefix'所对应的路径</span></div><div class="line"><span class="comment">#  修改为自己的 mparm 所在目录</span></div><div class="line">prefix = /home/khuang/work/mparm-haid/mparm/RTEMS-os/install-rtems</div><div class="line">exec_prefix = /home/khuang/work/mparm-haid/mparm/RTEMS-os/install-rtems/arm-rtems</div><div class="line"> </div><div class="line"><span class="comment"># 2. 修改 testbed/localjars/dol.properties 中'SYSTEMC_INC'和'SYSTEMC_LIB'所对应的路径</span></div><div class="line"><span class="comment">#  修改为自己 systemC 中 include 与 libsystemc.a 所对应的目录。</span></div><div class="line">SYSTEMC_INC = /home/khuang/work/shapes/systemC/include</div><div class="line">SYSTEMC_LIB = /home/khuang/work/shapes/systemC/lib-linux/libsystemc.a</div><div class="line"> </div><div class="line"><span class="comment"># 3. 在 testbed/localjars 中更新 jar 文件,使用命令 jar -uf dol.jar dol.properties</span></div><div class="line">x@.:~$ jar -uf dol.jar dol.properties</div><div class="line"> </div><div class="line"><span class="comment"># 4. 修改 testbed/build.xml 中'mparm.dir'所对应的路径为自己 mparm 所在路径</span></div><div class="line">&lt;property name=<span class="string">"mparm.dir"</span> location=<span class="string">"/home/khuang/work/mparm-haid/mparm/"</span>/&gt;</div><div class="line"> </div><div class="line"><span class="comment"># 5. 至此,就可以运行 testbed 了,在 testbed 目录下执行 ant,查看结果</span></div><div class="line">x@.:&lt;sub&gt;$ <span class="built_in">cd</span> &lt;/sub&gt;/Workspace/tecsexperiments-2010-10-22-final/testbed</div><div class="line">x@.:~$ ant</div><div class="line"> </div><div class="line"><span class="comment"># 6. 调用MATLAB分析MPA</span></div><div class="line">x@.:~$ <span class="built_in">cd</span> tecs</div><div class="line">x@.:~$ ./runmatlab.sh</div><div class="line"> </div><div class="line"><span class="comment"># 7. [option]修改 testbed/build.xml 中'source.dir',可以运行不同的测试样例,测试样例在tecs/examples 目录下。</span></div><div class="line">&lt;property name=<span class="string">"source.dir"</span> value=<span class="string">"tecs/examples/examplemjpegVSP-trigger"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<font color="blue"><strong>Q&amp;A</strong></font>

<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># MPARM工具是32位程序，通过查看链接情况解决依赖位数不匹配的问题</span></div><div class="line"><span class="comment">#  需要安装i386的C++标准库</span></div><div class="line"><span class="comment">#  参考链接: http://askubuntu.com/questions/709893/14-04-01-32-bit-missing-g-64-bit-include-files-when-cross-compiling</span></div><div class="line">x@.:~/Workspace/tecsexperiments-2010-10-22-final/mparm/swarm/bin$ ldd mpsim.x</div><div class="line">  linux-gate.so.1 =&gt;  (0xf7747000)</div><div class="line">  libstdc++.so.5 =&gt; not found</div><div class="line">  libm.so.6 =&gt; /lib/i386-linux-gnu/libm.so.6 (0xf76e8000)</div><div class="line">  libgcc_s.so.1 =&gt; /lib/i386-linux-gnu/libgcc_s.so.1 (0xf76ca000)</div><div class="line">  libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf751c000)</div><div class="line">  /lib/ld-linux.so.2 (0xf774a000)</div><div class="line"><span class="comment"># This is just a dependency package that resolves to g++-?-multilib for the default gcc/g++ version, </span></div><div class="line"><span class="comment">#  and in turn depends on lib64stdc++-?-dev (64-bit compilation on 32-bit) or libx32stdc++-?-dev (32-bit compilation on 64-bit)</span></div><div class="line"><span class="comment">#  it is these that contain the actual header files.</span></div><div class="line">x@.:~/Workspace/tecsexperiments-2010-10-22-final/mparm/swarm/bin$ sudo apt-get install g++-multilib</div></pre></td></tr></table></figure>
<p>　b. Analyze MPARM simulation log files to know about the whole process.</p>
<p>3.<font color="green">MPA Model</font></p>
<h3 id="DSE-EXPO"><a href="#DSE-EXPO" class="headerlink" title="DSE-EXPO"></a>DSE-EXPO</h3><h3 id="Dead-Lock"><a href="#Dead-Lock" class="headerlink" title="Dead Lock"></a>Dead Lock</h3><h3 id="K-ahn-P-rocess-N-etwork"><a href="#K-ahn-P-rocess-N-etwork" class="headerlink" title="K(ahn)P(rocess)N(etwork)"></a><font color="green">K</font>(ahn)<font color="green">P</font>(rocess)<font color="green">N</font>(etwork)</h3>]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> EmbeddedSystem </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[从 VS 的 dumpbin 目录谈 x86、xi386、x86-64、amd64...]]></title>
      <url>/2016/09/17/hsw_%E4%BB%8EVS%E7%9A%84dumpbin%E7%9B%AE%E5%BD%95%E8%B0%88x86,i386,x86-64,amd64/</url>
      <content type="html"><![CDATA[<p>　翻开 <strong>VS</strong> 的 <strong>dumpbin.exe</strong>、<strong>cl.exe</strong> 的存放目录，你会惊奇的发现，居然存在这么多个分支！<br>    <center><img src="/img/hsw/VS2013_dumpbin_dirs.png" width="640px"/></center><br>　　什么 <strong>amd64</strong>、<strong>amd64_arm</strong>、<strong>amd64_x86</strong>、<strong>arm</strong>、<strong>x86_amd64</strong>、<strong>x86_arm</strong>???<br><a id="more"></a></p>
<h2 id="故事的起源"><a href="#故事的起源" class="headerlink" title="故事的起源"></a>故事的起源</h2><blockquote>
<p>Refer: <a href="https://social.msdn.microsoft.com/Forums/vstudio/en-US/95a3ca96-e3a5-4b12-ab59-7d70df1df07b/clexe-and-directories-under-bin-host-targets?forum=vcgeneral">cl.exe and directories under bin, host, targets?</a><br>　In general, the format of the directory name is “host_target” so “amd64_arm” means that the compiler itself runs on x64 and it targets arm. “amd64” doesn’t follow the format but it should be obvious, it runs on and targets x64 bit. The compiler in the bin directory is a x86 only compiler.</p>
</blockquote>
<p>　原来，上面说来说去也就是这三个平台而已啦，<strong>amd64</strong>、<strong>arm</strong> 还有 <strong>x86</strong>。 <strong>amd64*</strong> 目录指代运行在 <strong>amd64</strong> (也就是64位机器) 上的构建系统，可用于生成 <strong>amd64</strong>、<strong>arm</strong> 还有 <strong>x86</strong> 平台目标代码；<strong>x86*</strong> 目录类似，至于 <strong>arm</strong> 目录，该平台的构建系统没用于生成 <strong>amd64</strong> 还有 <strong>x86</strong> 平台目标代码，而整个 <strong>…/VC/bin</strong> 目录下，则是 <strong>x86_x86</strong> 的构建系统。</p>
<h2 id="了解一些基本概念"><a href="#了解一些基本概念" class="headerlink" title="了解一些基本概念"></a>了解一些基本概念</h2><blockquote>
<p>Refer: <a href="http://blog.chinaunix.net/uid-25871104-id-3424668.html">x86/x86_64的一些基本概念 </a><br>　现在的 <strong>x86 CPU</strong> 在位数上有32/64 bit之分，在 <strong>ARCH(体系架构)</strong> 上又有 x86/x86_64/x64/i386/IA32/IA64/amd64，最近又新出来一个 x32，还好不是 ARCH，只是 <strong>ABI(应用程序二进制接口)</strong>，没有那么混乱。<br>　<br>　先说一下x86的这些arch，不要求很严格的话，基本上可以用下面的公式来表达：<br>　　<strong>x86 = i386 = IA32</strong><br>　　<strong>amd64 = x86_64 = x64 != IA64</strong><br>　其实这两个等式里很多都是别名，严格说的话，x86 的世界里只存在 <font color="green"><strong>x86/x86_64/IA64</strong></font> 三种架构。<br>　当年 <strong>AMD</strong> 先于 <strong>Intel</strong> 推出向下兼容的 amd64 CPU，而 <strong>Intel</strong> 推出的不兼容32位系统的 <font color="green"><strong>IA64</strong></font> 惨淡收场(被MS放了鸽子)，后来 <strong>Intel</strong> 在指令上支持了 <font color="green"><strong>amd64</strong></font>，不过不愿意叫 amd64，改了个名字 <font color="green"><strong>x86_64</strong></font>。<br>　<br>　再说 64bit/32bit 的兼容性问题：<br>　　现在的 64bit CPU实际上都做了兼容 32bit 的特殊设计，所以 64bit 的CPU上运行 32bit 的软件(包括kernel/app，driver除外)是没有问题。反过来，32bit 的 CPU 上运行 64bit 的软件是不可以的。<br>　<br>　最后说重点，64bit相比32bit的性能优势：<br>　　这里不考虑 64bit 硬件上运行 32bit 软件的这种过度方式。<br>　　从架构上来说，64bit 拥有 64bit 的 register 和 64bit 的 bus，在数据传输效率上比 32bit 要高不少；另外，64bit 地址总线的寻址空间突破了 4G 的限制。<br>　　所以，对于大内存，密集数据运算的应用场景，64bit 的优势是非常明显的。网上有一些 benchmark，这里不贴了。<br>　　但是，对于小内存系统，64bit 的 CPU 在某些状况下可能比 32bit CPU的效率更低。<br>　　因为 64bit 的 CPU 的地址是 64 位的，指针是 64 位的，编译生成的二进制文件更大，运行时占用的内存更多;另一方面，因为 64 位地址的问题，cache 中能存放的指令就更少，所以更容易导致 cache 的 miss。<br>　　所以在某些应用场景，64bit CPU 的更大的寻址空间，更快的数据传递，更快的浮点运算的特性，与其 64bit 的地址/指针所导致的cache miss的特性，始终并存。<br>　<br>　为了充分利用64的优势，又避免 64bit 地址导致的 cache miss 的问题，Intel 提出了 <font color="green"><strong>x32 ABI</strong></font> 的概念。<br>　　x32 不是一个 ARCH，是一个 ABI。<br>　　x32 可以充分的使用 64bit 硬件的 64bit 寄存器，64bit 总线，以及 64bit 新增的指令，从而获得更快的数据处理速度。<br>　　同时 x32 又使用 32bit 的地址/pointer，32bit 的 C 数据类型，因此 cache miss 并不会增加。<br>　　x32 是一个 ABI，其设计到的部分包括：kernel 的 support，toolchain 的 support，system lib 的 support。现在 kernel(from 3.4) 和 toolchain 的 support 都已经OK。</p>
</blockquote>
<h2 id="问题深入"><a href="#问题深入" class="headerlink" title="问题深入"></a>问题深入</h2><blockquote>
<p>Refer: <a href="http://downtoearthlinux.com/posts/x86-i386-x86-64-x64-and-amd64-oh-my/">x86, i386, x86-64, x64, and amd64? Oh My!</a><br>　<font color="green"><strong>x86</strong></font> instruction sets are found on 32-bit processors, <font color="green"><strong>x86-64</strong></font> instruction sets are found on 64-bit processors.  Therefore, to find your instruction set, you must figure out if you have a 32-bit or a 64-bit processor.<br>　<br>　It is common to find x86 called <font color="green"><strong>i386</strong></font>, or occasionally <font color="green"><strong>IA-32</strong></font>.  x86-64 is commonly called <font color="green"><strong>x64</strong></font> or <font color="green"><strong>amd64</strong></font>, and less often IA-32e, EM64T, or Intel64.<br>　Typically, knowing x86, i386, x86-64, x64, and amd64 is enough for downloading Linux.<br>　<br>　x86-64  =  64-bit  =  x64  =  amd64<br>　x86  =  32-bit  =  i386<br>　If your processor supports it, use x86-64.</p>
</blockquote>
<h2 id="回到问题开始"><a href="#回到问题开始" class="headerlink" title="回到问题开始"></a>回到问题开始</h2><blockquote>
<p>Refer: <a href="http://stackoverflow.com/questions/3508173/when-compiling-x64-code-whats-the-difference-between-x86-amd64-and-amd64">When compiling x64 code, what’s the difference between “x86_amd64” and “amd64”?</a><br>　<font color="blue"><strong>x64 on x86 (x64 cross-compiler)</strong></font><br>　　Allows you to create output files for x64. This version of cl.exe runs as a 32-bit process, native on an x86 machine and under WOW64 on a 64-bit Widows operating system.<br>　<font color="blue"><strong>x64 on x64</strong></font><br>　 Allows you to create output files for x64. This version of cl.exe runs as a native process on an x64 machine.<br>　<br>　 It has nothing to do with efficiency. The native and cross-compiler will both generate the same machine code. You will however gain some benefits by running a native 64-bit compiler process on a 64-bit workstation (larger registers, larger memory space, etc…)<br>　The native compiler will only run on an 64-bit copy of Windows, so if your workstation is 32-bit this compiler won’t even run.<br>　The cross-compiler is meant to run on x86 machines even though it will run on a 64-bit copy of Windows via WoW; however, there is no reason to do this.<br>　<br>　If you use x86_amd64, then you are typically developing on an x86 machine and you want to create x64 files that run natively on x64. You could also use this option on an x64 machine but your compiler will be running under WOW64 emulation.<br>　If you use AMD64, then you are developing on an x64 machine and you want to create x64 files that run natively on x64. The compiler is running natively in x64. This option is more efficient to build x64 programs.</p>
</blockquote>
<p>　　所以，假如你是 64 位系统(现在基本上是啦)，那么在配置 <strong>dumpbin</strong> 或者 <strong>cl</strong> 环境变量时，最好选择 <strong>host</strong> 为 <strong>amd64</strong> 的路径，即 <strong>amd64*</strong>。</p>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> Architecture </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客主题Yelee迁移笔记]]></title>
      <url>/2016/09/16/hexo_%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98Yelee%E8%BF%81%E7%A7%BB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>References:</p>
<ul>
<li><a href="http://moxfive.coding.me/yelee/">Yelee 主题使用说明</a></li>
<li><a href="https://github.com/MOxFIVE/hexo-theme-yelee">Github: 简而不减 Hexo 双栏博客主题</a></li>
</ul>
</blockquote>
<p>　　<strong><a href="http://moxfive.xyz/">MOxFIVE</a></strong> 自定义的 <strong>Yelee</strong> 这个主题真的很好用，迁移之后我的几个体会是:<br>　　　a). 动态效果很酷炫，整个界面给人的感觉就很满意<br>　　　b). 添加多说评论栏是如此的简单<br>　　　c). 自带的站点、页面访问量统计，很不错<br>　　　d). 整个源码的框架似乎更合理了，你可以自己浏览一下源码，感同身受吧？</p>
<p>　　下面是本人将自己的博客主题迁移到 <strong>Yelee</strong> 的过程以及其中做的一些自定义适配。<br><a id="more"></a></p>
<h2 id="How-to-install-easy"><a href="#How-to-install-easy" class="headerlink" title="How to install? easy!"></a>How to install? easy!</h2><p>　　Follow <strong><a href="http://moxfive.xyz/">MOxFIVE</a></strong> 的 <a href="https://github.com/MOxFIVE/hexo-theme-yelee"><strong>Yelee</strong> Github 主页</a> 即可。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Installation</span></div><div class="line">git <span class="built_in">clone</span> https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</div><div class="line"> </div><div class="line"><span class="comment"># Change theme field in Hexo root's _config.yml file.</span></div><div class="line">theme: yelee</div></pre></td></tr></table></figure></p>
<h2 id="自定义头像"><a href="#自定义头像" class="headerlink" title="自定义头像"></a>自定义头像</h2><p>　　站点左上角的头像取自 <strong>yelee/source/img/avatar.png</strong>，其配置项在主题对应的 <strong>_config.yml</strong> 配置文件中的 <strong>Basic Setup</strong> 部分。两种方式，将原先的 <strong>avatar.png</strong> 做个备份，然后将自定义的头像存放到 <strong>yelee/source/img/</strong> 下，并命名为 <strong>avatar.png</strong>；修改配置文件中的 <strong>avatar:</strong> 项，自定义图片路径和名称，个人建议图片最好还是存放到 <strong>yelee/source/img/</strong> 下。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Link to your avatar | 填写头像地址 &lt;theme-name&gt;/source/img</div><div class="line">avatar: /img/avatar.png</div></pre></td></tr></table></figure></p>
<h2 id="自定义站点小图标"><a href="#自定义站点小图标" class="headerlink" title="自定义站点小图标"></a>自定义站点小图标</h2><p>　　网址前面的图标，跟自定义头像相似。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Small icon of Your site | 站点小图标地址 &lt;theme-name&gt;/source/img</div><div class="line">favicon: /img/favicon.ico</div></pre></td></tr></table></figure></p>
<h2 id="自定义菜单栏"><a href="#自定义菜单栏" class="headerlink" title="自定义菜单栏"></a>自定义菜单栏</h2><blockquote>
<p>自定义menu<br>　自定义站点侧边栏中间的菜单项<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># &gt;&gt;&gt; Basic Setup | 基础设置 &lt;&lt;&lt;</div><div class="line"> </div><div class="line"># Header | 主菜单</div><div class="line">## About Page: `hexo <span class="keyword">new</span> page about`</div><div class="line">## Tags Cloud Page: `hexo <span class="keyword">new</span> page tags`</div><div class="line"># Header</div><div class="line">menu: </div><div class="line">  Home: /</div><div class="line">  All-lists: /archives</div><div class="line">  Contact: /Shengjie</div><div class="line">  About: /about</div></pre></td></tr></table></figure></p>
</blockquote>
<p>　</p>
<blockquote>
<p>自定义subnav<br>　自定义菜单项下方的图标导航栏，这里是想添加 <strong>开源中国</strong> 的一个图标快捷方式，相关代码在 <strong>…/source/css/_partial/customise/social-icon.styl</strong> 中。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">img-logo = "新浪微博" #ecc260 80,</div><div class="line">            "知乎" #0078d8 90,</div><div class="line">            "豆瓣" #06c611 88,</div><div class="line">            # add "OSChina"</div><div class="line">            "OSChina" white 88,</div><div class="line">            V2EX #e4cdb4 78,</div><div class="line">            TiddlyWiki #6283dd 82,</div><div class="line">            "简书" #e99888 82,</div><div class="line">            SegmentFault #018f56 80,</div><div class="line">            "网易云音乐" #e51e02 80,</div><div class="line">            "虾米音乐" #ff6a00 82,</div><div class="line">            CSDN red 82,</div><div class="line">            "博客园" #217ed4 95,</div><div class="line">            Plunker black 90,</div><div class="line">            LOFTER #316061 75,</div><div class="line">            Coding white 88,</div><div class="line">            bilibili #f589a0 100,</div><div class="line">            AcFun #fbc054 90,</div><div class="line">            niconico white 70,</div><div class="line">            Quora #b92b27 103</div><div class="line"> </div><div class="line">for i in img-logo</div><div class="line">    .&#123;i[0]&#125;</div><div class="line">        background url(root-url + '/img/' + i[0] + '.png') center no-repeat i[1]</div><div class="line">        background-size i[2] + "%"</div><div class="line">.GitHub</div><div class="line">    background url(//cdn.bootcss.com/logos/0.2.0/github-octocat.svg) no-repeat white</div><div class="line">    background-size 90%</div><div class="line">    background-position 50% 100%</div></pre></td></tr></table></figure></p>
</blockquote>
<p>　　添加 <strong>“OSChina” white 88,</strong> 一项，从下面的语句我们也可以看出，”OSChina”、white、88 分别对应于 i[0]、i[1]、i[2]，也就是图片名称、背景色、图片大小。所以需要将 <strong>OSChina</strong> 对应项的图片，即开源中国的Logo存放到 <strong>yelee/source/img/</strong> 下，并命名为 <strong>OSChina.png</strong>。<br>　　可以看出，<strong>Github</strong> 是独立开来的。此外，通过 <strong>.</strong> 操作符我们可以看出，这些都是 <strong>css</strong> 中定义的 <strong>类选择器</strong>。<br>　　完成这些之后，你就可以在主题配置文件中启动该图标导航栏。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Social info. Bar | 社交信息展示</div><div class="line">## Keep <span class="string">"mailto:"</span> in Email | 设置 Email 时保留 <span class="string">"mailto:"</span></div><div class="line">## Encrypt email 加密邮件地址 http:<span class="comment">//ctrlq.org/encode/</span></div><div class="line">## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件</div><div class="line">#<span class="meta"># https:<span class="comment">//github.com/hexojs/hexo-generator-feed</span></span></div><div class="line"> </div><div class="line">subnav:</div><div class="line">  新浪微博: <span class="string">"http://weibo.com/u/2911566017?refer_flag=1001030201_"</span></div><div class="line">  GitHub: <span class="string">"https://github.com/Durant35"</span></div><div class="line">  <span class="meta"># self-defined OSChina</span></div><div class="line">  OSChina: <span class="string">"https://my.oschina.net/love7zx/"</span></div></pre></td></tr></table></figure></p>
<h2 id="添加多说评论栏"><a href="#添加多说评论栏" class="headerlink" title="添加多说评论栏"></a>添加多说评论栏</h2><p>　　<strong>Yelee</strong> 添加多说评论栏是我遇到的自适配最简单的一个主题。此处默认你已经有多说账号了，没有的话，请到<a href="http://duoshuo.com/">多说官网</a>注册。添加多说评论栏只需要修改主题配置文件 <strong>Conments 评论系统</strong> 中的 <strong>duoshuo:</strong> 选项即可，<strong>&lt;your-duoshuo-shortname&gt;</strong> 既是多说后台管理的 id 名。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="section"># &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;</span></div><div class="line"><span class="section"># Chose ONE as your comment system and keep others disable.</span></div><div class="line"><span class="section"># 选一个作为网站评论系统，其他保持禁用。</span></div><div class="line"> </div><div class="line">preload_comment: true</div><div class="line"><span class="section">## false: 当点击评论条等区域时再加载评论模块</span></div><div class="line"><span class="section">## false: load comment's section until u click/hover on the bar/icon</span></div><div class="line"> </div><div class="line">show_count: true</div><div class="line"><span class="section">## 是否在主页文章标题旁显示评论数（多说、Disqus）</span></div><div class="line"><span class="section">## Add comment count after article title</span></div><div class="line"> </div><div class="line">disqus: </div><div class="line">  #on: true</div><div class="line">  shortname: </div><div class="line">  # https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-</div><div class="line">  # It is unnecessary to enable disqus here if </div><div class="line">  # you have set "disqus<span class="emphasis">_shortname" in your site's "_</span>config.yml" </div><div class="line"> </div><div class="line">duoshuo: </div><div class="line">  on: true</div><div class="line">  domain: <span class="xml"><span class="tag">&lt;<span class="name">your-duoshuo-shortname</span>&gt;</span></span></div><div class="line">  # 是否开启多说评论，http://duoshuo.com/create-site/</div><div class="line">  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分</div><div class="line">  # http://<span class="xml"><span class="tag">&lt;<span class="name">要填的部分</span>&gt;</span></span>.duoshuo.com (domain只填上<span class="xml"><span class="tag">&lt;&gt;</span></span>里的内容，不要填整个网址)</div></pre></td></tr></table></figure></p>
<h2 id="从繁体中文到简体中文"><a href="#从繁体中文到简体中文" class="headerlink" title="从繁体中文到简体中文"></a>从繁体中文到简体中文</h2><p>　　默认应该是繁体中文，你可以在站点配置文件(不是主题配置文件！！)中设置，站点配置位于 <strong>hexo</strong> 根目录下。对应的 <strong>language:</strong> 选项位于 <strong>…/yelee/languages/</strong> 下，都是一些 <strong>.yml</strong> 文件。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#language: zh-CN</span></div><div class="line"># Specifical language <span class="keyword">for</span> theme Yelee</div><div class="line">language: zh-Hans</div></pre></td></tr></table></figure></p>
<h2 id="自带统计特性"><a href="#自带统计特性" class="headerlink" title="自带统计特性"></a>自带统计特性</h2><blockquote>
<p>站点访问量统计<br>页面访问量统计</p>
</blockquote>
<h2 id="自定义阅读全文按钮显示内容"><a href="#自定义阅读全文按钮显示内容" class="headerlink" title="自定义阅读全文按钮显示内容"></a>自定义阅读全文按钮显示内容</h2><p>　　<strong>…/yelee/languages/&lt;your-language&gt;.yml</strong>，<strong>…/yelee/languages/</strong> 下是一些语言包对应的 <strong>.yml</strong> 文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># zh-Hans: Chinese (Simplified) 大陆简体</span></div><div class="line">index:</div><div class="line">  menu: 菜单</div><div class="line">  tags: 标签</div><div class="line">  friends: 友情链接</div><div class="line">  about: 关于我</div><div class="line">  more: more</div><div class="line">  copy: 复制</div></pre></td></tr></table></figure></p>
<h2 id="自定义分享栏"><a href="#自定义分享栏" class="headerlink" title="自定义分享栏"></a>自定义分享栏</h2><p>　　默认主题中每篇文章下方都自带分享栏，包括常见的分享到微博、QQ等，相关代码位于 <strong>…/layout/_partial/post/share.ejs</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"share"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">theme.share.baidu</span>) &#123; %&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bdsharebuttonbox"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</div><div class="line">            &lt;a href="#" class="fa fa-twitter bds_twi" data-cmd="twi" title="分享到推特"&gt;&lt;/a&gt;</div><div class="line">        --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-weibo bds_tsina"</span> <span class="attr">data-cmd</span>=<span class="string">"tsina"</span> <span class="attr">title</span>=<span class="string">"分享到新浪微博"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-qq bds_sqq"</span> <span class="attr">data-cmd</span>=<span class="string">"sqq"</span> <span class="attr">title</span>=<span class="string">"分享给 QQ 好友"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-weixin bds_weixin"</span> <span class="attr">data-cmd</span>=<span class="string">"weixin"</span> <span class="attr">title</span>=<span class="string">"生成文章二维码"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-files-o bds_copy"</span> <span class="attr">data-cmd</span>=<span class="string">"copy"</span> <span class="attr">title</span>=<span class="string">"复制网址"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</div><div class="line">            &lt;a href="#" class="fa fa fa-envelope-o bds_mail" data-cmd="mail" title="通过邮件分享"&gt;&lt;/a&gt;</div><div class="line">        --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"fa fa-share-alt bds_more"</span> <span class="attr">data-cmd</span>=<span class="string">"more"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="自定义版权信息"><a href="#自定义版权信息" class="headerlink" title="自定义版权信息"></a>自定义版权信息</h2><blockquote>
<p>References</p>
<ul>
<li><a href="http://moxfive.xyz/2016/01/10/hexo-post-version-control/">关联 GitHub, 让 Hexo 支持查看文章更新历史</a></li>
</ul>
</blockquote>
<p>　　默认主题每篇文章末尾都会有版权信息，相关代码在 <strong>…/yelee/layout/_partial/post/nav.ejs</strong>。<br>　　　a. 去除最末尾的许可协议说明<br>　　　b. 将文章作者信息与 <strong>.md</strong> 博文源文件关联<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"copyright"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.title</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- modify author information</div><div class="line">    &lt;p&gt;&lt;span&gt;&lt;%= __('copyright_info.author') %&gt;:...</div><div class="line">    --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.author</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=post.author%</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.date</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.date.format</span>("<span class="attr">YYYY-MM-DD</span>, <span class="attr">HH:mm:ss</span>") %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.updated</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">post.updated.format</span>("<span class="attr">YYYY-MM-DD</span>, <span class="attr">HH:mm:ss</span>") %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>...</div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.copy-path'</span>); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"> </div><div class="line">    <span class="comment">&lt;!-- not to show license information</div><div class="line">    &lt;p&gt;</div><div class="line">        &lt;span&gt;...</div><div class="line">    &lt;/p&gt;</div><div class="line">    --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>post.author</strong> 指代每篇 <strong>.md</strong> 文章开头的参数声明。<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: hexo博客主题Yelee迁移笔记</div><div class="line">date: 2016-09-16 14:54:28</div><div class="line">categories: </div><div class="line"><span class="bullet">- </span>技术留档</div><div class="line"><span class="bullet">- </span>Hexo</div><div class="line">tags: Hexo</div><div class="line"><span class="section">author: &lt;author-name&gt;</div><div class="line">---</span></div></pre></td></tr></table></figure></p>
<h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类&amp;标签"></a>分类&amp;标签</h2><blockquote>
<p>References</p>
<ul>
<li><a href="http://moxfive.xyz/2015/10/25/hexo-tag-cloud/">《让 Hexo 自动生成 Tag Cloud 标签云页面》</a></li>
</ul>
</blockquote>
<p>　效果: <a href="http://durant35.github.io/tags">http://durant35.github.io/tags</a><br>　　1. 使用 Hexo 命令新建一个名为 tags 的页面<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure></p>
<p>　　2. 修改该页面 <strong><your-hexo-ws>/source/tags/index.md</strong><br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: 分类&amp;标签</div><div class="line"><span class="section">date: 2016-09-17 15:43:55</div><div class="line">---</span></div></pre></td></tr></table></figure></p>
<p>　　3. 分类&amp;标签页面相关的代码有 <strong>…/yelee/layout/_partial/page.ejs</strong>，通过 <strong>partial()</strong> 函数引入 <strong>…/yelee/layout/_partial/tag-cloud-page.ejs</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">&lt;!-- 匹配页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.path</span> === <span class="string">"tags/index.html"</span>)&#123; %&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Tag Cloud Page --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">tag-cloud-page</span>') %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　 <strong>tag-cloud-page.ejs</strong> 代码如下，主要改变是根据需求调整分类的层数。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 显示分类 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">list_categories</span>(&#123;<span class="attr">depth:</span> <span class="attr">0</span>&#125;) %&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 显示标签 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tags"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">tagcloud</span>(&#123;</div><div class="line">        <span class="attr">min_font:</span> <span class="attr">16</span>, </div><div class="line">        <span class="attr">max_font:</span> <span class="attr">35</span>, </div><div class="line">        <span class="attr">amount:</span> <span class="attr">999</span>, </div><div class="line">        <span class="attr">color:</span> <span class="attr">true</span>, </div><div class="line">        <span class="attr">start_color:</span> '<span class="attr">gray</span>', </div><div class="line">        <span class="attr">end_color:</span> '<span class="attr">black</span>',</div><div class="line">    &#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></div><div class="line">    .category-list li&#123;</div><div class="line">        display: inline-block;</div><div class="line">        margin: 0 1em .5em 0;</div><div class="line">        padding: 4px;</div><div class="line">        border: 1px solid lightgray;</div><div class="line">        font-size: 1.2rem;</div><div class="line">    &#125;</div><div class="line">    .category-list a &#123; color: gray; &#125;</div><div class="line">    .category-list-item:hover a &#123;</div><div class="line">        color: gray;</div><div class="line">        text-decoration: none;</div><div class="line">    &#125;</div><div class="line">    .category-list-count &#123;</div><div class="line">        margin-left: 2px;</div><div class="line">        font-size: .9rem;</div><div class="line">    &#125;</div><div class="line">    .article-entry ul li:before&#123; display: none; &#125;</div><div class="line">    .article-inner &#123; text-align: center; &#125;</div><div class="line">    .tags &#123;</div><div class="line">        max-width: 42em;</div><div class="line">        margin: 2em auto;</div><div class="line">        margin-top: 0em;</div><div class="line">    &#125;</div><div class="line">    .tags a &#123;</div><div class="line">        margin-right: 1em;</div><div class="line">        line-height: 65px;</div><div class="line">        border-bottom: 1px solid gray;</div><div class="line">        white-space: nowrap;</div><div class="line">        transition: border-bottom .5s;</div><div class="line">    &#125;</div><div class="line">    .tags a:hover &#123;</div><div class="line">        border-bottom: 3px dotted gray;</div><div class="line">        text-decoration: none;</div><div class="line">    &#125;</div><div class="line">    #count &gt; span &#123;</div><div class="line">        margin: auto .2em;</div><div class="line">        font-weight: bold;</div><div class="line">    &#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Count tags and categories --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line">    $(<span class="string">'#count'</span>).appendTo(<span class="string">'.count'</span>);</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>list_categories()</strong> 和 <strong>tagcloud()</strong> 均为 <strong>hexo</strong> 的 API，可以参考这里 <a href="https://hexo.io/zh-cn/docs/helpers.html">API|hexo</a></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dumpbin 指南]]></title>
      <url>/2016/09/16/programPearls_dumpbin%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>近几个月的 <strong>Windows</strong> 高空作业让我发现，<strong>dumpbin</strong> 这个小工具往往能解决一些关键问题。目前发现并且使用过的这个小家伙的功能有:</p>
<ul>
<li>查看 DLL 动态链接库导入导出信息，解决动态链接库导出和可执行程序引用对接问题、程序缺失库问题</li>
<li>查看可执行程序的依赖库信息，解决各种程序运行时报错</li>
<li>查看程序、库位数信息，找到库引用位数不匹配等尴尬问题</li>
</ul>
</blockquote>
<p>　下面就来快速学习一下，怎么把这个小家伙用起来。<br><a id="more"></a></p>
<h2 id="配置-path"><a href="#配置-path" class="headerlink" title="配置 path"></a>配置 path</h2><p>　首先，<strong>DUMPBIN.EXE</strong> 程序可以在 <strong><your-VS>/VC/bin/</strong> 目录下找到(32位系统)，该路径下的 amd64 则用于64位系统，参考<a href="">从 VS 的 dumpbin 目录谈 x86、xi386、x86-64、amd64…</a>；对于 <strong>VC++6.0</strong> 则可以在安装目录的 <strong>/Bin/</strong> 目录下(中文版则是<strong>/VC98/Bin/</strong>) 找到。为了在 <strong>cmd命令行</strong> 里面方便使用，我们将其所在的全局路径加入到环境变量 <strong>Path</strong> 中，如下图。<br>    <center><img src="/img/RFID/01-01.png" width="1024px"/></center><br>　右键计算机，属性<strong>→</strong>高级系统配置<strong>→</strong>环境变量<strong>→</strong>双击系统变量中的 <strong>Path→</strong> 在变量值后面加上 <strong>DUMPBIN.EXE</strong> 程序所在全局路径。<strong>(<font color="red">注意：添加路径前需要有”；”隔开，因为变量值是通过”；”分隔的</font>)</strong>。</p>
<h2 id="查看-DLL-EXE-导入导出信息"><a href="#查看-DLL-EXE-导入导出信息" class="headerlink" title="查看 DLL/EXE 导入导出信息"></a>查看 <strong>DLL/EXE</strong> 导入导出信息</h2><p>　接下来我们就可以使用这个工具查看一个 <strong>DLL</strong> 提供的导出函数，(如下左图)。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dumpbin.exe -exports xxx.dll</div><div class="line">dumpbin.exe -exports xxx.exe</div></pre></td></tr></table></figure></p>
<p>　其中要注意的 <strong>“ordinal列”</strong> 列出的信息是导出函数的序号；<strong>“RVA列”</strong> 是一些地址值，也就是导出函数在 <strong>DLL</strong> 模块中的位置，通过该地址值可以在 <strong>DLL</strong> 中找到相应的函数；<strong>“name列”</strong> 是导出函数的名称，使用该 <strong>DLL</strong> 的程序通过该名称找到所需的 <strong>DLL</strong> 导出函数。<br>    <center><img src="/img/RFID/01-02.png" width="1024px"/></center><br>　还可以使用这个工具查看一个 <strong>可执行模块依赖的动态链接库信息</strong> 以及该 <strong>动态链接库中被可执行模块调用的函数</strong><br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dumpbin.exe -imports xxx.dll</div><div class="line">dumpbin.exe -imports xxx.exe</div></pre></td></tr></table></figure></p>
<p>　<strong>这里需要注意的是：一个可执行模块依赖的库函数名称必须与该动态链接库导出的函数名字相一致，因为可执行模块使用依赖的库函数名称来调用DLL中的函数，只有在二者相一致的情况下，可执行模块才能找到所需的DLL导出函数</strong>。因此客户端程序引用的函数符号名必须与 <strong>DLL</strong> 中的导出函数名称一致才能成功调用！</p>
<h2 id="查看-DLL-EXE-位数信息"><a href="#查看-DLL-EXE-位数信息" class="headerlink" title="查看 DLL/EXE 位数信息"></a>查看 <strong>DLL/EXE</strong> 位数信息</h2><p>　经常犯的一个错误是，构建运行的可执行程序，往往与系统位数保持一致，而现在系统通常都是 64位的；然而该可执行程序运行时需要的动态链接库却错误地绑定成 32位的依赖库了，这其实就是报错 <strong>入口不一致…</strong> 的主要原因。 我们可以通过 <strong>dumpbin</strong> 来查看我们生成的可执行程序的是多少位的，同时，使用上面介绍的 <strong>dumpbin.exe -imports xxx.exe</strong> 查看该可执行程序的依赖库信息，然后检查相关依赖库的位数是否有偏差。<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dumpbin /headers  XXX.exe </div><div class="line">dumpbin /headers  XXX.dll</div></pre></td></tr></table></figure></p>
<p>　执行上述命令会打印出一些信息，在信息的最开始 <strong>FILE HEADER VALUES</strong> 字段中有 <strong>machine</strong> 字样，假如 machine 是 <font color="green"><strong>x64</strong></font> 或者 <font color="green"><strong>Unknown</strong></font> 说明该 dll/exe 是 64位的；<font color="green"><strong>i386</strong></font> 字样则通常是 32位的。</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> 链接 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dumpbin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Win/Linux下操作ini配置文件(DIY)]]></title>
      <url>/2016/09/08/programPearls_Win$Linux%E4%B8%8B%E6%93%8D%E4%BD%9Cini%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6(DIY)/</url>
      <content type="html"><![CDATA[<p>　　待续…</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文件操作 </tag>
            
            <tag> ini </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Win/Linux下基本文件操作]]></title>
      <url>/2016/09/08/programPearls_Win$Linux%E4%B8%8B%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>　　待续…</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文件操作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Win/Linux下操作ini配置文件(API)]]></title>
      <url>/2016/09/08/programPearls_Win$Linux%20Operate%20ini%20configuration%20files(API)/</url>
      <content type="html"><![CDATA[<p>　我们的程序常常需要从配置文件中获取参数，一方面，用户关于程序的自定义配置往往就存储在配置文件中，自定义配置的适配与保存就转化为对配置文件的读写操作；另一方面，也是本文编写的由来，那就是将有关程序中核心算法的参数提取到配置文件，方便算法参数的调试(只要调整配置文件，无需修改程序源码，更无需重新构建)。<br>　<strong>.ini</strong> 文件作为典型的配置文件，其文件存储的内容基本上是一些参数的 <strong>Key-Value</strong> 形式，此外就是一些所谓的属性段，多个对同一方面参数进行描述的 <strong>键值对</strong> 可以归纳为一个 <strong>Section</strong>。<br>　下面，是 <strong>Win/Linux</strong> 下如何通过不同的 API 实现对 <strong>*.ini</strong> 配置文件读写操作的整理。<br><a id="more"></a></p>
<h3 id="Linux-using-Glib-API"><a href="#Linux-using-Glib-API" class="headerlink" title="Linux, using Glib API"></a>Linux, using Glib API</h3><blockquote>
<p>Reference: </p>
<ul>
<li><a href="https://developer.gnome.org/glib/stable/glib-Key-value-file-parser.html">Key-value file parser: Key-value file parser — parses .ini-like config files</a></li>
</ul>
</blockquote>
<p>　Linux 下我们通过使用 <strong>Glib API</strong> 操作 <strong>.ini</strong> 文件，具体流程包括安装 <strong>Glib</strong> 库，加载 <strong>ini</strong> 文件，通过 <strong>Key</strong> 读写键值对，最后再卸载文件。</p>
<p><font color="FFAAAA"><strong>1. </strong></font>Configure Runtime Environment<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx@...$ sudo apt-get install libglib2.0-dev</div></pre></td></tr></table></figure></p>
<p>　Install <strong>glib-2.0</strong> and <font color="blue">add it as a link library</font> for build option.</p>
<p><font color="FFAAAA"><strong>2. </strong></font>Create File Handler</p>
<blockquote>
<p>APIs:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">GKeyFile* <span class="title">g_key_file_new</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">gboolean <span class="title">g_key_file_load_from_file</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                        <span class="keyword">const</span> gchar *file,</div><div class="line">                        GKeyFileFlags flags,</div><div class="line">                        GError **error)</span></span>;</div><div class="line">flags: G_KEY_FILE_NONE </div><div class="line">     | G_KEY_FILE_KEEP_COMMENTS </div><div class="line">     | G_KEY_FILE_KEEP_TRANSLATIONS</div></pre></td></tr></table></figure></p>
<p>Examples:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>		<span class="comment">// for fprintf&amp;stderr</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>		<span class="comment">// for EXIT_FAILURE</span></span></div><div class="line"> </div><div class="line"><span class="comment">// get Gkeyfile</span></div><div class="line">GKeyFile* viewer_ini = g_key_file_new();</div><div class="line">GError **error = <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line"><span class="keyword">if</span> (!g_key_file_load_from_file(viewer_ini, <span class="string">"velodyne.ini"</span>, </div><div class="line">                			G_KEY_FILE_NONE, error))&#123;</div><div class="line">    <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"Could not read config file\n"</span>);</div><div class="line">    <span class="keyword">return</span> EXIT_FAILURE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><font color="FFAAAA"><strong>3. </strong></font>Read/Write Parameters from/to File<br>　我们选用常用的数据类型，<strong>integer</strong>, <strong>double</strong>, <strong>string</strong>, <strong>boolean</strong>。</p>
<blockquote>
<p>APIs:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function">gint <span class="title">g_key_file_get_integer</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       GError **error)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_set_integer</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       gint value)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">gdouble <span class="title">g_key_file_get_double</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       GError **error)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_set_double</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       gdouble value)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">gchar* <span class="title">g_key_file_get_string</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       GError **error)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_set_string</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       <span class="keyword">const</span> gchar *<span class="built_in">string</span>)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">gboolean <span class="title">g_key_file_get_boolean</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       GError **error)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_set_boolean</span> <span class="params">(GKeyFile *key_file,</div><div class="line">                       <span class="keyword">const</span> gchar *group_name,</div><div class="line">                       <span class="keyword">const</span> gchar *key,</div><div class="line">                       gboolean value)</span></span>;</div></pre></td></tr></table></figure></p>
<p>Examples:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># velodyne.ini</span></div><div class="line"><span class="section">[CfgGlobal]</span></div><div class="line"><span class="attr">GroundZ</span>=-<span class="number">192</span></div><div class="line"><span class="attr">CarLength</span>=<span class="number">469</span></div><div class="line"><span class="attr">CarWidth</span>=<span class="number">185</span></div><div class="line"><span class="attr">CarHeight</span>=<span class="number">172</span></div><div class="line"><span class="attr">Threshold</span>=<span class="number">0.820000</span></div></pre></td></tr></table></figure></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// *.cpp</span></div><div class="line">cfg.cfgGlobal.GroundZ =</div><div class="line">    g_key_file_get_integer(viewer_ini, <span class="string">"CfgGlobal"</span>, <span class="string">"GroundZ"</span>, error);</div><div class="line">cfg.cfgGlobal.ThresholdMinRad =</div><div class="line">    g_key_file_get_double(viewer_ini, <span class="string">"CfgGlobal"</span>, <span class="string">"Threshold"</span>, error);</div><div class="line"> </div><div class="line">g_key_file_set_integer(viewer_ini, <span class="string">"CfgGlobal"</span>, <span class="string">"GroundZ"</span>, </div><div class="line">                                              cfg.cfgGlobal.GroundZ);</div><div class="line">g_key_file_set_double(viewer_ini, <span class="string">"CfgGlobal"</span>, <span class="string">"ThresholdMinRad"</span>, </div><div class="line">                                              cfg.cfgGlobal.Threshold);</div></pre></td></tr></table></figure>
</blockquote>
<p><font color="FFAAAA"><strong>4. </strong></font>Free File Handler</p>
<blockquote>
<p>API:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g_key_file_free</span> <span class="params">(GKeyFile *key_file)</span></span>;</div></pre></td></tr></table></figure></p>
<p>Example:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g_key_file_free (glib_keyfile);</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="Windows-using-Winbase-API"><a href="#Windows-using-Winbase-API" class="headerlink" title="Windows, using Winbase API"></a>Windows, using Winbase API</h3><p>　Windows 下我们使用 <strong>Winbase.h</strong> 提供的 API 操作 <strong>.ini</strong> 文件，与 Linux 下使用 <strong>Glib API</strong> 最大的不同是，不存在配置文件的加载，卸载流程，不过每次读写参数时都需要传递操作文件所需要的文件名；此外，支持的数据类型也比较少(似乎就只有 <strong>Int</strong> 和 <strong>String</strong>)，写操作更是只有 <strong>String</strong> 数据类型。<br>　下面是简单功能的基本实现。</p>
<blockquote>
<p>APIs:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function">UINT WINAPI <span class="title">GetPrivateProfileInt</span><span class="params">(</div><div class="line">  _In_ LPCTSTR lpAppName,</div><div class="line">  _In_ LPCTSTR lpKeyName,</div><div class="line">  _In_ INT     nDefault,</div><div class="line">  _In_ LPCTSTR lpFileName</div><div class="line">)</span></span>;</div><div class="line"><span class="function">DWORD WINAPI <span class="title">GetPrivateProfileString</span><span class="params">(</div><div class="line">  _In_  LPCTSTR lpAppName,</div><div class="line">  _In_  LPCTSTR lpKeyName,</div><div class="line">  _In_  LPCTSTR lpDefault,</div><div class="line">  _Out_ LPTSTR  lpReturnedString,</div><div class="line">  _In_  DWORD   nSize,</div><div class="line">  _In_  LPCTSTR lpFileName</div><div class="line">)</span></span>;</div><div class="line"> </div><div class="line"><span class="function">BOOL WINAPI <span class="title">WritePrivateProfileString</span><span class="params">(</div><div class="line">  _In_ LPCTSTR lpAppName,</div><div class="line">  _In_ LPCTSTR lpKeyName,</div><div class="line">  _In_ LPCTSTR lpString,</div><div class="line">  _In_ LPCTSTR lpFileName</div><div class="line">)</span></span>;</div></pre></td></tr></table></figure></p>
<p>Examples:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for GetPrivateProfileInt&amp;Get/WritePrivateProfileString</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winbase.h&gt;</span></span></div><div class="line"><span class="comment">// for _snprintf</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="comment">// for atof</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">char</span> buf[<span class="number">64</span>];</div><div class="line"><span class="keyword">char</span> defaultVal[<span class="number">64</span>];</div><div class="line"> </div><div class="line">cfg.cfgGlobal.GroundZ =</div><div class="line">        GetPrivateProfileInt(<span class="string">"CfgGlobal"</span>, <span class="string">"GroundZ"</span>, g_DefaultGlobalCfg.GroundZ, <span class="string">"velodyne.ini"</span>);</div><div class="line"> </div><div class="line">_snprintf(defaultVal, <span class="keyword">sizeof</span>(defaultVal), <span class="string">"%f"</span>, g_DefaultGlobalCfg.Threshold);</div><div class="line">GetPrivateProfileString(<span class="string">"CfgGlobal"</span>, <span class="string">"Threshold"</span>, defaultVal, buf, <span class="keyword">sizeof</span>(buf), <span class="string">"velodyne.ini"</span>);</div><div class="line">cfg.cfgGlobal.Threshold = (<span class="keyword">double</span>)atof(buf);</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">char</span> val[<span class="number">64</span>];</div><div class="line">_snprintf(val, <span class="keyword">sizeof</span>(val), <span class="string">"%d"</span>, cfg.cfgGlobal.GroundZ);</div><div class="line">WritePrivateProfileString(<span class="string">"CfgGlobal"</span>, <span class="string">"GroundZ"</span>, val, <span class="string">"velodyne.ini"</span>);</div><div class="line"> </div><div class="line">_snprintf(val, <span class="keyword">sizeof</span>(val), <span class="string">"%.6f"</span>, cfg.cfgGlobal.Threshold);</div><div class="line">WritePrivateProfileString(<span class="string">"CfgGlobal"</span>, <span class="string">"Threshold"</span>, val, <span class="string">"velodyne.ini"</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<p><font color="red"><strong>注意： </strong></font></p>
<blockquote>
<ul>
<li>GetPrivateProfileInt 和 GetPrivateProfileString 都需要传递缺省值，而且每一次都需要制定对应的配置文件；假如成功找到对应的参数键，返回对应的值，否则返回传进去的缺省值。</li>
<li>对于 <strong>Int</strong>，<strong>String</strong> 除外的数据类型，通过 <strong>GetPrivateProfileString</strong> 获取参数键对应的值，不过返回的值是参数值对应的字符串，需要再通过 <strong>atof</strong>，<strong>atoi</strong>，<strong>atol</strong> 转为对应的数据类型。</li>
<li>关于键值对保存到配置文件，只有 <strong>WritePrivateProfileString</strong> 这种字符串数据类型，需要通过 <strong>_snprintf</strong> 将要保存的参数数据类型转为字符串格式再进行保存。 <strong>_snprintf</strong> 的格式说明和 <strong>printf</strong> 基本相同。</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文件操作 </tag>
            
            <tag> ini </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 select 函数实现更为精确的延时]]></title>
      <url>/2016/09/08/programPearls_precise%20delay%20using%20select/</url>
      <content type="html"><![CDATA[<h3 id="select-初识"><a href="#select-初识" class="headerlink" title="select 初识"></a>select 初识</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(</div><div class="line">  _In_    <span class="keyword">int</span>                  nfds,         <span class="comment">// 忽略,仅是为了与Berkeley套接字兼容</span></div><div class="line">  _Inout_ fd_set               *readfds,     <span class="comment">// 指向一个套接字集合,用来检查其可读性</span></div><div class="line">  _Inout_ fd_set               *writefds,    <span class="comment">// 指向一个套接字集合,用来检查其可写性</span></div><div class="line">  _Inout_ fd_set               *exceptfds,   <span class="comment">// 指向一个套接字集合,用来检查错误</span></div><div class="line">  _In_    <span class="keyword">const</span> <span class="keyword">struct</span> timeval *timeout      <span class="comment">// 指定此函数等待的最长时间,如果为NULL,则最长时间为无限大</span></div><div class="line">)</span></span>;</div><div class="line"> </div><div class="line">返回值: </div><div class="line">  函数调用成功，返回发生网络事件的所有套接字数量的总和</div><div class="line">  如果超时返回<span class="number">0</span>，代表在描述词状态改变前已超过timeout时间;</div><div class="line">  当有错误发生时则返回SOCKET_ERROR(<span class="number">-1</span>).</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>select 包含三个 Socket 队列，分别代表： readfds，检查可读性，writefds，检查可写性，exceptfds，例外数据。</li>
<li>timeout 是 select 函数的返回时间。timeout 参数控制 select 完成的时间。若 <font color="blue">timeout 参数为空指针，则 select 将一直阻塞到有一个描述字满足条件</font>，否则的话，timeout 指向一个 timeval 结构，其中指定了 select 调用在返回前等待多长时间。如果 timeval 为 {0,0}，则 select 立即返回，这可用于探询所选套接口的状态，如果处于这种状态，则 select 调用可认为是非阻塞的，且一切适用于非阻塞调用的假设都适用于它。</li>
</ul>
<blockquote>
<p>Windows 下有关 <strong>select</strong> 函数使用的 APIs:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> timeval &#123;</div><div class="line">    <span class="keyword">long</span> tv_sec;  <span class="comment">// 秒</span></div><div class="line">    <span class="keyword">long</span> tv_usec; <span class="comment">// 微秒</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> fd_set &#123;</div><div class="line">    u_int fd_count;                 <span class="comment">// 下面数组的大小</span></div><div class="line">    SOCKET fd_array[FD_SETSIZE];    <span class="comment">// 套接字句柄数组</span></div><div class="line">&#125; fd_set;</div><div class="line"> </div><div class="line">FD_ZERO(*fd_set);       <span class="comment">// 初始化 fd_set 为空集合。集合在使用前应该总是清空</span></div><div class="line">FD_CLR(fd, *fd_set);    <span class="comment">// 从 fd_set 移除套接字 fd</span></div><div class="line">FD_ISSET(fd, *fd_set);  <span class="comment">// 检查 fd 是不是 fd_set 的成员，如果是返回 TRUE</span></div><div class="line">FD_SET(fd, *fd_set);    <span class="comment">// 添加套接字 fd 到集合 fd_set</span></div><div class="line"><span class="comment">/**************************************************************************/</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>　例如，我们想要检查一个套接字是否有数据需要(可以)接收，我们可以把套接字句柄加入可读性检查队列中，然后调用 select，如果，该套接字没有数据需要(可以)接收， select 函数会把该套接字从可读性检查队列中删除掉，所以我们只要检查该套接字句柄是否还存在于可读性队列中，就可以知道到底有没有数据需要(可以)接收了。<br>    <center><img src="/img/programPearls/socket/select_queue.png" /></center></p>
<h3 id="When-Readable-When-Writable"><a href="#When-Readable-When-Writable" class="headerlink" title="When Readable? When Writable?"></a>When Readable? When Writable?</h3><blockquote>
<p>下面是摘自 <strong>Microsoft</strong> 官网的 API<a href="https://msdn.microsoft.com/zh-cn/library/windows/desktop/ms740141(v=vs.85).aspx">[select function]</a> 说明</p>
<ul>
<li>The parameter readfds identifies the sockets that are to be checked for readability. </li>
</ul>
<p>　If the socket is currently in the listen state, it will be marked as readable if an incoming connection request has been received such that an accept is guaranteed to complete without blocking.<br>　<font color="blue">假如已调用了 listen，而且一个连接正在建立，那么 accept 函数调用会成功，accept 之前，用于监听的 socket 是可读的</font>。<br>　For other sockets, readability means that queued data is available for reading such that a call to recv, WSARecv, WSARecvFrom, or recvfrom is guaranteed not to block.<br>　<font color="blue">对于其他不是用于监听的 Socket，有数据可以读入，则是可读的</font>。</p>
<ul>
<li>The parameter writefds identifies the sockets that are to be checked for writability.<br>　If a socket is processing a connect call (nonblocking), a socket is writeable if the connection establishment successfully completes.<br>　<font color="blue">如果已完成了对一个非阻塞 connect 调用的处理，连接能够成功就是可写</font>。<br>　If the socket is not processing a connect call, writability means a send, sendto, or WSASendto are guaranteed to succeed.<br>　<font color="blue">对于其他不是调用 connect 的 Socket，可以发出数据就是可写的</font>。</li>
</ul>
</blockquote>
<p>　相信你看完官网的说明之后会对 <font color="blue">什么 Socket 可读？什么 Socket 可写</font> 更加捉摸不透(即使有注解)。下面是个人关于这方面的理解，其实所谓可读可写，可以借用 <strong>Linux 一切皆文件</strong> 的思想，任何一个 Socket，其实就是一个文件句柄，当连接建立起来，显然，关于连接两端的 Socket，都是可写的；收发两端均没有数据发送时，关于连接两端的 Socket，都是不可读的；当有一端有数据发送，另一端对应的 Socket 则是可读的。我们借用之前的 <strong>三次握手</strong> 建立连接流程图作进一步解释。<br>    <center><img src="/img/programPearls/socket/establish_3_way_handshake.jpg" /></center><br>　通过设置非阻塞属性，可以实现 <strong>connect</strong>，<strong>accept</strong> 非阻塞调用。上图的阻塞阶段可以理解为无需阻塞了，而变成类似下面的代码流程通过 <strong>select</strong> 函数检测连接状态变化。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>       rwCount;</div><div class="line">fd_set    rSSet, wSSet;</div><div class="line">SOCKET    listenSoc, connectSoc;</div><div class="line"> </div><div class="line"><span class="comment">// listenSoc: bind, listen</span></div><div class="line"> </div><div class="line"><span class="comment">// connectSoc: connect</span></div><div class="line"> </div><div class="line">rwCount = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (rwCount &lt; <span class="number">2</span>)&#123;</div><div class="line">  <span class="comment">// listen socket 可读，connect socket 可写 说明建立连接了</span></div><div class="line">  rdSSet.fd_count = <span class="number">1</span>;</div><div class="line">  rdSSet.fd_array[<span class="number">0</span>] = listenSoc;</div><div class="line">  wrSSet.fd_count = <span class="number">1</span>;</div><div class="line">  wrSSet.fd_array[<span class="number">0</span>] = connectSoc;</div><div class="line">  rwCount = select(<span class="number">0</span>, &amp;rdSSet, &amp;wrSSet, <span class="literal">NULL</span>, &amp;tv);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// listenSoc: accept</span></div></pre></td></tr></table></figure></p>
<p>　在非阻塞的状态下，Server 依次通过 <strong>bind</strong>，<strong>listen</strong> 创建队列，监听客户端的连接。Client 通过 <strong>connect</strong> 与 Server 建立连接，并获得该连接对应 Socket 句柄；Server 端的监听队列则保留了与该连接对应的 Socket，通过 <strong>accept</strong> 获取该连接对应的 Socket 句柄。在此之后，Client，Server 两端便可通过与建立的连接对应的 Socket 实现通讯。</p>
<blockquote>
<p><font color="red">总结:</font></p>
<ul>
<li>通过 select 模式，实现了监听 socket 的 accept 和客户端的 read 之间，以及各个客户端之间的 read，可以不用一直阻塞在那，而是在有相应事件的时候再进行阻塞处理，把 accept 和 read 两个长阻塞转化为 select 一个长阻塞。</li>
<li>使用 select 的好处是程序能够在单个线程内同时处理多个套接字连接，这避免了阻塞模式下的线程膨胀问题。</li>
</ul>
</blockquote>
<h3 id="Using-Select-for-Delay"><a href="#Using-Select-for-Delay" class="headerlink" title="Using Select for Delay"></a>Using Select for Delay</h3><p>　从上面的描述中我们可以看到，当 <strong>select</strong> 检测的 socket 状态没有发生改变时，假如设置了 timeout 时间，则会一直阻塞直到 timeout 时间到。利用 <strong>select</strong> 实现 delay 正是利用这样的原理。不难想象，我们需要先创建一些 socket，然后让用于实现 delay 的 select 检测 socket 处于某种状态(不可读或者不可写)，然后通过 select 去检测该不可达状态，最终 select 超时来实现准确的 delay。<br>　下面通过我们项目中一个实际应用 <strong>Velodyne_player</strong> 作进一步说明。<br>    <center><img src="/img/programPearls/socket/Velodyne_player.png" width="520px"/></center></p>
<blockquote>
<ul>
<li><strong>Velodyne_player</strong> 是一个 <strong>.pcap</strong> 文件回播程序，实现的功能是，32线 <strong>Velodyne-HDL-32E</strong> 激光雷达采集的数据是 <strong>UDP</strong> 的数据包，通过 <strong>.pcap</strong> 文件保存；在日后的线下算法调试中通过 <strong>Velodyne_player</strong> 进行回播，解析采集的 <strong>.pcap</strong> 文件，然后通过 <strong>UDP</strong> 的方式发送，模拟 <strong>Velodyne-HDL-32E</strong> 激光雷达数据采集过程。</li>
<li><strong>.pcap</strong> 文件中每一个数据包均带有时间戳，数据按帧(激光雷达一周扫描的数据为一帧)播放，所以可以获取每一帧的起始时间戳，进而获取每一帧的时间间隔。<strong>Velodyne_player</strong> 中我们通过计算当前帧与起始帧的时间间隔，然后利用系统时间，将其转化为系统绝对时间。接下来，问题就便成同步当前机器时间与播放帧系统绝对时间：<br>　　1). 当前帧绝对时间滞后于机器时间，将当前帧数据立即发送<br>　　2). 当前帧绝对时间超前于机器时间，通过 select 延迟超前的时间，再将当前帧数据发送出去</li>
</ul>
</blockquote>
<p>　<font color="#FF8888">1.</font> 首先，需要创建用于 <strong>select</strong> 检测的，我们可以判断所处状态的 socket。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// include needed MFC library hearder files</span></div><div class="line"><span class="comment">// ...</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span>   <span class="comment">// for mostly socket operation</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glib.h&gt;</span>		<span class="comment">// for g_get_current_time</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>	ARBITRARY_START_PORT	11000</span></div><div class="line"> </div><div class="line"><span class="keyword">static</span> LONG	LastSocket = ARBITRARY_START_PORT;</div><div class="line"> </div><div class="line"><span class="comment">/**</div><div class="line"> * Debug function: message box for print tempory data</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printFunc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* info, <span class="keyword">int</span> status)</span></span>&#123;</div><div class="line">  CString tmp = <span class="string">" = "</span>;</div><div class="line">  CString str;</div><div class="line">  str.Format(<span class="string">"%d"</span>, status);</div><div class="line">  MessageBox(<span class="literal">NULL</span>, info + tmp + str, <span class="string">""</span>, <span class="literal">NULL</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * 静态函数会被自动分配在一个一直使用的存储区，直到退出应用程序实例，避免了调用函数时压栈出栈，速度快很多</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcm_internal_pipe_create</span><span class="params">(<span class="keyword">int</span> filedes[<span class="number">2</span>])</span></span>&#123;</div><div class="line">  <span class="keyword">int</span>             status, SocOpt, rwCount, nPort;</div><div class="line">  <span class="keyword">short</span>           Port;</div><div class="line">  <span class="comment">// readability&amp;writability check socket set</span></div><div class="line">  fd_set          rdSSet, wrSSet;</div><div class="line">  SOCKET          listenSoc, acceptSoc, connectSoc;</div><div class="line">  sockaddr_in     listen_addr, connect_addr;</div><div class="line">  timeval         tv;</div><div class="line">  <span class="comment">/*</div><div class="line">   * listenSoc: 服务器端的socket</div><div class="line">   * connectSoc: 客户端的socket</div><div class="line">   */</span></div><div class="line">  listenSoc = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line">  connectSoc = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line"> </div><div class="line">  listen_addr.sin_family = AF_INET;</div><div class="line">  listen_addr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</div><div class="line">  <span class="comment">/*</div><div class="line">   * This loop ensures that we pick up an UNUSED port. If anything else used this port,</div><div class="line">   *  the entire lcm notification system melts down. The assumption is that we can't bind</div><div class="line">   *  to an address in use once the SO_EXCLUSIVEADDRUSE has been set. If this isn't true, </div><div class="line">   *  another method will need to be implemented.</div><div class="line">   */</span></div><div class="line">  <span class="keyword">do</span>&#123;</div><div class="line">    nPort = InterlockedIncrement(&amp;LastSocket);      <span class="comment">// Make sure we're using unique port</span></div><div class="line">    <span class="keyword">if</span> (nPort &gt; <span class="number">65500</span>)&#123;                             <span class="comment">// Wrapping, reset the port #</span></div><div class="line">      InterlockedCompareExchange(&amp;LastSocket, ARBITRARY_START_PORT, nPort);</div><div class="line">    &#125;</div><div class="line">    Port = (<span class="keyword">short</span>)nPort;</div><div class="line">    listen_addr.sin_port = htons(Port);</div><div class="line"></div><div class="line">    SocOpt = <span class="number">1</span>;</div><div class="line">    status = setsockopt(listenSoc, SOL_SOCKET, SO_EXCLUSIVEADDRUSE, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;SocOpt, <span class="keyword">sizeof</span>(SocOpt));</div><div class="line">    <span class="keyword">if</span> (status)</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    status = bind(listenSoc, (LPSOCKADDR)&amp;listen_addr, <span class="keyword">sizeof</span>(listen_addr));</div><div class="line">  &#125; <span class="keyword">while</span> (status != <span class="number">0</span>);</div><div class="line">  <span class="comment">/*</div><div class="line">   * 1. 非阻塞方式连接</div><div class="line">   *   设置非阻塞方式连接(http://blog.csdn.net/ludw508/article/details/8565203)</div><div class="line">   *     对于阻塞的套接字：0表示正确，SOCKET_ERROR表示错误</div><div class="line">   *     对于非阻塞套接字，不能立刻判断连接是否完成。函数会返回SOCKET_ERROR，但这并不表示出错</div><div class="line">   * 2. 请求队列只能允许一个客户端请求</div><div class="line">   */</span></div><div class="line">  SocOpt = <span class="number">1</span>;</div><div class="line">  status = ioctlsocket(listenSoc, FIONBIO, (u_long *)&amp;SocOpt);</div><div class="line">  status = listen(listenSoc, <span class="number">1</span>);</div><div class="line"> </div><div class="line">  connect_addr.sin_family = AF_INET;</div><div class="line">  connect_addr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</div><div class="line">  connect_addr.sin_port = htons(Port);</div><div class="line">  </div><div class="line">  SocOpt = <span class="number">1</span>;</div><div class="line">  status = ioctlsocket(connectSoc, FIONBIO, (u_long *)&amp;SocOpt);</div><div class="line">  <span class="keyword">if</span> (SOCKET_ERROR == status)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">  status = connect(connectSoc, (LPSOCKADDR)&amp;connect_addr, <span class="keyword">sizeof</span>(connect_addr));</div><div class="line"></div><div class="line">  <span class="comment">/**</div><div class="line">   * 使用 select 函数来决定连接请求的完成，通过查看套接字是否可写</div><div class="line">   */</span></div><div class="line">  rwCount = <span class="number">0</span>;</div><div class="line">  tv.tv_sec = <span class="number">0</span>;</div><div class="line">  tv.tv_usec = <span class="number">20</span> * <span class="number">1000</span>;</div><div class="line">  <span class="keyword">while</span> (rwCount &lt; <span class="number">2</span>)&#123;</div><div class="line">    rdSSet.fd_count = <span class="number">1</span>;</div><div class="line">    rdSSet.fd_array[<span class="number">0</span>] = connectSoc;</div><div class="line">    wrSSet.fd_count = <span class="number">1</span>;</div><div class="line">    wrSSet.fd_array[<span class="number">0</span>] = listenSoc;</div><div class="line">    rwCount = select(<span class="number">0</span>, &amp;wrSSet, &amp;rdSSet, <span class="literal">NULL</span>, &amp;tv);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __TEST__</span></div><div class="line">    printFunc(<span class="string">"rwCount ="</span>, rwCount);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Both sockets are ready now to complete the connection.</span></div><div class="line"> </div><div class="line">  <span class="keyword">int</span> addr_len = <span class="keyword">sizeof</span>(listen_addr);</div><div class="line">  acceptSoc = accept(listenSoc, (LPSOCKADDR)&amp;listen_addr, &amp;addr_len);</div><div class="line"> </div><div class="line">  <span class="comment">// Restore the sockets to blocking (default behavior).</span></div><div class="line">  SocOpt = <span class="number">0</span>;</div><div class="line">  status = ioctlsocket(connectSoc, FIONBIO, (u_long *)&amp;SocOpt);</div><div class="line">  status = ioctlsocket(acceptSoc, FIONBIO, (u_long *)&amp;SocOpt);</div><div class="line"> </div><div class="line">  filedes[<span class="number">0</span>] = (<span class="keyword">int</span>)connectSoc;</div><div class="line">  filedes[<span class="number">1</span>] = (<span class="keyword">int</span>)acceptSoc;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><font color="red">分析:</font></p>
<ul>
<li>结合前一节关于可读性，可写性的解释，结合上面具体的代码，调用 <strong>lcm_internal_pipe_create</strong> 获得 <strong>connect</strong> 和 <strong>accept</strong> 返回的 socket 句柄，两个 socket 是通过 listen socket 建立的连接的两端，连接成功建立，二者都是可写的；连接中没有任何一方发送数据，故二者都是不可读的。</li>
<li>此外，用于建立连接的  listen socket，因为他的 listen 队列大小为 1，所以，最终该 socket 是不可写的；因为调用 <strong>accept</strong> 后，监听队列被取空，所以该监听 socket 也是不可读的。</li>
<li><strong>lcm_internal_pipe_create</strong> 必须是静态函数，这样该函数的所有变量会被自动分配在一个一直使用的存储区，直到退出应用程序实例，保证 socket 句柄一直存在，一直有效。</li>
</ul>
</blockquote>
<p>　<font color="#FF8888">2.</font> 开启 <strong>gthread</strong> 线程按帧为单位获取激光雷达数据包，并以 <strong>UDP</strong> 的方式发送出去。为了更准确的模拟激光雷达帧数据的播放时间，通过 <strong>select</strong> 实现恰当的延时，保证帧与帧之间播放的时间间隔，每一帧播放的时间与实际情况相符。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line"> * Glib time control functions</div><div class="line"> * struct timeval: glib Structure used in select() call</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> int64_t <span class="title">timevalToInt64</span><span class="params">(<span class="keyword">struct</span> timeval tv)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> (<span class="keyword">int64_t</span>)tv.tv_sec * <span class="number">1000000</span> + tv.tv_usec;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">static</span> int64_t <span class="title">timestamp_now</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  GTimeVal tv;</div><div class="line">  g_get_current_time(&amp;tv);</div><div class="line">  <span class="keyword">return</span> (<span class="keyword">int64_t</span>)tv.tv_sec * <span class="number">1000000</span> + tv.tv_usec;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lcm_internal_pipe_close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> closesocket((SOCKET)fd);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/*</div><div class="line"> * gthread线程函数</div><div class="line"> *  1. 通过NextEvent从.pcap文件获取下一帧激光数据</div><div class="line"> *  2. 通过select的准确timeout，同步播放时刻与抓包时间戳</div><div class="line"> *  3. 通过PublishEvent通过UDP发送出去，提供给Velodyne_viewer使用</div><div class="line"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">timer_thread_func</span><span class="params">(<span class="keyword">void</span>* user)</span></span>&#123;</div><div class="line">  VeloPlayer* velo_player = <span class="keyword">reinterpret_cast</span>&lt;VeloPlayer*&gt; (user);</div><div class="line"> </div><div class="line">  <span class="keyword">int64_t</span> abstime;</div><div class="line">  <span class="keyword">int64_t</span> now;</div><div class="line">  <span class="keyword">int64_t</span> starttime;</div><div class="line">  <span class="keyword">int64_t</span> startabstime;</div><div class="line">  <span class="keyword">struct</span> timeval sleep_tv;</div><div class="line"> </div><div class="line">  <span class="keyword">int64_t</span> sleep_utime;</div><div class="line">  fd_set fds;</div><div class="line">  <span class="keyword">int</span> timer_pipe[<span class="number">2</span>];</div><div class="line">  TRACE(<span class="string">"timer_thread_func \n"</span>);</div><div class="line">  <span class="keyword">if</span> (lcm_internal_pipe_create(timer_pipe) != <span class="number">0</span>)&#123;</div><div class="line">    TRACE(<span class="string">"lcm_internal_pipe_create failed\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">int</span> status = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  startabstime = timestamp_now();</div><div class="line"> </div><div class="line">  velo_player-&gt;NextEvent();</div><div class="line">  starttime = timevalToInt64(velo_player-&gt;m_currentTime);</div><div class="line"> </div><div class="line">  <span class="keyword">while</span> (velo_player-&gt;m_exitThread == <span class="number">0</span>)&#123;</div><div class="line">    velo_player-&gt;NextEvent();</div><div class="line">    abstime = timevalToInt64(velo_player-&gt;m_currentTime) - starttime + startabstime;</div><div class="line">    <span class="keyword">if</span> (abstime &lt; <span class="number">0</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line">    now = timestamp_now();</div><div class="line">    <span class="keyword">if</span> (abstime &gt;now)&#123;</div><div class="line">      sleep_utime = abstime - now;</div><div class="line">      sleep_tv.tv_sec = sleep_utime / <span class="number">1000000</span>;</div><div class="line">      sleep_tv.tv_usec = sleep_utime % <span class="number">1000000</span>;</div><div class="line"> </div><div class="line">      <span class="comment">// sleep until the next timed message, or until an abort message</span></div><div class="line">      <span class="comment">/*</div><div class="line">       * select: 2rd parameter readfds identifies the sockets that are to be checked for readability</div><div class="line">       */</span></div><div class="line">      FD_ZERO(&amp;fds);</div><div class="line">      FD_SET(timer_pipe[<span class="number">0</span>], &amp;fds);</div><div class="line">      <span class="comment">/*</div><div class="line">       * 测试可读性 可写性</div><div class="line">       *  velo_player-&gt;timer_pipe[0/1]: connect socket/accept socket </div><div class="line">       *   已完成一个非阻塞connect的连接(可写)</div><div class="line">       *   没有数据可以接收(不可读 阻塞到超时，超时时间sleep_tv)</div><div class="line">       */</span></div><div class="line">      <span class="comment">//#define _SELECT_TEST_</span></div><div class="line">      <span class="comment">//#define _SELECT_WRITE_TEST_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SELECT_WRITE_TEST_</span></div><div class="line">      status = select(<span class="number">0</span>, <span class="number">0</span>, &amp;fds, <span class="literal">NULL</span>, &amp;sleep_tv);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">      status = select(<span class="number">0</span>, &amp;fds, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;sleep_tv);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SELECT_TEST_</span></div><div class="line">      <span class="keyword">int</span> error = WSAGetLastError();</div><div class="line">      printFunc(<span class="string">"status ="</span>, status);</div><div class="line">      printFunc(<span class="string">"error ="</span>, error);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">      <span class="comment">// select timed out</span></div><div class="line">      <span class="keyword">if</span> (!status)&#123;</div><div class="line">        velo_player-&gt;PublishEvent();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        TRACE(<span class="string">"0 != status %d %d\n"</span>, status, WSAGetLastError());</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">if</span> (abstime &lt; now)</div><div class="line">        TRACE(<span class="string">"abstime &lt; now %ld\n"</span>, now - abstime);</div><div class="line">      velo_player-&gt;PublishEvent();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  TRACE(<span class="string">"Thread stoped! \n"</span>);</div><div class="line">  <span class="keyword">if</span> (timer_pipe[<span class="number">0</span>] &gt;= <span class="number">0</span>)</div><div class="line">    lcm_internal_pipe_close(timer_pipe[<span class="number">0</span>]);</div><div class="line">  <span class="keyword">if</span> (timer_pipe[<span class="number">1</span>] &gt;= <span class="number">0</span>)</div><div class="line">    lcm_internal_pipe_close(timer_pipe[<span class="number">1</span>]);</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>References: </p>
<ul>
<li><a href="http://www.cnblogs.com/ranjiewen/p/5618620.html">Winsock IO模型之select模型</a></li>
<li><a href="http://www.cnblogs.com/XiaoG/archive/2010/08/11/1823581.html">解决Linux Socket select总是返回1的问题</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[瞎谈Socket编程(三) Win/Linux下的UDP编程]]></title>
      <url>/2016/09/08/linux_%E7%9E%8E%E8%B0%88Socket%E7%BC%96%E7%A8%8B_3/</url>
      <content type="html"><![CDATA[<h2 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h2><p>　　<strong>UDP Socket</strong> 编程中服务器端流程与 <strong>TCP</strong> 相似, 只是不需要通过 <strong>listen()</strong> 和 <strong>accept()</strong> 监听和等待客户端请求，直接通过 <strong>sendto()</strong> 和 <strong>recvfrom()</strong> 和客户端进行读写操作。<br><a id="more"></a></p>
<blockquote>
<p>server.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> socklen_t int</span></div><div class="line">    <span class="comment">// Win socket dynamic library</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Wsock32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> _snprintf snprintf</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> INVALID_SOCKET (-1)</span></div><div class="line">    <span class="comment">// Linux kernel socket calling</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> closesocket close</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// WIN32</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>     <span class="comment">// for memset</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFLEN 512</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NPACK 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2368</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">struct</span> sockaddr_in sockaddr_server, sockaddr_client;</div><div class="line">  <span class="keyword">int</span> sockfd;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">char</span> recv_buf[BUFLEN];</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">  <span class="comment">// Loading &amp; initializing winsock</span></div><div class="line">  WSADATA wsa;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nInitializing Winsock..."</span>);</div><div class="line">  <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa) != <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Failed. Error Code : %d"</span>, WSAGetLastError());</div><div class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">  &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Initialized.\n"</span>);</div><div class="line">  <span class="comment">// 1. Creating socket, no-connection way, datagram</span></div><div class="line">  <span class="keyword">if</span> ((sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == INVALID_SOCKET&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"fail to create socket...\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Configuring server ip port, etc</span></div><div class="line">  <span class="built_in">memset</span>((<span class="keyword">char</span> *)&amp;sockaddr_server, <span class="number">0</span>, <span class="keyword">sizeof</span>(sockaddr_server));</div><div class="line">  sockaddr_me.sin_family = AF_INET;</div><div class="line">  sockaddr_me.sin_port = htons(PORT);</div><div class="line">  sockaddr_me.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class="line">  <span class="comment">// 2. Binding server's socket with ip and port </span></div><div class="line">  <span class="keyword">if</span> (bind(sockfd, (sockaddr *)&amp;sockaddr_server, <span class="keyword">sizeof</span>(sockaddr_server)) == <span class="number">-1</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"bind error...\n"</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">socklen_t</span> sockaddr_client_len = <span class="keyword">sizeof</span>(sockaddr_client);</div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NPACK; i++) &#123;</div><div class="line">    <span class="comment">// 3. Receiving data from client</span></div><div class="line">    <span class="keyword">if</span> (recvfrom(sockfd, buf, BUFLEN, <span class="number">0</span>, </div><div class="line">      (sockaddr *)&amp;sockaddr_client, &amp;sockaddr_client_len) == <span class="number">-1</span>)&#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"recvfrom error...\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Received packet from %s:%d\nData: %s\n\n"</span>,</div><div class="line">      inet_ntoa(sockaddr_client.sin_addr), ntohs(sockaddr_client.sin_port), buf);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 4. Closing server's socket after transceiving </span></div><div class="line">  closesocket(sockfd);</div><div class="line">#ifdef WIN32</div><div class="line">  <span class="comment">// Unloading win socket dynamic library</span></div><div class="line">  WSACleanup();</div><div class="line">#endif</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h2><p>　　<strong>UDP Socket</strong> 编程客户端流程与服务器端相比更为简单，无需进行绑定操作，直接通过服务器端的ip、端口等信息， 使用 <strong>sendto()/recvfrom()</strong> 进行数据发送和接收操作。</p>
<blockquote>
<p>client.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> socklen_t int</span></div><div class="line">    <span class="comment">// Win socket dynamic library</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Wsock32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> _snprintf snprintf</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> INVALID_SOCKET (-1)</span></div><div class="line">    <span class="comment">// Linux kernel socket calling</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> closesocket close</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// WIN32</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>     <span class="comment">// for memset</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFLEN 512</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NPACK 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2368</span></div><div class="line"><span class="comment">// Server's ip address which is pingable</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SRV_IP <span class="meta-string">"127.0.0.1"</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">struct</span> sockaddr_in sockaddr_server;</div><div class="line">  <span class="keyword">int</span> sockfd;</div><div class="line">  <span class="keyword">char</span> buf[BUFLEN];</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">  WSADATA wsa;</div><div class="line">  <span class="comment">// Loading &amp; initializing winsock</span></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nInitialising Winsock..."</span>);</div><div class="line">  <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa) != <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Failed. Error Code : %d"</span>, WSAGetLastError());</div><div class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Initialised.\n"</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="comment">// 1. Creating socket, no-connection way, datagram</span></div><div class="line">  <span class="keyword">if</span> ((sockfd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == INVALID_SOCKET)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Configuring server ip address, port, etc for client</span></div><div class="line">  <span class="built_in">memset</span>((<span class="keyword">char</span> *)&amp;sockaddr_server, <span class="number">0</span>, <span class="keyword">sizeof</span>(sockaddr_server));</div><div class="line">  sockaddr_server.sin_family = AF_INET;</div><div class="line">  sockaddr_server.sin_port = htons(PORT);</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">  sockaddr_server.sin_addr.S_un.S_addr = inet_addr(SRV_IP);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  sockaddr_server.sin_addr.s_addr = inet_addr(SRV_IP);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">   </div><div class="line">  <span class="comment">// 2. Sending/Receiving data to/from client</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i&lt;NPACK; i++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Sending packet %d\n"</span>, i);</div><div class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"This is packet %d\n"</span>, i);</div><div class="line">    <span class="keyword">if</span> (sendto(sockfd, buf, BUFLEN, <span class="number">0</span>, </div><div class="line">      (<span class="keyword">struct</span> sockaddr *) &amp;sockaddr_server, <span class="keyword">sizeof</span>(sockaddr_server)) == <span class="number">-1</span>)</div><div class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"sendto error\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 3. Closing client's socket after transceiving</span></div><div class="line">  closesocket(sockfd);</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">  <span class="comment">// Unloading win socket dynamic library</span></div><div class="line">  WSACleanup();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git几步走]]></title>
      <url>/2016/07/26/tool_git%E5%87%A0%E6%AD%A5%E8%B5%B0/</url>
      <content type="html"><![CDATA[<h3 id="git-快速入门"><a href="#git-快速入门" class="headerlink" title="git 快速入门"></a><strong>git</strong> 快速入门</h3><p>　　<strong>第一步:</strong> <strong>github.com</strong> 上添加新仓库 “Create New Repository”</p>
<p>　　<strong>第二步:</strong> 本地关联远程库.添加后，远程库的名字就是 <strong>origin</strong>，这是 <strong>Git</strong> 默认的叫法，也可以改成别的，但是 <strong>origin</strong> 这个名字一看就知道是远程库。<br>　　　<font color="green"><strong>git remote add origin <a href="https://github.com/Durant35/[Repository">https://github.com/Durant35/[Repository</a> Name].git</strong></font></p>
<p>　　把本地库的内容推送到远程，用 <strong>git push</strong> 命令，实际上是把当前分支 <strong>master</strong> 推送到远程。<br>　　由于远程库是空的，我们第一次推送 <strong>master</strong> 分支时，加上了 <strong>-u</strong> 参数，<strong>Git</strong> 不但会把本地的 <strong>master</strong> 分支内容推送的远程新的 <strong>master</strong> 分支，还会把本地的 <strong>master</strong> 分支和远程的 <strong>master</strong> 分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>　　　<font color="green"><strong>git push -u origin master</strong></font></p>
<p>　　把本地 <strong>master</strong> 分支的最新修改推送至 <strong>GitHub</strong>！<br>　　　<font color="green"><strong>git push origin master</strong></font><br><a id="more"></a></p>
<p>　　<strong>第三步：</strong> 查看改变<br>　　查看本地文件夹改变<br>　　　<font color="green"><strong>git status</strong></font></p>
<p>　　<strong>第四步:</strong> 文件/文件夹创建、编写<br>　　　<font color="green"><strong>git add file-name</strong></font>　　　　# 创建<br>　　　<font color="green"><strong>git rm file-name</strong></font>　　　　 # 删除<br>　　　<font color="green"><strong>git add .</strong></font>　　　　 　　　 　# git add all files changed</p>
<p>　　<strong>第五步:</strong> 先本地提交，后远程提交<br>　　　<font color="green"><strong>git commit -m “messages”</strong></font><br>　　　<font color="green"><strong>git push origin master</strong></font></p>
<p>　　<strong>第六步:</strong> <strong>git</strong> 版本回退<br>　　　(注意 <strong>hard</strong> 前面是两个<strong>“-“</strong>)<br>　　　<font color="green"><strong>git reset –hard commit_id</strong></font></p>
<p>　　1) <strong>HEAD</strong> 指向的版本就是当前版本<br>　　2) <strong>commit_id</strong> 通过以下命令获取<br>　　　<font color="green"><strong>git log</strong></font>　　　 查看提交历史    –&gt; 回退到过去哪个版本<br>　　　<font color="green"><strong>git reflog</strong></font>　　查看命令历史     –&gt; 回到未来的哪个版本</p>
<h3 id="git-高级进阶"><a href="#git-高级进阶" class="headerlink" title="git 高级进阶"></a><strong>git</strong> 高级进阶</h3><ul>
<li>查看本地文件改变<br>　<font color="#ea66a6"><b>git diff “file name”</b></font></li>
<li>查看本地与远程库区别<br>　<font color="#ea66a6"><b>git diff master origin</b></font></li>
<li>重写 commit 信息（如日志信息）<br>　　　(注意 <strong>amend</strong> 前面是两个<strong>“-“</strong>)<br>　<font color="#ea66a6"><b>git commit –amend</b></font></li>
<li>从跟踪清单中删除（想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中）<br>　<font color="#ea66a6"><b>git rm –cache (folder-name/. or file-name)​​​​ </b></font></li>
<li>移出暂存区（绿变红）<br>　<font color="#ea66a6"><b>git reset HEAD file-name</b></font></li>
</ul>
<h3 id="git-分支"><a href="#git-分支" class="headerlink" title="git 分支"></a><strong>git</strong> 分支</h3><ul>
<li>删除分支<br>　<font color="blue"><b>git branch -d branch-name</b></font></li>
<li>强制删除分支<br>　<font color="blue"><b>git branch -D branch-name</b></font>
　</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> 小工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[瞎谈 Socket 编程(二)]]></title>
      <url>/2016/07/16/linux_%E7%9E%8E%E8%B0%88Socket%E7%BC%96%E7%A8%8B_2/</url>
      <content type="html"><![CDATA[<h2 id="数据传输方式"><a href="#数据传输方式" class="headerlink" title="数据传输方式"></a><font color="#F40D64">数据传输方式</font></h2><p>　　<strong>SOCK_STREAM</strong>　　　　面向连接　　　　　　　　准确性/相对较慢　　　<font color="red">TCP</font><br>　　<strong>SOCK_DGRAM</strong>　　　　 无连接的传输方式    　　　　视频/音频    　　　　　　<font color="red">UDP</font><br><strong>Server</strong><br>　1. 创建套接字　　　　　　　　　　　　　　　　　<font color="green">int sock = socket(AF_INET, SOCK_STREAM, 0);</font><br>　2. 将套接字和IP、端口绑定　　　　　　　　　　　<font color="green">bind(sock, (struct sockaddr*)&amp;serv_addr, sizeof(serv_addr));</font><br>　3. 进入监听状态，等待客户端请求　　　　　　　　<font color="green">listen(…);</font><br>    　　　　　　　　　　　　　　　　　　　　　　　　<font color="green">accept(…);</font><br>　4. 接受客户端数据/向客户端发送数据　　　　　　　<font color="green">read(…)/write(…);</font>　　　　　　　　　　　　　　<br>　5. 关闭套接字　　　　　　　　　　　　　　　　　<font color="green">close();</font></p>
<p><strong>Client</strong><br>　1. 创建套接字<br>　2. 向服务器(特定的IP和端口)发送请求　　　　　　　<font color="green">connect(…);</font><br>　3. 读取服务器传回的数据/向服务器发送数据　　　　<font color="green">read/write(sock, char*, sizeof(…));</font><br>　4. 关闭套接字<br>    <a id="more"></a></p>
<h2 id="Windows-vs-Linux"><a href="#Windows-vs-Linux" class="headerlink" title="Windows vs Linux"></a><font color="#F40D64">Windows vs Linux</font></h2><p>　　1）Windows下的Socket程序依赖 <strong>Winsock.dll</strong> 或 <strong>ws2_32.dll</strong>， 必须提前加载。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"xxx.dll"</span>)	<span class="comment">// 使用#pragma命令，在编译时加载</span></span></div><div class="line"></div><div class="line"><span class="comment">// 初始化DLL</span></div><div class="line">WSADATA wsaData;</div><div class="line">WSASetUp(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);	<span class="comment">// MAKEWORD，WinSock规范版本号</span></div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line"><span class="comment">// 终止使用DLL</span></div><div class="line">WSACleanUp();</div></pre></td></tr></table></figure></p>
<p>　　2）Linux使用 <strong>文件描述符</strong> 的概念，而Windows下使用 <strong>文件句柄</strong> 的而概念；Linux不区分socket文件和普通文件，而Windows区分；Linux下的 <strong>socket()</strong> 函数返回int，而Windows下返回 <strong>SOCKET</strong> 类型，也就是句柄。<br>　　3）Linux下使用 <strong>read/write</strong> 读写，而Windows下使用 <strong>recv()/send()</strong> 收发。<br>　　4）关闭socket时， Linux使用 <strong>close</strong> 函数，而Windows使用 <strong>closesocket</strong> 函数。</p>
<h2 id="Linux下socket编程流程"><a href="#Linux下socket编程流程" class="headerlink" title="Linux下socket编程流程"></a><font color="#F40D64">Linux下socket编程流程</font></h2><p>　　<font color="blue">在Linux中， “一切皆文件” ====&gt; 文件描述符(文件句柄)。</font></p>
<p>　　<font color="green"><strong>套接字的工作流程(服务器端)：</strong> </font>通过 <strong>socket()</strong> 系统调用创建一个套接字，它是系统分配给该服务器进程的类似文件描述符的资源，不能与其它的进程共享；服务器进程使用 <strong>bind()</strong> 系统调用给套接字命名，本地套接字的名字是 <strong>Linux</strong> 文件系统的文件名，一般放在 <strong>/tmp</strong> 或者 <strong>/usr/tmp</strong> 目录下；网络套接字的名字是与客户端相连接的特定网络有关的服务标识符，此标识符允许 <strong>Linux</strong> 将进入的针对特定端口号的连接转到正确的服务器进程。接下来，服务器进程开始等待客户端连接到这个命名套接字，调用 <strong>listen()</strong> 创建一个等待队列，以便存放来自客户端的进入连接。最后，服务器端通过 <strong>accept()</strong> 系统调用来接受客户端的连接，此时，会 </font color="blue">产生一个与原来的命名套接字不同的新套接字，它仅用于与这个特定的客户端通信，而命名套接字则被保留下来继续处理其他客户的连接</font>。</p>
<p>　　<font color="green"><strong>套接字的工作流程(客户端)：</strong> </font>调用 <strong>socket()</strong> 创建一个未命名套接字，将服务器的命名套接字作为一个地址来调用 <strong>connect()</strong> 与服务器建立连接；一旦建立了连接，就可以 <font color="blue">像使用底层文件描述符那样来使用套接字进行双向的数据通信</font>。</p>
<p><strong>创建socket</strong><br>　　在Linux中使用 <strong><sys/socket.h></strong> 头文件中，<br>　　　　<font color="green"> <strong>int socket(int af, int type, int protocol);</strong> </font><br>　　创建套接字。<br>　　1）<font color="green"> <strong>af</strong> </font> 为地址簇(Address Family)，<strong>AF_INET</strong> 和 <strong>AF_INET6</strong>。<br>　　2）<font color="green"> <strong>type</strong> </font> 为数据传输方式，<strong>SOCK_STREAM</strong> 和 <strong>SOCK_DGRAM</strong>。<br>　　3）<font color="green"> <strong>protocol</strong> </font> 表示传输协议，<strong>IPPROTO_TCP</strong> 和 <strong>IPPROTO_UDP</strong>。</p>
<p><strong>建立连接</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 把一个地址簇中的特定地址赋给socket</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sock, <span class="keyword">struct</span> sockaddr* addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sock, <span class="keyword">struct</span> sockaddr* addr, <span class="keyword">socklen_t</span> addrlen)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　使用 <strong>sockaddr_in</strong> 结构体，再强制转换为 <strong>sockaddr</strong> 类型。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr_in&#123;</div><div class="line">  <span class="keyword">sa_family_t</span> sin_family;		<span class="comment">// Address Family，也就是地址类型</span></div><div class="line">  <span class="keyword">uint16_t</span> sin_port;		<span class="comment">// 16位的端口号，通过 htons(0~65536) 函数获取</span></div><div class="line">  <span class="keyword">struct</span> in_addr sin_addr;	<span class="comment">// 32位IP地址</span></div><div class="line">  <span class="keyword">char</span> sin_zero[<span class="number">8</span>];		<span class="comment">// 不使用，一般用0填充，memset(...)</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">struct</span> in_addr&#123;</div><div class="line">  <span class="keyword">in_addr_t</span> s_addr;		<span class="comment">// 32位IP地址，通过 inet_addr("xxx.xxx.xxx.xxx") 获取</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>　　客户端不用指定地址(ip+端口号)，有系统会自动分配一个端口号和自身的ip地址组合；客户端不会调用 <strong>bind()</strong> 函数，而是在 <strong>connect()</strong> 时由系统随机生成一个。<br>　　<br><strong>监听和响应</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sock, <span class="keyword">int</span> backlog)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　当套接字正在处理客户端请求时，如果有新的请求进来，套接字没法处理，只能把它放进缓冲区，待当前请求处理完毕后，再从缓冲区中读取出来处理。这个缓冲区，称为请求队列。当请求队列满时(&gt;backlog)，求不再接收新的请求。<br>　　<strong>listen</strong> 只是让套接字处于监听状态，并没有接收请求。接收请求需要使用 <strong>accept</strong>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sock, <span class="keyword">struct</span> sockaddr* addr, <span class="keyword">socklen_t</span>* addrlen)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　返回一个新的套接字来和客户端通信，<strong>addr</strong> 保存了客户端的IP地址和端口号，而 <strong>sock</strong> 是服务端的套接字。<br>　　<strong>listen</strong> 后面的代码会继续执行，直到遇到 <strong>accept</strong>，<strong>accept</strong> 会阻塞程序执行，直到有新的请求到来。</p>
<p><strong>接收和发送</strong><br>　　Linux不区分套接字文件和普通文件，使用 <strong>read/write</strong> 函数可以从套接字中读取数据和向套接字中写入数据。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> nbytes);</div></pre></td></tr></table></figure></p>
<p>　　将缓冲区 <strong>buf</strong> 中的 <strong>nbytes</strong> 个字节写入文件 <strong>fd</strong>，成功则返回写入的字节数，失败则返回-1。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> nbytes);</div></pre></td></tr></table></figure></p>
<p>　　从 <strong>fd</strong> 文件中读取 <strong>nbytes</strong> 个字节并保存到缓冲区 <strong>buf</strong>。<br>　　可以通过 <strong>man文档</strong> 查看以下函数： <strong>man function_name</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// read/write通用函数</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> nbytes);</div><div class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> nbytes);</div><div class="line"></div><div class="line"><span class="comment">// socket接收/发送函数</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="keyword">ssize_t</span> send(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags);</div><div class="line"><span class="keyword">ssize_t</span> recv(<span class="keyword">int</span> sockfd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags);</div><div class="line"> </div><div class="line"><span class="keyword">ssize_t</span> sendto(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, </div><div class="line">        <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr* src_addr, <span class="keyword">socklen_t</span> addrlen);</div><div class="line"><span class="keyword">ssize_t</span> recvfrom(<span class="keyword">int</span> sockfd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, </div><div class="line">        <span class="keyword">struct</span> sockaddr* dest_addr, <span class="keyword">socklen_t</span>* addrlen);</div><div class="line"> </div><div class="line"><span class="keyword">ssize_t</span> sendmsg(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">struct</span> msghdr* msg, <span class="keyword">int</span> flags);</div><div class="line"><span class="keyword">ssize_t</span> recvmsg(<span class="keyword">int</span> sockfd, <span class="keyword">struct</span> msghdr* msg, <span class="keyword">int</span> flags);</div></pre></td></tr></table></figure></p>
<h2 id="TCP-网络通讯"><a href="#TCP-网络通讯" class="headerlink" title="TCP 网络通讯"></a><font color="#F40D64">TCP 网络通讯</font></h2><p>　<strong><font size="4" color="#4A8BF6">三次握手建立连接</font></strong><br>    <img src="/img/programPearls/socket/establish_3_way_handshake.jpg" /><br>　　客户端调用 <strong>socket</strong> 创建套接字后，因为没有建立连接，处于 <strong>CLOSED</strong> 状态；服务器端调用 <strong>listen()</strong> 函数后，套接字进入 <strong>LISTEN</strong> 状态，开始监听客户端请求。<br>　　　1）客户端调用 <strong>connect</strong> 函数，<strong>TCP</strong> 协议会组建一个数据包，并设置 <strong>SYN</strong> 标志位，表示该数据包用于建立同步连接的；生成一个随机数，填充 <strong>Seq</strong> 字段 ，表示该数据包的序号；完成这些工作，开始向服务端发送数据，客户端进入 <strong>SYN_SEND</strong> 状态。</p>
<p>　　　2）服务器端收到数据包，检测到已经设置了 <strong>SYN</strong> 标志位，就知道是客户端发来的建立连接的”请求包”；服务器端也组建一个数据包，并设置 <strong>SYN</strong> 和 <strong>ACK</strong> 标志位，<strong>SYN</strong> 表示该数据包用来建立连接，<strong>ACK</strong> 用来确认收到了刚才客户端发送的数据包。<br>　　　　服务器端生成一个随机数，填充 <strong>Seq</strong> 字段，用客户端的 <strong>Seq + 1</strong> 填充 <strong>ACK</strong> 字段，服务器将数据包发出，进入 <strong>SYN-RECV</strong> 状态。<br>　　　3）客户端收到数据包，检测到已经设置了 <strong>SYN</strong> 和 <strong>ACK</strong> 标志位，就知道这是服务器端发来的”确认包”。客户端会检测”确认号 <strong>ACK</strong> “字段，看它的位置是否为 <strong>Seq + 1</strong>，如果是就说明连接成功。接下来，客户端会继续组建数据包并设置 <strong>ACK</strong> 标志位，表示客户端正确接收了服务器发来的”确认包”；同时，用刚从服务器端发来的”数据包序号 + 1”填充 <strong>ACK</strong> 字段。<br>　　　　客户端将数据包发出，进入 <strong>ESTABLISHED</strong> 状态，表示连接已经成功建立。</p>
<p>　　　4）服务器端接收到数据包，检测到已设置 <strong>ACK</strong>，就知道是客户端发来的”确认包”；检测 <strong>ACK</strong> 字段是否为 “<strong>Seq</strong> + 1”，是就说明连接建立成功，服务器进入 <strong>ESTABLISHED</strong> 状态。<br>　　　5）客户端和服务器端都进入了 <strong>ESTABLISHED</strong> 状态，连接建立成功，接下来就可以收发数据了。<br>　　三次握手的关键是确认对方收到了自己的数据包，这个目标通过 <strong>ACK</strong> 字段来实现。</p>
<p>　<strong><font size="4" color="#4A8BF6">传输过程</font></strong><br>    <img src="/img/programPearls/socket/data_exchange.jpg" /><br>　　为了保证数据准确到达，目标机器在收到数据包(包括 <strong>SYN</strong> 包、<strong>FIN</strong> 包、普通数据包)后，必须立即回传 <strong>ACK</strong> 包，这样发送方才能确认数据传输成功。<br>　　　<font color="green"><strong>ACK</strong> 号 = <strong>Seq</strong> 号 + 传递的字节数 + 1</font><br>　　<strong>重传超时时间</strong>　RTO，Retransmission Time Out<br>　　<strong>重传次数</strong>　　　3次<br>　　发送方只有在收到对方的 <strong>ACK</strong> 确认包后，才会清空 <font color="green">输出缓冲区</font> 中的数据。</p>
<p>　<strong><font size="4" color="#4A8BF6">四次握手断开连接</font></strong><br>　　建立连接非常重要，它是数据传输的前提；断开连接同样重要，它让计算机释放不再使用的资源；如果连接不能正常断开，不仅会造成数据传输错误，还会导致套接字不能关闭，持续占用资源，如果开发量高，服务器压力堪忧！<br>    <img src="/img/programPearls/socket/disconnect_4_way_handshake.jpg" /><br>　　建立连接后，客户端和服务器端都处于 <strong>ESTABLISHED</strong> 状态，这时，客户端发起断开连接的请求。<br>　　　1）客户端调用 <strong>close</strong> 函数后，向服务器发送 <strong>FIN</strong> 数据包，进入 <strong>FIN_WAIT_1</strong> 状态。<br>　　　2）服务器端收到数据包后，检测到设置了 <strong>FIN</strong> 标志位，知道要断开连接，于是向客户端发送”确认包”，进入 <strong>CLOSE_WAIT</strong> 状态；<br>　　　　　<font color="green">服务器收到请求后并不是立即断开连接，而是先向客户端发送”确认包”，告诉它我知道了，我需要准备下才能断开连接。</font></p>
<p>　　　3）客户端收到”确认包”后进入 <strong>FIN_WAIT_2</strong> 状态，等待服务器端准备完毕后再次发送数据包。<br>　　　4）等待片刻后，服务器准备完毕，可以断开连接，于是主动向客户端发送 <strong>FIN</strong> 包，告诉它我准备好了，断开连接吧，然后进入 <strong>LAST_ACK</strong> 状态。<br>　　　5）客户端收到服务器端的 <strong>FIN</strong> 包后，再向服务器发送 <strong>ACK</strong>，告诉它你断开连接吧，然后进入 <strong>TIME_WAIT</strong> 状态。<br>　　　6）服务器端收到客户端的 <strong>ACK</strong> 后，就断开连接，关闭套接字，进入 <strong>CLOSED</strong> 状态，maybe等待下一个客户端的连接请求。</p>
<p>　　<font color="blue">客户端最后一次向服务器回传 <strong>ACK</strong> 包时，有可能会因为网络问题导致服务器收不到！！！</font><br>　　1）服务器会再次发送 <strong>FIN</strong> 包，如果这时客户端关闭了连接，那么服务器无论如何也收不到 <strong>ACK</strong> 包了，所以客户端需要稍等片刻，确认对方收到 <strong>ACK</strong> 包后才能进入 <strong>CLOSED</strong> 状态。<br>　　2）<strong>TIME_WAIT</strong> 要等待 <strong>2xMSL(Maximum Segment Lifetime，报文最大生存时间)</strong>，才会进入 <strong>CLOSED</strong> 状态: <strong>ACK</strong> 包到达服务器端需要 <strong>MSL</strong> 时间，服务器重传的 <strong>FIN</strong> 包需要 <strong>MSL</strong> 时间，如果 <strong>2MSL</strong> 后还未收到服务器重传的 <strong>FIN</strong> 包，就相信服务器端应该已经收到 <strong>ACK</strong> 包了。</p>
<p>　　<font color="red"><strong>close</strong> 一个 <strong>TCP socket</strong> 的缺省行为是把该 <strong>socket</strong> 标记为已关闭，然后立即返回到调用进程；该套接字不能再由调用进程使用，也就是说不能再作为 <strong>read/write</strong> 的第一个参数。<br>　　<strong>close</strong> 操作只是使相应 <strong>socket</strong> 描述符的引用计数 <strong>-1</strong>，只有当引用计数为0的时候，才会触发 <strong>TCP</strong> 客户端向服务器端发送终止连接的要求。<br>　　</font><br><strong>shutdown断开连接</strong><br>　　<strong>close</strong> 函数意味着完全断开连接，既不能发送数据，也不能接收数据。<br>　　<strong>close</strong> 函数用来关闭套接字，将套接字描述符(或句柄)从内存清除，之后再也不能使用该套接字，与C语言中的 <strong>fclose</strong> 类似。应用程序关闭套接字后，与该套接字相关的连接和缓存也失去了意义，TCP协议会自动触发关闭连接的操作。<br>　　<strong>shutdown</strong> 用来关闭连接，而不是套接字，不管调用多少次 <strong>shutdown</strong>，套接字依然存在，直到调用 <strong>close</strong> 函数将套接字从内存清除。<br>　　调用 <strong>close</strong> 关闭套接字时，或调用 <strong>shutdoen</strong> 关闭输出流时，都会向对方发送 <strong>FIN包</strong>。默认情况下，<strong>close</strong> 会立即向网络中发送 <strong>FIN包</strong>，不管输出缓冲区中是否还有数据；而 <strong>shutdown</strong> 会等输出缓冲区中的数据传输完毕再发送 <strong>FIN包</strong>。也就意味着，调用 <strong>close</strong> 函数将丢失输出缓冲区中的数据，而调用 <strong>shutdown</strong> 函数不会。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> howto)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　<strong>howto</strong> 有以下取值：<br>　　　<strong>SHUT_RD</strong>：断开输入流，套接字无法接收数据，即使输入缓冲区收到数据也被抹去，无法调用输入相关函数。<br>　　　<strong>SHUT_WR</strong>：断开输出流，套接字无法发送数据，但如果输出缓冲区中还有未传输的数据，则将传递到目标主机。<br>　　　<strong>SHUT_RDWR</strong>：同时断开I/O流，<strong>SHUT_RD</strong> + <strong>SHUT_WR</strong>。
　　</p>
<h2 id="迭代服务器端和客户端"><a href="#迭代服务器端和客户端" class="headerlink" title="迭代服务器端和客户端"></a><font color="#F40D64">迭代服务器端和客户端</font></h2><p>　　<strong>server.cpp</strong> 中调用 <strong>closesocket()</strong> 函数不仅会关闭服务器端的socket，还会通知客户端连接已断开，客户端也会清理socket相关资源，所以 <strong>client.cpp</strong> 需要将 <strong>socket()</strong> 函数放在 <strong>while循环</strong> 内部，因为每次请求完毕，客户端都会清理socket，下次发起请求时需要重新创建。</p>
<h2 id="socket缓冲区"><a href="#socket缓冲区" class="headerlink" title="socket缓冲区"></a><font color="#F40D64">socket缓冲区</font></h2><p>　　每个socket被创建后，都会分配两个缓冲区，输入缓冲区和输出缓冲区。<br>　　<strong>write/send</strong> 并不立即向网络中传输数据，而是先将数据写入缓冲区中，再由TCP协议将数据从缓冲区发送到目标机器。一旦数据写入缓冲区，函数就可以成功返回，不管他们有没有到达目标机器，也不管他们何时被发送到网络，这些都是TCP协议负责的事情。<br>　　TCP协议独立于 <strong>write/send</strong> 函数，数据有可能刚被写入缓冲区就发送到网络，也可能在缓冲区中不断积压，多次写入的数据被一次性发送到网络，这取决于当时的网络情况、当前线程是否空闲等诸多因素，不由程序员控制。<br>　　<strong>read/recv</strong> 函数也是如此，也从输入缓冲区读取数据，而不是直接从网络中读取。<br>　　这些I/O缓冲区特性可整理如下：<br>　　　I/O缓冲区在每个TCP套接字中单独存在；<br>　　　I/O缓冲区在创建套接字时自动生成；<br>　　　即使关闭套接字也会继续传送输出缓冲区中遗留的数据(normally close tries to complete this transmission)；<br>　　　关闭套接字将丢失输入缓冲区中的数据。<br>　　输入输出缓冲区的默认大小一般都是8K，可以通过 <strong>getsockopt</strong> 函数获取。 </p>
<h2 id="阻塞模式"><a href="#阻塞模式" class="headerlink" title="阻塞模式"></a><font color="#F40D64">阻塞模式</font></h2><p>　　所谓阻塞，就是上一步动作没有完成，下一步动作将暂停，知道上一步动作完成后才能继续，以保持同步性。<br>　　TCP套接字默认是阻塞模式(可更改为非阻塞模式)。<br>　　当使用 <strong>write/send</strong> 发送数据时：<br>　　　1）检查缓冲区，如果可用空间长度小于要发送的数据，<strong>write/send</strong> 会被阻塞，知道缓冲区中数据被发送到目标机器，腾出足够的空间才能唤醒。<br>　　　2）如果TCP协议正在向网络发送数据，输出缓冲区会被锁定，不允许写入，<strong>write/send</strong> 被阻塞，直到数据发送完毕，缓冲区解锁，才被唤醒。<br>　　　3）如果写入的数据大于缓冲区的最大长度，将分批写入。<br>　　　4）直到所有数据被写入缓冲区，<strong>write/send</strong> 函数才能返回。<br>　　当使用 <strong>read/recv</strong> 读取数据时：<br>　　　1）检查缓冲区，如果缓冲区中有数据，那么就读取；否则函数会被阻塞，直到网络上有数据到来。<br>　　　2）如果要读取的数据长度小于缓冲区中的数据长度，那么就不能一次性将缓冲区中的所有数据读出；剩余数据将不断积压，直到 <strong>read/recv</strong> 函数再次读取。<br>　　　3）直到读取到数据后， <strong>read/recv</strong> 函数才会返回，否则就一直被阻塞。</p>
<h2 id="TCP的粘包问题"><a href="#TCP的粘包问题" class="headerlink" title="TCP的粘包问题"></a><font color="#F40D64">TCP的粘包问题</font></h2><p>　　客户端发送的多个数据包被当做一个数据包接收，也称数据的无边界性。<strong>read/recv</strong> 函数不知道数据包的开始或结束标志（实际上也没有任何开始或结束标志），只把它当做连续的数据流处理。<br>　　<strong>server.cpp</strong> 中有 <strong>sleep(10);</strong> 让程序暂停执行10秒。在这段时间内，client连续发送三个数据包。由于server被阻塞，数据只能堆积在缓冲区。10秒后，server开始运行，从缓冲区中一次性读出所有积压的数据并返回客户端。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sleep</span><span class="params">(DWORD dwMilliSeconds)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　<strong>client.cpp</strong> 执行 <strong>read/recv</strong> 函数，由于输入缓冲区中没有数据，所以会被阻塞。</p>
<h2 id="网络字节序-vs-主机字节序"><a href="#网络字节序-vs-主机字节序" class="headerlink" title="网络字节序 vs 主机字节序"></a><font color="#F40D64">网络字节序 vs 主机字节序</font></h2><p>　　<strong>little endian</strong> 和 <strong>big endian</strong> 系统解析和保存数据的方式不同，通信时会发生数据解析错误。在发送数据前，要将数据转换为统一格式(<strong>Network Byte Order</strong>)，统一为大端序(高位字节在前)。收到数据后先转换为自己的格式再解析。<br>　　// 端口号转换函数<br>　　<strong>htons</strong>：host short ===&gt; network short(2个字节)<br>　　<strong>ntohs</strong>：network short ===&gt; host short<br>　　// IP地址转换函数<br>　　<strong>htonl</strong>：host long ===&gt; network long(4个字节)<br>　　<strong>ntohl</strong>：network long ===&gt; host long<br>　　// 隐式转换函数<br>　　<strong>inet_addr</strong>：除了将字符串转换为32位整数，同时还进行网络字节序的转换。<br>　　<strong>write</strong>：发送数据时，TCP协议会自动转换为网络字节序。</p>
<h2 id="通过域名获取IP地址"><a href="#通过域名获取IP地址" class="headerlink" title="通过域名获取IP地址"></a><font color="#F40D64">通过域名获取IP地址</font></h2><p>　　域名仅仅是IP地址的一个助记符，目的是方便记忆，通过域名并不能找到目标计算机，通信之前必须要将域名转换成IP地址。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">struct</span> hostent* <span class="title">gethostbyname</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* hostname)</span></span>;</div><div class="line"><span class="keyword">struct</span> hostent&#123;</div><div class="line">　　<span class="keyword">char</span>* h_name;　　　　　<span class="comment">// official name</span></div><div class="line">　　<span class="keyword">char</span>** h_aliases;　　　<span class="comment">// alias list</span></div><div class="line">　　<span class="keyword">int</span> h_addrtype;　　　　<span class="comment">// host address type, AF_INET/AF_INET6，即IPv4或IPv6</span></div><div class="line">　　<span class="keyword">char</span>** h_length;　　　　<span class="comment">// address length, 4/16</span></div><div class="line">　　<span class="keyword">char</span>** h_addr_list;　　<span class="comment">// address list，用于用户较多的服务器，可能会分配多个IP地址给同一个域名，进行均衡负载</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="TCP-vs-UDP"><a href="#TCP-vs-UDP" class="headerlink" title="TCP vs UDP"></a><font color="#F40D64">TCP vs UDP</font></h2><p>　　<strong>UDP</strong> 是非连接的传输协议，没有建立连接和断开连接的过程，它只是简单地把数据丢到网络中，也不需要 <strong>ACK包</strong> 确认。<br>　　<strong>UDP</strong> 的可靠性虽然比不上 <strong>TCP</strong>，但也不会像想象中那么频繁地发生数据损毁，在更加重视传输效率而非可靠性的情况下，<strong>UDP</strong> 是一种很好的选择，比如视频通信或者音频通信。<br>　　<strong>TCP</strong> 的速度无法超越 <strong>UDP</strong>，但在收发某些类型的数据时有可能接近 <strong>UDP</strong>。<br>　　<strong>没有连接</strong><br>　　　不必调用　<strong>listen</strong> 或 <strong>accept</strong> 函数，只有创建套接字和数据交换的过程。<br>　　<strong>只需一个套接字</strong><br>　　　<strong>TCP</strong> 的套接字是一对一的关系，如果要向10个客户端提供服务，除了负责监听的套接字外，还需要创建10个套接字。但在 <strong>UDP</strong>，不管是服务器端还是客户端都只需要1个套接字，就可以向任意主机传送数据。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// flags: 可选项参数，若没有可传递0</span></div><div class="line"><span class="keyword">ssize_t</span> sendto(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, </div><div class="line">        <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr* src_addr, <span class="keyword">socklen_t</span> addrlen);</div><div class="line"><span class="keyword">ssize_t</span> recvfrom(<span class="keyword">int</span> sockfd, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags, </div><div class="line">        <span class="keyword">struct</span> sockaddr* dest_addr, <span class="keyword">socklen_t</span>* addrlen);</div></pre></td></tr></table></figure></p>
<p>　　创建好 <strong>TCP</strong> 套接字后，传输数据时无需再添加地址信息，因为TCP套接字将保持与对方套接字的连接，即TCP套接字知道目标地址信息。但UDP套接字不会保持连接状态，每次传输数据都要添加目标地址信息(如上述 <strong>sendto</strong>、<strong>recvfrom</strong> 函数)。</p>
<h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a><font color="#F40D64">文件传输</font></h2><p>　　1. 当读取到文件末尾，<strong>fread</strong> 函数会返回0。<br>　　2. 读取完缓冲区中的数据，<strong>read</strong> 并不返回0，而是被阻塞，直到缓冲区中再次有数据。<br>     　　　收到 <strong>FIN包</strong> 后，知道对方不会再向自己传输数据，此时调用 <strong>read/recv</strong> 函数，如果缓冲区中没有数据，就会返回0，表示读到了”socket文件的末尾”。<br>　　3. <strong>close</strong> 函数会使输出缓冲区中的数据失效，文件内容很有可能没有传输完毕，连接就断开了。<br>     　　　<strong>shutdown</strong> 函数会等待输出缓冲区中的数据传输完毕。</p>
<h2 id="文件描述符-vs-文件指针"><a href="#文件描述符-vs-文件指针" class="headerlink" title="文件描述符 vs 文件指针"></a><font color="#F40D64">文件描述符 vs 文件指针</font></h2><p>　　<strong>套接字描述符</strong>：其实就是一个整数，我们最熟悉的句柄是：<strong>0(stdin)</strong>、<strong>1(stdout)</strong>、<strong>2(stderr)</strong>。0、1、2是整数表示的，对应的 <strong>FILE*</strong> 结构的表示就是 <strong>stdin</strong>…<br>　　<strong>文件描述符</strong>：在Linux系统中打开文件就会获得文件描述符，它是一个很小的整数，每个进程在 <strong>PCB(Process Control Block)</strong> 中保存着一份文件描述符表，文件描述符就是这个表的索引，每个表项都有一个指向已打开文件的指针。<br>　　<strong>文件指针</strong>：C语言中使用文件指针作为I/O的句柄，文件指针指向进程用户区中的一个被称为 <strong>FILE结构</strong> 的数据结构，<strong>FILE结构</strong> 包括一个缓冲区和一个文件描述符，而文件描述符是文件描述表的索引，因此某种意义上说 <strong>文件指针</strong> 就是句柄的句柄(在Windows系统上，文件描述符被称作文件句柄)。</p>
<h2 id="进程间通讯-IPC"><a href="#进程间通讯-IPC" class="headerlink" title="进程间通讯(IPC)"></a><font color="#F40D64">进程间通讯(IPC)</font></h2><p>　　本地的进程间通讯(IPC)有很多种方式，但可以归结为下面4类：<br>　　　消息传递(管道、FIFO、消息队列)<br>　　　同步(互斥量、条件变量、读写锁、文件和写记录锁、信号量)<br>　　　共享内存(匿名的和具名的)<br>　　　远程过程调用(<strong>Solaris门</strong> 和 <strong>Sun RPC</strong>)</p>
<p>　　<font color="blue">网络中进程之间如何通信？</font><br>　　　首要解决的问题是，如何唯一标识一个进程，否则通信无从谈起！<br>　　　在本地可以通过 <strong>进程PID</strong> 来唯一标识一个进程，但是在网络中这是行不通的。<br>　　　TCP/IP 协议簇已经帮我们解决了这个问题，网络层的”ip地址”可以唯一标识网络中的主机，而传输层的”协议+端口”可以唯一标识主机中的应用程序(进程)。<br>　　　利用三元组(IP地址，协议，端口)就可以标识网络的进程了，网络中的进程通信就可以利用这个标识与其他进程进行交互。</p>
<p>　　<font color="blue">socket是”open—write/read—close”模式的一种实现</font>。<br>　　TCP/IP协议存在于OS中，网络服务通过OS提供，在OS中增加支持TCP/IP的系统调用—- <strong>Berkeley套接字</strong>，如socket、connect、send、recv等API。套接字API最初是作为UNIX操作系统的一部分而开发的，所以套接字API与系统的其他I/O设备集成在一起，这些接口的实现都是内核来实现的。</p>
<p>　　<font color="blue"> 套接字是一种进程间通信的方法，不同于其他进程间通信方法的是，它并不局限于同一台计算机的资源(如文件系统控件、共享内存或者消息队列等)</font>。套接字可以认为是对 <font color="blue">管道概念</font> 的一种扩展—-一台机器上的进程可以使用套接字与另一台机器上的进程通讯(客户与服务器可以分散在网络中)；同一台机器上的进程间也可以用套接字通信。<font color="blue">套接字与管道的区别: 明确区分客户端与服务端，可以将多个客户连接到一个服务器</font>。</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo分级目录与多标签]]></title>
      <url>/2016/07/16/hexo_hexo%E5%88%86%E7%BA%A7%E7%9B%AE%E5%BD%95%E4%B8%8E%E5%A4%9A%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p>　　无论是多标签还是分级目录，其最终目的都是为了更好的归档我们的文章，方便在查找时能够快速准确的翻开我们之前保存的博文。</p>
<h2 id="多标签"><a href="#多标签" class="headerlink" title="多标签"></a><font color="#F40D64">多标签</font></h2><p>　　多标签，就是想把一篇文章同时归档到多个标签里面，这样，通过任一个标签都能索引到我们的博文。而，用作标签的，显然是我们之前抒写的博文内容的 <strong>Keywords</strong>。<br>　　可以通过以下方式实现 <strong>hexo</strong> 的多标签：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tags: #文章标签可，空，多标签请用格式[tag1,tag2,tag3]，如下，注意!!"tags:"后面有个空格</div><div class="line">tags: [tag1, tag2, tag3, ...]</div><div class="line"><span class="section"># 下面这种方式似乎仅限于hexo 3.0，应该包括以上吧...</span></div><div class="line">tags: </div><div class="line"><span class="bullet">- </span>tags1</div><div class="line"><span class="bullet">- </span>tags2</div><div class="line"><span class="bullet">- </span>...</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="分级目录"><a href="#分级目录" class="headerlink" title="分级目录"></a><font color="#F40D64">分级目录</font></h2><p>　　什么是分级目录呢？直接上图！<br>    <img src="/img/hexo/HierarchicalDirectory.png" /><br>　　上图就显示了一个两级目录(左图)，由绿线标注的是五个一级目录，通过 <strong>·</strong> 开启的分别是每个一级目录下的二级目录。（右图）则是一个五级目录，同时，包含一个二级目录。<br>　　可以通过以下方式实现 <strong>hexo</strong> 的分级目录：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 这种方式似乎仅限于hexo 3.0，应该包括以上吧...</span></div><div class="line">categories: </div><div class="line"><span class="bullet">- </span>tags<span class="emphasis">_level_</span>1</div><div class="line"><span class="bullet">- </span>tags<span class="emphasis">_level_</span>2</div><div class="line"><span class="bullet">- </span>tags<span class="emphasis">_level_</span>3</div><div class="line"><span class="bullet">- </span>...</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[瞎谈 Socket 编程(一)]]></title>
      <url>/2016/07/15/linux_%E7%9E%8E%E8%B0%88Socket%E7%BC%96%E7%A8%8B_1/</url>
      <content type="html"><![CDATA[<p>　　从项目中一个实例说起，我们的目标是将决策层做出的控制小车的决策(主要是速度velocity还有角速度angular)，通过TCP网络传输的方式传递到与控制小车的FPGA相连接的RaspberryPi。也许你会问，为毛要通过网络传输，不能通过其他方式，比如串口，不是会更快点吧？<br>　　Maybe…不过，这是有原因的。<br>　　其一，我觉得应该通过以太网线直接将运行决策的PC机网卡与树莓派上的网卡直接相连接，再用网络传输，应该比串口快，或者说，更稳定高效。遗憾的是，我们没办法通过以太网线直接相连，而是通过WiFi，这是因为，其二，PC机唯有的一个以太网卡，拿去插激光雷达了，而激光雷达作为一个sensor，是决策所必须的。<br>　　其三，整个体系运行在ROS之上，而，把ROS体系中做出来的决策送到控制端的树莓派上，我们得自己想办法或者说Coding。刚好，找到有一个开源的ros通讯，恰好人家是通过TCP传输的，所以，就没想那么多，直接用上了。<br>　　可想而知，这个开源的ros通讯要做的，就是把决策层做出来的velocity和angular，通过tcp传送到运行在树莓派上的程序进而控制FPGA控制小车。搞过ROS的应该知道，在ROS中节点都是通过消息进行通讯的，那么，这个ros通讯节点要做的肯定就是订阅决策层做出来的关于控制的消息，然后通过网络传输出去，这些，你可以阅读 <a href="https://github.com/JoeyNeidigh/ros_tcp_comm">这个开源项目</a> 的源码进行了解。<br><a id="more"></a></p>
<h2 id="python实现的客户端"><a href="#python实现的客户端" class="headerlink" title="python实现的客户端"></a><font color="#F40D64">python实现的客户端</font></h2><p>　　下面是修改的该开源项目 <strong>sender.py</strong> 中一些关于 <strong>socket</strong> 编程部分的代码，显然用的是python下的socket库，那些API还是大同小异。像我这种不会python的都可以试着改改，加上本人对python无可奉告，这里重点还是放在 <strong>socket编程</strong> 上，关注点仍是编程的流程、具体使用哪些API，需要注意哪些细节上，下面会着重介绍。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> rospy</div><div class="line"><span class="keyword">import</span> rostopic</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sender</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment">#...</span></div><div class="line">        RECEIVER_IP = ...</div><div class="line">        PORT = ...</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">            <span class="comment"># RECEIVER_IP and PORT should be the same as Server configuration</span></div><div class="line">            self.sock.connect((RECEIVER_IP, PORT))</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            self.sock.close()</div><div class="line">            sys.exit()</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self, topic_message)</span>:</span></div><div class="line">        self.send_msg(<span class="string">"velocity:"</span></div><div class="line">            + str(topic_message.linear.x)</div><div class="line">            + <span class="string">":oriention:"</span></div><div class="line">            + str(topic_message.angular.z)</div><div class="line">            + <span class="string">":ok:"</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(self, msg)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.sock.sendall(msg)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            self.sock.close()</div><div class="line">            rospy.loginfo(<span class="string">"SENDER ERROR"</span>)</div><div class="line">            rospy.loginfo(e)</div><div class="line">            sys.exit()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    Sender()</div></pre></td></tr></table></figure></p>
<h2 id="C实现的运行在RaspberryPi上的服务器端"><a href="#C实现的运行在RaspberryPi上的服务器端" class="headerlink" title="C实现的运行在RaspberryPi上的服务器端"></a><font color="#F40D64">C实现的运行在RaspberryPi上的服务器端</font></h2><p>　　用了人家的客户端，那自己实现的必须是服务器端啦。下面的代码就是Linux下的纯C编写的服务器端有关Socket的关键代码。下面会着重关联这份代码，详细介绍 <strong>Socket编程</strong> 的主要流程，此外，了解Linux下和Windows下编程主要区别，以及涉及的网络传输、进程间通信等杂七杂八的细节。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></div><div class="line"><span class="comment">// tcp configure parameters</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_PORT	13000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE		4096</span></div><div class="line"><span class="comment">// used for get current ms, print process time.</span></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getCurrentTime</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;    </div><div class="line">  <span class="keyword">struct</span> timeval tv;    </div><div class="line">  gettimeofday(&amp;tv, <span class="literal">NULL</span>);    </div><div class="line">  <span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)tv.tv_sec * <span class="number">1000</span> + tv.tv_usec / <span class="number">1000</span>;    </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</div><div class="line">  <span class="keyword">int</span>	socket_fd, connect_fd;</div><div class="line">  <span class="keyword">struct</span>	sockaddr_in servaddr;</div><div class="line">  <span class="keyword">char</span>	buff[MAXLINE];</div><div class="line">  <span class="keyword">int</span>	recv_bytes;</div><div class="line">  <span class="comment">//init Server Socket</span></div><div class="line">  <span class="keyword">if</span>( (socket_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span> )&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"create socket error: %s(errno: %d)\n"</span>, strerror(errno),errno);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</div><div class="line">  servaddr.sin_family = AF_INET;</div><div class="line">  servaddr.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">//INADDR_ANY for automatically get host's IP</span></div><div class="line">  servaddr.sin_port = htons(DEFAULT_PORT);　　　<span class="comment">//set port as DEFAULT_PORT</span></div><div class="line">  <span class="comment">//bind local ip to the Server's socket</span></div><div class="line">  <span class="keyword">if</span>( bind(socket_fd, (<span class="keyword">struct</span> sockaddr*)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) == <span class="number">-1</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"bind socket error: %s(errno: %d)\n"</span>,strerror(errno),errno);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//start to listen for Client to connect</span></div><div class="line">  <span class="keyword">if</span>( listen(socket_fd, <span class="number">10</span>) == <span class="number">-1</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"listen socket error: %s(errno: %d)\n"</span>,strerror(errno),errno);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%lld(ms): ======waiting for client's request======\n"</span>, getCurrentTime());</div><div class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">    <span class="comment">//blocked until a client connects for saving CPU</span></div><div class="line">    <span class="keyword">if</span>( (connect_fd = accept(socket_fd, (<span class="keyword">struct</span> sockaddr*)<span class="literal">NULL</span>, <span class="literal">NULL</span>)) == <span class="number">-1</span>)&#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"accept socket error: %s(errno: %d)"</span>,strerror(errno),errno);</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">float</span> velocity;</div><div class="line">    <span class="keyword">float</span> oriention;</div><div class="line">    <span class="comment">//receive data from client(move_base output, velocity:...:oriention:...:ok)</span></div><div class="line">    <span class="keyword">while</span>((recv_bytes = recv(connect_fd, buff, MAXLINE, <span class="number">0</span>)) &gt; <span class="number">0</span>)&#123;</div><div class="line">      buff[recv_bytes] = <span class="string">'\0'</span>;</div><div class="line"> </div><div class="line">      <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"velocity"</span>, strtok(buff, <span class="string">":"</span>)))&#123;</div><div class="line">        velocity = atof(strtok(<span class="literal">NULL</span>, <span class="string">":"</span>));</div><div class="line"> </div><div class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"oriention"</span>, strtok(<span class="literal">NULL</span>, <span class="string">":"</span>)))&#123;</div><div class="line">          oriention  = atof(strtok(<span class="literal">NULL</span>, <span class="string">":"</span>));</div><div class="line"> </div><div class="line">          <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"ok"</span>, strtok(<span class="literal">NULL</span>, <span class="string">":"</span>)))&#123;</div><div class="line">            <span class="keyword">if</span>(velocity != <span class="number">0.0</span> || oriention != <span class="number">0.0</span>)&#123;</div><div class="line">              <span class="built_in">printf</span>(<span class="string">" %lld(ms): "</span>, getCurrentTime());</div><div class="line">              <span class="comment">//...</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//...</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    close(connect_fd);</div><div class="line">  &#125;</div><div class="line">  close(socket_fd);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Socket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言中结构体内存free]]></title>
      <url>/2016/07/02/programPearls_C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E5%AD%98free/</url>
      <content type="html"><![CDATA[<p>　　来自实训第三天的某段代码，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> vec2f &#123;</div><div class="line">  <span class="keyword">float</span> x;</div><div class="line">  <span class="keyword">float</span> y;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> vec2f vec2f;</div><div class="line"> </div><div class="line"><span class="function">vec2f* <span class="title">vec2f_alloc</span><span class="params">()</span> </span>&#123;</div><div class="line">  vec2f* ret;</div><div class="line">  ret = ( vec2f* ) <span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( vec2f ) );</div><div class="line">  <span class="comment">//if( !ret ) // if error occurs</span></div><div class="line">  <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vec2f_init</span><span class="params">( vec2f* v, <span class="keyword">float</span> x, <span class="keyword">float</span> y )</span> </span>&#123;</div><div class="line">  v-&gt;x = x;</div><div class="line">  v-&gt;y = y;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function">vec2f* <span class="title">vec2f_new</span><span class="params">( <span class="keyword">float</span> x, <span class="keyword">float</span> y )</span> </span>&#123;</div><div class="line">  vec2f* ret = vec2f_alloc();</div><div class="line">  vec2f_init( ret, x, y );</div><div class="line">  <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vec2f_delete</span><span class="params">( vec2f** v )</span> </span>&#123;</div><div class="line">  <span class="built_in">free</span>( *v );</div><div class="line">  *v = <span class="literal">NULL</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vec2f_print</span><span class="params">( <span class="keyword">const</span> vec2f* v )</span> </span>&#123;</div><div class="line">  <span class="built_in">printf</span>( <span class="string">"[ %g %g ]\n"</span>, v-&gt;x, v-&gt;y );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　　<font color="green">关于 <strong>vec2f_delete</strong> 函数参数为什么是 <strong>pointer to pointer</strong>???</font><br>　　原因可能是，<strong>C</strong> 语言里面没有 <strong>引用</strong> 这个东西，上面释放内存的函数，除了将结构体那块内存释放外，为了避免 <strong>野指针</strong> 的情况，还需要将指向结构体那块内存的 <strong>pointer</strong> 置为 <strong>NULL</strong>。假如写成下面这种形式，<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">vec2f_delete</span><span class="params">( vec2f* v )</span> </span>&#123;</div><div class="line">  <span class="built_in">free</span>( v );</div><div class="line">  v = <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　由于函数参数传递的临时拷贝，<strong>v = NULL;</strong> 只在函数作用域内有效，调用该函数并不能真正使 <font color="red">指向结构体那块内存的 <strong>pointer</strong></font> 失效，<strong>野指针</strong> 仍然存在！
　　</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Java到底是不是一种纯面向对象语言？]]></title>
      <url>/2016/06/30/programPearls_Java%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%8D%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BA%AF%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%AD%E8%A8%80%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>　　参考博文 <a href="http://www.codeceo.com/article/why-java-purely-object-oriented-language.html">《Java到底是不是一种纯面向对象语言？》</a></p>
<p>　　<strong>JVM</strong> 在创建对象的时候，实际上会创建两个对象：<br>　　　一个是实例对象。<br>　　　另一个是 <strong>Class</strong> 对象。该 <strong>Class</strong> 对象在 <strong>JVM</strong> 内仅仅会装载一次，该类的静态方法和静态属性也一同装载，<strong>JVM</strong> 使用该 <strong>Class</strong> 对象来创建具体的实例对象。<br>　　例如，在下面的 <strong>Java</strong> 语句中，将有两个对象被创建：<br>　　　　Employee emp = new Employee();<br>　　一个是实例对象 emp ；另一个则是 Class 对象，我们可以通过 <strong>Employee.class</strong> 引用到它；这个 Class 对象拥有所有的这个类定义的静态变量和静态方法，同时，如果我们访问 通过 emp 对象来访问静态内容，会发现它其实指向的对象就是 <strong>Employee.class</strong> 。</p>
<p>　　<font color="green">静态内容确实被证实属于一个对象</font><br>　　　为什么静态内容在一个对象中（不管是emp还是emp2）改变了，在另一个对象中也同时改变，因为这两个对象改变的都是在 Employee.class 同一个对象里面的内容。</p>
<p>　　Java 官方为每一个原始类型推出了对应的包装类（比如：Integer 对应 int，Long 对应 long，Character 对应 char），所以，其实现在我们可以为原始类型创建一个包装对象，同时对它们做对象相关的操作。<br>　　　JVM看来它把所有的 “原始类型” 都是当作对象处理”</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[写于幸运保研后]]></title>
      <url>/2016/06/12/OverlappingSounds_%E5%86%99%E4%BA%8E%E5%B9%B8%E8%BF%90%E4%BF%9D%E7%A0%94%E5%90%8E/</url>
      <content type="html"><![CDATA[<p>　此刻，我的内心居然出奇的平静。<br><a id="more"></a><br>　首先，感谢JK、感谢JJ在我最迷茫的考研路上，他们及时的帮助我，也发自内心的开导我。真诚祝愿他们坚持下去，考研成功。还有，如果有什么我能帮上忙的，尽管来找我！</p>
<p>　想想这一路一起承受失落的小胖、XP、SY，我们终于熬到头了，恭喜恭喜。我，我们是如此幸运，也谢谢你们，谢谢我们之间在这段时间的相互帮忙。</p>
<p>　经历了这么一次如此戏剧性的人生动荡之后，我发现我的规划是如此脆弱，我真的已经在珠海这盆温水之中被煮的忘记了竞争二字。我也终于明白，自己真是一个彻头彻尾的书呆子，少了朋友，少了生活，少了正常人这个年纪需要有的自理与独立。</p>
<p>　对于这么一个新生的学院，当我得知自己保不上研，得知这个新生学院在这件事上的生疏，以及产生的漏洞，以及学校对于一个新生学院的如此般对待时，我真的不痛恨这个学院。只是有种发自内心的，希望比自己优秀的几个小伙伴能够争取到几个珍贵的名额，顺利报上。更希望，自己能够把自己在这件事上的遭遇，自己看到的觉得不够完善的地方说出来，希望这种方式能够让学院在这件事上做得更好，让下面的师弟师妹们能少一个类似我的遭遇就少一个。</p>
<p>　<font color="#258FB8">那天中午还要仓促准备面试，不知为何，写着写着就断了…</font></p>
<p>　早上整理桌面的时候，发现一个命名为”随笔.docx”的文档，打开一看，发现里面就是上面的文字。想想也是那会的真情流露，怕丢了，就扔在这里吧。SHIFT + DELETE，将word文档干掉！心血来潮，顺道把这块一年的诸事理理吧，希望能清走这好一阵子的负能量…</p>
<p>　现在是2016-6-12的早上，我刚刚在忙碌了两个月左右的项目后，休息了一个多星期了。下午补课，要去讲Hardware Software Co-design实验课的最后一次课，形式是，期末pre。</p>
<p>　时间线接上。</p>
<p>　得知保上研已经是大三暑假后的一个多月了吧。那个暑假，感觉是另一种浪费时间吧。以前的暑假，总在悠闲的自学计划中度过，而那个暑假，因为毕设，或者说可笑的实习，去了东校待了两个月。老师口中的公司，老师口中的工程师带，老师口中的宏伟蓝图，哈哈，其实就是早出晚归自己泡实验室，而且是，那种像泡图书馆那样泡实验室。我都不知道，都已经两三年了吧，那个实验室怎么还跟刚成立一样，什么设备都没有，或者说，核心氛围都没有。更准确的说，我觉得那里更像一个自习室，环境倒还不错，有空调，景色也好。可惜，我的毕设弄的是射频方面的，没有硬件技术，没有有经验的工程师带，真的只能从零开始，也就是吹水…可能老师许久不搞技术了吧…那个暑假，除了自己看了、整理了很多理论的东西，基本没有什么实质性的内容。厌倦了那种开会听别人说一些毫无实质性的东西，厌倦了老师一堆堆有的没的，空虚缥缈的东西…也怪自己能力不行吧，一来没能早点捣鼓这些东西，二来上手慢，迷迷糊糊的在理论间徘徊。</p>
<p>　那个暑假真不记得什么了。只知道自己真的很努力的，早上7：30准时离开至二，到二饭打包早餐(入门第一家台湾小吃的面包)，然后一般就是会感觉到开始升温的走过中环、篮球场、图书馆、JIE、SIST、Lab314，然后就是到晚上21：30左右，慢悠悠的滚回宿舍。路程比较远，加上是步行，20分钟一趟吧。因为是暑假，广州也热，所有起早趟黑的。不过，实际性的东西真没搞出来，现在想想，我宝贵的时间啊…哎，经历本身就是一种财富吧。</p>
<p>　本身已觉无趣，加上要开始办保研的申请资料，所以，立马滚回了珠海。前前后后又荒废了一个月，直到保研名额初次公示的时候，也就是得知自己保不上研那会，熬过了一两天后还是决定滚回家先(因为暑假没回去，本打算保上研的话等中秋再回)，然后灰溜溜回来拼命备考！对哦，其得知保不上研那会我还在担任小飞机实训的助教，8、9天吧，忘了。知道消息那会比较忙，好像正是考核的时候，所以还没有考虑保不上研后该如何处理的问题，这也可能是实训结束后，静下心来忽然觉得好慌乱的原因吧。</p>
<p>　现在想想那两三天，我打了两个错误的电话，一个是给某老师，一个是给某同学，那真是错误的决定！</p>
<p>　匆忙的独自一人(第一次吧)转广州，转地铁，转高铁，回了趟家。我记得呆没有一周吧。我记得还时常拿出高数书复习。还记得我看到第四章不定积分。以后遇到事情了还是要回家，家真是港湾，给你充满电，止血，修复！</p>
<p>　回来的第二天中午，就接到电话，说，拿到资格了，那个时候也顾不上面试了，就匆忙写了上面的随笔。</p>
<p>　而后的三个月，现在也没什么印象了。比较深刻的是，尽心尽力的完成了自己的第一份助教(算上实训的话，应该是第二份了，哈哈)，尽心准备教学大纲，然后准备demo，然后准备每一周的课程ppt、某些关键课程还有博客，确实把自己能表达的方式都做了，也把自己想教给大家的教了，想说的说了。那是一次自己觉得还不赖的经历。</p>
<p>　还有就是毕设。每一两周辗转广州去被注水就不说了，哎。自己这方面嘛，开始设计原理图，设计PCB。因为之前没接触过，而且，后来才发现，自己挑了个硬骨头上手，SB!期间肯定是各种问，但是你不能问老师，他觉得这太基础，入不了他的眼，问师兄，师兄不是这个领域的，问同学，我们周边压根没有太多做PCB的，更别说搞射频的。所以，就是各种论坛留言，还好有一个华科的高中同学JS，还有之前过来主讲小飞机实训的两个深大的同学。谢谢他们分享的宝贵经验！！应该磨蹭了一两个月吧，做PCB，找嘉立创印板，到立创商城、天猫买各种元器件，终于可以开始焊制。这里要非常感谢实验室的吴老师，也是我的焊工师傅，我可能是他的大弟子，哈哈。真是非常感谢吴老师，非常耐心，细心地把他知道的，自己实践的宝贵经验分享给我，还手把手教我焊接。现在还记得，几个月后，向您道谢，和您分享关于毕业设计的看法，交流近况的美好交谈，您那句，”常联系”，我会记住的。</p>
<p>　助教的课结了，毕设也暂告一段落。7、8天的时间，我和两个高中死党去了趟杭州，那是我第一次出省！现在回想那次旅程，还OK啦，很多第一次。还有第一次坐飞机、第一次坐火车吧。可能是自己性格，或是其他某些个人原因吧，感觉自己不适合旅行，过几年看看吧，不知自己这一点是否会有所改变。珠海、广州、广州白云机场、杭州萧山机场、武林门、动物园、西湖、浙江嘉善、什么古镇来着、上海某个郊区，上海市中心(东方明珠塔、黄浦江、外滩)，浦东机场吧(不是就是上海另一个)、珠海机场、回宿舍了，回来下着大雨。一路基本都是雨。在浦东机场那个晚上，难熬。各种吃，外婆家，吃了三次吧的绿茶。西湖苦逼骑单车。”晴湖不如雨湖，雨湖不如雾湖”。</p>
<p>　回来隔三天吧，统计完成绩的事，就回家了吧。然后，在家呆了，或者说真是修养，第一次真地在家修养。两个月左右吧。还是跟往常一样，不过今年更觉得无话可说的过年同学闲逛，哎，可惜了这段初中友谊。不过，第一次到叔伯、姑姨家拜年还是挺美好的，毕竟，自从上高中以来，最清闲的一个过年吧(内心还是有担子没放下吧，希望今年过年可以放下)，真不是那种没有人情的娃，实在是自己觉得，路还长，而且又没工作又没成家，这些事情以后有的是时间。什么年纪就该做什么事。印象最深的，应该是十四元宵夜和老妈去”神前”吧，已经四年了，上一次还是高考前那一年过年。回家，还有的就是最后给即将要高考的表弟补了几天习，不知道他考得怎样，希望他能上一本吧，考上他想要去的大学。</p>
<p>　然后就是回校了。先一个月，应该就只有软硬件的助教的任务吧，自己因为身体原因，一直在修养，某些事情还是能避则避吧。那一个月，感觉什么都变了，同学变了，世界变了，或者说，是我变了吧。我也在寻找某些缘由。</p>
<p>　而后的两个月，四月、五月，就是忙碌的项目期，期间还有助教。还是身体原因，没去实验室，前期也允许自己在宿舍作业，设备也方便拿回宿舍调试。后期两三周，因为要与小车接上，必须到实验室，我选择晚上过去。因为一个人，可以不开空调，而且，晚上，比较凉爽，过去院办，可以少流汗。这两个月，虽然一个人做原本两个人的活，不过，没什么啦，我觉得ok，学到点东西了吧。最后，小车还是没怎么达到我要的效果，不过，not bad，现在能够进行某些小角度转弯的自主导航，速度上也比前面的经常卡顿好很多，不过，路还很长。</p>
<p>　对哦，差点忘记，某段不到一百天的恋情…</p>
<p>　对哦，忘记说，我毕业设计老师给我我个中，然后，还好我顺利毕业，没有影响到任何事，除了我不可能是优秀毕业生，这个本来也不强求。</p>
<p>　对哦，更重要的事，我们又拿了个大移动杯亚军…</p>
<p>　还有两件事没放下。一件，已经到不用考虑放不放下了，应该是已经放下了吧。另一件，希望不要阻碍我的研究生生涯，god bless me…</p>
<p>　吃早餐，下午还要上课呢。</p>
<p>　</p>
]]></content>
      
        <categories>
            
            <category> Codes源于生活 </category>
            
            <category> Overlapping-Sounds </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Basketball Never Stops]]></title>
      <url>/2016/06/09/OverlappingSounds_Basketball_Never_Stops/</url>
      <content type="html"><![CDATA[<p><a href="http://user.qzone.qq.com/1109197209/2">2015-06-18，发自QQ空间</a><br>　　这个无聊的值班的晚上，终于有时间写写一个月前就想着写点什么的什么了。会是最后一次吧，说不出再见，但，回首这三年，回首这三届比赛，也回首曾经在一起的你们….<br><a id="more"></a><br>　　两年前，年少轻狂，打球也只会冲冲冲，我的眼中没有你们，只有那个比铁还铁的篮圈。第一届，其实很想证明点什么，而且，拥有庭希、粤超、伟韬、帅超、梓童、悦旻、小胖，状态正佳的四大攻击线，我认为我们绝对是那一届最强的，也是我三年三次组队中认为最强的攻击阵容，没有之一。但，也许，真的是进攻赢得球迷，防守赢得总冠军吧。其实一开始打班赛，我没什么多大兴趣，因为那个时候学习生活都遇到比较大的麻烦，所以抱着试一试 随便玩就去打了。也许正因为这难得的放松吧(此后再没有了)，那一届的手感总的来说连我自己都觉得不可思议。还记得我们第一场大比分领先结果末节崩盘，最终加时告负吗，哈哈。至于第二场，生死战哦，但是全队上下根本提不起劲，一直落后落后，还好有那一场雨，似乎给了我们转变的机会。也许这是上天的安排吧，周中我们转战馆内，结果呢？我们几个人跑死他们了，用一波接一波的进攻把他们打的无话可说。就这样，在酣畅淋漓的进攻后，我们小组出线，进军四强。也许又是命中注定吧，原本以为小组第二打队长的，没想到推到决赛再相遇了。没什么好说的，又是一波流，半决赛变成我们的进攻表演，赢了多少分我忘记了，但是我记得我们是以强者之师进军决赛的，而看到对手，我们每个人心中绝对是必胜之心的。我甚是。然而，也许就是之前的过于一帆丰顺吧，我们够激情，但不够紧张不够谨慎。我依然记得第一节临近结束，我们进攻，我却漫不经心的失误了，结果队长抢断一条龙，而我居然还不想着快点回防。也许这就是比赛的一个预兆吧。我们充满激情，咄咄逼人，进攻端表现近乎完美，但是，防守端却屡屡让对手轻易得分。最后，我们试图追上，但，关键球还是没有防下。第一届，我记住了我们跑不死的风一般的流畅快攻。但，一直留在内心深处的确是，比赛最后三秒，看着伟韬空位，我却在自己全场十多投仅一中的三分表现下还选择单干，勉强出手，让队伍失去扳平的机会。虽然，赛后我向伟韬道歉，他也一直说，这是我的风格，没事啦，但是从那时起，我就知道，我不该这么打球。我想改变，我应该信任队友，因为，他们是和我一起拼杀过来的队友。<br>　　我知道我传球能力有限，但是，从那之后，我下定决心，每次打球，多想着传球吧，哪怕试着传一次，传几个漂亮的球。<br>    <img src="/img/OverlappingSounds/Freshman_runner-up.jpg" width="640px"/><br>　　<font color="green">第一届</font>，灵活的老是一起炮轰的死胖子；抢板神勇的梓童；中投罚球线的粤超；带球慢吞吞的伟韬；慢悠悠的帅超；半决赛睡过头的小胖。杯杯啊，错过你了！！！！！</p>
<p>　　<font color="green">大二</font>，终于想和也和班里的大伙们打成一片了，教唆大家打球，我又一次站到这个位置上。这一年，大伙打球的积极性普遍高涨，每周固定一打，和大家玩得很开心。我也慢慢从小胖，帅超身上学会传球。我渐渐喜欢上传球了，似乎传一个漂亮的球，一起打成一次配合，是很爽很爽的事。学习生活，变得简单，那感觉就像初中一样，傻傻的。打球，和大伙一起打球，现在想想都忍不住笑起来了。也终于，第二届来了，班里每个打球的，都兴奋起来，打！今年拿个冠军。这其中，我绝对是最渴望的。我依然记得，当我打开群邮，已经莫名的浑身出汗了。我想，我非常想打比赛。因为这已经是我唯一打的比赛了，我内心似乎还想证明什么。这一届的我，发挥可谓是第一届的一半，一年没训练固然是一个原因，但是，这种太想发挥才是主要原因。从那一届起，每次赛前，我都会莫名其妙的开始吐。有人说，这是注意力极度集中的表现，伟大的赛车手都有这种情况…很遗憾，新的一届，有新的规则，我们和9班分开了。我还记得，赛前我们曾约战13级，我们，就是1班和9班。因为我想，这一次我们要弥补遗憾，夺回属于我们的冠军。但，事与愿违，我们分开了，我一开始有点不情愿地和八班组在一起。第一场，对手是13级，比较弱，我们毫无疑问的强势晋级。当我看到贤达，我知道，我要赢，和这个大胖子一起赢，不管对手是谁。莫名地，我又开始担心起来，我希望和9班会师决赛，但是，万一，我们先被淘汰呢？可惜的是，9班先我们输了…我还记得，得知消息那一刻，我似乎很懊悔，又似乎松了口气。心想之前的愿景泡汤了，还要继续战斗下去吗？算了算了，打到哪算哪吧，反正就这样。所以，我们迎来了第二个对手，同级的柱哥 老板 颖坤他们(没想到最后一年，对手都成队友了，哈哈)。没什么好说，兄弟对手，就该拼尽全力，对得住每个人。我们限制住老板了，最终也如愿取得胜利。 那场比赛结束后，我发现我们进军四强了，下一场输赢都可以打多两场，这样整个杯赛就能够打满了。那个时候，打多一场比赛，其实是我最在乎的。走到这里，我开始憧憬，回想一起走过的这两周，整个队伍运转还不错，贤达 比大一机会更多的帅超 王尧 还有强大的女生，到这一届，我才注意到女生也是我们中的一员，这一届拼尽全力打完上半场，我们都会站在场边，疯一样的为这几个女生加油，果酱姐 铿 晓鹏 子瑶….我觉得，我们可以夺冠，反正就差两场。所以，半决赛打13级，我心想，一定要得分得分，打快打快，压制住他们，我要进决赛。那场比赛很艰苦，是我大学到目前唯一一次打到像高中一样快拉大腿的一次(大四打完，仔细想想，还是这场最苦…)。比赛结束前4分钟，我们落后7分，快输了，我也快放弃了，我觉得顶不过去了。这个时候，我们防守，贤达跟我说，没事，你放开打，还有时间，多冲一下。整场比赛，我发挥不算好，他们似乎都知道我的死穴，我的快攻打不了几个，不是没上进就是被他们造进攻犯规了。再试一下吧，反正就剩四分钟。他们投篮没进，贤达抢下篮板，扔给了我，我不管那么多了，持球往前冲，还好这一次打进了，随后又防下一个，投中中投。又一次打快攻，急了急了，没上进，我冲到了篮板后面了。这个时候，泽鑫抢下篮板，补篮得手，还犯规了！我兴奋的冲上去，大声的和他庆祝。那一次，我深深地体会到，相信队友，信任队友，这样打球真是太棒了！虽然没罚进，但我们又防下一个，贤达后仰投中，我们终于反超比分了，整个队伍气势都回来了。我们又防下一个，时间也不多了，他们犯规，帅超第二球罚中后，他们只有3秒时间，发出边线球也只能从半场扔出去。我们终于赢了，最后时刻反超！！！我管不上多累了，冲上去和队友一一呐喊庆祝。太不容易了，那一刻，我感谢每个队友，是他们帮我完成愿望，我们共同的愿望，不然，我就是罪人了。泽鑫，谢谢你，拯救了我！谢谢每个队友。那一次，我真正体会到有队友在身边，才是我的依靠；和队友一起并肩作战，去拿到梦寐以求的冠军，也许才是我最渴望的。</p>
<p>　　那个周末，累，又拉伤了左腿。打完半决赛下午，我又赶到东校打潮汕杯，中途已经抽到不行了，实力比较悬殊，大家一起赢得很开心很轻松。第二天的潮汕杯半决赛，不知道为什么，有一两个厉害的师弟没有来，挺着伤病，挺想打好的，可惜实力不计，一顿浪头，大比分败下。越想赢越浪头吧加上比分落后太多，老想用三分追上，就浪头了N多三分球。那个周末，&gt;6+&gt;4+&gt;9没有一个三分入账……</p>
<p>　　可恶的赛程啊，因为比赛已经一调再调，决赛只能在周三下午打。我拉伤的左腿加上另外两场的消耗，周三打的时候还没好。又一次<br>　　站在决赛舞台上，可不会这么轻易放弃，我还是决定拼尽全力，因为最后一场嘛。而且，已经和对面的凌峰早早约好决赛见(这个对手最后一年，我们成了队友，有趣，哈哈)。第一节，两队发挥都挺不错的，我知道自己不太行了，而且赛前就想着得改变改变，努力调动起全队。所以，我第一节减少蛮干，机会不好，就导出去，让大家运转。那个第一节，绝对是我们整个系列打的最好的一次，全面开花，球轮转流畅，我们和对手战平。第一节结束，看着大家表现，我兴奋地和大伙击掌起来。确实，那真是一节美妙的发挥(大四那年打完，和小胖回忆起来，依然觉得那一节是一节非常棒的比赛，每个人都发挥，每个球都合理，单节比分好像是22：22， 不错吧)！！女生上场，我记得晓鹏技惊四座，即使一双高跟鞋也快如闪电。从此有了风一样的女子的称号，我们领先进入下半场。可惜的是，终于还是没顶住，第三节被对手连连打反击得手，一眨眼，我们已经落后15分左右了。辛辛苦苦追了后半节，还是没有缩小分差。最后一节，决定放弃了，我们撤下几名打的很累的首发，虽然有伤吧，但我不知道为什么还是决定继续打下去。那个时候，我没想赢，可能是觉得又一次输了，不太甘心，又使不上劲的无奈吧；不过，赛前说要拼到最后一秒，所以还是打完吧。我调动队友，”反正都输那么多了，放开打吧”。那最后的比赛时间，也许正是我一年的改变吧，不紧张，不担心。和队友一起迈开步伐，导球，每个人出机会，我都会喊上，没事，投。还有，招呼队友一起回防，快点转身。享受最后的时间，享受和大家一起打球，一起为一个目标使出浑身解数的过程。比赛结束，晓庭 凌峰很棒，他们夺冠实至名归，我那时应该是有真心送上祝福的吧，忘了，不过那个时候内心挺平静的。<br>    <img src="/img/OverlappingSounds/Sophomore_runner-up.jpg" width="640px"/><br>　　我们又一次败倒在这个舞台。但这一次，正如我所说的，没什么遗憾啦，真的尽力了。那一年，我记住，我们女生没一场比赛下风的；我记住，我们完美的决赛第一节；我记住，我们一起拼命，不气馁，靠全队上下逆转进军决赛。享受，享受比赛的每一秒钟，享受和这群家伙一起为拜托千年老二而孜孜不倦，最后还是老二的过程。贤达 梓聪 豌豆 志灏 小胖 帅超 秋娘娘 捞捞 果酱姐 擦板铿 子瑶 风一样的晓鹏…</p>
<p>　　依稀记得那个暑假，当你们都陆陆续续走了，我打球的热情也逐渐消失了。那个时候我才明白，其实在哪里打球，打不打比赛不重要，重要的是有谁和你一起玩。没人一起玩，没人一起说说笑笑，一起为每个好球嚷嚷，打球没什么意思的，嘻嘻。</p>
<p>　　回到两三个月前，当又一次班赛报名来了的时候，还是老样子，约吗?一番吹水之后，二哥又出发了。这一次，大伙的想法是，反正周末都打球，就打比赛咯。超哥说，怎么也拿个冠军吧，千年老二不好。命中注定，女生牵线，我们和四班组成战队(大可可 老板 颖坤)，再一次征战大移动杯，而他们，同样和我们一样渴望。另外，还有研究生师姐(邵阳师姐)的加入。男生们还记得第一场球紧的跟屎一样吗？还好有大可可带领女生们拉开比分，让我们最后一节轻松下来。也许冠军就在那一次萌芽了。内外兼备，防守强硬，女生强悍，这不正是冠军之师吗？从那之后，这成为每一场我的信心来源！还记得第二场第一节防了对手一个鸭蛋吗？最艰难的应该是在荔圆的坑上大战。千万不要忘记，我们从那一场起一直说的口号，”我们有信心，有什么困难我们比赛的时候一起解决”。而那一场我们确实做到了，而且做的很好。被追上，叫个暂停，我们讨论着要加强上线防守，然后进攻的时候能打快就打快。之后，就是我们上线两个大闸，捞捞和小胖轮番抢断，内线也开始打活，一举将比分拉开！但，真正的危机才刚刚开始。那就是半决赛前夕，当我得知女生不能打了，我安慰自己，没事，对手也不能打了(因为某种奇葩的女篮院队规定…)，我们还有果酱姐和师姐。但是，当得知老板也有事打不了了(这里，我不禁想起比赛结束后，老板赶来场边，我骗他输了的时候，他那懵逼的样子，哈哈哈)，我有点害怕了。要是因为人员不齐输了比赛怎么办？到时要是很紧怎么办？有信心决胜吗？那天下午，我是一直在祈祷下雨的，因为我看到对手身材都挺不错的(原来有个家伙是裁判)，但最终还是开战了。不管了，大家尽力，我喊着(其实心里很虚，所以开场才会畏手畏脚)，我深刻记得帅超那个中投带给我的信心。加上几个回合之后，我知道对手没有想象中强，我开始加快进攻速度。真心的说，那个时候，是在场上的你们给了我信心。请不要在意那个随意丢球后我对你们大喊，我只是希望我们这样继续下去，因为决赛就在眼前了，很近很近，千万不能错过。我记得那场比赛，有一个快攻，可是我已经被逼上死角了，正想硬上，刚好看到捞捞熟悉的又一次插上，我毫不犹豫的传给他…原来我们已经不知不觉有了默契啦，哈哈。赛后，老板赶回来了，虽然没能打上比赛，但我知道，有他的决赛这次肯定行。晒着脚丫，看着这群家伙欢快的打着野球，那个时候，篮球是多么的美妙啊。<br>    <img src="/img/OverlappingSounds/Junior_baseball-moment.jpg" width="600px"/><br>　　终于，<font color="green">第三次决赛</font>来了，因为另一场半决赛推迟，我们足足等多了一个星期，大家都按捺不住了。感谢豌豆赛前提供的情报，很遗憾没能像杯赛开始前说的一样会师，但正是你的情报给我们战胜对手赢得更多资本，我们会帮你们报仇的。<br>　　决赛前一天晚上，我已经睡不着了。很早起来，去饭堂买早餐，之后就慢悠悠边吃早餐边看黑篮。之后是标配的KD集锦。大伙很早来到榕园球场。刚开始很晒很晒，我们有说有笑地练着球，但我知道，大家都挺紧张的。应该属我最紧张吧，但是不能让大家看出来。不巧，临近比赛开始，天气发生变化，最终只能在馆内比赛。我内心是不愿意的，因为视力问题，在馆内发挥不稳定，但是，没办法，打就打吧。我看得出，对手挺喜欢在馆内打的。怎么说，每次比赛都是赛前挺紧的，但四场球下来，我们都能调整好，比赛后就能慢慢进入状态。还记得我们第一节联防出问题了吗？让对手得到很多机会，还好他们没有打进，第一节才能战平。第二节我们做出调整，FMVP发挥稳定，内线造杀伤，我们防守也改过来了，所以这一节拉开比分。第三节嘛，女生的show time直呼过瘾，她们的传球，进攻让我们男生惊呼。研究生师姐，铿，大可可，果酱姐，完美演出。虽然有对手受伤，人员不整的问题，但是，即使她们完美发挥，我们会发挥的更加出色。最后一节，比分已经拉开到15分左右，离冠军只有一节的时间了。我告诉队友们，此刻，我觉得大家都放松下来了，准备上场完成这次演出了。我只知道，我们在对手半场轮番导球，颖坤杂耍般的运球，带领我们把对手玩的团团转，几乎犯不了规。内线，老板依旧强悍，奇立苏醒，我们完全掌控局面。遗憾的事，最后时刻没能换上大神和秋娘娘上场，是我的错，不然，这就是一次完美的属于每个人的时刻，在这里，再次说声抱歉。很对不起！！</p>
<p>　　终于，比赛结束的那一刹那，我都不敢相信这一刻终于到来了。我们相拥在一起，用绕圈的方式庆祝着…..<br>    <img src="/img/OverlappingSounds/Junior_champion_arm-in_arm.jpg"/><br>　　三年时间，两亚终一冠，挺值的了。就像帅超说的，我们不离不弃，终于摆脱千年老二了。这一届，五场比赛，奇立说场场吊打，算吗？倒是每场都赢两位数以上，想想挺不容易的。这一次，冠军的泪水告诉我们，一切的不放弃，一切的团队合作都是充满意义的，充满回忆的。记住一起围剿高佬的场面，一起为女生喊MVP的情景，一起赛前水群约战酸奶的温馨，暂停的时候一起出谋划策；记住FMVP，强硬的老板；带球犀利，似乎决赛破蛋的颖一中；MVP大可可；查娟 静雯姐 敏菲 柴大神 灵巧的师姐； 强悍的铿； 外线鬼门关 小胖 捞捞； 内线碾土机奇立； 不轻易出手一出手必有的帅超；还有不断进步的大神 秋娘娘。 当然当然，就是三年来陪伴在我们左右的思宇带领的拉拉队，俍聿 柳哥…<br>    <img src="/img/OverlappingSounds/Junior_champion.jpg" width="640px"/><br>    <img src="/img/OverlappingSounds/Junior_champion-cup.jpg" width="300px" style="float: left; margin-left: 80px"/><br>    <img src="/img/OverlappingSounds/Junior_champion-medal.jpg" width="300px"/><br>　　三年追求，也许我们是时候和大移动杯说再见了。 一起为了这个杯杯奋斗过的兄弟姐妹们，感谢你们，感谢你我一起拼尽全力，去试试自己能够走多远。感谢篮球，带给我们不能用成败衡量的美好回忆，希望以后，当你我回忆起那个夏天，那个夏天，那个夏天我们一起为了同一个目标走到一起，最后结下友谊时，嘴上能带着微笑，带着自豪。<br>　　我希望你们都在，我们也都肯定会在的，对吧。</p>
<p><font color="#258FB8">2016-06-09，补充</font><br>　　可恶的QQ日志，居然不会定时保存，算了，等我心血来潮再来重写吧。</p>
<p><font color="#258FB8">2016-06-22，写于勇士丢冠后 the day after tomorrow</font><br>　　连续打了两天球，果然，早上被痛醒了。不过，今天还要玩，因为，真是最后一次了。<br>　　最后一次 真会是最后一次讲吗？因为，我欺骗你们太多次了。<br>    <img src="/img/OverlappingSounds/Jersey.jpg" width="320px" style="float: right; margin-left: 30px"/><br>　　对，这是我们唯一的，看似能是一个整体的东西。今天，我们将第一次整齐地穿上他，为他第一次而战。但我没想到，却是最后一次聚齐…也许吧。</p>
<p>　　这一赛季 过的断断续续 因为 人从没齐过。曾经的你们说，打进决赛就会回来。我信了，你们，放飞机了，不过，这不重要，我明白，社会离我们越来越近了，我们该去接受现实。但我希望，也许将来某一天，你，可以放下键盘，摸摸肚皮的赘肉，然后，拿着颗篮球，重返熟悉的球场。那时，我们是在一起的，因为，这一段回忆。</p>
<p>　　在从家回珠海的路程上，我和小峰峰闲聊，他约我打球，我拒绝了，因为还在路上。然后不知怎的，我开玩笑地说到，假如今年打班赛，约一发，他很快就回了，可以啊！<br>　　不谋而合的还有老是一起玩耍的柱子，对他，似乎预谋更久。每次打野球，时不时会跟他聊到，只是看看，这家伙是不是真没骗我…<br>　　风一样的女子的晓鹏，还有后来半决赛赶过来助阵的丝雨，两个都非常喜欢打球的女生。<br>　　然后，两年的战友们。我想，怎么叫你们回来打球都说自个忙呀，还有，老说回来，可是，没一个回来的。打个班赛吧，也许你们都TM想回来了，对吧。反正，我提了，老样子，再一次很多人随便地随意了，然后，我们参加了。</p>
<p>　　每一年的第一场都是那么不好打…关于比赛，没怎么想说的。让我印象深刻的是，我们一起冒雨走在后山的小路，赶脚比赛的说说笑笑，一如既往的通过这种方式释放着赛前的压力。还有，就是那群放飞机的人儿，小胖！飞机柱！峰兄！WTF!!!真的真的，你可以问问其他人，你们绝壁是我一直在场上吐槽的，从罚球到回防…因为，我们带一个进下一轮已经很难，还TM带三个…还有，那就是一次防守，看到老板被别人摘了篮板，然后，一顶，把他顶飞了，轻松插板…我在旁边，笑了，现在想想，还是好笑，hhhhhhhhhhhhhhhh<br>　　CJJ是骗我的，那三分啊，吓尿我了… 还有，捞捞，卧槽，太久不见，看来在顺德虐人了，怎么变得那么有自信。不过，真的没想到，那就是他打的唯一一场，what a shame…<br>　　放飞机总是要受到惩罚的，一起骗你们这群飞机仔，说你们没来，第一轮就跪了，你们说，你们484信了，哈哈。</p>
<p>　　下一场好像就是和13级师弟的友谊赛吧，可爱的孩子们，充满活力，友谊第一，比赛第二。不过，赢了我们，这群小兔崽子吹了那么久，哈哈。下午赢回来，呵！讲道理，我们最后认真打，应该能赢回来吧，不过，他们真心不错，给我们好好练了一发，因为下一场，就打夺冠热门大三了，没有一个人有信心。<br>　　那个吕浪(前面左起第三个娃)真心不错，各种后转身，各种跳投，有点Kobe的影子。<br>    <img src="/img/OverlappingSounds/Friendlies.jpg" /><br>　　打大三那场，我应该说过，最后一场吧。真没底气啊，那时，真是抱着最后一场，全力发挥，打出一场精彩的比赛。确实，比赛很艰辛，居然，我们赢下来了。靠的正是团结，拼尽全力的防守。每个人都发挥了，每个人都像疯狗一样撕咬防守，绝对是肌肉碰撞最激烈的一场比赛！<br>　　更令我印象深刻的倒不是比赛本身，而是，前天早上，我们几个为了明天不确定的结果，为了更好的发挥自己，不约而同地跑到岁月湖后面的球场练球。还记得我们的1号、2号战术吗？哈哈，忘记了，我们有打成过吗？从那时起，赛前罚球，拼俯卧撑成了我们的又一个习惯。尼玛，你欠了多少个，自觉做了！<br>　　一支队伍，难免有点不愉快。那天我们就和女生发生了一些不愉快吧。因为对方女生带伤上阵，而且都是院队的，大可可和铿感觉放的太严重了，我想说的是，我们是一个队伍啊，我们男生真的是拼尽全力，真想赢下，而且我们毫无优势。万一你们放的太大，因为一两分，前功尽弃，我们真会感到很遗憾的。还有，不知道我理解的篮球和你们理解的一不一样，伤病不是不努力的原因，既然决定带伤上阵，内心肯定是做好准备的，准备一场拼尽全力的比赛，而你的不努力，反倒是一种不尊敬。我的腿就一直有事，但是，我想打球，尽目前自己的全力打球，才不管对手怎么样呢！<br>　　那场比赛，真心赢的是防守。还有，就是柱子那个关键球，那时候，我们许久没得分了。</p>
<p>　　赢了赢了，四强了。每年这个坎最难过，而一过，整个人都轻松了。因为，即使输了，还能打满两场，这是我最看重的。</p>
<p>　　然后就是半决赛，很愉快的气氛，充满轻松美好的回忆。女生行云流水的导球，真心的，看你们这样的打球，真是一种享受。还有，就是颖坤那个神奇的压哨，可惜了，应该没人录像吧，是我见过最令我惊叹的一球。不得不说啊，积了这么久的RP，这家伙都用在这个球上了。</p>
<p>　　然后决赛，痛苦的回忆总不想多说，那是我打过最烂的比赛，结果不是我一个人承受，但，造成这个结果的很大原因就是我。进攻独烂忒，防守毒懒特，真不配当你们的队友，你们是这么好的队友，我还没和你们打够…小峰峰(让你受罪了!!!)、柱子(不容易!!最对不起的就是你)、小胖(and one哦)、颖坤(最后的三分)、老板(辛苦了!!!)、奇立(导不过去给你，不好意思)、秋良、大神、JJ(虽然你们三个打酱油，但看你们打球，我是很开心的，嘻嘻)、师姐、晓鹏、可可、铿、丝雨(那三个绝对是奇迹的女生时代)，还有那个王八蛋，最后两场都没上的帅超(不得不说，决赛那会，你在有多好啊)<br>    <img src="/img/OverlappingSounds/hand_by_hand.jpg" /><br>　　天时、地利、人和，再见了，梦寐以求的决赛。走到这一步，虽然不容易，还是挺遗憾的，遗憾的是没打够，没打爽啊。<br>    <img src="/img/OverlappingSounds/Senior_runner-up.jpg" width="640px"/><br>　　那么，下午来了，不求胜负，只求不留遗憾。纪念，终将逝去的青春。汗水，让关于篮球，关于我们的所有回忆铭记吧。兄弟们，走一个…<br>    <img src="/img/OverlappingSounds/logo.jpg" width="320px"/></p>
]]></content>
      
        <categories>
            
            <category> Codes源于生活 </category>
            
            <category> Overlapping-Sounds </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[CMake 快速入门]]></title>
      <url>/2016/04/21/tool_CMake_%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>　　<strong>CMake</strong> 是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样 <strong>Makefile</strong> 或者 <strong>project</strong> 文件，能测试编译器所支持的 <strong>C++</strong> 特性，类似 <strong>UNIX</strong> 下的 <strong>automake</strong>。</p>
<p>　　说在前头的个人的一些想法 (<a href="./pdf/CMake Practice.pdf">《CMake Practice》</a> 也这么说    ) 和建议吧：<br>　　<strong><font color="blue">①. </font></strong> <strong>CMake</strong> 的学习过程是实践过程，没有实践，读的再多几天后也会忘记。所以，最好是你现在有实际的项目需求(没有的话，希望这个日后还可以作为参考)，另外，文章中的实例请你必须亲自运行验证一下。</p>
<p>　　<strong><font color="blue">②. </font></strong> 如果你的工程只有几个文件，直接编写 Makefile 是个可行的选择，不过考虑到移植性，比如究竟是gcc呢？g++呢？还是什么其他的呢？还是使用 <strong>CMake</strong> 吧。</p>
<p>　　<strong><font color="blue">③. </font></strong> 如果使用的是 <strong>C/C++/Java</strong> 之外的语言，请不要使用 CMake(目前还不支持)。</p>
<p>　　<strong><font color="blue">④. </font></strong> 如果你使用的语言有非常完备的构建体系，比如 Java 的 <strong>Ant</strong>，也不需要学习 <strong>CMake</strong>。<br><a id="more"></a></p>
<h2 id="CMake-简介"><a href="#CMake-简介" class="headerlink" title="CMake 简介"></a><font color="#F40D64">CMake 简介</font></h2><p>　　先来说说 <strong>Unix</strong> 下的 <strong>automake</strong> 吧。<br>　　某天我要安装某个开源项目 <a href="https://openslam.org/tinyslam.html"><strong>tinySLAM</strong></a>，结果，人家用的是 <strong>automake</strong>，结果就悲剧了。<br>　　<strong>README</strong> 提示先运行他的某个脚本 <strong>./bootstrap</strong>，其实里面就是一堆 <strong>automake</strong> 的命令，内容如下。然后就是典型的 <strong>./configure</strong>，<strong>make</strong>， <strong>make install</strong>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">libtoolize</div><div class="line">aclocal</div><div class="line">autoheader</div><div class="line">automake --add-missing --copy</div><div class="line">autoconf</div></pre></td></tr></table></figure></p>
<p>　　结果，第一步就报错了…<br>    <img src="/img/tool/cmake_1_automake_error.png" width="640px"/><br>　　搞到最后，才发现，<strong>automake</strong> 死板的要求你必须有某些文件，空的也行，不然不让你构建…所以，只能很无奈的表示屈服，通过下面的命令，问题是解决了。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ touch NEWS README AUTHORS ChangeLog</div></pre></td></tr></table></figure></p>
<p>　　所以说，<strong>automake</strong> 实在不行啦，确实需要 <strong>CMake</strong> 来拯救。通过上面的例子，也是想说明一下，了解包括 <strong>automake</strong> 在内的构建套件，与我们的日常开发息息相关。因为开源，源代码都有了，那就需要你本地构建、安装，这就需要构建套件的支持。所以很多源码都会提<strong>**</strong>供构建套件需要的配置文件（如上面的 <strong>./bootstrap</strong> 和 <strong>./configure</strong>），而目前比较受欢迎，使用最广的(你可以自己看看 github…)，便是 <strong>CMake</strong>，所以你会在很多源代码中看到 <strong>CMakeLists.txt</strong> 的踪影。</p>
<p>　　因此，学习 <strong>CMake</strong>，熟悉 <strong>CMake</strong> 的基本语法，有助于我们了解源代码的依赖关系，更好的阅读开源工程；另外，更重要的，则是，源代码的本地构建、安装并不总是顺利的（如上面的例子），对 <strong>CMake</strong> 有一定的了解，能更好的解决我们在构建、安装过程中遇到的问题！</p>
<p>　　<strong>CMake</strong> 的组态档取名为 <strong>CMakeLists.txt</strong>。<strong>CMake</strong> 并不直接建构出最终的软件，而是产生标准的建构档（如 <strong>Unix</strong> 的 <strong>Makefile</strong>）。</p>
<p>　　<strong>CMake</strong> 是跨平台，可生成 <strong>native 编译配置文件</strong>，在 <strong>Linux/Unix</strong>平台，生成 <strong>Makefile</strong>，在苹果平台，生成 <strong>xcode</strong>，在 <strong>Windows</strong> 平台，可以生成 <strong>MSVC</strong> 工程文件。</p>
<p>　　<strong>CMake</strong> 的应用非常广泛！<font color="#0088DB"><strong>Qt</strong> 采用了 cmake 作为构建系统，<strong>openCV</strong> 采用 cmake 作为构建系统…</font></p>
<h2 id="简单的-HelloWorld"><a href="#简单的-HelloWorld" class="headerlink" title="简单的 HelloWorld"></a><font color="#F40D64">简单的 HelloWorld</font></h2><p>　　我们所有的 <strong>CMake</strong> 练习均放在 <strong>~/Workspace/cmake_ws/</strong> 下，一般情况下，<strong>Ubuntu</strong> 都自带<strong>CMake</strong> ，<strong>Windows</strong> 下也可以安装 <strong>CMake</strong>。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">cd</span> ~/Workspace/</div><div class="line">&gt; mkdir cmake_ws</div><div class="line">&gt; <span class="built_in">cd</span> cmake_ws/</div><div class="line">&gt; mkdir ex_01</div><div class="line">&gt; <span class="built_in">cd</span> ex_01/</div><div class="line">&gt; touch CMakeLists.txt main.c</div></pre></td></tr></table></figure></p>
<p>　　新建的工程源文件 <strong>main.c</strong> 和 <strong>CMake</strong> 文件 <strong>CMakeLists.txt</strong> 内容如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.c</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv[])</span></span>&#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Hello World from ex_01 Main!\n"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span style="font-size:20px; color:blue"><strong>注： </strong></span><br>　　<strong>main.c</strong> 是一个再典型不过的 <strong>hello world</strong>。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># CMakeLists.txt</span></div><div class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">2.8</span>)</div><div class="line"> </div><div class="line"><span class="keyword">PROJECT</span>(HELLO)</div><div class="line"> </div><div class="line"><span class="keyword">SET</span>(SRC_LIST main.c)</div><div class="line"> </div><div class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">"This is BINARY dir "</span> <span class="variable">$&#123;HELLO_BINARY_DIR&#125;</span>)</div><div class="line"><span class="keyword">MESSAGE</span>(STATUS <span class="string">"This is SOURCE dir "</span> <span class="variable">$&#123;HELLO_SOURCE_DIR&#125;</span>)</div><div class="line"> </div><div class="line"><span class="comment"># &lt;==&gt; ADD_EXECUTABLE(hello main.c)</span></div><div class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello <span class="variable">$&#123;SRC_LIST&#125;</span>)</div></pre></td></tr></table></figure></p>
<p><span style="font-size:20px; color:blue"><strong>注： </strong></span><br>　　上述是一个简单的 <strong>CMake</strong> 文件，<strong>CMAKE_MINIMUM_REQUIRED</strong> 指令用于检查系统 <strong>CMake</strong> 版本是否满足最低要求，<strong>PROJECT</strong> 指令通过名字定义工程，<strong>SET</strong> 用于设置 <strong>CMake</strong> 变量，另外通过 <strong>${VAR_NAME}</strong> 的方式引用变量，<strong>MESSAGE</strong> 用于向终端输出信息，<strong>ADD_EXECUTABLE</strong> 则用于生成可执行二进制文件。 <font color="#0088DB"><strong>CMake</strong> 指令是大小写不敏感的，很多开源项目的 <strong>CMakeLists.txt</strong> 中，指令都是小写的</font>。更多具体的语法如下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义这个工程会生成一个文件名为 target 的可执行文件，相关的源文件是source1、source2...定义的源文件列表</span></div><div class="line"><span class="comment"># 参数之间可以通过空格或者";"分开</span></div><div class="line"><span class="keyword">ADD_EXECUTABLE</span>(target source1 source2...)</div><div class="line"><span class="keyword">ADD_EXECUTABLE</span>(target source1;source2...)</div><div class="line"> </div><div class="line"><span class="comment"># 定义工程名称，并可指定工程支持的语言，支持的语言列表是可以忽略的，默认情况表示支持所有语言。</span></div><div class="line"><span class="comment"># 这个指令隐式的定义了两个 CMake 变量: &lt;projectname&gt;_BINARY_DIR 以及 &lt;projectname&gt;_SOURCE_DIR</span></div><div class="line"><span class="keyword">PROJECT</span>(projectname [CXX][C][Java])</div><div class="line"> </div><div class="line"><span class="comment"># 这个指令用于向终端输出用户定义的信息，包含了三种类型:</span></div><div class="line"><span class="comment">#	SEND_ERROR，产生错误，生成过程被跳过</span></div><div class="line"><span class="comment">#	STATUS，输出前缀为" - - "的信息</span></div><div class="line"><span class="comment">#	FATAL_ERROR，立即终止所有 CMake 过程</span></div><div class="line"><span class="keyword">MESSAGE</span>([SEND_ERROR |STATUS | FATAL_ERROR] <span class="string">"message to display"</span>...)</div><div class="line"> </div><div class="line"><span class="comment"># 这个指令可以用来显式的定义变量。</span></div><div class="line"><span class="comment"># 比如我们用到的是 SET(SRC_LIST main.c)；如果有多个源文件，也可以定义成 SET(SRC_LIST main.c t1.c t2.c)</span></div><div class="line"><span class="keyword">SET</span>(VAR [VALUE] [CACHETYPE DOCSTRING[FORCE]])</div></pre></td></tr></table></figure></p>
<p><span style="font-size:20px; color:blue"><strong>开始构建： </strong></span><br>　　所有的文件创建完成后，ex_01 目录中应该存在 <strong>main.c</strong> 和 <strong>CMakeLists.txt</strong> 两个文件，接下来我们来构建这个工程，在这个目录运行：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">cd</span> ~/Workspace/cmake_ws/ex_01/</div><div class="line">&gt; cmake .</div><div class="line">&gt; make</div><div class="line">&gt; ./hello</div></pre></td></tr></table></figure></p>
<p>　　<strong>“cmake .”</strong>，<strong>.</strong> 表示当前目录，运行后将会自动生成 <strong>CMakeFiles</strong> 文件夹，<strong>CMakeCache.txt</strong>，<strong>cmake_install.cmake</strong> 等文件，并且生成了 <strong>Makefile</strong>。下一步 <strong>“make”</strong> 则是去执行的 <strong>Makefile</strong>，生成我们的目标文件 <strong>hello</strong>。<font color="#0088DB">你可以通过 <strong>“make VERBOSE=1”</strong> 看到 <strong>make</strong> 构建的详细过程。</font>最后通过 <strong>./hello</strong> 即可运行目标二进制文件。完成构建后的工程源文件目录如下：<br>    <img src="/img/tool/cmake_2_in_source_build.png" /><br>　　实际上，上面我们采用的是一种叫做 <strong>in-source build(内部构建)</strong> 的构建方式，顾名思义，这种方式直接在源代码中进行构建，构建过程的中间产物以及最终的目标文件都会混在一起，我们没办法将项目文件与其分开，更没办法做到自动删除这些中间文件和目标文件。<br>　　另外一种比较合理的构建方式叫做 <strong>out-of-source build(外部构建)</strong> ，这种方式单独在与源代码工程独立的目录下执行构建，保证源代码的纯洁性，更能实现中间文件和目标文件的快速删除。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">cd</span> ~/Workspace/cmake_ws/ex_01/</div><div class="line">&gt; mkdir build</div><div class="line">&gt; <span class="built_in">cd</span> build/</div><div class="line">&gt; cmake ..</div><div class="line">&gt; make</div><div class="line">&gt; ./hello</div><div class="line">&gt; <span class="built_in">cd</span> ..</div><div class="line">&gt; rm -rf build/</div></pre></td></tr></table></figure></p>
<p>　　<strong>“cmake ..”</strong> 中的 <strong>“..”</strong> 表示 <strong>build</strong> 目录的父目录，即是我们的源代码工程目录，因为父目录存在我们需要的 <strong>CMakeLists.txt</strong>。这里要说明的是，你也可以在其他地方进行构建（<strong>“cmake <CMakeLists.txt所在全路径>“</strong>）。显然，这种方式是有点麻烦，所以一般 <font color="#0088DB">建议在源代码工程目录下新建 <strong>build</strong> 目录进行构建</font>。<br>　　通过 <strong>外部构建</strong> 这种方式完成构建后的工程源文件目录如下，构建过程中的中间产物和目标文件都存放在 <strong>build</strong> 目录中，源文件并没有受其影响。通过删除该文件夹，即可实现中间文件快速删除。<font color="#0088DB">建议大家采用这种方式进行构建，后续的练习也均按照这种方式进行</font><br>    <img src="/img/tool/cmake_3_out_of_source_build.png" /></p>
<h2 id="更好一点的-HelloWorld"><a href="#更好一点的-HelloWorld" class="headerlink" title="更好一点的 HelloWorld"></a><font color="#F40D64">更好一点的 HelloWorld</font></h2><p>　　上述的工程还不够好，跟一般的项目工程还有很大区别，一般项目工程大概如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── build</div><div class="line">| └── bin</div><div class="line">| | └── &lt;project_name&gt;</div><div class="line">├── doc</div><div class="line">| └── &lt;project_name&gt;.txt</div><div class="line">├── src</div><div class="line">| ├── xxx.c</div><div class="line">| └── CMakeLists.txt</div><div class="line">├── CMakeLists.txt</div><div class="line">├── COPYRIGHT</div><div class="line">├── README</div><div class="line">└── run&lt;project_name&gt;.sh</div></pre></td></tr></table></figure></p>
<p>　　<strong>src</strong>，用来放置工程源代码，包括源文件、头文件以及该目录的 <strong>CMake</strong> 文件；<strong>doc</strong>，用来放置工程的说明文档；文本文件 <strong>COPYRIGHT</strong> 和 <strong>README</strong> 是有关 <strong>license</strong> 和如何使用的说明；构建后的目标文件将放在构建目录的 <strong>bin</strong> 子目录下；工程目录下添加一个 <strong><code>run&lt;project_name&gt;.sh</code></strong> 脚本，可以用来调用二进制文件，比如需要按照一定配置、顺序调用多个目标文件，才能完成整个项目的功能。</p>
<p>　　首先，建立该目录树，编写 <strong>src</strong> 目录下的工程源代码，包括 <strong>main.c</strong> 和该目录的 <strong>CMake</strong> 文件 <strong>CMakeLists.txt</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./src/main.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv[])</span></span>&#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Hello World from ex_02 Main!\n"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>main.c</strong> 文件基本与第一个例子一样。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ./src/CMakeLists.txt</span></div><div class="line"><span class="keyword">ADD_EXECUTABLE</span>(hello main.c)</div><div class="line"> </div><div class="line"><span class="keyword">INSTALL</span>(TARGETS hello RUNTIME DESTINATION bin)</div></pre></td></tr></table></figure></p>
<p>　　<strong>ADD_EXECUTABLE</strong> 用于生成目标文件，<strong>INSTALL</strong> 命令则是跟 <strong>make install</strong> 安装相关，这里是安装目标文件。</p>
<p>　　接下来是工程根目录下的 <strong>CMakeLists.txt</strong>，该文件是整个工程的 <strong>CMake</strong> 文件，需要使用 <strong>src</strong> 目录下的 <strong>CMake</strong> 文件。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ./CMakeLists.txt</span></div><div class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">2.8</span>)</div><div class="line"> </div><div class="line"><span class="keyword">PROJECT</span>(HELLO)</div><div class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(src bin)</div><div class="line"> </div><div class="line"><span class="keyword">INSTALL</span>(PROGRAMS runhello.sh DESTINATION bin)</div><div class="line"><span class="keyword">INSTALL</span>(FILES COPYRIGHT README DESTINATION doc/cmake/ex_02)</div><div class="line"><span class="keyword">INSTALL</span>(DIRECTORY doc/ DESTINATION doc/cmake/ex_02)</div><div class="line"> </div><div class="line"><span class="keyword">ADD_TEST</span>(mytest <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin/hello)</div><div class="line"><span class="keyword">ENABLE_TESTING</span>()</div></pre></td></tr></table></figure></p>
<p>　　<strong>ADD_SUBDIRECTORY</strong> 将整个工程的 <strong>CMake</strong> 文件与 <strong>src</strong> 工程源代码关联；<strong>INSTALL</strong> 用于安装，这里是安装脚本文件、普通文件和 <strong>doc</strong> 目录。<strong>ADD_TEST</strong> 和 <strong>ENABLE_TESTING</strong> 则与 <strong>“make test”</strong> 相关，具体的使用方法如下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。</span></div><div class="line"><span class="comment"># 上面的例子定义了将 src 子目录加入工程，并指定编译输出(包含编译中间结果)路径为 bin 目录。</span></div><div class="line"><span class="comment"># 如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在 build/src 目录(这个目录跟原有的 src 目录对应)</span></div><div class="line"><span class="comment"># 指定 bin 目录后，相当于在编译时将 src 重命名为 bin，所有的中间结果和目标二进制都将存放在 bin 目录。</span></div><div class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</div><div class="line"> </div><div class="line"><span class="comment"># INSTALL 指令用于定义安装规则，安装的内容可以包括目标二进制、动态库、静态库以及文件、目录、脚本等</span></div><div class="line"><span class="comment"># 参数中的TARGETS后面跟的就是我们通过ADD_EXECUTABLE或者ADD_LIBRARY定义的目标文件（可执行二进制、动态库、静态库）</span></div><div class="line"><span class="comment"># 目标类型也就相对应的有三种，ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME 特指可执行目标二进制</span></div><div class="line"><span class="comment"># DESTINATION 定义了安装的路径，如果路径以/开头，那么指的是绝对路径；否则是相对路径$&#123;CMAKE_INSTALL_PREFIX&#125;/&lt;dir&gt;</span></div><div class="line"><span class="keyword">INSTALL</span>(TARGETS targets...</div><div class="line">  [[ARCHIVE|LIBRARY|RUNTIME]</div><div class="line">  [DESTINATION &lt;dir&gt;]</div><div class="line">  [PERMISSIONS permissions...]</div><div class="line">  [CONFIGURATIONS</div><div class="line">  [Debug|Release|...]]</div><div class="line">  [COMPONENT&lt;component&gt;]</div><div class="line">  [OPTIONAL]]</div><div class="line">  [...]</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment"># 用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径（相对于指令所在 CMakeLists.txt）</span></div><div class="line"><span class="keyword">INSTALL</span>(FILES files...</div><div class="line">  DESTINATION&lt;dir&gt;</div><div class="line">  [PERMISSIONS permissions...]</div><div class="line">  [CONFIGURATIONS [Debug|Release|...]]</div><div class="line">  [COMPONENT&lt;component&gt;]</div><div class="line">  [RENAME &lt;name&gt;] [OPTIONAL]</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment"># 非目标文件的可执行程序安装(比如脚本之类)，跟上面的 FILES 指令使用方法相似</span></div><div class="line"><span class="keyword">INSTALL</span>(PROGRAMS files...DESTINATION&lt;dir&gt;</div><div class="line">  [PERMISSIONS permissions...]</div><div class="line">  [CONFIGURATIONS [Debug|Release|...]]</div><div class="line">  [COMPONENT&lt;component&gt;]</div><div class="line">  [RENAME &lt;name&gt;] [OPTIONAL]</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment"># DIRECTORY 后面连接的是所在 Source 目录的相对路径，但务必注意：abc 和 abc/有很大的区别。</span></div><div class="line"><span class="comment"># 如果目录名不以/结尾，那么这个目录将被安装为目标路径下的 abc；</span></div><div class="line"><span class="comment"># 如果目录名以/结尾，代表将这个目录中的内容安装到目标路径，但不包括这个目录本身</span></div><div class="line"><span class="keyword">INSTALL</span>(DIRECTORY dirs... DESTINATION &lt;dir&gt;</div><div class="line">  [FILE_PERMISSIONSpermissions...]</div><div class="line">  [DIRECTORY_PERMISSIONSpermissions...]</div><div class="line">  [USE_SOURCE_PERMISSIONS]</div><div class="line">  [CONFIGURATIONS [Debug|Release|...]]</div><div class="line">  [COMPONENT&lt;component&gt;]</div><div class="line">  [[PATTERN&lt;pattern&gt; |REGEX &lt;regex&gt;]</div><div class="line">  [EXCLUDE] [PERMISSIONS permissions...]]</div><div class="line">  [...]</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p><span style="font-size:20px; color:blue"><strong>构建： </strong></span><br>　　构建过程基本与上一个例子一样，<strong>make</strong> 之后，生成的目标文件将保存在 <strong>./build/bin/</strong> 目录下，<strong>make test</strong>、<strong>make install</strong> 分别执行上述的 <strong>ADD_TEST</strong> 和 <strong>INSTALL</strong> 指令。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">cd</span> ~/Workspace/cmake_ws/ex_02/</div><div class="line">&gt; mkdir build</div><div class="line">&gt; <span class="built_in">cd</span> build/</div><div class="line">&gt; cmake ..</div><div class="line">&gt; make</div><div class="line">&gt; ./hello</div><div class="line">&gt; make <span class="built_in">test</span></div><div class="line">&gt; make install</div><div class="line">&gt; <span class="built_in">cd</span> ..</div><div class="line">&gt; rm -rf build/</div></pre></td></tr></table></figure></p>
<p>　　前面说过，<font color="#0088DB"><strong>DESTINATION</strong> 定义了安装的路径，如果路径以 <strong>/</strong> 开头，那么指的是绝对路径；否则是相对路径 <strong><code>${CMAKE_INSTALL_PREFIX}/&lt;dir&gt;</code></strong></font>，默认的的安装路径前缀 <strong>${CMAKE_INSTALL_PREFIX}</strong> 是 <strong>/usr/local</strong>，所以，采用默认的安装路径 <strong>make install</strong> 时，会因为权限问题而报错。<br>    <img src="/img/tool/cmake_4_default_install_dir.png" /><br>　　在执行 <strong>“cmake”</strong> 命令时可以指定参数 <strong>CMAKE_INSTALL_PREFIX</strong>，如下:<br>    <img src="/img/tool/cmake_5_ex02.png" width="720px" /><br><span style="font-size:20px; color:blue"><strong>安装： </strong></span><br>　　通过前面的分析可以看出，安装其实就是将目标文件(可能是二进制文件或者静态库)及其依赖的文件(可能是动态库)，还有相关的说明文档等放在指定的目录下。</p>
<p>　　可能你会有这样的疑问：不就存放些文件嘛，干嘛说成安装这么高大上？ </p>
<p>　　其实，我个人理解，称为 <strong>安装</strong> 主要是因为存放的路径比较特殊，如上面提到的 <strong>/usr/local</strong>，这些路径存在于 <strong>shell</strong> 的默认路径中。举个例子，某个可执行文件安装到 <strong>/usr/local</strong> 中，那他在任何一个<strong>terminal</strong> 中都能被运行，这不就像在 <strong>Windows</strong> 下，随便双击某个桌面图标，就能启动程序一样，把那个程序安装到系统上了。</p>
<h2 id="CMake，库的创建、安装-amp-使用"><a href="#CMake，库的创建、安装-amp-使用" class="headerlink" title="CMake，库的创建、安装&amp;使用"></a><font color="#F40D64">CMake，库的创建、安装&amp;使用</font></h2><p>　　了解了二进制可执行文件的 <strong>CMake</strong> 工程创建、构建和安装之后，这一节我们了解一下库，包括静态库(.a)和动态库(.so)。一般库工程大概如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── build</div><div class="line">| └── lib</div><div class="line">| | ├── lib&lt;project_name&gt;.so</div><div class="line">| | └── lib&lt;project_name&gt;.a</div><div class="line">├── doc</div><div class="line">| └── &lt;project_name&gt;.txt</div><div class="line">├── lib</div><div class="line">| ├── xxx.c</div><div class="line">| └── CMakeLists.txt</div><div class="line">├── CMakeLists.txt</div><div class="line">├── COPYRIGHT</div><div class="line">└── README</div></pre></td></tr></table></figure></p>
<p>　　与上一个例子的区别只体现在放置工程源代码的目录变成 <strong>lib</strong>，而不是 <strong>src</strong>，其实就换个名字，换汤不换药。<br>　　我们在源代码工程 <strong>lib</strong> 目录下添加 <strong>hello.c</strong>，<strong>hello.h</strong> 和 <strong>CMakeLists.txt</strong>。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./lib/hello.h</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _HELLO_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _HELLO_H_</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">HelloFunc</span><span class="params">(<span class="keyword">void</span>)</span></span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>　　以库的形式提供 <strong>HelloFunc()</strong> 函数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./lib/hello.c</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">HelloFunc</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Hello World from ex_03 function HelloFunc()\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>HelloFunc()</strong> 函数就一简单的 <strong>hello world</strong> 功能。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ./lib/CMakeLists.txt</span></div><div class="line"> </div><div class="line"><span class="keyword">SET</span>(LIBHELLO_SRC hello.c)</div><div class="line"> </div><div class="line"><span class="keyword">ADD_LIBRARY</span>(hello SHARED <span class="variable">$&#123;LIBHELLO_SRC&#125;</span>)</div><div class="line"><span class="keyword">ADD_LIBRARY</span>(hello_static STATIC <span class="variable">$&#123;LIBHELLO_SRC&#125;</span>)</div><div class="line"> </div><div class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(hello PROPERTIES VERSION <span class="number">1.2</span> SOVERSION <span class="number">1</span>)</div><div class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(hello_static PROPERTIES OUTPUT_NAME <span class="string">"hello"</span>)</div><div class="line"> </div><div class="line"><span class="keyword">INSTALL</span>(TARGETS hello hello_static </div><div class="line">  LIBRARY DESTINATION lib</div><div class="line">  ARCHIVE DESTINATION lib</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="keyword">INSTALL</span>(FILES hello.h DESTINATION <span class="keyword">include</span>)</div></pre></td></tr></table></figure></p>
<p>　　<strong>ADD_LIBRARY</strong> 指令用于生成目标库，动态库或者静态库；<strong>SET_TARGET_PROPERTIES</strong> 可以用于修改目标文件的属性，上面例子依次为动态库的版本信息、静态库的输出名。具体的使用方法如下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># libname 不需要写全 libhello.so，只需要填写 hello 即可，CMake 系统会自动为你生成 libhello.X</span></div><div class="line"><span class="comment"># SHARED，动态库；STATIC，静态库</span></div><div class="line"><span class="keyword">ADD_LIBRARY</span>(libname  [SHARED|STATIC|MODULE]</div><div class="line">  [EXCLUDE_FROM_ALL]</div><div class="line">  source1 source2 ... sourceN</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment"># 这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本</span></div><div class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(target1 target2...</div><div class="line">  PROPERTIES prop1 value1</div><div class="line">    prop2 value2...</div><div class="line">)</div><div class="line"><span class="comment"># VERSION 指代动态库版本，SOVERSION 指代 API 版本</span></div><div class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(hello PROPERTIESVERSION <span class="number">1.2</span> SOVERSION <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>　　在上面的例子中，<strong>hello</strong> 作为一个 <strong>target</strong> 是不能重名，所以，只能为动态库和静态库创建不同的 <strong>target</strong>。另一方面，又想保证动态库静态库的名字均为 <strong>libhello.X</strong>，所以可以通过修改静态库文件输出名属性的方法来满足需求。</p>
<p>　　此外，按照规则，动态库是应该包含一个版本号的。按照上述例子进行构建，生成的动态库如下。可以看出，除了生成的 <strong>libhello.so.1.2</strong>，其他两个是到该动态库的链接，方便调用者灵活调用。<br>    <img src="/img/tool/cmake_6_shared_lib.png" width="640px" /><br>　　<strong>INSTALL</strong> 指令和之前类似，这里要注意的是，静态库要使用 <strong>ARCHIVE</strong> 关键字，另外，安装的时候需要将库的 <strong>.h</strong> 头文件一并安装。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSTALL</span>(TARGETS hello hello_static </div><div class="line">  LIBRARY DESTINATION lib</div><div class="line">  ARCHIVED ESTINATION lib</div><div class="line">)</div><div class="line"> </div><div class="line"><span class="keyword">INSTALL</span>(FILES hello.h DESTINATION <span class="keyword">include</span>/hello)</div></pre></td></tr></table></figure></p>
<p>　　顶层目录下的 <strong>CMakeLists.txt</strong> 与上一个例子基本一致。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ./CMakeLists.txt</span></div><div class="line"><span class="keyword">CMAKE_MINIMUM_REQUIRED</span>(VERSION <span class="number">2.8</span>)</div><div class="line"> </div><div class="line"><span class="keyword">PROJECT</span>(HELLOLIB)</div><div class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(lib)</div></pre></td></tr></table></figure></p>
<p>　　在这个例子中，我们可以构建静态库和动态库，并完成该库的安装。</p>
<p>　　接下来这个例子，便是如何使用上面创建的静态库和动态库，其工程目录与第二个例子一致，主要区别在 <strong>src</strong> 源代码目录的内容上。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./src/main.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv[])</span></span>&#123;</div><div class="line">  HelloFunc();</div><div class="line">   </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　调用通过库提供的 <strong>HelloFunc()</strong> 函数。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ./src/CMakeLists.txt</span></div><div class="line"> </div><div class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(/home/durant35/Workspace/cmake_tb/ex_03/<span class="keyword">install</span>/<span class="keyword">include</span>)</div><div class="line"><span class="keyword">LINK_DIRECTORIES</span>(/home/durant35/Workspace/cmake_tb/ex_03/<span class="keyword">install</span>/lib)</div><div class="line"> </div><div class="line"><span class="keyword">ADD_EXECUTABLE</span>(main main.c)</div><div class="line"><span class="comment">#TARGET_LINK_LIBRARIES(main libhello.so)</span></div><div class="line"><span class="keyword">TARGET_LINK_LIBRARIES</span>(main libhello.a)</div></pre></td></tr></table></figure></p>
<p>　　<strong>INCLUDE_DIRECTORIES</strong>，为整个工程添加 <strong>include</strong> 路径，主要是 <strong>.h</strong> 头文件路径；<strong>LINK_DIRECTORIES</strong> 添加库链接路径；<strong>TARGET_LINK_LIBRARIES</strong> 确定目标文件链接库信息。具体的语法如下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来</span></div><div class="line"><span class="comment"># 默认的行为是追加到当前的头文件搜索路径的后面(AFTER)</span></div><div class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>([AFTER|BEFORE][SYSTEM] dir1 dir2...)</div><div class="line"> </div><div class="line"><span class="comment"># 添加非标准的共享库搜索路径，比如，在工程内部同时存在共享库和可执行二进制，在编译时就需要指定一下这些共享库的路径</span></div><div class="line"><span class="keyword">LINK_DIRECTORIES</span>(directory1 directory2...)</div><div class="line"> </div><div class="line"><span class="comment"># 这个指令可以用来为 target 添加需要链接的共享库，可以是一个可执行文件，或者一个共享库</span></div><div class="line"><span class="keyword">TARGET_LINK_LIBRARIES</span>(target library1</div><div class="line">  &lt;debug | optimized&gt; library2</div><div class="line">  ...</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>　　在上面的例子中，假如没有使用 <strong>INCLUDE_DIRECTORIES</strong> 指令，会找不到 <strong>hello.h</strong> 头文件：<br>    <img src="/img/tool/cmake_7_no_include_error.png" width="640px"/><br>　　假如没有使用 <strong>LINK_DIRECTORIES</strong> 指令，则会找不到 <strong>HelloFunc()</strong> 函数的具体实现：<br>    <img src="/img/tool/cmake_8_no_link_error.png" /><br>　　<strong>TARGET_LINK_LIBRARIES</strong> 可以链接动态库，如下。<strong>ldd</strong> 表明生成的目标可执行文件依赖于我们上一个例子安装的动态库。<br>    <img src="/img/tool/cmake_9_ldd_shared.png" width="680px"/><br>　　<strong>TARGET_LINK_LIBRARIES</strong> 也可以链接静态库，如下。<strong>HelloFunc()</strong> 函数以静态库的形式提供给目标可执行文件，不需要像动态库一样动态加载，已经与源文件一同生成目标可执行文件。<br>    <img src="/img/tool/cmake_10_ldd_static.png" /></p>
<h2 id="CMake，变量"><a href="#CMake，变量" class="headerlink" title="CMake，变量"></a><font color="#F40D64">CMake，变量</font></h2><p><span style="font-size:20px; color:blue"><strong>引用： </strong></span><br>　　前面我们已经提到了，使用 <strong>${variable_name}</strong> 进行变量的引用。在 <strong>IF</strong> 等语句中，是直接使用变量名而不通过 <strong>${variable_name}</strong> 取值。</p>
<p><span style="font-size:20px; color:blue"><strong>自定义变量方式： </strong></span><br>　　主要有隐式定义和显式定义两种。<br>　　使用 <strong>SET(variable_name value)</strong> 指令，显式定义变量。<br>　　<strong>PROJECT</strong> 指令，会隐式的定义 <strong><projectname>_BINARY_DIR</strong> 和 <strong><projectname>_SOURCE_DIR</strong> 两个变量。</p>
<p><span style="font-size:20px; color:blue"><strong>常用变量： </strong></span><br>　　<strong>CMAKE_BINARY_DIR/PROJECT_BINARY_DIR /<projectname>_BINARY_DIR</strong><br>　　　这三个变量指代的内容是一致的，如果 <strong>in-source build</strong>，指的是工程顶层目录；如果是 <strong>out-of-source build</strong>，指的是工程编译发生的目录。</p>
<p>　　<strong>CMAKE_SOURCE_DIR/PROJECT_SOURCE_DIR /<projectname>_SOURCE_DIR</strong><br>　　　这三个变量指代的内容是一致的，不论采用何种编译方式，都是工程顶层目录。</p>
<p>　　<strong>CMAKE_CURRENT_SOURCE_DIR</strong><br>　　　指的是当前处理的 <strong>CMakeLists.txt</strong> 所在的路径，比如上面例子中的 <strong>src</strong> 源代码子目录。</p>
<p>　　<strong>CMAKE_CURRRENT_BINARY_DIR</strong><br>　　　如果是 <strong>in-source</strong> 编译，它跟 <strong>CMAKE_CURRENT_SOURCE_DIR</strong> 一致；<br>　　　如果是 <strong>out-of-source</strong> 编译，他指的是 <strong>target</strong> 编译目录。<br>　　　使用我们上面提到的 <strong>ADD_SUBDIRECTORY(src bin)</strong> 可以更改这个变量的值。<br>　　　使用 <strong>SET(EXECUTABLE_OUTPUT_PATH &lt;新路径&gt;)</strong> 并不会对这个变量造成影响，它仅仅修改了最终目标文件存放的路径。</p>
<p>　　<strong>EXECUTABLE_OUTPUT_PATH</strong> 和 <strong>LIBRARY_OUTPUT_PATH</strong><br>　　　分别用来重新定义最终结果的存放目录。</p>
<p><span style="font-size:20px; color:blue"><strong>调用环境变量： </strong></span><br>　　使用 <strong>$ENV{variable_name}</strong> 指令就可以调用系统的环境变量了。</p>
<p><span style="font-size:20px; color:blue"><strong>系统信息变量： </strong></span><br>　　<strong>UNIX</strong><br>　　　在所有的类 <strong>UNIX</strong> 平台为 <strong>true</strong>，包括 <strong>OS X</strong> 和 <strong>cygwin</strong>。<br>　　<strong>WIN32</strong><br>　　　在所有的 <strong>win32</strong> 平台为 <strong>true</strong>，包括 <strong>cygwin</strong>。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 判断平台差异，控制在不同的平台进行不同的控制</span></div><div class="line"><span class="keyword">IF</span>(WIN32)</div><div class="line">  <span class="keyword">MESSAGE</span>(STATUS “Thisiswindows.”)</div><div class="line">  <span class="comment">#作一些 Windows 相关的操作</span></div><div class="line"><span class="keyword">ELSE</span>(WIN32)</div><div class="line">  <span class="keyword">MESSAGE</span>(STATUS “Thisisnotwindows”)</div><div class="line">  <span class="comment">#作一些非 Windows 相关的操作</span></div><div class="line"><span class="keyword">ENDIF</span>(WIN32)</div></pre></td></tr></table></figure></p>
<h2 id="CMake，指令"><a href="#CMake，指令" class="headerlink" title="CMake，指令"></a><font color="#F40D64">CMake，指令</font></h2><p>　　<strong>ADD_EXECUTABLE</strong>、<strong>ADD_LIBRARY</strong>、<strong>ADD_SUBDIRECTORY</strong></p>
<p>　　<strong>ADD_TEST</strong> 与 <strong>ENABLE_TESTING</strong> 指令</p>
<p>　　<strong>INSTALL</strong> 指令</p>
<p>　　<strong>IF</strong> 指令<br>　　　ELSE ELSEIF ENDIF<br>　　　NOT AND OR<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一般用法，有点别扭</span></div><div class="line"><span class="keyword">IF</span>(expression)</div><div class="line">  <span class="comment"># THEN section.</span></div><div class="line">  COMMAND1(ARGS ...)</div><div class="line">  COMMAND2(ARGS ...)</div><div class="line">  ...</div><div class="line"><span class="keyword">ELSE</span>(expression)</div><div class="line">  <span class="comment"># ELSE section.</span></div><div class="line">  COMMAND1(ARGS ...)</div><div class="line">  COMMAND2(ARGS ...)</div><div class="line">  ...</div><div class="line"><span class="keyword">ENDIF</span>(expression)</div><div class="line"> </div><div class="line"><span class="comment"># 阅读起来舒服一点的</span></div><div class="line"><span class="keyword">SET</span>(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTSON)</div><div class="line"><span class="keyword">IF</span>(expression)</div><div class="line">  <span class="comment"># THEN section.</span></div><div class="line">  COMMAND1(ARGS ...)</div><div class="line">  COMMAND2(ARGS ...)</div><div class="line">  ...</div><div class="line"><span class="keyword">ELSE</span>()</div><div class="line">  <span class="comment"># ELSE section.</span></div><div class="line">  COMMAND1(ARGS ...)</div><div class="line">  COMMAND2(ARGS ...)</div><div class="line">  ...</div><div class="line"><span class="keyword">ENDIF</span>()</div></pre></td></tr></table></figure></p>
<p>　　<strong>WHILE</strong> 指令的语法是：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">WHILE</span>(condition)</div><div class="line">  COMMAND1(ARGS ...)</div><div class="line">  COMMAND2(ARGS ...)</div><div class="line">  ...</div><div class="line"><span class="keyword">ENDWHILE</span>(condition)</div></pre></td></tr></table></figure></p>
<p>　　<strong>FOREACH</strong> 指令</p>
<p>============<br><strong>参考资料：</strong> <a href="./pdf/CMake Practice.pdf">《CMake Practice》</a></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> 小工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[.h中的#ifndef..#define..#endif]]></title>
      <url>/2016/04/21/programPearls_.h%E4%B8%AD%E7%9A%84ifndef..define..endif/</url>
      <content type="html"><![CDATA[<p>　　参考博文 <a href="http://blog.csdn.net/luoweifu/article/details/42550955">《#pragma once与#ifndef #define …#endif的区别》</a></p>
<p>　　<strong>#pragma once</strong> 用来防止某个头文件被多次 include；<br>　　<strong>#ifndef</strong>，<strong>#define</strong>，<strong>#endif</strong> 用来防止某个宏被多次定义。<br><a id="more"></a></p>
<h2 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a><font color="#F40D64">两种方式</font></h2><p>　　<strong>方式一：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"> </div><div class="line">... ... <span class="comment">// 一些声明语句</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>方式二：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _XXX_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _XXX_H_</span></div><div class="line"> </div><div class="line">... ... <span class="comment">// 一些声明语句</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<h2 id="有什么问题？"><a href="#有什么问题？" class="headerlink" title="有什么问题？"></a><font color="#F40D64">有什么问题？</font></h2><p>　　<strong>#pragma once</strong> 是编译相关，就是说这个编译系统上能用，但在其他编译系统不一定可以，也就是说移植性差，不过现在基本上已经是每个编译器都有这个定义了；</p>
<p>　　<strong>#ifndef</strong> 的方式依赖于宏名字不能冲突，这不光可以保证同一个文件不会被包含多次，也能保证内容完全相同的两个文件不会被不小心同时包含。当然，缺点就是如果不同头文件的宏名不小心 <strong>“撞车”</strong>，可能就会导致头文件明明存在，编译器却硬说找不到声明的状况。</p>
<h2 id="该如何抉择？"><a href="#该如何抉择？" class="headerlink" title="该如何抉择？ "></a><font color="#F40D64">该如何抉择？ </font></h2><p>　　<strong>#ifndef…#define…#endif</strong> 这个是 <strong>C++</strong> 语言相关，这是 <strong>C++</strong> 语言中的宏定义，通过宏定义避免文件多次编译。所以在所有支持 <strong>C++</strong> 语言的编译器上都是有效的，如果写的程序要跨平台，最好使用这种方式。</p>
<p>　　<strong>#pragma once</strong> 则由编译器提供保证：同一个文件不会被包含多次。注意这里所说的“同一个文件”是指物理上的一个文件，而不是指内容相同的两个文件。带来的好处是，你不必再费劲想个宏名了，当然也就不会出现宏名碰撞引发的奇怪问题。对应的缺点就是如果某个头文件有多份拷贝，本方法不能保证他们不被重复包含。当然，相比宏名碰撞引发的 <strong>“找不到声明”</strong> 的问题，重复包含更容易被发现并修正。</p>
<p>　　<strong>#pragma once</strong> 方式产生于 <strong>#ifndef</strong> 之后，因此很多人可能甚至没有听说过。目前看来 <strong>#ifndef</strong> 更受到推崇。因为 <strong>#ifndef</strong> 受语言天生的支持，不受编译器的任何限制；而<strong>#pragma once</strong> 方式却不受一些较老版本的编译器支持，换言之，它的兼容性不够好。也许，再过几年等旧的编译器死绝了，这就不是什么问题了。</p>
<h2 id="另类的奇葩？"><a href="#另类的奇葩？" class="headerlink" title="另类的奇葩？ "></a><font color="#F40D64">另类的奇葩？ </font></h2><p>　　此外，还有一种方式是 <strong>把上述两者放在一起</strong> 的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// xxx.h</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _XXX_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _XXX_H_</span></div><div class="line">... ... <span class="comment">// 一些声明语句</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>　　看起来似乎是想兼有两者的优点。不过 <font color="#0088DB">只要使用了 <strong>#ifndef</strong> 就会有宏名冲突的危险，所以混用两种方法似乎不能带来更多的好处，倒是会让一些不熟悉的人感到困惑</font>。</p>
<h2 id="综上"><a href="#综上" class="headerlink" title="综上"></a><font color="#F40D64">综上</font></h2><p>　　建议使用 <strong>#ifndef…#define…#endif</strong> 方式一，另外，<strong>定义的宏最好与文件名相关，如 <code>xxx.h</code> 其宏定义按照格式为: <code>_XXX_H_</code></strong>，这可以一定程度上保证宏名字不冲突。</p>
<p>　　</p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Coding中的编码问题之回顾&深入]]></title>
      <url>/2016/02/25/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%9B%9E%E9%A1%BE$%E6%B7%B1%E5%85%A5/</url>
      <content type="html"><![CDATA[<font color="green" size="4">[系列文章]上一篇：<a href="http://durant35.github.io/2016/02/22/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/#more">《Coding中的编码问题之系统学习》</a><br>[系列文章]下一篇：<a href="http://durant35.github.io/2016/02/25/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%9B%9E%E9%A1%BE&amp;%E6%B7%B1%E5%85%A5/#more">《这是最后一篇》</a></font>

<p>　　到这里，相信你已经完整看完<a href="http://durant35.github.io/2016/02/21/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%85%A5%E9%97%A8&amp;%E6%A6%82%E8%A7%88/#more">《Coding中的编码问题之入门&amp;概览》</a>和<a href="http://durant35.github.io/2016/02/22/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/#more">《Coding中的编码问题之系统学习》</a>，对字符编码已经有一个清晰的点到面的理解了，本文作为整个系列文章的完结篇，一来对之前所有内容进行一个回顾与总结，加深印象，扩宽理解；二来对没提及的剩下不多的几个细节进行补充说明，希望能在你的脑海里建立较为清晰的知识网络。非常希望你也能在阅读后有自己的理解，然后整理在你的笔记或博客中；也希望日后当某个知识点模糊不清时，还能帮到你、我。<br><a id="more"></a></p>
<h2 id="字符编码笔记：-ASCII，Unicode-和-UTF-8"><a href="#字符编码笔记：-ASCII，Unicode-和-UTF-8" class="headerlink" title="字符编码笔记： ASCII，Unicode 和 UTF-8"></a><font color="#F40D64">字符编码笔记： ASCII，Unicode 和 UTF-8</font></h2><p>　　一开始，我们借 <strong>阮大神</strong> 的网络日志作一个回顾，<strong>阮大神</strong> 的介绍讲的非常通熟易懂，是学习的好文章，也是本人抒写博客的楷模，建议大家阅读原文。下面是阅读笔记，<font color="red">[红色部分]</font> 为注解笔记。<br>　　原文地址：<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a><br>　　<br>　我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位 <strong>（bit）</strong> 有 0 和 1 两种状态，因此八个二进制位就可以组合出 256 种状态，这被称为一个字节 <strong>（byte）</strong>。也就是说，一个字节一共可以用来表示 256 种不同的状态，每一个状态对应一个符号，就是 256 个符号，从 <code>0000000</code> 到 <code>11111111</code>。<br>　<span style="color:red">非常通熟易懂，讲述了字节与编码的关系，也就是我们前面一直说的，字符到最终，都是 <strong>“0101…”</strong>，而如何从字符演变过来，就是上面那一套套字符编码体系。<br></span><br>　世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。<br>　<span style="color:red">这便是乱码机制。<br></span><br>　 <font color="blue"><strong>Unicode</strong> 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</font> 有两个严重的问题，<br>　　第一个问题是，如何才能区别 <strong>Unicode</strong> 和 <strong>ASCII</strong>？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？<br>　　第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 <strong>Unicode</strong> 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是 0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。<br>　它们造成的结果是：<br>　　1）出现了 <strong>Unicode</strong> 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 <strong>Unicode</strong>。<br>　　2）<strong>Unicode</strong> 在很长一段时间内无法推广，直到互联网的出现。<br>　<span style="color:red">这就是前面一直说的 <strong>Unicode</strong> 只是字符集，不是编码，编码是涉及具体的存储形式的；<strong>Unicode</strong> 有多种编码方式： <strong>UTF-8</strong>、<strong>UTF-16</strong>、<strong>UTF-32</strong>。这三种编码均在这上面两个问题中进行不同的折中，比如： <strong>UTF-8</strong> 就是唯一兼容 <strong>ASCII</strong> 的，不过，他存储汉字可需要三个字节，有点小浪费。<br></span><br>　<font color="blue"><strong>UTF-8</strong> 是 <strong>Unicode</strong> 的实现方式之一</font>。<br>　<strong>UTF-8</strong> 的 <font color="blue">编码规则很简单，只有二条：<br>　　1）对于单字节的符号，字节的第一位设为 0，后面 7 位为这个符号的 <strong>Unicode 码</strong>。故对于英语字母，<strong>UTF-8</strong> 编码和 <strong>ASCII</strong> 码是相同的。<br>　　2）对于 n 字节的符号（n&gt;1），第一个字节的前 n 位都设为 1，第 n+1 位设为 <code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的<strong>Unicode 码</strong></font>。<br>　下表总结了编码规则，字母 x 表示可用编码的位。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">　　　Unicode符号范围 | UTF<span class="number">-8</span>编码方式</div><div class="line">　　　　　　(十六进制) | （二进制）</div><div class="line">--------------------+---------------------------------------------</div><div class="line"><span class="number">0000</span> <span class="number">0000</span><span class="number">-0000</span> <span class="number">007F</span> | <span class="number">0</span>xxxxxxx</div><div class="line"><span class="number">0000</span> <span class="number">0080</span><span class="number">-0000</span> <span class="number">07F</span>F | <span class="number">110</span>xxxxx <span class="number">10</span>xxxxxx</div><div class="line"><span class="number">0000</span> <span class="number">0800</span><span class="number">-0000</span> FFFF | <span class="number">1110</span>xxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx</div><div class="line"><span class="number">0001</span> <span class="number">0000</span><span class="number">-0010</span> FFFF | <span class="number">11110</span>xxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx</div></pre></td></tr></table></figure></p>
<p>　根据上表，<font color="blue">解读 <strong>UTF-8 编码</strong> 非常简单。如果一个字节的第一位是 0，则这个字节单独就是一个字符；如果第一位是 1，则连续有多少个 1，就表示当前字符占用多少个字节</font>。<br>　<span style="color:red">回顾一下 <strong>UTF-8</strong> 的编码方案，再看一遍，还是觉得巧妙！<br></span><br>　这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头 <strong>(Big-Endian)</strong> 敲开还是从小头 <strong>(Little-Endian)</strong> 敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。<br>　<strong>UCS-2 编码</strong> 方式，即直接用两个字节存入字符的 <strong>Unicode 码</strong>。第一个字节在前，就是 <strong>“大头方式”（Big endian）</strong>，第二个字节在前就是 <strong>“小头方式”（Little endian）</strong><br>　如果一个文本文件的头两个字节是 <code>FE FF</code>，就表示该文件采用大头方式；如果头两个字节是 <code>FF FE</code>，就表示该文件采用小头方式。<strong>Unicode 规范</strong> 中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做 <strong>“零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE）</strong>，用 <code>FEFF</code> 表示。这正好是两个字节，而且 FF 比 FE 大1。<br><span style="color:red">　<strong>UCS-2</strong> 好像是一种有别于 <strong>Unicode</strong> 的字符集；<br>　还有这个 <strong>BOM</strong> 被说得有点乱，不过这个这么有趣的故事，我必须贴在这里。大小头我们可以引申为高(大)低(小)字节，所以大端就是高字节在前，小端就是低字节在前；至于 <strong>BOM</strong>，其实是一个字符 <strong>“零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE）</strong>，不过类似 <strong>\0</strong> 是不可打印字符，但是字符就有对应的码点，这个字符对应的 <strong>Unicode</strong> 码点就是 <code>U+FEFF</code>，所以 “一个文本文件的头两个字节是 <code>FE FF</code>，就表示该文件采用大头方式”，反过来采用小端的话，低字节在前，就变成 <code>FF FE</code> 了。<br></span><br>　这篇网志中有两个地方需要补充一下，我忘了在原文中提到。<br>　　1. 国际标准化组织通过了一套 <strong>ISO-8859-1</strong> 的编码，规定了单字节 256 个符号的编码方式。目前，这是 8 位编码的国际标准。<br>　　2. <strong>Unicode 编码</strong> 中表示字节排列顺序的那个文件头，叫做 <strong>BOM（byte-order mark）</strong>，<code>FFFE</code> 和 <code>FEFF</code> 就是不同的 <strong>BOM</strong>。<strong>UTF-8</strong> 文件的 <strong>BOM</strong> 是 <strong>“EF BB BF”</strong>，但是 <strong>UTF-8</strong> 的字节顺序是不变的，因此这个文件头实际上不起作用。有一些编程语言是 <strong>ISO-8859-1 编码</strong>，所以如果用 <strong>UTF-8</strong> 针对这些语言编程序，就必须去掉 <strong>BOM</strong>，即保存成 <strong>“UTF-8—无 BOM”</strong> 的格式才可以，<strong>PHP</strong> 语言就是这样。<br>　<span style="color:red">这部分是我从该文章非常密集(很受欢迎的，这篇文章，热度可见一斑)的评论中找的。<br>　这个 <strong>ISO-8859-1</strong> 标准其实就是常说的，我们前面也提到的 <strong>Latin-1</strong> 编码；<br>　至于 <strong>UTF-8</strong> 的 <strong>BOM</strong>，前面已经说过，人家没有大小端，统一大端，只有 <strong>带不带 BOM</strong> 的区别，而且常常有些时候是不要带 <strong>BOM</strong> 的，官方也推荐不带 <strong>BOM</strong>，为啥？兼容我们伟大的 <strong>ASCII</strong> 嘛。这就是为什么我们之前在 <strong>Qt</strong> 遇到乱码时，有个解决方案是因为 <strong>UTF-8</strong> 带了 <strong>BOM</strong>，所以阉割了，带 <strong>BOM</strong> 人家反而不认识了。可是偏偏 <strong>Windows</strong> 的 <strong>UTF-8</strong> 偏偏要带 <strong>BOM</strong>，哎… <strong>Linux</strong> 的默认编码好像就是 <strong>UTF-8—无 BOM</strong>，这就是差距，为什么，相信你可以合理的分析了。<br></span><br>　UTF-8 文件的 BOM <strong>“EF BB BF”</strong>，它实际上就是 <code>FE FF</code> 用 <strong>UTF-8 编码</strong> 而得到的<br>　文中的 <strong>big endian</strong> 和 <strong>little endian</strong>，翻译成“大尾”和“小尾”是不是更恰当？理由如下：<br>　<code>FEFF</code>： FF 比 FE 大且 FF 在后面，显示就是 “大尾”<br>　<span style="color:red">同样来自评论区。<br>　这个是上面的补充吧，我们之前也说了。至于 <strong>big endian</strong>、<strong>little endian</strong> 你这样理解也行，不过，我现在倒觉得上面那种 <strong>“大小端~高低字节”</strong> 理解能记得更多知识点，也不乱。<br></span><br>　UTF-8 的表示算法： <font color="blue">既然第一个字节的 “1” 的数量就表示了整个当前字符的字节数，为什么后续字节还需要 “10” 作为前缀，这不是白白浪费了每个字节中的两个位吗</font>？<br>　　也许是出于容错的考虑，网络传输或者兼容不够不严谨的编辑器，删掉汉字等字节字符中的部分字节，会使得整串字符乱码；<br>　　当你处在一个字符串中间时，你不知道当前是一个什么字符，使用 UTF-8 能帮你在这种情况下同步到下一个合法字符，否则是不可能的。<br>　<span style="color:red">同样来自评论区。<br>　这个回答我觉得很准确，至于为什么能够区分，你不烦看一下 上一篇文章 <a href="http://durant35.github.io/2016/02/22/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/#Unicode"><strong>“Unicode”</strong></a> 这一节讲述 <strong>什么是 UTF？</strong> 这一部分。还有，就是在设计时考虑到这一点，或者说我们怎样做到在设计某个方案时考虑到某些容错细节，很重要！<br></span><br>　Windows 从 NT 开始，一开始的内码是 <strong>UCS-2</strong>，只支持 <strong>Unicode BMP</strong> 字符，后来做了扩充，目前的内码就是 <strong>UTF-16</strong>，通常不严格地称为 <strong>Unicode</strong>。<br>　<span style="color:red">同样来自评论区。<br>　立马打脸了，打得好！！！起码知道 <strong>UCS-2</strong> 是人家 <strong>UTF-16</strong> 的前身，那就是编码方式，不是字符集了，下面在<a href="http://blog.sina.com.cn/s/blog_4b4409c30100vw9t.html">《关于Unicode字符集 》</a> 这篇文章里面我要去打作者的脸啦，等着…<br>　此外，也确实验证了我们前面了解到的，<strong>Windows</strong> 系统现在的内码是 <strong>UTF-16</strong>。不过，内码是什么？下面在 <a href="http://polaris.blog.51cto.com/1146394/377468">《字符编码详解——彻底理解掌握编码知识，“乱码”不复存在 》</a> 这篇文章里会解释清楚。<br></span><br>　本文只是主要介绍了 <strong>UTF-8 编码</strong>，下面这篇文章对于 <strong>GB 码与 Big5</strong> 有更详细的介绍。<br>　　<font color="blue">汉字编码中现在主要用到的有三类，包括 <strong>GBK</strong>，<strong>GB2312</strong> 和 <strong>Big5</strong></font>。<br>　　1、<strong>GB2312 又称国标码</strong>，由国家标准总局发布，1981 年 5 月 1 日实施，通行于大陆。新加坡等地也使用此编码。它是一个简化字的编码规范，当然也包括其他的符号、字母、日文假名等，共 7445 个图形字符，其中汉字占 6763 个。我们平时说 6768 个汉字，实际上里边有 5 个编码为空白，所以总共有 6763 个汉字。<br>　　　<strong>GB2312</strong> 规定 “对任意一个图形字符都采用两个字节表示，每个字节均采用七位编码表示”，习惯上称第一个字节为 “高字节”，第二个字节为 “低字节”。<font color="blue"><strong>GB2312</strong> 中汉字的编码范围为，第一字节 <code>0xB0-0xF7</code> (对应十进制为 176-247 )，第二个字节 <code>0xA0-0xFE</code>（对应十进制为 160-254 ）</font>。<br>　　　<strong>GB2312</strong> 将代码表分为 94 个区，对应第一字节（0xa1-0xfe）；每个区 94 个位（0xa1-0xfe），对应第二字节，两个字节的值分别为区号值和位号值加 32（20H），因此也称为区位码。01-09 区为符号、数字区，16-87 区为汉字区（0xb0-0xf7），10-15 区、88-94 区是有待进一步标准化的空白区。<br>　　2、<strong>Big5</strong> 又称大五码，主要为香港与台湾使用，即是一个繁体字编码。每个汉字由两个字节构成，<font color="blue">第一个字节的范围从 0X81－0XFE（即 129-255），共 126 种。第二个字节的范围不连续，分别为 <code>0X40－0X7E</code>（即 64-126），<code>0XA1－0XFE</code>（即 161-254），共 157 种</font>。<br>　　3、<strong>GBK</strong> 是 <strong>GB2312</strong> 的扩展，是向上兼容的，因此 <strong>GB2312</strong> 中的汉字的编码与 <strong>GBK</strong> 中汉字的相同。另外，<font color="blue"><strong>GBK</strong> 中还包含繁体字的编码</font>，它与 <strong>Big5 编码</strong> 之间的关系我还没有弄明白，好像是不一致的。<font color="blue"><strong>GBK</strong> 中每个汉字仍然包含两个字节，第一个字节的范围是 <code>0x81-0xFE</code>（即 129-254），第二个字节的范围是 <code>0x40-0xFE</code>（即 64-254）</font>。<strong>GBK</strong> 中有码位 23940 个，包含汉字 21003 个。<br>　<span style="color:red">来自评论区。<br>　算是对 <strong>GB</strong> 系列编码的回顾吧。看来 <strong>GBK</strong> 还是 <strong>GB2312</strong> 和 <strong>Big5</strong> 的合体呀，不过，大陆人发(制)明(订)的嘛，肯定不兼容台湾人用熟的 <strong>Big5</strong>…所以，<strong>GBK</strong> 兼容 <strong>GB2312</strong>，后者兼容 <strong>ASCII</strong>，故也兼容 <strong>ASCII</strong>。<br>　此外，他们都是两个字节的，大概知道他们每个字节是有取值范围的，这样，像上一篇文章末尾的问题中，就可以用来判断非法字符的情况了。具体的取值范围，写代码的时候再查阅，太多要记的东西，不可能什么都记住呀。<strong>下面是对这篇网络日志的一个小结。</strong><br></span></p>
<ul>
<li>这篇文章算是对 <strong>Unicode</strong> 那一块的全方位回顾吧，此外，了解了除了上面提到的三种，<strong>UCS-2</strong> 也是其一种编码方式，而且是 <strong>UTF-16</strong> 弱化版(因为 <strong>UCS-2</strong> 只是定长的两个字节)。</li>
<li>加深对 <strong>GB</strong> 系列编码的了解。</li>
<li>内码是什么？看来还有一些小概念没遇到，还好，下面会讲解一下。</li>
</ul>
<h2 id="关于-Unicode-字符集"><a href="#关于-Unicode-字符集" class="headerlink" title="关于 Unicode 字符集"></a><font color="#F40D64">关于 Unicode 字符集</font></h2><p>　　原文地址：<a href="http://blog.sina.com.cn/s/blog_4b4409c30100vw9t.html">http://blog.sina.com.cn/s/blog_4b4409c30100vw9t.html</a></p>
<p>　最初的 <strong>Unicode 编码</strong> 是固定长度的，16 位，也就是用两个字节代表一个字符，这样一共可以表示 65536 个字符。显然，这样要表示各种语言中所有的字符是远远不够的。<strong>Unicode4.0 </strong> 规范考虑到了这种情况，定义了一组附加字符编码，附加字符编码采用 2 个 16 位来表示，这样最多可以定义 1048576 个附加字符，目前 <strong>Unicode4.0</strong> 只定义了 45960 个附加字符。<br>　<font color="blue"><strong>Unicode</strong> 只是一个编码规范，目前实际实现的 <strong>Unicode 编码</strong> 主要有三种：<strong>UTF-8</strong>，<strong>UCS-2</strong> 和 <strong>UTF-16</strong>，三种 <strong>Unicode</strong> 字符集之间可以按照规范进行转换</font>。</p>
<ol>
<li><p><strong>UTF-8</strong><br>　<strong>UTF-8</strong> 是一种 8 位的 <strong>Unicode 字符集</strong>，编码长度是可变的，并且是 <strong>ASCII 字符集</strong> 的严格超集，也就是说 <font color="blue"><strong>ASCII</strong> 中每个字符的编码在 <strong>UTF-8</strong> 中是完全一样的</font>。<strong>UTF-8 字符集</strong> 中，一个字符可能是 1 个字节，2 个字节，3 个字节或者 4 个字节长。一般来说，欧洲的字母字符长度为 1 到 2 个字节，而亚洲的大部分字符则是 3 个字节，附加字符为 4 个字节长。<br>　<strong>Unix 平台</strong> 中普遍支持 <strong>UTF-8</strong> 字符集，HTML 和大多数浏览器也支持 <strong>UTF-8</strong>，而 <strong>Window</strong> 和 <strong>Java</strong> 则支持 <strong>UCS-2</strong>。<br>　<strong>UTF-8</strong> 的主要优点：<br>　　对于欧洲字母字符需要较少的存储空间。<br>　　容易从 <strong>ASCII 字符集</strong> 向 <strong>UTF-8</strong> 迁移。</p>
</li>
<li><p><strong>UCS-2</strong><br>　<strong>UCS-2</strong> 是固定长度为 16 位的 <strong>Unicode 字符集</strong>。每个字符都是 2 个字节，<strong>UCS-2</strong> 只支持 <strong>Unicode3.0</strong>，所以不支持附加字符。<br>　<strong>UCS-2</strong> 的优点：<br>　　对于亚洲字符的存储空间需求比 <strong>UTF-8</strong> 少，因为每个字符都是 2 个字节。<br>　　处理字符的速度比 <strong>UTF-8</strong> 更快，因为是固定长度编码的。<br>　　对于 <strong>Windows</strong> 和 <strong>Java</strong> 的支持更好。</p>
</li>
<li><p><strong>UTF-16</strong><br>　<strong>UTF-16</strong> 也是一种 16 位编码的字符集。实际上，<font color="blue"><strong>UTF-16</strong> 就是 <strong>UCS-2</strong> 加上附加字符的支持，也就是符合 <strong>Unicode4.0 规范</strong> 的 <strong>UCS-2</strong>。所以 <strong>UTF-16</strong> 是 <strong>UCS-2</strong> 的严格超集</font>。<br>　<strong>UTF-16</strong> 中的字符，要么是 2 个字节，要么是 4 个字节表示的。<strong>UTF-16</strong> 主要在 <strong>Windows2000</strong> 以上版本使用。<br>　<strong>UTF-16</strong> 相对 <strong>UTF-8</strong> 的优点，和 <strong>UCS-2</strong> 是一致的。</p>
</li>
</ol>
<blockquote>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>1)、说 <strong>Unicode</strong> 是一种规范，这点确实，瞬间从字符集提升了一个 Level；所以说 <strong>Unicode3.0</strong>、<strong>Unicode4.0</strong> 以及其中的区别和不同编码方式支持的规范不同，都是合理，让人信服的。<br/><br>2)、不过作者字符集、编码一通说，我就不敢苟同了。你说 <strong>Unicode 字符集</strong>，很对；<strong>ASCII 字符集</strong>，也行，人家一种编码确实代表一个集合；但是说 <strong>UTF-8 字符集</strong>，那就大错特错了，你自己也说 <strong>UTF-8</strong> 是 <strong>Unicode</strong> 的一种实现，人家还有其他实现呢！而这些实现都是对应 <strong>Unicode</strong> 这种字符集，字符集下又有各种字符集，这不太好吧。所以，我们要再次明确，字符集和编码的区别，<strong>Unicode</strong> 是一种字符集，他有很多种实现方式，<strong>UTF-8</strong> 编码方式就是其中之一。<br/><br>3)、了解了 <strong>Unicode</strong> 字符集或者说 <strong>Unicode</strong> 规范制定和发展历程；通过对比各种 <strong>Unicode</strong> 编码方式的优点，再次回顾之前一直强调的 <strong>trade-off</strong>，也领会到 <strong>Unicode</strong> 在推动字符编码统一上采取的方案，值得借鉴和学习。<br/><br>4)、最后要明确的，<strong>UCS-2</strong> 是 <strong>UTF-16</strong> 的前身，是一种编码方式，现在基本都用 <strong>UTF-16</strong> 了，比如目前<strong>Window</strong> 内核和 <strong>Java</strong> 内存都采用 <strong>UTF-16</strong> 编码；<br>　　此外，<strong>UTF-8</strong> 仍是目前国际化上最受欢迎的编码方式，<strong>Unix</strong> 平台(<strong>Linux</strong> 应该就是其一)和 <strong>网页</strong> 都支持或者说默认就是采用 <strong>UTF-8</strong> 编码，而且好像除了 wei ruan，没人觉得带 <strong>BOM</strong> 有多大意思。所以，为了跨平台也好，国际化也好，建议采用 <strong>UTF-8</strong> 编码；至于带不带 <strong>BOM</strong>，建议还是带吧，毕竟人家市场大，我们也用的好好的(我是渣渣地在 Win 上…，大神请忽略)，另外我相信 <strong>Unix 平台</strong> 等这些好东西带不带 <strong>BOM</strong> 都能识别的！</p>
</blockquote>
<h2 id="字符编码详解"><a href="#字符编码详解" class="headerlink" title="字符编码详解"></a><font color="#F40D64">字符编码详解</font></h2><p>　　最后，借 <a href="http://polaris.blog.51cto.com/1146394/377468">《字符编码详解——彻底理解掌握编码知识，“乱码”不复存在》</a> 这篇文章作一个系统的总结，其中会引入几个新概念，有助于我们全面了解字符编码，也希望能进一步完善你脑海中的知识网络。原文总结的非常全面，可惜关于编码方式的诸多细节作者并没有过多提及；不过，在我们已经系统学习了字符编码之后，再进行阅读，是再好不过了。非常建议你能够有时间阅读一下原文，主要是文章末尾推荐的参考资料，至于其他内容，下面的笔记已经全面包括。<br>　　还是老样子，<font color="red">[红色部分]</font> 为注解笔记。</p>
<p>　每一个程序员都不可避免的遇到字符编码的问题，特别是做 <strong>Web 开发的程序员</strong>，<strong>“乱码问题”</strong> 一直是让人头疼的问题，也许您已经很少遇到 “乱码” 问题，然而，对解决乱码的方法的内在原理，您是否明白？本人作为一个程序员，在字符编码方面同样遇到不少问题，而且一直对各种编码懵懵懂懂、不清不楚；在工作中也曾经遇到一个很烦人的编码问题。这两天在网上收集了大量编码方面的资料，对字符编码算是理解的比较清楚了。下面把我认为比较重要的知识点记录下来，一方面方便以后复习；另一方面也希望给跟我一样懵懵懂懂的人一个参考。不对或不妥之处，请批评指正。<br><span style="color:red">　这个引入完美，想写好博客的，我们一起学习一下。<br></span><br>　<strong>1、字符集与字符编码</strong><br>　　<font color="blue">字符是各种文字和符号的总称</font>，包括各个国家文字、标点符号、图形符号、数字等。</p>
<p>　　<font color="blue">字符集是多个字符的集合</font>，字符集种类较多，每个字符集包含的字符个数不同，常见字符集有： <strong>ASCII 字符集</strong>、<strong>ISO 8859 字符集</strong>、<strong>GB2312 字符集</strong>、<strong>BIG5 字符集</strong>、<strong>GB18030 字符集</strong>、<strong>Unicode 字符集</strong> 等。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。<br>　　<font color="blue">使用哪些字符，也就是说哪些汉字，字母和符号会被收入标准中。所包含 “字符” 的集合就叫做 <strong>“字符集”</strong></font>。</p>
<p>　　<font color="blue">编码 <strong>(encoding)</strong> 和字符集不同。字符集只是字符的集合，不一定适合作网络传送、处理，有时须经编码后才能应用</font>。如 <strong>Unicode</strong> 字符集可依不同需要以 <strong>UTF-8</strong>、<strong>UTF-16</strong>、<strong>UTF-32</strong> 等方式编码。<br>　　<font color="blue">字符编码就是以二进制的数字来对应字符集的字符</font>。<br>　　因此，对字符进行编码，是信息交流的技术基础。<br>　　<font color="blue">规定每个 “字符” 分别用一个字节还是多个字节存储，用哪些字节来存储，这个规定就叫做 <strong>“编码”</strong>。</font></p>
<p>　　各个国家和地区在制定编码标准的时候，“字符的集合” 和 “编码” 一般都是同时制定的。因此，平常我们所说的 “字符集”，比如：<strong>GB2312</strong>, <strong>GBK</strong>, <strong>JIS</strong> 等，除了有 “字符的集合” 这层含义外，同时也包含了 “编码” 的含义。</p>
<p>　　注意： <strong>Unicode</strong> 字符集有多种编码方式，如 <strong>UTF-8</strong>、<strong>UTF-16</strong> 等；<strong>ASCII</strong> 只有一种；大多数 <strong>MBCS(Multi-Byte Chactacter System，多字节字符系统)</strong>（包括 <strong>GB2312</strong>）也只有一种。<br>　<span style="color:red">看完之后是不是对字符集、字符编码的关系有更深刻的理解呢？作者这些概念的定义确实言简意赅，不知道是摘录的还是自己总结的，让我们很容易理解。<br>　看过上面的文字，终于明白，为什么那么多人把 <strong>字符集</strong> 和 <strong>字符编码</strong> 两个概念给弄混了，原来这些是 <strong>Unicode</strong> 带来的颠覆性改变，科科。<br></span><br>　2、<strong>什么是内码？</strong><br>　　2.1 维基百科的解释<br>　　　在计算机科学及相关领域当中，<strong>内码</strong> 指的是 <font color="blue">“将资讯编码后，透过某种方式储存在特定记忆装置时，装置内部的编码形式”</font>。在不同的系统中，会有不同的 <strong>内码</strong>。<br>　　　在以往的英文系统中，内码为 ASCII。在繁体中文系统中，目前常用的内码为 <strong>大五码（Big5）</strong>。在简体中文系统中，内码则为国标码（国家标准代码：现在强制要求使用 <strong>GB18030 标准</strong>；较旧计算机仍然使用GB2312）。而 <strong>统一码（Unicode）</strong> 则为另一常见内码。</p>
<p>　　2.2 百度百科的解释<br>　　　<font color="blue">内码是指整机系统中使用的二进制字符编码，是沟通输入、输出与系统平台之间的交换码，通过内码可以达到通用和高效率传输文本的目的</font>。比如 <strong>MS Word</strong> 中所存储和调用的就是内码而非图形文字。英文 <strong>ASCII 字符</strong> 采用一个字节的内码表示，中文字符如国标字符集中，<strong>GB2312</strong>、<strong>GB12345</strong>、<strong>GB13000</strong> 皆用双字节内码，<strong>GB18030</strong>（27,533 汉字）双字节内码汉字为 20,902 个，其余 6,631 个汉字用四字节内码。<br>　<span style="color:red">反复看了很多遍，好像弄懂了点：<br>　　(1)、内码指的仍是编码方式；<br>　　(2)、之所以叫内码，特殊在他特指的是系统用的编码方式，有别于如：<strong>Java</strong> 在内存中使用 <strong>UTF-16</strong> 保存数据、某个网页使用的是 <strong>UTF-8</strong> 编码。<br>　　(3)、英文系统内码为 <strong>ASCII</strong>、繁体中文系统常用的内码为 <strong>大五码（Big5）</strong>、简体中文系统内码则为国标码(我的 Windows 简体中文系统是 <strong>GBK</strong>，不知道文中后面那句话啥意思…)，内码作为系统层面的编码，应该就决定了某些系统软件的默认编码(如我的 <strong>CMD</strong> 还有 <strong>NotePad</strong> 用的就是 <strong>ANSI</strong> 编码，下面会说 <strong>ANSI</strong> 编码)。<br></span><br>　3、<strong>字符编码分类总结</strong><br>　　3.1 <strong>ASCII 编码</strong><br>　　　以下来自 “维基百科”：<br>　　　　<strong>ASCII（American Standard Code for Information Interchange，美国信息互换标准代码）</strong>是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本 <strong>EASCII</strong> 则可以勉强显示其他西欧语言。它是现今最通用的<font color="blue">单字节编码系统</font>（但是有被 <strong>Unicode</strong> 追上的迹象），并等同于 <strong>国际标准 ISO/IEC 646</strong>。<br>　　　　<strong>ASCII</strong> 第一次以规范标准的型态发表是在 1967 年，最后一次更新则是在 1986 年，至今为止共定义了 128 个字符；其中 33 个字符无法显示（这是以现今操作系统为依归，但在 <strong>DOS 模式</strong> 下可显示出一些诸如笑脸、扑克牌花式等 8-bit 符号），且这 33 个字符多数都已是陈废的控制字符。控制字符的用途主要是用来操控已经处理过的文字。在 33 个字符之外的是 95 个可显示的字符，包含用键盘敲下空白键所产生的空白字符也算 1 个可显示字符（显示为空白）。</p>
<p>　　　<strong>ASCII</strong> 缺点：<br>　　　　<strong>ASCII</strong> 的最大缺点是只能显示 26 个基本拉丁字母、阿拉伯数字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如： <strong>naïve、café、élite</strong> 等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而 <strong>EASCII</strong> 虽然解决了部份西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的苹果电脑已经抛弃 <strong>ASCII</strong> 而转用 <strong>Unicode</strong>。</p>
<p>　　　最早的 <strong>英文 DOS 操作系统</strong>的系统内码是：<strong>ASCII</strong>。计算机这时候只支持英语，其他语言不能够在计算机存储和显示。<br>　　　在该阶段，字符串使用一个字节存放一个字符 <strong>（SBCS，Single Byte Character System）</strong>。如： “Bob123” 占 6 个字节。</p>
<p>　　3.2 <strong>ANSI 编码</strong><br>　　　为使计算机支持更多语言，通常使用 <code>0x80~0xFF</code> 范围的 2 个字节来表示 1 个字符。比如： 汉字 ‘中’ 在中文操作系统中，使用 <strong>[0xD6,0xD0]</strong> 这两个字节存储。</p>
<p>　　　不同的国家和地区制定了不同的标准，由此产生了 <strong>GB2312</strong>，<strong>BIG5</strong>，<strong>JIS</strong> 等各自的编码标准。这些 <font color="blue">使用 2 个字节来代表一个字符的各种汉字延伸编码方式，称为 ANSI 编码</font>。在 <strong>简体中文系统下，ANSI 编码代表 GB2312 编码，在日文操作系统下，ANSI 编码代表 JIS 编码</strong>。</p>
<p>　　　中文 DOS、中文/日文 Windows 95/98 时代系统内码使用的是 <strong>ANSI 编码</strong>（本地化）。<br>　　　在使用 <strong>ANSI 编码</strong> 支持多语言阶段，每个字符使用一个字节或多个字节来表示 <strong>（MBCS，Multi-Byte Character System）</strong>，因此，这种方式存放的字符也被称作多字节字符。比如，”中文 123” 在中文 Windows 95 内存中为 7 个字节，每个汉字占 2 个字节，每个英文和数字字符占 1 个字节。<br>　　　不同 <strong>ANSI 编码</strong> 之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段  <strong>ANSI 编码</strong> 的文本中。</p>
<p>　　　在非 <strong>Unicode</strong> 环境下，由于不同国家和地区采用的字符集不一致，很可能出现无法正常显示所有字符的情况。<font color="blue">微软公司使用了 <strong>代码页（Code page）转换表</strong> 的技术来过渡性的部分解决这一问题，即通过指定的转换表将非 <strong>Unicode</strong> 的字符编码转换为同一字符对应的系统内部使用的 <strong>Unicode 编码</strong></font>。可以在 “语言与区域设置” 中选择一个代码页作为 <strong>非 Unicode 编码</strong> 所采用的默认编码方式，如 <strong>936 为简体中文 GBK</strong>，<strong>950 为正体中文 Big5</strong>（皆指 PC 上使用的）。在这种情况下，一些非英语的欧洲语言编写的软件和文档很可能出现乱码。而将代码页设置为相应语言中文处理又会出现问题，这一情况无法避免。从根本上说，完全采用统一编码才是解决之道，但目前尚无法做到这一点。<br>　　　代码页技术现在广泛为各种平台所采用。UTF-7 的代码页是 65000，UTF-8 的代码页是 65001。<br>　<span style="color:red"><strong>ANSI 编码</strong> 其实是一个统称 <strong>（MBCS，Multi-Byte Character System）</strong>，或者说一个多面手，在什么系统(简体中文、繁体中文…)就能指什么编码，反正这东西，微软出品，…<br>　我了去，果然，<strong>代码页（Code page）转换表</strong> 这种东西又是微软出品。不过，说句老实话，<strong>Windows</strong> 确实在支持汉字方面做得挺好的(之前在 <strong>Ubuntu</strong> 上要变成简体中文，折腾了很久…)。可能也是因为这么多麻烦的转来转去，没根本解决上面说的问题，才老是会出现乱码的情况。<br>　看样子，应该是和之前说的一样，现在的 <strong>Windows 内核</strong> 使用的编码应该就是 <strong>UTF-16</strong> 吧，估计就是内码了吧；不过 <strong>非 Unicode 编码</strong> 就用代码页(简体中文下就是 <strong>936(GBK)</strong>)，这个也是内码吧；不过，大多数情况我觉得应该是 <strong>非 Unicode 编码</strong> 居多，也就是很多时候是 <strong>936(GBK)</strong> 或者说 <strong>ANSI 编码 (GBK)</strong>。好乱好乱，我们清楚一些不该说的，肯定错的就行，至于具体怎么理解，怎么说，我觉得本质的东西清楚就行。<br></span><br>　　3.3 <strong>Unicode 编码</strong><br>　　　为了使国际间信息交流更加方便，国际组织制定了 <strong>UNICODE 字符集</strong>，为各种语言中的每一个字符设定了统一并且唯一的数字编号，以满足跨语言、跨平台进行文本转换、处理的要求。</p>
<p>　　　<strong>Unicode 字符集</strong> 可以简写为 <strong>UCS（Unicode Character Set）</strong>。早期的 <strong>Unicode 标准</strong> 有 <strong>UCS-2</strong>、<strong>UCS-4</strong> 的说法。<strong>UCS-2</strong> 用两个字节编码，<strong>UCS-4</strong> 用 4 个字节编码。</p>
<p>　　　在 <strong>UNICODE</strong> 被采用之后，计算机存放字符串时，改为存放每个字符在 <strong>UNICODE 字符集</strong> 中的序号。目前计算机一般使用 2 个字节<strong>（UTF-16）</strong>来存放一个序号 <strong>（DBCS，Double Byte Character System）</strong>，因此，这种方式存放的字符也被称作宽字节字符。比如，字符串 “中文 123” 在 Windows 2000 下，内存中实际存放的是 5 个序号，一共 10 个字节。</p>
<p>　　　<strong>Unicode 字符集</strong> 包含了各种语言中使用到的所有 “字符”。用来给 <strong>UNICODE 字符集</strong> 编码的标准有很多种，比如：<strong>UTF-8</strong>，<strong>UTF-7</strong>，<strong>UTF-16</strong>，<strong>UnicodeLittle</strong>，<strong>UnicodeBig</strong> 等。<br>　<span style="color:red">挺喜欢这样的分类的，单字节、复合字节、双字节，总结的挺好的，对 <strong>ANSI 编码</strong>、<strong>代码页</strong> 有新的认识，以后必要时加以区分就行。<br>　<strong>UCS</strong> 原来就是 <strong>Unicode 字符集</strong> 呀，那些 <strong>UCS-X</strong> 其实就是早期的 <strong>UTF-X</strong>，估计之前定长，现在有的变变长而已，改进了！<br>　关于 <strong>Windows</strong> 的内码，比如一个字符串的 <strong>sizeof</strong> 是多少，可能还真不好说，也许这就是 <strong>cl</strong> 编译器弄出个什么 <strong>执行字符集</strong> 的原因吧。不过我们要清楚，一个字符串在内存中究竟用几个字节保存，跟采用的编码方式是息息相关的，在目前已掌握的基础上，我们可以通过 <strong>sizeof</strong> 的大小推敲一下，也许就能解决一些乱码问题了。<br></span><br>　4、<strong>常用编码规则</strong><br>　　4.1 <strong>单字节字符编码</strong><br>　　（1）编码标准： <strong>ISO-8859-1</strong>。<br>　　（2）说明： <font color="blue">最简单的编码规则，每一个字节直接作为一个 <strong>UNICODE 字符</strong></font>。比如，<strong>[0xD6, 0xD0]</strong> 这两个字节，通过 <strong>ISO-8859-1</strong> 转化为字符串时，将直接得到 <strong>[U+00D6]</strong>、 <strong>[U+00D0]</strong> 两个 <strong>UNICODE</strong> 字符，即 <strong>“ÖÐ”</strong>。<br>　　　　 反之，将 UNICODE 字符串通过 <strong>ISO-8859-1</strong> 转化为字节串时，只能正常转化 0~255 范围的字符。</p>
<p>　　4.2 <strong>ANSI 编码</strong><br>　　（1）编码标准： <strong>GB2312</strong>，<strong>BIG5</strong>，<strong>Shift_JIS</strong>，<strong>ISO-8859-2</strong>。<br>　　（2）把 <strong>UNICODE</strong> 字符串通过 <strong>ANSI 编码</strong> 转化为“字节串”时，根据各自编码的规定，一个 <strong>UNICODE</strong> 字符可能转化成一个字节或多个字节。<br>　　　　 反之，<font color="blue">将字节串转化成字符串时，也可能多个字节转化成一个字符</font>。比如，<strong>[0xD6, 0xD0]</strong> 这两个字节，通过 <strong>GB2312</strong> 转化为字符串时，将得到 <strong>[U+4E2D]</strong> 一个字符，即 ‘中’ 字。<br>　　<strong>“ANSI 编码”</strong> 的特点：<br>　　（1）这些 <strong>“ANSI 编码标准”</strong> 都只能处理各自语言范围之内的 <strong>UNICODE</strong> 字符。<br>　　（2）<strong>“UNICODE 字符”</strong> 与 <strong>“转换出来的字节”</strong> 之间的关系是人为规定的。</p>
<p>　　4.3 <strong>UNICODE 编码</strong><br>　　（1）编码标准： <strong>UTF-8</strong>，<strong>UTF-16</strong>，<strong>UnicodeBig</strong>。<br>　　（2）与 <strong>“ANSI 编码”</strong> 类似的，把 <font color="blue">字符串通过 <strong>UNICODE</strong> 编码转化成 “字节串” 时，一个 <strong>UNICODE</strong> 字符可能转化成一个字节或多个字节</font>。<br>　　与 <strong>“ANSI 编码”</strong> 不同的是：<br>　　（1）这些 <strong>“UNICODE 编码”</strong> 能够处理所有的 <strong>UNICODE</strong> 字符。<br>　　（2）<strong>“UNICODE 字符”</strong> 与 <strong>“转换出来的字节”</strong> 之间是可以通过计算得到的。</p>
<p>　　我们实际上没有必要去深究每一种编码具体把某一个字符编码成了哪几个字节，我们只需要知道 <font color="blue"><strong>“编码”</strong> 的概念就是把 <strong>“字符”</strong> 转化成 <strong>“字节”</strong></font> 就可以了。对于 <strong>“UNICODE 编码”</strong>，由于它们是可以通过计算得到的，因此，在特殊的场合，我们可以去了解某一种 <strong>“UNICODE 编码”</strong> 是怎样的规则。<br>　<span style="color:red">最后一段话的思路，我觉得是正确的： <strong>“编码”</strong> 的概念就是把 <strong>“字符”</strong> 转化成 <strong>“字节”</strong>，至于怎么转，不同的编码采取的方式不一样。但其实过程都是相似的，首先收录字符，组成一个字符集；字符集里面的每个字符都对应于一个数字(在 <strong>Unicode</strong> 里面叫做码点)；数字怎么转化为字节数据，遵循怎样的规则，这个就是编码。这就是每一套字符编码体系的共同之处。<br>　按照单字节、复合字节、<strong>Unicode</strong> 这样来划分编码方式也是可以的，反正我们根据上面 <strong>“编码”</strong> 的概念来进行理解。不过，对于 <strong>ANSI 编码</strong>，感觉还是不要和 <strong>Unicode</strong> 扯上关系，毕竟，<strong>ANSI 编码</strong> 都有各自的字符集，虽然这些字符集被收录在 <strong>Unicode</strong> 里面，但二者还是相对独立的。<br>　对 <strong>ISO-8859-1</strong>、<strong>ISO-8859-2</strong>、<strong>Shift_JIS</strong> 这些前面没提及的概念要有个了解，知道大概说的是什么，日后看到可以进行 <strong>推敲</strong>，更重要的是能够以此 <strong>构建搜索 (Google、Baidu) 的关键字</strong>。<br></span><br>　5、<strong>编码的区别</strong><br>　　5.1 <strong>GB2312</strong>、<strong>GBK</strong> 和 <strong>GB18030</strong><br>　　（1）<strong>GB2312</strong><br>　　　当中国人得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有 6000 多个常用汉字需要保存，于是想到把那些 <strong>ASCII 码</strong> 中 127 号之后的奇异符号们直接取消掉, 规定： <font color="blue">一个小于 127 的字符的意义与原来相同，但两个大于 127 的字符连在一起时，就表示一个汉字，前面的一个字节（称之为高字节）从 <code>0xA1</code> 用到 <code>0xF7</code>，后面一个字节（低字节）从 <code>0xA1</code> 到 <code>0xFE</code></font>，这样我们就可以组合出大约 7000 多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连 <font color="blue">在 <strong>ASCII</strong> 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的 <strong>“全角”</strong> 字符</font>，而原来在 127 号以下的那些就叫 “半角” 字符了。这种汉字方案叫做  <strong>“GB2312”</strong>。<strong>GB2312</strong> 是对 <strong>ASCII</strong> 的中文扩展。兼容 <strong>ASCII</strong>。</p>
<p>　　（2）<strong>GBK</strong><br>　　　但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，不得不继续把 <strong>GB2312</strong> 没有用到的码位找出来用上。后来还是不够用，于是干脆 <font color="blue">不再要求低字节一定是 127 号之后的内码，只要第一个字节是大于 127 就固定表示这是一个汉字的开始</font>，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 <strong>“GBK” 标准</strong>，<strong>GBK</strong> 包括了 <strong>GB2312</strong> 的所有内容，同时又增加了近 20000 个新的汉字（包括繁体字）和符号。</p>
<p>　　（3）<strong>GB18030</strong><br>　　　后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，<strong>GBK</strong> 扩成了 <strong>GB18030</strong>。从此之后，中华民族的文化就可以在计算机时代中传承了。 </p>
<p>　　中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 <strong>“DBCS”（Double Byte Charecter Set，双字节字符集）</strong>。在 <strong>DBCS</strong> 系列标准里，最大的特点是 <font color="blue">两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里</font>，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于 127 的，那么就认为一个双字节字符集里的字符出现了。在这种情况下，”一个汉字算两个英文字符！”。然而，在 <strong>Unicode</strong> 环境下却并非总是如此。<br><span style="color:red">　<strong>GB</strong> 系列的编码，进一步加深理解；另外，对于 <strong>全角/半角</strong>，有一定了解了吧。<strong>搜狗输入法</strong> 好像默认是通过 <strong>Shift + 空格键</strong> 进行 <strong>全角/半角</strong> 切换，有的话可以试试。</span><br>　　5.2 <strong>Unicode</strong> 和 <strong>BigEndianUnicode</strong><br>　　　这两个只是存储顺序不同，如 “A” 的 <strong>Unicode 编码</strong> 为 <code>6500</code>，而 <strong>BigEndianUnicode 编码</strong> 为 <code>0065</code>。<br>　<span style="color:red">其实就是大小端啦，还有这里的 <strong>Unicode 编码</strong> ，准确来说应该是 <strong>UTF-16 LE</strong>。</span><br>　　5.3 <strong>UTF-7</strong>、<strong>UTF-8</strong> 和 <strong>UTF-16</strong><br>　　　在 <strong>Unicode</strong> 里，所有的字符被一视同仁。<font color="blue">汉字不再使用 <strong>“两个扩展 ASCII”</strong>，而是使用 <strong>“1 个 Unicode”</strong></font>，注意，现在的汉字是 <strong>“一个字符”</strong> 了，于是，拆字、统计字数这些问题也就自然而然的解决了。</p>
<p>　　　但是，这个世界不是理想的，不可能在一夜之间所有的系统都使用 <strong>Unicode</strong> 来处理字符，所以 <strong>Unicode</strong>  在诞生之日，就必须考虑一个严峻的问题：和 <strong>ASCII 字符集</strong> 之间的不兼容问题。<br>　　　　(1)、我们知道，<strong>ASCII</strong> 字符是单个字节的，比如 <strong>“A”</strong> 的 <strong>ASCII</strong> 是<code>65</code>。而 <strong>Unicode</strong> 是双字节的，比如 <strong>“A”</strong> 的 <strong>Unicode</strong> 是 <code>0065</code>，这就造成了一个非常大的问题： <font color="blue">以前处理 <strong>ASCII</strong> 的那套机制不能被用来处理 <strong>Unicode</strong> 了</font>。<br>　　　　(2)、另一个更加严重的问题是，C 语言使用 <strong>‘\0’</strong> 作为字符串结尾，而 <strong>Unicode</strong> 里恰恰有很多字符都有一个字节为 0，这样一来，<font color="blue">C 语言的字符串函数将无法正常处理 <strong>Unicode</strong></font>，除非把世界上所有用 C 写的程序以及他们所用的函数库全部换掉。</p>
<p>　　　于是，比 <strong>Unicode</strong> 更伟大的东东诞生了，之所以说它更伟大是因为它让 <strong>Unicode</strong> 不再存在于纸上，而是真实的存在于我们大家的电脑中。那就是： <strong>UTF</strong>。<br>　　　<strong>UTF= UCS Transformation Format</strong>，即 <strong>UCS 转换(传输)格式</strong>。<br>　　　它是 <font color="blue">将 <strong>Unicode</strong> 编码规则和计算机的实际编码对应起来的一个规则</font>。现在流行的 <strong>UTF</strong> 有 2 种： <strong>UTF-8</strong> 和 <strong>UTF-16</strong>，这两种都是 <strong>Unicode</strong> 的编码实现。<br>　<span style="color:red"><strong>Unicode</strong> 是字符集，<strong>UTF-X</strong> 是具体的编码方式(规则)。<br>　还有，<strong>GB</strong> 系列编码还可以这样理解： <strong>“两个扩展 ASCII”</strong>，不过 <strong>GB</strong> 系列很多汉字单个字节根本就不在 <strong>ASCII</strong> 里面吧，我还是相信这种编码是通过定义一套兼容 <strong>ASCII</strong> 的规则，然后镂空某些编号的，她还是对应一张大表(字符集)，不是说人家有 94 个区嘛…<br>　<strong>“和 ASCII 字符集 之间的不兼容的两个问题”</strong> 确实很深刻，尤其是 <strong>“\0”</strong> 这一点，很多时候代码测试结果很奇怪，但看不出什么问题也许就跟这个有关，很少有人能想到这个点！</span><br>　　　5.3.1 <strong>UTF-8</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">　　UCS<span class="number">-2</span>编码(<span class="number">16</span>进制)   UTF<span class="number">-8</span> 字节流(二进制)</div><div class="line">　　<span class="number">0000</span> - <span class="number">007F</span>         <span class="number">0</span>xxxxxxx</div><div class="line">　　<span class="number">0080</span> - <span class="number">07F</span>F         <span class="number">110</span>xxxxx <span class="number">10</span>xxxxxx</div><div class="line">　　<span class="number">0800</span> - FFFF         <span class="number">1110</span>xxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx</div></pre></td></tr></table></figure></p>
<p>　　　　例如 “汉” 字的 <strong>Unicode 编码</strong> 是 <code>U+6C49</code>。<code>U+6C49</code> 在 <strong>0800-FFFF</strong> 之间，所以肯定要用 3 字节模板了： <code>1110xxxx 10xxxxxx 10xxxxxx</code>。将 <code>6C49</code> 写成二进制是： <strong>0110 110001 001001</strong>，用这个比特流依次代替模板中的 x，得到： <strong>11100110 10110001 10001001</strong>，即 <code>E6 B1 89</code>。</p>
<p>　　　　可见 <strong>UTF-8</strong> 是变长的，<strong>Unicode 编码</strong> 为 <strong>00000000-0000007F</strong> 的字符，用单个字节来表示； <strong>00000080-000007FF</strong> 的字符用两个字节表示；<strong>00000800-0000FFFF</strong> 的字符用 3 字节表示。因为目前为止 <strong>Unicode-16 规范</strong> 没有指定 <code>U+FFFF</code> 以上的字符，所以 <strong>UTF-8</strong> 最多是使用 3 个字节来表示一个字符。但理论上来说，<strong>UTF-8</strong> 最多需要用 6 字节表示一个字符。</p>
<p>　　　　<strong>UTF-8</strong> 兼容 <strong>ASCII</strong>。<br>　<span style="color:red">这个 “理论上来说，<strong>UTF-8</strong> 最多需要用 6 字节表示一个字符”，估计是 <strong>Unicode</strong> 字符集能表示的最多字符对应的数字吧，之前有提到过，目前 <strong>Unicode</strong> 表示的所有字符(码点就到 <code>U+10FFFF</code>)，<strong>UTF-8</strong> 用 1-4 字节即可表示。</span><br>　　　5.3.2 <strong>UTF-16（标准的 Unicode 成为 UTF-16）</strong><br>　　　　<strong>UTF-16</strong> 和上面提到的 <strong>Unicode</strong> 本身的编码规范是一致的。<br>　　　　<strong>UTF-16</strong> 以 16 位为单元对 <strong>UCS</strong> 进行编码。<font color="blue">对于小于 <code>0x10000</code> 的 <strong>UCS</strong>  码，<strong>UTF-16</strong> 编码就等于 <strong>UCS</strong> 码对应的 16 位无符号整数；对于不小于 <code>0x10000</code> 的 <strong>UCS</strong> 码，定义了一个算法</font>。不过由于实际使用的 <strong>UCS2</strong>，或者 <strong>UCS4</strong> 的 <strong>BMP</strong> 必然小于 <code>0x10000</code>，所以就目前而言，可以认为 <strong>UTF-16</strong> 和 <strong>UCS-2</strong> 基本相同。但 <font color="blue"><strong>UCS-2</strong> 只是一个编码方案，<strong>UTF-16</strong> 却要用于实际的传输，所以就不得不考虑字节序的问题</font>。<br>　　　　<strong>UTF-16</strong> 不兼容 <strong>ASCII</strong>。<br>　<span style="color:red">这个算法就是 <strong>使用代理区和代理对</strong>！另外，<strong>BMP</strong> 以内的字符能够使用 <strong>UCS-2</strong> 表示，和使用 <strong>UTF-16</strong> 是一样的，不过只有 <strong>UTF-16</strong> 能够表示 <strong>BMP</strong> 以外的字符。此外的区别，估计就是 <strong>“这个字节序的问题”</strong> ，<strong>UTF-16</strong> 有 <strong>BOM</strong>，<strong>UCS-2</strong> 应该没有带 <strong>BOM</strong> 之说。</span><br>　　　5.3.3 <strong>UTF-7</strong><br>　　　　<strong>UTF-7 (7-位元 Unicode 转换格式（Unicode Transformation Format，简写成 UTF）)</strong> 是一种可变长度字元编码方式，用以 <font color="blue">将 <strong>Unicode</strong> 字元以 <strong>ASCII</strong> 编码的字元串来呈现，可以应用在电子邮件传输之类的应用</font>。<br>　　　　<strong>UTF-7</strong> 并非<strong>Unicode</strong>标准之一。<br>　<span style="color:red">啊呀妈呀，<strong>UTF-7</strong> 不懂，这个估计没怎么会遇到，了解一下就行。</span></p>
<p>　6、<strong>Unicode 与 UTF</strong><br>　　<font color="blue"><strong>Unicode</strong> 是内存编码表示方案（是规范），而 <strong>UTF</strong> 是如何保存和传输 <strong>Unicode</strong> 的方案（是实现）</font>。<br>　　6.1 <strong>UTF 的字节序和 BOM</strong><br>　　　6.1.1 <strong>字节序</strong><br>　　　　<strong>UTF-8</strong> 以字节为编码单元，没有字节序的问题。<strong>UTF-16</strong> 以两个字节为编码单元，在解释一个 <strong>UTF-16</strong> 文本前，首先要弄清楚每个编码单元的字节序。例如收到一个 <strong>“奎”</strong> 的 <strong>Unicode 编码</strong>  是 <code>594E</code>，<strong>“乙”</strong> 的 <strong>Unicode 编码</strong> 是 <code>4E59</code>。如果我们收到 <strong>UTF-16</strong> 字节流 <code>594E</code>，那么这是 <strong>“奎”</strong> 还是 <strong>“乙”</strong>？</p>
<p>　　　　<strong>Unicode 规范</strong> 中推荐的标记字节顺序的方法是 <strong>BOM</strong>。<font color="blue"><strong>BOM</strong> 不是 <strong>“Bill Of Material”</strong> 的 <strong>BOM</strong> 表，而是 <strong>Byte Order Mark</strong></font>。<strong>BOM</strong> 是一个有点小聪明的想法：</p>
<blockquote>
<p>　　　　　在 <font color="blue"><strong>UCS 编码</strong> 中有一个叫做 <strong>“ZERO WIDTH NO-BREAK SPACE”</strong> 的字符，它的编码是 <code>U+FEFF</code>。而 <code>U+FFFE</code> 在 <strong>UCS</strong> 中是不存在的字符，所以不应该出现在实际传输中。<strong>UCS 规范</strong> 建议我们在传输字节流前，先传输字符 <strong>“ZERO WIDTH NO-BREAK SPACE”</strong></font>。</p>
<p>　　　　　这样如果接收者收到 <code>FEFF</code>，就表明这个字节流是 <strong>Big-Endian</strong> 的；如果收到 <code>FFFE</code>，就表明这个字节流是 <strong>Little-Endian</strong> 的。因此字符 <strong>“ZERO WIDTH NO-BREAK SPACE”</strong> 又被称作 <strong>BOM</strong>。</p>
</blockquote>
<p>　　　　<font color="blue"><strong>UTF-8</strong> 不需要 <strong>BOM</strong> 来表明字节顺序，但可以用 <strong>BOM</strong> 来表明编码方式</font>。字符 <strong>“ZERO WIDTH NO-BREAK SPACE”</strong> 的 <strong>UTF-8</strong> 编码是 <code>EF BB BF</code>（读者可以用我们前面介绍的编码方法验证一下）。所以如果接收者收到以 <code>EF BB BF</code> 开头的字节流，就知道这是 <strong>UTF-8</strong> 编码了。<br><span style="color:red">　读完这段，相信你对 <strong>BOM</strong> 的来龙去脉应该比较清楚了，好玩！机智！！</span><br>　　　6.1.2 <strong>BOM</strong><br>　　　（1）<strong>BOM 的来历</strong><br>　　　　为了识别 <strong>Unicode</strong> 文件，<strong>Microsoft</strong> 建议所有的 <strong>Unicode</strong> 文件应该以 <strong>ZERO WIDTH NOBREAK SPACE</strong>（<code>U+FEFF</code>）字符开头。这作为一个 <strong>“特征符”</strong> 或 <strong>“字节顺序标记（byte-order mark，BOM）”</strong> 来识别文件中使用的编码和字节顺序。</p>
<p>　　　（2）<strong>不同的系统对 BOM 的支持</strong><br>　　　　因为 <font color="blue">一些系统或程序不支持 <strong>BOM</strong>，因此带有 <strong>BOM</strong> 的 <strong>Unicode</strong> 文件有时会带来一些问题</font>。<br>　　　　　①<strong>JDK1.5</strong> 以及之前的 <strong>Reader</strong> 都不能处理带有 <strong>BOM</strong> 的 <strong>UTF-8</strong> 编码的文件，解析这种格式的 <strong>xml</strong> 文件时，会抛出 <strong>异常：Content is not allowed in prolog</strong>。<br>　　　　　②<strong>Linux/UNIX</strong> 并没有使用 <strong>BOM</strong>，因为它会破坏现有的 <strong>ASCII</strong> 文件的语法约定。<br>　　　　　③不同的编辑工具对 <strong>BOM</strong>的处理也各不相同。使用 <strong>Windows</strong> 自带的记事本将文件保存为 <strong>UTF-8</strong> 编码的时候，记事本会自动在文件开头插入 <strong>BOM</strong>（虽然 <strong>BOM</strong> 对 <strong>UTF-8</strong> 来说并不是必须的）。而其它很多编辑器用不用 <strong>BOM</strong> 是可以选择的。<strong>UTF-8</strong>、<strong>UTF-16</strong> 都是如此。<br>　　　（3）<strong>BOM 与 XML</strong><br>　　　　<strong>XML</strong> 解析读取 <strong>XML</strong> 文档时，<strong>W3C</strong> 定义了 3 条规则：<br>　　　　　①如果文档中有 <strong>BOM</strong>，就定义了文件编码；<br>　　　　　②如果文档中没有 <strong>BOM</strong>，就查看 <strong>XML</strong> 声明中的编码属性；<br>　　　　　③如果上述两者都没有，就假定 <strong>XML</strong> 文档采用 <strong>UTF-8</strong> 编码。<br>　<span style="color:red">自己弱，还要叫别人背锅，真是 wei ruan！现在我们可以分析，<strong>UTF-8</strong> 带不带 <strong>BOM</strong> 根本没什么区别也没什么影响，做得好的东西都这么认为。估计 wei ruan 在自动识别 <strong>UTF-8</strong> 碰壁，或者这个不带 <strong>BOM</strong> 的 <strong>UTF-8</strong> 让他们把之前补的坑都踩破了，无路可走了，厚着脸皮造了这个东西。(个人 YY…)<br>　为什么特别说 <strong>XML</strong>，个人认为本身 <strong>XML</strong> 就是用来传输数据的，用的编码方式肯定是最适合数据传输，兼容性最好的 <strong>UTF-8</strong> （你可以看到很多 <strong>XML</strong> 文件开头都有这样的声明 <strong>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</strong>），所以能不能很好解析带不或带 <strong>BOM</strong> 跟 <strong>XML</strong> 关系很密切！<br></span><br>　　6.2 <strong>决定文本的字符集与编码</strong><br>　　软件通常有三种途径来决定文本的字符集和编码。<br>　　（1）对于 <strong>Unicode</strong> 文本最标准的途径是检测文本最开头的几个字节。如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　开头字节       Charset/encoding</div><div class="line">　EF BB BF　　　 UTF-8</div><div class="line">　FE FF　　　 　 UTF-16/UCS-2, little endian(UTF-16LE)</div><div class="line">　FF FE　　　 　 UTF-16/UCS-2, big endian(UTF-16BE)</div><div class="line">　FF FE 00 00　  UTF-32/UCS-4, little endian</div><div class="line">　00 00 FE FF　  UTF-32/UCS-4, big-endian</div></pre></td></tr></table></figure></p>
<p>　　（2）采取一种比较安全的方式来决定字符集及其编码，那就是弹出一个对话框来请示用户。<br>　　　然而 <strong>MBCS 文本（ANSI）</strong>没有这些位于开头的字符集标记，现在很多软件保存文本为 <strong>Unicode</strong> 时，可以选择是否保存这些位于开头的字符集标记。因此，软件不应该依赖于这种途径。这时，软件可以采取一种比较安全的方式来决定字符集及其编码，那就是弹出一个对话框来请示用户。<br>　　（3）采取自己 “猜” 的方法。<br>　　　如果软件不想麻烦用户，或者它不方便向用户请示，那它只能采取自己 “猜” 的方法，软件可以根据整个文本的特征来猜测它可能属于哪个 <strong>charset</strong>，这就很可能不准了。<br><span style="color:red">　不过说真的，<strong>BOM</strong> 在识别编码上，还是挺有用的！<br></span><br>　　6.3 <strong>记事本的几种编码</strong><br>　　（1）<strong>ANSI 编码</strong><br>　　　记事本默认保存的编码格式是： <strong>ANSI</strong>，即本地操作系统默认的内码，简体中文一般为 GB2312。这个怎么验证呢？用记事本保存后，使用 EmEditor、EditPlus 和 UltraEdit 之类的文本编辑器打开。推荐使用 EmEditor，打开后，在又下角会显示编码： <strong>GB2312</strong>。</p>
<p>　　（2）<strong>Unicode 编码</strong><br>　　　用记事本另存为时，编码选择 <strong>“Unicode”</strong>，用 EmEditor 打开该文件，发现编码格式是： UTF-16LE+BOM（有签名）。用十六进制方式查看，发现开头两字节为： <code>FF FE</code>。这就是 <strong>BOM</strong>。</p>
<p>　　（3）<strong>Unicode big endian</strong><br>　　　用记事本另存为时，编码选择 <strong>“Unicode”</strong>，用 EmEditor 打开该文件，发现编码格式是： UTF-16BE+BOM（有签名）。用十六进制方式查看，发现开头两字节为： <code>FE FF</code>。这就是 <strong>BOM</strong>。</p>
<p>　　（4）<strong>UTF-8</strong><br>　　　用记事本另存为时，编码选择 <strong>“UTF-8”</strong>，用 EmEditor 打开该文件，发现编码格式是： UTF-8（有签名）。用十六进制方式查看，发现开头三个字节为： <code>EF BB BF</code>。这就是 <strong>BOM</strong>。<br><span style="color:red">　建议还是使用 <strong>NotePad++</strong>，上面那些，有些用过，个人感觉并不好用，关于 <strong>NotePad++</strong> 的使用可以看这里 <a href="http://durant35.github.io/2016/02/02/tool_NotePad/#more">《NotePad++》</a>；此外，通过 <strong>记事本另存为 ANSI 编码</strong>，以十六进制方式查看文件，可以更清楚的认识 <strong>ANSI</strong> 编码。<br></span><br>　7、<strong>几种误解，以及乱码产生的原因和解决办法</strong><br>　　7.1 误解一<br>　　　在将 <strong>“字节串”</strong> 转化成 <strong>“UNICODE 字符串”</strong> 时，比如在 <font color="blue">读取文本文件时，或者通过网络传输文本时，容易将 <strong>“字节串”</strong> 简单地作为单字节字符串，采用每 <strong>“一个字节”</strong> 就是 <strong>“一个字符”</strong> 的方法进行转化</font>。<br>　　　而实际上，在非英文的环境中，应该将 <strong>“字节串”</strong> 作为 <strong>ANSI 字符串</strong>，采用适当的编码来得到  <strong>UNICODE 字符串</strong>，有可能 <strong>“多个字节”</strong> 才能得到 <strong>“一个字符”</strong>。</p>
<p>　　　通常，一直在英文环境下做开发的程序员们，容易有这种误解。</p>
<p>　　7.2 误解二<br>　　　<font color="blue">在 <strong>DOS</strong>，<strong>Windows 98</strong> 等非 <strong>UNICODE</strong> 环境下，字符串都是以 <strong>ANSI 编码</strong> 的字节形式存在的。这种以字节形式存在的字符串，必须知道是哪种编码才能被正确地使用。</font> 这使我们形成了一个惯性思维： <strong>“字符串的编码”</strong>。<br>　　　当 <font color="blue"><strong>UNICODE</strong> 被支持后，<strong>Java</strong> 中的 <strong>String</strong> 是以字符的 “序号” 来存储的，不是以 <strong>“某种编码的字节”</strong> 来存储的</font>，因此已经不存在 <strong>“字符串的编码”</strong> 这个概念了。只有在 <strong>“字符串”</strong> 与 <strong>“字节串”</strong> 转化时，或者，将一个 <strong>“字节串”</strong> 当成一个 <strong>ANSI</strong> 字符串时，才有编码的概念。</p>
<p>　　　不少的人都有这个误解。<br><span style="color:red">　我的理解是，非 <strong>UNICODE</strong> 环境下，字符采取 <strong>ANSI 编码</strong> 保存；<strong>UNICODE</strong> 被支持后，采用 <strong>UTF-16 编码</strong>（如前面说的，<strong>JVM</strong> 中字符是按照 <strong>UTF-16 编码</strong> 保存的）。不过我知道，<strong>Windows</strong> 似乎是 <strong>UNICODE</strong> 环境，但是人家可以通过修改 <strong>执行字符集</strong> 来按照不同方式保存，乱呀！<br>　这个问题的结果就是，对于相同字符，采取不同编码方式，他在内存中实际存储的字节数据，甚至长度是不一样的，这就造成 <strong>sizeof</strong>，<strong>string.getBytes()</strong>，<strong>string.getlength</strong> 这些代码在运行时的结果值得商榷。不过，注意一下就行，你都会那么多了，这个自然会分析。<br></span><br>　　7.3 分析与解决<br>　　　第一种误解，往往是导致乱码产生的原因。第二种误解，往往导致本来容易纠正的乱码问题变得更复杂。</p>
<p>　　　在这里，我们可以看到，其中所讲的 “误解一”，即采用每 <strong>“一个字节”</strong> 就是 <strong>“一个字符”</strong> 的转化方法，实际上也就等同于采用 <strong>iso-8859-1</strong> 进行转化。因此，我们常常使用 <strong>bytes = string.getBytes(“iso-8859-1”)</strong> 来进行逆向操作，得到原始的 <strong>“字节串”</strong>。然后再使用正确的 <strong>ANSI</strong> 编码，比如 <strong>string = new String(bytes, “GB2312”)</strong>，来得到正确的 <strong>“UNICODE 字符串”</strong>。<br><span style="color:red">　整篇文章内容还是比较多的，而且总结的很全面；<br>　对 <strong>内码</strong>、<strong>代码页</strong>、<strong>半全角</strong> 等与字符编码相关的概念也能进一步了解；<br>　思路比较清晰，对我们建立相关的知识网络很有帮助。<br></span></p>
<h2 id="最后的战役"><a href="#最后的战役" class="headerlink" title="最后的战役"></a><font color="#F40D64">最后的战役</font></h2><p>　整个系列的文章就是这么多，从一开始在 <strong>Qt</strong> 中出现问题，分析问题产生很多疑问（来自 <a href="http://durant35.github.io/2016/02/02/programPearls_Qt_%E5%80%9FQt%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%B0%88%E8%B0%88Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/#more">《借Qt中文乱码谈谈Coding中的编码问题》</a>，可能你没看过，关系不大）；到 <a href="http://durant35.github.io/2016/02/21/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%85%A5%E9%97%A8&amp;%E6%A6%82%E8%A7%88/#more">《Coding中的编码问题之入门&amp;概览》</a> 一文对整个系列文章要阐述的内容—— <strong>字符编码</strong>，作一个 <strong>OverView</strong>；然后就是 <a href="http://durant35.github.io/2016/02/22/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/#more">《Coding中的编码问题之系统学习》</a> 一文中的系统学习，从点到面逐个击破；最后通过本文再总览性地回顾，加深印象，同时对最后几个知识点进行了解。希望看完本系列文章，能帮助你在脑海里形成字符编码的知识网络：</p>
<blockquote>
<ol>
<li><p><strong>字符集、字符编码的联系</strong>，包括先有字符集，确定每个字符对应的编号，最后采用具体的字符编码存储这些编号，形成从符号到 “0101…”的映射。</p>
</li>
<li><p><strong>如何存储字符集中每个字符的编号其实是一个具体的问题</strong>。这个问题的解决可以有两条思路，定长或变长。其中还要考虑如何解决一个随时时间推移而产生的兼容性问题。</p>
</li>
</ol>
<ul>
<li>以上两点都是理论性指导，应用在具体实践上，就产生了 <strong>由简单到复杂</strong>，<strong>由容量小到容量大</strong>，<strong>由一到多再到一</strong> 的字符编码发展史。</li>
</ul>
<ol>
<li>鼻祖 <strong>ASCII</strong> 奠定了字符编码的基调；随着欧洲国家的加入，<strong>Latin-1</strong> 自然需要对 <strong>ASCII</strong> 进行扩展；紧接着，以中国为首的来自世界各地的人们的加入，扩展显得迅捷但七零八落，<strong>GB</strong> 系列等编码不断出现和发展；直到目前，随着国际化的发展，统一的字符编码标准显得非常迫切，<strong>Unicode</strong> 来了！不过，统一的道路总是那么漫长，一方面要兼并（兼容 <strong>ASCII</strong>），一方面还要劝降（使用 <strong>UTF-16</strong>），所以 <strong>一国两制</strong> 就出现了，在不同领域，<strong>UTF-8</strong> 和 <strong>UTF-16</strong> 各领风骚。</li>
<li><strong>GB</strong> 系列编码的发展是一部曲折史，<strong>GB2312</strong> 的横空出世，确定了 <strong>GB</strong> 系列编码兼容 <strong>ASCII</strong> 的优良传统；<strong>GBK</strong> 接过旗帜，延续优良传统，扩展字符容量；可惜，到最后，<strong>GB18030</strong> 因小失大，容量是大了很多，可惜兼容性上捉襟见肘，目前 <strong>GB</strong> 系列编码只能吃 <strong>GB2312/GBK</strong> 的老本了。</li>
<li><strong>Unicode</strong> 一统大业也是历经波折。一开始的定长策略，<strong>UCS-X</strong> 方案纸上谈兵；接下来的变长方案打下江山。<strong>UTF-16</strong> 凭借 <strong>“代理区代理对”</strong> 的策略，给别人以震慑；<strong>UTF-8</strong> 借灵活、巧妙之法所向披靡，对 <strong>ASCII</strong> 的无缝衔接更是其最大威力。目前，<strong>UTF-16</strong> 和 <strong>UTF-8</strong> 同时在不同领域发挥着巨大的作用。统一大业，指日可待。</li>
</ol>
<ul>
<li>除了这样一部发展史，还要熟记几个概念：<br>　(1)、跟 <strong>Unicode</strong> 码点相关的 <strong>BMP</strong>、<strong>SP</strong>；<br>　(2)、跟 <strong>UTF-16</strong> 编码相关的 <strong>代理区(Surrogate Area)</strong>、<strong>代理对(Surrogate Pair)</strong>；<br>　(3)、解决 wei ruan <strong>Unicode</strong> 环境与 <strong>ANSI</strong> 编码鸿沟的 <strong>代码页(Code Page)</strong>；<br>　(4)、<strong>UTF-8</strong> 的死对头 <strong>BOM</strong>；<br>　(5)、跟 <strong>GB</strong> 系列编码密切相关的 <strong>区位码</strong>、<strong>国际码</strong>、<strong>机内码</strong>；<br>　(6)、特指系统使用的编码方式—— <strong>内码</strong>。</li>
<li>熟记几个算法：<br>　(1)、<strong>UTF-8</strong> 1-4 字节编码方案；<br>　(2)、<strong>UTF-16</strong> 2 或 4 字节编码方案，主要是 <strong>BMP</strong> 之外字符的编码方案；<br>　(3)、<strong>GB</strong> 系列编码兼容 <strong>ASCII</strong> 的策略，注意 <strong>GB2312</strong> 和 <strong>GBK</strong> 的异同点。</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> 编码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Coding中的编码问题之系统学习]]></title>
      <url>/2016/02/22/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<font color="green" size="4">[系列文章]上一篇：<a href="http://durant35.github.io/2016/02/21/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%85%A5%E9%97%A8&amp;%E6%A6%82%E8%A7%88/#more">《Coding中的编码问题之入门&amp;概览》</a><br>[系列文章]下一篇：<a href="http://durant35.github.io/2016/02/25/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%9B%9E%E9%A1%BE&amp;%E6%B7%B1%E5%85%A5/#more">《Coding中的编码问题之回顾&amp;深入》</a></font>

<p>　　大家在看完<a href="http://durant35.github.io/2016/02/21/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%85%A5%E9%97%A8&amp;%E6%A6%82%E8%A7%88/#more">《Coding中的编码问题之入门&amp;概览》</a>后，估计对字符编码应该有一个总览性的理解了。本文借 <strong>开源中国</strong> 上<a href="http://my.oschina.net/goldenshaw/blog?disp=2&amp;p=1&amp;catalog=536953">《字符集编码系列》</a>系列博文为大家详细介绍字符编码的诸多细节，相信看完本文后，一定能一一解决你到目前积累的绝大多数疑问，让我们带着疑问现在就开始吧！<br><a id="more"></a></p>
<h2 id="Charset-vs-Encoding"><a href="#Charset-vs-Encoding" class="headerlink" title="Charset vs Encoding"></a><font color="#F40D64">Charset vs Encoding</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/304493">http://my.oschina.net/goldenshaw/blog/304493</a></p>
<ul>
<li>字符集与字符集编码是两个不同层面的概念，类比接口与接口实现。<br>　<strong>1.</strong> 编码是依赖于字符集的，就像代码中的接口实现依赖于接口一样；<br>　<strong>2.</strong> 一个字符集可以有多个编码实现，就像一个接口可以有多个实现类一样。<center><img src="/img/programPearls/encoding-note/1_vs_Interface.jpg"/></center></li>
<li>字符集与编码存在一对一、一对多的情形(如上图)；一对一是一种普遍的情况，为什么?<br>　我们以 GB2312 为例，GB=Guo Biao=国标=国家标准，标准出来本来就为了统一，你一个标准弄出 N 个编码实现来，你让人家用哪个呢？</li>
<li>Unicode 就是特殊的一对多的情形。唯一的 <strong>Unicode字符集</strong> 对应了三种编码：<strong>UTF-8，UTF-16，UTF-32</strong>。<br><center><img src="/img/programPearls/encoding-note/1_Unicode_development.jpg" /></center><br>　Unicode 的目标是统一所有的字符集，囊括所有的字符，所以字符集发展到它这里就到头了，再去整什么新的字符集就没必要也不应该了。<br>　但如果觉得它现有的编码方案不太好呢？在不能弄出新的字符集情况下，只能在编码方面做文章了，于是就有了多个实现，这样一来传统的一一对应关系就打破了。</li>
<li>由于历史方面的原因，你还会在不少地方看到把 <strong>Unicode</strong> 和 <strong>UTF-8</strong> 混在一块的情况，这种情况下的<strong>Unicode</strong> 通常就是 <strong>UTF-16</strong> 或者是更早的 <strong>UCS-2</strong> 编码，在后面的篇章中我们会进一步分析。<br>　“记事本程序”保存时的一个截图，是 Unicode 的一个不规范使用，这里的 Unicode 就是指 UTF-16：<br><center><img src="/img/programPearls/encoding-note/1_NotePad.png" /></center><br>　Unicode 的一个具体编码实现，通常即为变长的 UTF-16(之所以称变长，因为这种编码是 16 或 32 位)，又或者是更早期的定长 16 位的 UCS-2。</li>
</ul>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> 编码是字符集的一种实现或者说，表现方式；字符集是一套看起来很理论的东西。<br>　<strong>2.</strong> 知道 <strong>Unicode</strong> 是种字符集，与其相关有三种编码： <strong>UTF-8，UTF-16，UTF-32</strong>，那具体是怎样的，是不是应该学学，了解一下呢？<br>　<strong>3.</strong> <strong>UCS-2</strong> 也是一种 <strong>Unicode</strong> 编码，他又是什么？ UCS-2 和 UTF-16 的区别？怎么看出哪些是前者，哪些是后者呢？<br>　<strong>4.</strong> <strong>Unicode</strong> 居然还有带不带 <strong>big endian</strong>，这个是什么，他们又有什么区别呢？</p>
<h2 id="编号-vs-编码"><a href="#编号-vs-编码" class="headerlink" title="编号 vs 编码"></a><font color="#F40D64">编号 vs 编码</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/305805">http://my.oschina.net/goldenshaw/blog/305805</a></p>
<ul>
<li>编号与编码的主要区别在于编号不涉及具体使用多少字节来表示、是用定长还是变长方案等细节问题。编号仅仅是一个抽象的概念，是把字符数字化的一个过程。<br><center><img src="/img/programPearls/encoding-note/2_charset_code_encoding.jpg" /></center><blockquote>
<p><strong>1.</strong> 编号一定是一个数字吗？<br>　　不一定！它可以是数字对，或者你叫它复数，二元数啥的，随便你。但只要它是离散可数量子化的，它自然也可以转换成唯一的一个数字。参见前面图中的二维区位编号，我们用数字对 (1, 1) 编号 “h” 这个字符。(1, 1) 可以简单转换成 11，然后可以进一步映射到从 0 或者 1 开始的编号。<br/><br><strong>2.</strong> 编号是连续的吗？<br>　　如果按日常习惯，编号通常应该从 1 开始，但受编码影响，编号也从 0 开始。<br>　　编号写成十进制是更自然的方式，但受编码影响，编号通常也以十六进制形式来书写，并写成固定的位数，不够时就在前面填充 0，比如把 48 写成 <code>0048</code>；又比如： <code>U+1D11E</code> 就是一个五位的编号。<br>　　为了以后的扩展方便，编码常常会跳过某些码位，甚至会保留大片的区域未定义或作保留用途。比如 Unicode 有所谓的 <strong>代理区(surrogate area)</strong>，后续我们会进一步了解。编号因此也跳过这些。<br>  <img src="/img/programPearls/encoding-note/2_unicode_standard.jpg" /></p>
</blockquote>
</li>
<li>Unicode 编码的两个层面：抽象编码层面 <strong>&amp;</strong> 具体编码层面<blockquote>
<p>　所谓抽象与具体，以 <code>U+0061</code>（ascii 字母 “a”）为例，十六进制的 <code>0061</code> 也就是十进制的 97，所谓抽象，也即是用 97 这个数字表示 “a”；所谓具体，就是在计算机的底层到底怎么表示的问题。即便是表示一个整数，你也面临着到底是用 byte，short，还是 int，long 来表示的问题，这就是具体。更具体到编码，你还面临是用<strong>定长还是变长</strong>等抉择。</p>
  <center><img src="/img/programPearls/encoding-note/2_code2encoding.jpg"/></center></blockquote>
</li>
<li>关于 <strong>Unicode码点</strong> 如何具体转换成各种编码，这个在后面再作讨论。从图上我们可以初步得出一些结论。比如：<blockquote>
<p>　<strong>1.</strong> <strong>UTF-8</strong> 与 <strong>UTF-16</strong> 都是变长编码，<strong>UTF-32</strong> 则是定长编码。<br>　<strong>2.</strong> 码点到 <strong>UTF-32</strong> 的转换最简单，就是在前面垫 0 垫够 4 字节就行了。<br>　<strong>3.</strong> 码点到 <strong>UTF-8</strong> 的转换，除了最小那个在数值上一样外，其它两个完全看不出两者的关系。<br>　<strong>4.</strong> 码点到 <strong>UTF-16</strong> 的转换则是最微妙的，可以看出前两个字符 <strong>UTF-16</strong> 与码点是完全一致的，但那个大码点（准确地说是超过了 <code>U+FFFF</code> 的码点）则有了很大的变化，长度变成了四字节，值也变得很不一样了。</p>
</blockquote>
</li>
<li>关于 <strong>UTF-16</strong> 的误解是很多的，部分可能由于它的名字上带了个 16，让人误以为它是 16 位定长的两字节编码。但正像 <strong>UTF-8 并不是仅仅是 8 位</strong>一样，<strong>UTF-16 也不仅仅是 16 位</strong>。<blockquote>
<p>事实上，<strong>UTF-16</strong> 的前身 <strong>UCS-2</strong> 确实是 16 位定长的编码，它跟码点在形式上就是完全一样了，实际我很怀疑那时候压根就没码点这一说法，那时人们甚至也不说 <strong>UCS-2</strong>，直接就叫 <strong>Unicode</strong>！<br>时至今天，你依然可以在不少地方看到把 <strong>UTF-16</strong> 写成 <strong>Unicode</strong> 的，然后与 <strong>UTF-8</strong> 并排在一起，显得不伦不类的，当然了，这是有历史原因的。</p>
</blockquote>
</li>
</ul>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> 更加明白字符集和编码的区别了。Unicode 是一种字符集，<strong>UTF-8，UTF-16，UTF-32</strong> 是具体的编码，<strong>UCS-2</strong> 也是。<br>　<strong>2.</strong> 字符集到具体的编码之间还有一个过渡层——码点，不同的字符集已经定义好了字符与码点的对应关系，而编码要做的，就是如何表现码点。不过具体哪一种编码怎么样具体表现，还是个疑问。<br>　<strong>3.</strong> Unicode 中提到的 <strong>代理区(surrogate area)</strong> 是什么东西？<br>　<strong>4.</strong> 编码有定长、变长之说，<strong>UTF-8/UTF-16</strong> 是变长的，<strong>UTF-32</strong> 则是定长的。所谓定/变长，似乎就是字符编码的字节长度，<strong>UTF-8</strong> 可以是 1-4 个字节，<strong>UTF-16</strong> 可以是 2 或 4 个字节，<strong>UTF-32</strong> 则都是 4 个字节。</p>
<h2 id="定长与变长"><a href="#定长与变长" class="headerlink" title="定长与变长"></a><font color="#F40D64">定长与变长</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/307708">http://my.oschina.net/goldenshaw/blog/307708</a></p>
<ol>
<li><p>连续式表示带来的分隔难题：在计算机的最底层，一切都成了 0 和 1，比如，这么一串 “0001100101101110001111111000…”，如果它来自某个文本文件保存后的结果，我们如何从这一串的 0 和 1 中重新解码得到一个个的字符呢？显然你需要把这一串的 0 和 1 分成一段一段的 0 和 1。</p>
<blockquote>
<p><strong>1.</strong> 在空格与标点都被数字化的情况下，我们在这一串 01 中如何去找出分隔来呢？显然我们需要外部的约定。<br><strong>2.</strong> 8 位（bit）一组的字节是最基本的一个约定，也是文件的基本单位，文件就是字节的序列。字节显然就是最基础的一个分隔依据。</p>
</blockquote>
</li>
<li><p><strong>定长(Fixed-length)</strong>的解决方案：<strong>ASCII</strong> 编码是最早也是最简单的一种字符编码方案，使用定长一字节来表示一个字符。</p>
</li>
<li><p>如何区分不同的定长（以及变长）编码方式？<br>　<strong>1.</strong> 答案是：你无法区分！好吧，这么说可能有点武断，有人可能会说 BOM(Byte Order Mark 字节顺序标识)能否算作某种区分手段呢？但也有很多情况是没有 BOM 的。<br>　<strong>2.</strong> 文本文件作为一种通用的文件，在存储时一般都不会带上其所使用编码的信息。编码信息与文件内容的分离，其实这正是乱码的根源。<br>　<strong>3.</strong> 我们说无法区分即是基于这一点而言，但另一方面，各种编码方案所形成的字节序列也往往带有某种特征，综合统计学，语言偏好等因素，还是有可能猜测出正确的编码的，比如很多浏览器中都有所谓“编码自动检测”的功能。</p>
</li>
<li><p><strong>定长多字节方案</strong> 是如何来的？<br>　<strong>1.</strong> 其实变长多字节方案更早出现，比如 GB2312，采用变长主要为了兼容一字节的 ASCII，汉字则用两字节表示（这也是迫不得已的事，一字节压根不够用）。<br>　<strong>2.</strong> 问题：那些看到把 6865 保存成 00680065 已经很不爽的人，现在你却对他们说，“嘿，伙计，可能你需要进一步存成 0000006800000065…”。容量与效率的矛盾在这时候开始激化。</p>
</li>
<li><p>容量与效率的矛盾<br>　<strong>1.</strong> 所谓容量，这里指用几个字节表示一个字符，显然用的字节越多，编码空间越大，能表示更多不同的字符，也即容量越大。<br>　<strong>2.</strong> 所谓效率，当表示一个字符用的字节越多，所占用的存储空间也就越大，换句话说，存储（乃至检索）的效率降低了。<br>　<strong>3.</strong> 那么有可能在定长方案的框架下解决这一容量与效率的矛盾吗？答案是否定的！</p>
</li>
<li><p>矛盾是事物发展的动力，下面我们将看到定长方案的简单性使它无法缓和容量与效率的冲突，平衡这一对矛盾的努力最终推动了编码方案从定长演变到变长，事情也由此从简单变得复杂了。<br>　例如，分层会对性能有所损害，但不分层又会带来紧耦合的问题。很多时候，架构就是关于平衡的艺术。</p>
</li>
<li><p><strong>定长二字节方案</strong> 无法满足容量增长，转向 <strong>定长四字节</strong> 又会引发了效率危机，最终，Unicode 编码方案演化成了 <strong>变长的UTF-16编码方案</strong>。那么 <strong>UTF-8方案</strong> 又是如何来的呢？为何不能统一成一个方案呢？搞这么多学起来真头痛！</p>
<blockquote>
<p>7.1 <strong>UTF-16</strong> 用所谓的 <strong>代理对(surrogate pair)</strong> 来编码 <code>U+FFFF</code> 以上的字符。<br>  <center><img src="/img/programPearls/encoding-note/3_UTF8_so_popular.jpg" width="640px"/></center><br>7.2 <strong>UTF-8 因为能兼容 ASCII 而受到广泛欢迎</strong>，但在保存中文方面，要用 3 个字节，有的甚至要 4 个字节，所以在保存中文方面效率并不算太好，与此相对，<strong>GB2312，GBK 之类用两字节保存中文字符效率上会高</strong>，同时它们也都兼容 <strong>ASCII</strong>，所以 <font color="red">在中英混合的情况下还是比 <strong>UTF-8</strong> 要好，但在国际化方面及可扩展空间上则不如 <strong>UTF-8</strong></font> 了。<br>7.3 其实 <strong>GBK</strong> 之后又还有 <strong>GB18030</strong> 标准，采用了 <strong>1，2，4字节变长方案，把 Unicode 字符也收录了进来</strong>。<strong>GB18030</strong> 其实是国家强制性标准，但感觉推广并不是很给力。<br>7.4 在软件开发的各个环节<font color="red">强制统一采用 <strong>UTF-8</strong> 编码，依旧是避免乱码问题的最有效措施</font>，没有之一。</p>
</blockquote>
</li>
<li><p><strong>变长(Variable-length)</strong> 的编码方案<br>　变长设计的核心问题自然就是 <strong>如何区分不同的变长字节</strong>，只有这样才能在解码时不发生歧义。</p>
<blockquote>
<p>8.1 利用高位作区分</p>
 <center><img src="/img/programPearls/encoding-note/3_variable_length_plan.jpg"/></center><br>　　第一种方案，由于低位的码位被“榨干”了，导致单个位与多位间无法区分<br> <center><img src="/img/programPearls/encoding-note/3_variable_length_plan_1.png"/></center><br>　　第二种方案，低位空间有所保留。这种方案避免了歧义，因此是可行的方案，但这还是非常粗糙的设计，如果我们想在这串字符中搜索 “o” 这个字符，它的编码是 3，这样在匹配时也会匹配上 53 中的 3，这种设计会让我们在实现匹配算法时困难重重。我们可以在跟随位上也完全舍弃低位的编码，比如以 55，56，57，58，59，65，66…这样的形式，但这样也会损失更多的有效编码位。<br> <center><img src="/img/programPearls/encoding-note/3_variable_length_plan_2.png"/></center><br>　　<strong>其实关键就在于<font color="red" size="3">用高位保留位来做区分，缺点就是有效编码空间少了，可以看到三字节的 UTF-8 方式中实际有效的编码空间只剩两字节。但这是变长方案无法避免的</font>。</strong><br> <center><img src="/img/programPearls/encoding-note/3_variable_length_GBKvsUTF8.png"/></center><br>　　由于最高位不同，多字节中不会包含一字节的模式。对于 UTF-8 而言，二字节的模式也不会包含在三字节模式中，也不会在四字节中；三字节模式也不会在四字节模式中，这样就解决上面所说的搜索匹配难题。下面的图以二，三字节为例说明了为什么。<br> <center><img src="/img/programPearls/encoding-note/3_variable_length_pattern.png"/></center><br>　　可以看到，由于固定位上的 0 和 1 的差别，使得二字节既不会与三字节的前两字节相同，也不会与它的后两字节相同。其它几种情况原理也是如此。<br><br>8.2 利用代理区作区分<br>　　这里挖出 70-89 间的码位，形成横竖 10x10 的编码空间，使得能再扩展 100 个编码空间。原来 2 位 100 个空间 (00-99) 损失了 20(70-89) 还剩 80，再加上因此而增加的 100 个空间，总共是 180 个空间。<strong>这样一种变长方式正是 UTF-16 所采用的</strong>。<br> <center><img src="/img/programPearls/encoding-note/3_variable_length_surrogate_area.png"/></center>

</blockquote>
</li>
</ol>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> 定长与变长方案涉及字符容量与存储效率的矛盾，当然也涉及编、解码效率等问题。<br>　<strong>2.</strong> 咱们中国人程序猿，随便用就用 <strong>GBK</strong> 或者 <strong>GB2312</strong>(具体怎么样，目前不清楚)；但为了国际化，也就是咱要对自己严格要求，还是用 <strong>UTF-8</strong>(具体怎么样，目前又不清楚)吧。<br>　<strong>3.</strong> 目前了解的定长编码，咱知道，<strong>ASCII</strong> 是一个字节定长的，<strong>UCS-2</strong> 是两个字节定长的，<strong>UTF-32</strong> 是四个字节定长的。<br>　<strong>4.</strong> 目前了解的变长编码，咱知道，<strong>GBK/GB2312</strong> 是 1-2 字节；<strong>UTF-8</strong> 是 1-4 字节，他们都利用高位作区分；<strong>UTF-16</strong> 则是 2 或 4 字节，利用代理区作区分。具体怎么做，目前不清楚；代理区是什么，也不太清楚。<br>　<strong>5.</strong> 因为<strong>GBK/GB2312</strong> 两个字节搞定中文，兼容(也就是一模一样的编码对应一模一样的字符)伟大的 <strong>ASCII</strong>；<strong>UTF-8</strong> 三个字节搞定中文，也兼容 <strong>ASCII</strong>，二者都比较受欢迎。前者由于<font color="red">存储汉字的效率比 <strong>UTF-8</strong> 高</font>，备受国人喜爱，本来就中国人自己造出来的；后者则能<font color="red">表示所有 <strong>Unicode</strong> 字符，推动国际化</font>，受世界人欢迎。中国人就喜欢重复造轮子(chao xi)，搞了个和 <strong>UTF-8</strong> 差不多的 <strong>GB18030标准</strong>，不受欢迎。。。</p>
<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a><font color="#F40D64">Unicode</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/310331">http://my.oschina.net/goldenshaw/blog/310331</a></p>
<ol>
<li><p>什么是 <strong>Unicode</strong>？<br><center><img src="/img/programPearls/encoding-note/4_what_is_Unicode.png"/></center><br>　<strong>1.</strong> 所谓的一个唯一的数字在 <strong>Unicode</strong> 中就叫做码点。<br>　<strong>2.</strong> <code>U+[XX]XXXX</code> 是码点的表示形式，X 代表一个十六制数字，可以有 4-6 位，不足 4 位前补 0 补足 4 位，超过则按是几位就是几位。<br>　<strong>3.</strong> 它的范围目前是 <strong>U+0000~U+10FFFF</strong>，理论大小为： <strong>10FFFF+1=110000(16)</strong>。后一个 1 代表是 <strong>65536(FFFF)</strong>，因为是 16 进制，所以前一个 1 是后一个 1 的 16 倍，所以总共有 1×16+1=17 个的 65536 的大小，粗略估算为 17×6 万 =102 万，所以这是一个百万级别的数。<br>　<strong>4.</strong> 准确的值是 <strong>1114112</strong>，一般记为 111 万左右即可。</p>
</li>
<li><p>什么是<strong>平面</strong>？<br><center><img src="/img/programPearls/encoding-note/4_Unicode_plan.png"/></center><br>　<strong>1.</strong> 为了更好分类管理如此庞大的码点数，把每 65536 个码点作为一个平面，总共 17(0~0x10) 个平面。<br>　<strong>2.</strong> 由前面可知，码点的全部范围可以均分成 17 个 65536 大小的部分，这里面的每一个部分就是一个 <strong>平面(Plane)</strong>。编号从 0 开始，第一个平面称为 Plane 0。</p>
</li>
<li><p>什么是BMP？<br>　第一个平面即是 <strong>BMP（Basic Multilingual Plane 基本多语言平面）</strong>，也叫 Plane 0，它的码点范围是 <strong>U+0000~U+FFFF</strong>。这也是我们最常用的平面，日常用到的字符绝大多数都落在这个平面内。<font color="red">UTF-16 只需要用两字节编码此平面内的字符</font>。</p>
</li>
<li><p>什么是<strong>增补平面</strong>？<br>　后续的 16 个平面称为<strong>SP（Supplementary Planes）</strong>。显然，这些码点已经是超过 <code>U+FFFF</code> 的了，所以已经超过了 16 位空间的理论上限，对于这些平面内的字符，UTF-16 采用了四字节编码。</p>
</li>
<li><p>CJK 统一汉字<br>　<strong>1.</strong> 在 <strong>Unicode</strong> 中间有一大片的区域，称为 <strong>CJK统一汉字（CJK：Chinese, Japanese, and Korean，中日韩）</strong>。</p>
<center><img src="/img/programPearls/encoding-note/4_CJK.png"/></center><br>　<strong>2.</strong> 正则表达式 <code>[\u4E00-\u9FA5]</code> 来匹配中文的问题在哪？<br>　　只要稍加计算就可知这一段大小不过是两万多一点，<strong>\u4E00-\u9FA5（19968-40869）</strong>，中文怎么可能只有这两万多字呢？  <br/><br>　<strong>3.</strong> 这里的“天字第一号”字 <code>4E00</code> 是哪个字呢？<br>　　请看上面的图，它就是“一“字，我们还可以看到它上面还有不少的汉字，这就是后来增补的汉字了。所以严格来说，这个上限是不准确的。那么它的下限又是否准确呢？下面是 Word 的一个插入符号功能的一个截图。<br><center><img src="/img/programPearls/encoding-note/4_Word_CJK.png"/></center><br>　　可以看到 <code>9FA5</code> 后面也还有不少的汉字，它们中间又还夹杂着一些符号，所以想正确地表示 Unicode 中的汉字还是个不小的挑战。<br><center><img src="/img/programPearls/encoding-note/4_Surrogate_Area.png"/></center></li>
<li><p>代理区<br>　BMP 缩略图中有一片空白，这就是所谓的 <strong>代理区（Surrogate Area）</strong>了。<br>　<strong>1.</strong> 可以看到这段空白从 <strong>D8~DF</strong>。其中前面的红色部分 <strong>D800–DBFF</strong> 属于 <strong>高代理区（High Surrogate Area）</strong>，后面的蓝色部分 <strong>DC00–DFFF</strong> 属于 <strong>低代理区（Low Surrogate Area）</strong>，各自的大小均为 <strong>4×256=1024</strong>。<br>　<strong>2.</strong> 还可以看到在它之前是韩文的区域，之后 E0 开始到 F8 的则是属于私有的（private），可以在这里定义自己专用的字符。</p>
</li>
<li><p>什么是 UTF？<br>　<strong>UTF</strong> 即是 <strong>Unicode转换格式（Unicode (or UCS) Transformation Format）</strong>。关于 <strong>UCS：Universal Character Set（统一字符集）</strong>，也称 <strong>ISO/IEC 10646标准</strong>，不那么严格的情况下，可以认为它和 <strong>”Unicode字符集“</strong> 这一概念是等价的。<br><center><img src="/img/programPearls/encoding-note/4_UTF.png"/></center><br>　<strong>1.</strong> <strong>UTF-32</strong> (最简单)<br>　　我们说码点最大的 <code>10FFFF</code> 也就 21 位，而<font color="red"> UTF-32 采用的定长四字节则是 32 位</font>，所以它表示所有的码点不但毫无压力，反而绰绰有余，所以 <font color="red">只要把码点的表示形式以前补 0 的形式补够 32 位即可</font>。这种表示的最大缺点是占用空间太大。<br/><br>　<strong>2.</strong> <strong>UTF-8</strong><br>　　UTF-8 是变长的编码方案，可以有 1，2，3，4 四种字节组合。在前面的定长与变长篇章我们提到 UTF-8 采用了高位保留方式来区别不同变长，如下：<br><center><img src="/img/programPearls/encoding-note/4_UTF8.png"/></center><br>　　如上，彩色的表示是保留的固定位，X 表示是有效编码位。<br>　　　单字节最高位都是 0，多字节的最高位都是 1.<br>　　　多字节方面，更具体的讲，N 字节模式，<font color="red">首字节以 “N 个 1 再加 0” 打头，后跟 “N-1” 个以 “10” 打头的字节</font>。<br/><br>　　哪些码点用哪种变长呢？可以 <font color="red">先把码点变成二进制，看它有多少有效位（去掉前导 0 ）</font>就可以确定了。</p>
</li>
<li>一字节有效编码位有 7 位，2<sup>7</sup>=128，码点 <strong>U+0000<sub>U+007F（0</sub>127）</strong> 使用一字节。<br>　　　　<font color="red">一字节留给了 ASCII，所以 UTF-8 兼容 ASCII。</font><br/></li>
<li>二字节有效编码位只有 5+6=11 位，最多只有 2<sup>11</sup>=2048 个编码空间，所以数量众多的汉字是无法容身于此的了。码点 <strong>U+0080<sub>U+07FF（128</sub>2047）</strong> 使用二字节。<br>　　　　<font color="red">注意：这里码点从 128~2047，因为去掉了一字节的码点，所以不会占满 2048 个编码空间，是有冗余的，但你不能把适用于一字节的码点放到这里来编码。下同。</font><br/></li>
<li>三字节模式可看到光是保留位就达到 4+2+2=8 位，相当一字节，所以只剩下两字节 16 位有效编码位，它的容量实际也只有 65536。码点 <strong>U+0800<sub>U+FFFF（2048</sub>65535）</strong> 使用三字节编码。<br>　　　　<font color="red">我们前面说到，一些汉字字典收录的汉字达到了惊人的 10 万级别。基本上，常用的汉字都落在了这三字节的空间里，这就是我们常说的汉字在 UTF-8 里用三字节表示。当然了，这么说并不严谨，如果这 10 万的汉字都被收录进来的话，那些偏门的汉字自然只能被挤到四字节空间上去了。</font><br><center><img src="/img/programPearls/encoding-note/4_UTF8_ChineseCharacter.png"/></center><br>　　　　上图显示了一有效位为 15 位的码点到三字节转换的一个基本原理，我们还可看到原来 <code>4F60</code> 中的一头一尾的两个 4 和 0 在转换后还存在于最终的三字节结果中。UTF-8 三字节模式固定了 1110 的开头模式，所以多数汉字总是以 1110 开头，换成 16 进制形式，1110 就是字母 E。<br>　　　　<font color="red">如果看到一串的 16 进制有如下的形式： <strong>EX XX XX EX XX XX…</strong> (每三个三个字节前面都是 E 打头)，那么它很可能就是一串汉字的 UTF-8 编码了</font>。<br/></li>
<li>四字节的可以看到它的有效位是 3+6+6+6=21 位，前面说到最大的码点 <code>10FFFF</code> 也是 21 位，<code>U+FFFF</code> 以上的增补平面的字符都在这里来表示。</li>
<li>按照 UTF-8 的模式，它还可以扩展到 5 字节，乃至 6 字节变长，但 Unicode 说了码点就到 <code>10FFFF</code>，不扩充了，所以 UTF-8 最多到四字节就足够了。<br/><br>　<strong>3.</strong> <strong>UTF-16</strong><br>　　UTF-16 是一种变长的 2 或 4 字节编码模式。<font color="red">对于 <strong>BMP</strong> 内的字符使用 2 字节编码，其它的则使用 4 字节组成所谓的代理对来编码。</font><br><img src="/img/programPearls/encoding-note/4_UTF16_Surrogate_Pair.png"/></li>
<li>什么是 <strong>UTF-16代理区</strong>？<br>　　　在前面的鸟瞰图中，我们看到了一片空白的区域，这就是所谓的 <strong>代理区（Surrogate Area）</strong> 了，<font color="red">代理区是 UTF-16 为了编码增补平面中的字符而保留的，总共有 2048 个位置，均分为 <strong>高代理区（D800–DBFF）</strong> 和 <strong>低代理区（DC00–DFFF）</strong> 两部分，各 1024(4xFF)，这两个区组成一个二维的表格，共有 1024×1024=2<sup>10</sup>×2<sup>10</sup>=2<sup>4</sup>×2<sup>16</sup>=16×65536，所以它恰好可以表示增补的 16 个平面中的所有字符。</font><br/></li>
<li>什么是 <strong>UTF-16代理对</strong>？<br>　　　一个高代理区（即上图中的 Lead（头），行）的加一个低代理区（即上图中的 Trail（尾），列）的编码组成一对即是一个 <strong>代理对（Surrogate Pair）</strong>，<font color="red">必须是这种先高后低的顺序，如果出现两个高，两个低，或者先低后高，都是非法的</font>。<br>　　　<font color="green">（D8 00 DC 00）</font>—&gt;<code>U+10000</code>，左上角，第一个增补字符<br>　　　<font color="green">（DB FF DF FF）</font>—&gt;<code>U+10FFFF</code>，右下角，最后一个增补字符<br/></li>
<li><strong>码点到UTF-16如何转换？</strong><br>　　　分成两部分：<br>　　　1). BMP 中直接对应，无须做任何转换；<br>　　　2). 增补平面 SP 中，则需要做相应的计算。其实由上图中的表也可看出，码点就是从上到下，从左到右排列过去的，所以只需做个简单的除法，拿到除数和余数即可确定行与列。<br>　　　拿到一个码点，先减去 <strong>010000<sub>(16)</sub></strong>，再除以 <strong>0xDFFF-0xDC00=400<sub>(16)</sub>(=1024<sub>(10)</sub>)</strong> 就是所在行了，余数就是所在列了，再加上行与列所在的起始值，就得到了代理对了。<br>　　　<span style="color:green"><strong>Lead = (码点 - 10000<sub>(16)</sub>) ÷ 400<sub>(16)</sub> + 0xD800</strong><br>　　　<strong>Trail = (码点 - 10000<sub>(16)</sub>) % 400<sub>(16)</sub> + 0xDC00</strong></span><br/><br>　　注意：以上计算方式仅用于说明转换原理，不代表实际采用的计算方式。一个码点减去 10000<sub>(16)</sub> 后实际最多只有 20 位 <strong>(10FFFF-010000)</strong>，再除以 400<sub>(16)</sub>（=2<sup>10</sup>=10000000000<sub>(2)</sub>)，这个除数实际是一个二进制整数，相当于十进制中整十整百的数。所以结果实际上低 10 位上的就是余数，而高 10 位（或者不到 10 位）上就是商，可以通过更为快速的移位操作实现。举个十进制的例子，就好比是 <strong>“1234÷100=12······34”</strong>，你都不需要拿笔去算。<span style="color:red">应该说，代理区的设计是有效率上的考虑的，如果我们要做转换，应该考虑是否有系统API可供调用，而不要自行去实现。</span></li>
</ol>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> 什么平面、什么 <strong>BMP</strong>、什么增补平面 <strong>SP</strong>，无非是一些描述性概念，不过得弄懂，不然后续可能某些东西理解不了了。老实说，这东西，看看、记记就会了。<br>　<strong>2.</strong> 什么 <strong>代理区(Surrogate Area)</strong> 啊，其实就是一块编号区域，被用作特殊用途；<strong>代理对(Surrogate Pair)</strong>，说白了，就是取值范围在 <strong>代理区(Surrogate Area)</strong> 内的坐标，可能加上某些限制吧。具体体现在 <strong>UTF-16</strong> 编码(其他的我就布吉岛了)，将 <strong>Unicode</strong> 编号中 <strong>BMP</strong> 平面划一部分出来 <strong>U+D800<sub>U+DFFF</strong>，就是代理区；(Lead，Trail)，Lead∈(U+D800</sub>U+DBFF)，Trail∈(U+DC00~U+DFFF)，这样的 (Lead，Trail)，就称为代理对。<br>　<strong>3.</strong> 代理区、代理对上一部分也有说，是变长编码一种区分方式。<strong>UTF-16</strong> 需要这样的代理区，通过代理对与 Unicode 编号一一对应，这样就能编码 1024(U+DBFF-U+D800)×1024(U+DFFF-U+DC00)=2<sup>10</sup>×2<sup>10</sup>=2<sup>4</sup>×2<sup>16</sup>=16×65536，也恰好就是 16 个增补平面，码点取值范围 <strong>U+010000<sub>U+10FFFF</strong>，这也就是 UTF-16 编码 Unicode 字符集的方式。<strong>BMP</strong> 以内（<strong></sub>U+00FFFF</strong>）就直接编码，其他就转换成代码对 (Lead，Trail)，然后用 Lead Trail 四个字节表示。这样就很容易解码了，反正不在代码区的取值，按两个字节解码；在代码区内的，按四个字节解码，查表搞定。<br>　<strong>4.</strong> 也终于知道 <strong>UTF-32</strong>、<strong>UTF-8</strong> 是怎么编码的，和想的还是差不多的，就是定义怎样把码点通过具体的 <strong>010101….</strong>表示。<strong>UTF-32</strong> 是定长的代表，定长方案很简单也很显而易见，直接将码点转化成 <strong>010101….</strong>，不够就补零，超过就木有办法了。人家 <strong>UTF-32</strong> 肯定考虑到，用了四个字节表示，因为表示 <strong>Unicode</strong> 最多也只需要21(bit)。<strong>UTF-8</strong> 则和 <strong>UTF-16</strong> 一样是变长的，所以也需要一些心思。思路也很简单，只要满足要求：单字节最高位都是 0，用来表示 <strong>ASCII</strong> 码，这样就完全兼容伟大的 <strong>ASCII</strong> 码；多字节的最高位都是 1，更具体的讲，N 字节模式，首字节以 “N个1再加0” 打头，后跟 “N-1” 个以 “10” 打头的字节。所以，先确定码点需要几个bit，然后确定需要几个字节，然后讲二进制码点依次放入除格式要求外的空位。解码也简单，扫到 N 个 “1” 就连同后面 (N-1) 个字节解码，然后丢掉格式 bit，进行解码。上面说到，<strong>Unicode</strong> 需要21(bit)，所以 <strong>UTF-8</strong> 最多也只需要四个字节。</p>
<h2 id="代码单元及-length-方法"><a href="#代码单元及-length-方法" class="headerlink" title="代码单元及 length 方法"></a><font color="#F40D64">代码单元及 length 方法</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/311848">http://my.oschina.net/goldenshaw/blog/311848</a></p>
<ol>
<li>什么是代码单元？UTF-8，UTF-16 和 UTF-32 中的 8，16 和 32 究竟指什么？<br>　<strong>1. </strong><font color="red">一种转换格式（UTF）中最小的一个分隔，称为一个 <strong>代码单元（Code Unit）</strong></font>，因此，一种转换格式只会包含整数个单元。<br>　<strong>2. </strong><font color="red"><strong>UTF-X</strong> 中的数字 X 就是各自代码单元的位数</font>。<br>　　<strong>UTF-8</strong> 的 8 指的就是最小为 8 位一个单元，也即一字节为一个单元，UTF-8 可以包含一个单元，二个单元，三个单元及四个单元，对应即是一，二，三及四字节。<br>　　<strong>UTF-16</strong> 的 16 指的就是最小为 16 位一个单元，也即两字节为一个单元，UTF-16 可以包含一个单元和两个单元，对应即是两个字节和四个字节。我们操作 UTF-16 时就是以它的一个单元为基本单位的。<br>　　同理，<strong>UTF-32</strong> 以 32 位一个单元，它只包含这一种单元就够了，它的一单元自然也就是四字节了。</li>
</ol>
<ul>
<li>Java 中的 <code>string.length</code> 究竟指什么？<br>　<font color="blue">Returns the length of this string. The length is equal to the number of Unicode code units in the string.</font><br>　返回字符串的长度，这一长度等于字符串中的 Unicode 代码单元的数目。<br>　<strong>1. </strong>我们知道 <font color="green">Java 语言里 String 在内存中以是 UTF-16 方式编码的，所以长度即是 UTF-16 的代码单元数目</font>。不是我们想像中的所谓 “字符数”。<br><img src="/img/programPearls/encoding-note/5_Java_UTF16.png"/><br>　<strong>2. </strong>在上图中，试图把这个字符赋值给一个 char 变量，发现编译器提示出错。为什么呢？因为<font color="red">Java 中 char 使用了 16 位，而这个字符在 16 位内已经无法表示，所以它放不进一个 char 中</font>。可以看到，char 可以放一个英文字符，一个中文字符，那是因为这些字符都在 BMP 中，但却无法放置这个音乐符，eclipse 的即时编译立马就报错了： <strong>“Invalid character constant”</strong>（非法的字符常量）。<br>　<strong>3. </strong>增补字符的转义表示<br>　　<font color="red">Java 中的转义表示始终是以 <code>\u</code> 后接四个 16 进制数字为界的（其实就是 UTF-16 的代码单元）</font>，你不能简单像码点那样写成 <code>\u1D11E</code>，这种写法相当于 “\u1D11”+”E”，即前面四位 <code>1D11</code> 做转义，后面当成正常的字母 E。<font color="red">如果要转义的字符码点超过 <code>U+FFFF</code>，我们需要两个一对的转义 <code>\uD834\uDD1E</code> 来表示</font>，从这里我们也可看到，所谓的转义表示其实就是 UTF-16 编码。<br><center><img src="/img/programPearls/encoding-note/5_Java_SP_escape.png"/></center><br>　　<font color="red"><strong>注意</strong>，本博主使用的是 [<strong>AssertJ</strong>] 这个自定义断言包，自行代码验证时没有该包时需要先行安装，或者转化为普通断言！！</font><br>　　这里证实了 string.length 的 API 所言不虚，图上的 str 只有一个字符，但它的长度却不是 1。它返回的的确就是 UTF-16 的代码单元的数目，而不是我们想像中的所谓 “字符数”。</br><br>　　另外，上图中还对两个 string 在 index=0 处的码点进行了求值（图中的 <strong>codePointAt()</strong> 方法），可以看到无论是以字符表示的 str<font color="red">(可以看到，<strong>char</strong> 表示不了，咱可以用 <strong>string</strong>)</font>还是以代理对表示的 anotherStr，它们的码点都是 <code>0x1D11E</code>，这也从另一个侧面证明了它们是同一个字符。<br><center><img src="/img/programPearls/encoding-note/5_Java_wrong_surrogate_pair.png"/></center><br>　　上述代码中把代理对写反了。前面篇章已经谈及，代理对必须严格按照先高后低的顺序来书写，这样 <code>\uD834\uDD1E</code> 其实是一个非法字符。<br>　　可以看到，输出了两个问号<font color="red">(其实就是两个非法字符，鬼知道是什么呀，显示个问号给你意思意思就是了)</font>，在 index=0 处的码点也变成了 <code>0xDD1E</code>，而不是原来的 <code>0x1D11E</code>了，而正常顺序则只输出一个字符。<font color="red">由于 <strong>console</strong> 字库原因，它不能正常显示，只是输出 “”。</font><br>　　这里也大概可以看出 <strong>codePointAt()</strong> 这个方法怎么使的。<span style="color: blue">对于非法字符，也就是人家尝试解码但解码不了的，你输入什么码点就是什么；对于 SP 里面的，尝试以代理对解码，成功的话，码点就是该代理对转义字符对应的码点。所以，对于上面的音乐符 <code>\uDB34\uDD1E</code>，<strong>codePointAt(0)</strong> 时发现这是个代理对，尝试跟后面一个字节解码，所以就得到音乐符的正确码点 <code>U+1D11E</code>；<strong>codePointAt(1)</strong> 的时候就只剩下 <code>\uDD1E</code> 了，被当做非法字符解码，码点就是自己啦</span>。</li>
</ul>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> 这部分感觉对 <strong>Java</strong> 程序猿用处大些，不过，不同语言间是有共性的，这些共性的获取对我们正在学习的人来说，至关重要。<br>　<strong>2.</strong> 上面提到 <strong>char</strong> 在 <strong>Java</strong> 中是两个字节，也就是在内存中的保存方式。什么汉字、什么字符，到底都是 <strong>“010101…”</strong>。怎么来的，<font color="red">字符有对应的码点，这个码点就跟字符集(比如这里的 Unicode )有关了；然后码点保存的时候需要编码，这个就看采用什么编码方式(比如这里 <font color="blue">Java采用 <strong>UTF-16</strong></font>)，编码后的字节数据基本上就是在内存中保存的数据了</font>。至于格式、规则、语法就看具体的语言怎么定吧，<strong>char</strong> 在 <strong>C/C++</strong>中还只有一个字节呢，这些区别就需要额外注意了。其实根本的，我觉得还是理解赋值的字符真正在内存是怎么样的，<strong>char</strong> 不行，你就知道为什么不行了，也许就会换 <strong>char[]</strong>  试试，换 <strong>string</strong> 了。<br/><br>　<strong>3.</strong> 还提到的，或者说本部分主要说的，<strong>length()</strong> 用法。知道 <strong>Java</strong> 中，<strong>string</strong> 的 <strong>getlength</strong> 方法返回的是字符串中的 <strong>Unicode</strong> 代码单元的数目，即是，使用 UTF-16 编码的代码单元数目。至于更为具体的，在了解了代码单元是什么(这个就需要先看看上面的东东，还是那句话，概念性的东西先弄懂)之后，知道 <strong>UTF-16</strong> 两个字节为一个代码单元，加上一个汉字、字母等常见字符的 <strong>UTF-16</strong> 编码一般是两个字节，BMP 之外的特殊汉字就是四个字节了，可知 <strong>length</strong> 获取的长度跟字符串包含几个字符(不管是汉字还是其他字符)一般是相等的。此外，你还有明白具体到内存中该字符串是几个字节的？跟 <strong>C/C++</strong> 中的 <strong>sizeof()</strong> 或者 <strong>strlen()</strong> 结果、内涵比较一下。 <br/><br>　<strong>4.</strong> 了解到 <strong>转义字符</strong> 或者说 <strong>转义序列(Escape Sequence)</strong> 这种东西，这个上一篇文章（<a href="http://durant35.github.io/2016/02/02/programPearls_Qt_%E5%80%9FQt%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%B0%88%E8%B0%88Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/#more">《借Qt中文乱码谈谈Coding中的编码问题》</a>）有跟大家提到。我们比较熟悉的转义字符，无非 <strong>“\n”(换行符)</strong> 、 <strong>“\t”(制表符)</strong> 、 <strong>“\“(反斜杠)</strong> 、 <strong>“\’”(单引号)</strong> 、<strong>“\””(双引号)</strong>，这些 <strong>C/C++</strong> 也好，<strong>Java</strong> 也好都有、都差不多；上面 <strong>Java</strong> 中的这种 <code>\uDB34\uDD1E</code> 则是 <strong>Unicode 转义字符</strong>，感觉叫 <strong>UTF-16 转义字符</strong> 也行吧；还有一种就是 <strong>Qt的ui界面</strong>，使用的是一种 <strong>Octal Escape Sequence(八进制转义序列)</strong>，其实就是 <strong>UTF-8</strong> 编码每个字节按照八进制显示。<br/><br>　　为什么会有转义字符这种东西呢？因为，<font color="red">对于一段 <strong>转义文本(Escape Sequence)</strong> 不管是用  <strong>GBK</strong> 还是 <strong>UTF-8</strong> 编码的，ASCII 字符的编码是对应的，到哪看都不会变成 “&amp;<em>^&amp;$</em>(*(<em>)</em>” 之类的乱码</font>；或者说，为了避免源码字符集不同而导致最后程序的字符集不同，那些在不同字符集中有歧义的非 ASCII 字符转义成上面这种形式就可以避免了。总之，只要代码知道这段转义是按照什么编码转义的，那么不管到哪都能最后生成唯一的、与你原先输入一致的字符串。不过上面的代码，更像是我们某个字符打不出来，但我们知道这其中的原理，通过这种新的方式来构造这个字符。说到底，因为最终他们 <font color="red">在内存中保存的字节，或者说 “0101…” 序列是一样的，那么他们表示的意思肯定都是一样，至于这个意思要怎么看出来，就得按照合理的方式来看(解码)，不然就看不到这个意思了，这就出现乱码了。</font> 这些就是题外话了。</p>
<h2 id="getBytes-方法及乱码初步"><a href="#getBytes-方法及乱码初步" class="headerlink" title="getBytes 方法及乱码初步"></a><font color="#F40D64">getBytes 方法及乱码初步</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/313077">http://my.oschina.net/goldenshaw/blog/313077</a></p>
<p>1.<strong>string.getBytes()</strong> 方法<br>　<strong>1.</strong> 带参数的调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetBytesGbk</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">　　String str = <span class="string">"hello你好"</span>;</div><div class="line">　　assertThat(str.getBytes(<span class="string">"GBK"</span>).length).isEqualTo(<span class="number">9</span>);</div><div class="line">　　<span class="comment">//普通断言包好像写成：assertEquals(str.getBytes("GBK").length, 9);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　因为 GBK 是变长编码，对 ASCII 字符采用一字节，汉字则是两字节，所以总的长度是 1×5+2×2=5+4=9，所以测试是通过的。<br/><br>　<strong>2.</strong> 无参数的调用：<strong>string.getBytes</strong> 它又可以不带参数去调用，这是最容易引发误解的，也是乱码的一大根源。<br>　　有人可能会想，既然 String 在内存中是以 UTF-16 编码，<strong>string.getBytes</strong> 是不是指它用 UTF-16 编码时所用的字节呢？答案是否定的。可能有人已经知道这个问题怎么回事，他们会说，没有参数时就使用系统的缺省编码。可是等等，这里所谓 “系统” 究竟指什么？操作系统？如果你就是这么认为的话，你可能又错了。<br>　　Eclipse 下的缺省编码测试结果：<br>    <center><img src="/img/programPearls/encoding-note/6_testDefaultEncoding.png"/></center><br>　　在 <strong>Debug 视图中，选中运行的实例→右键→选择 “properties”</strong>，在弹出的窗口中，我们发现了猫腻(我亲测过，可惜是 <strong>GBK</strong>，不过你可以通过在 <strong>eclipse.ini</strong> 文件末尾添加一行 <code>-Dfile.encoding=UTF-8</code> 配置成与博主一致)：<br>    <center><img src="/img/programPearls/encoding-note/6_Debug_Properies.png"/></center><br>　　可以看到在 Command Line 中，eclipse 传入了一个额外的参数 <strong>“-Dfile.encoding=UTF-8”</strong>，我们可以大胆猜测一下正是这一参数改变了 <strong>string.getBytes</strong> 的缺省值！这样子，按照 <strong>UTF-8</strong> 编码 <strong>getByte()</strong>，1x5+3x2=11，和测试结果确实是一致的。通过下面的代码测试也确实验证了我们的假设。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDefaultEncoding</span><span class="params">()</span> </span>&#123;</div><div class="line">　　assertThat(Charset.defaultCharset().toString()).isEqualTo(<span class="string">"UTF-8"</span>);</div><div class="line">　　<span class="comment">//普通断言包好像写成：assertEquals(Charset.defaultCharset().toString(), "UTF-8");</span></div><div class="line">　　assertThat(System.getProperty(<span class="string">"file.encoding"</span>)).isEqualTo(<span class="string">"UTF-8"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.命令行中的缺省编码：让我们跳过 eclipse，直接在命令行中验证一下。<br>　下面是执行的结果，可以看到这下缺省确实是 <strong>GBK</strong> 了，所以测试失败了：<br/><br>    <img src="/img/programPearls/encoding-note/6_CommandLine_Default.png"/><br>　<font color="red"><strong>注意：</strong>原文作者的截图感觉有点混乱，这里重新验证了一下，然后对截图做出修改。验证的时候切记以 <strong>-cp</strong> 或者 <strong>-classpath</strong> 的形式修改 <strong>classpath</strong> 参数，而不要通过命令行的 <strong>set classpath=…</strong> 进行修改；其次注意测试类是否是带包的情况，带包则需要 <strong>包名.类名</strong>。</font><br>　加上 <strong>-Dfile.encoding=UTF-8</strong> 再跑一下，果然，最后一行的 “OK” 表示测试通过了。<br/><br>    <img src="/img/programPearls/encoding-note/6_CommandLine_Dfile.png"/><br>　<span style="color:blue"><strong>※</strong> 那么现在一切已经很清楚了：<br>　　<strong>string.getBytes()</strong> 在没有指定参数的时候，它使用了 JVM 的缺省编码，如果启动 JVM 时没有明确设置编码，那么 JVM 就会使用所在操作系统的缺省编码(本人是在 Win8.1 简体中文系统下验证，GBK)；但如果启动时明确地设置了编码，那么这一设置将成为 JVM 中的缺省编码！<br>　　至于其它的平台，具体是怎么样的，这个无法一概而论，读者可根据所在平台的具体情况作具体分析。</span></p>
<p>3.乱码的初步分析<br>    <img src="/img/programPearls/encoding-note/6_messycode.png"/><br>　右图中，<font color="red">命令行窗口错误地以 <strong>GBK</strong> 编码方式去解码一段 <strong>UTF-8</strong> 的字节流导致</font> 的，让我们用测试来验证一下，并获取它的 GBK 编码看看：<br>    <img src="/img/programPearls/encoding-note/6_test_messycode.png"/><br>　可以看到，测试是通过的，我们还打印了 GBK 的字节输出，发现是 <code>F0 9D 84 9E</code>，你是否觉得有点眼熟呢？再次看看前面发过的图：<br>    <center><img src="/img/programPearls/encoding-note/6_musicSymbol_UTF.png"/></center><br>　其实从测试通过我们就知道，这两个字节数组必然是相等的。那么现在我们也大概能明白这个乱码是怎么一回事了。</p>
<p>4.<strong>代码页（Code Page）</strong><br>　可以通过在命令行窗口中输入 <strong>“chcp”</strong> 来查看当前代码页，<strong>chcp=change code page（改变代码页）</strong>。要是不带参数就是输出当前的代码页；带参数则另起一个 console，并把此新开的 console 的代码页设置为指定的值。(右键命令行窗口→属性→选项，即可查看当前代码页)<br>    <center><img src="/img/programPearls/encoding-note/6_code_page.png"/></center><br>　<span style="color:red">不那么严格地去看，代码页可以看作是字符集编码的同义词，比如 Code Page 936 就相当于 GBK，而 Code Page 65001 则相当于 UTF-8。</span></p>
<p>5.乱码的机制<br>　<strong>1.</strong> 我们在代码中打印了一个代理对，即 <code>U+1D11E</code> 这个码点所代表的一个音乐符，在 JVM 的内存中就是以 UTF-16 的代理对编码形式存在的，可以想像在堆内存中有这么一个字节数组，它的值是 <strong>(D8 34 DD 1E)</strong>。<br>　<strong>2.</strong> 我们在启动 JVM 时加入了 “-Dfile.encoding=UTF-8” 参数，所以缺省编码就成了 UTF-8。<br>　<strong>3.</strong> 当打印发生时，会以缺省编码形式得到向外输出的字节流（字节数组），也即内部某处实质调用了 <strong>string.getBytes(“UTF-8”)</strong>，这样就得到了一个临时的字节数组 <strong>（F0 9D 84 9E）</strong>，其实就是 UTF-8 对 <code>U+1D11E</code> 的编码，JVM 向命令行窗口输出这样一个字节数组，自然是希望在命令行中打印出一个音乐符来。<br>　<strong>4.</strong> 可是，命令行只是得到这么一串字节流 <strong>（F0 9D 84 9E）</strong>，这里不包含任何的编码信息，所以它还是愣头愣脑 <span style="color:red">按着自己的缺省 GBK 来解码，它先拿到第一个字节 <strong>F0（11110000）</strong>，一看最高位是 1，所以它认为这是一个汉字编码的第一个字节，于是它继续地读入第二个字节 9D，并把 <strong>（F0 9D）</strong> 合一起去查 GBK 的码表，这一查还真查到一个字，就是 “饾” 了（我们觉得这像是一个乱码，可计算机知道什么呢？），所以它很高兴地向外输出了这么一个字符。至于后面的（84 9E）呢，道理是一样的，所以又输出了另一个字符 “劄”</span> 。</p>
<p>6.<strong>string.getBytes()</strong> 的本质<br>　<span style="color:red"><strong>string.getBytes()</strong> 不过是把一种编码的字节数组转换成另一种编码的字节数组。</span><br>　这里的一种编码在 Java 中就是 UTF-16，这个已经定了，你不用操心，你也改不了！<br>　这里的另一种编码则由你来指定，不指定就用缺省，反正得要有，没有还转个球！<br>　<span style="color:blue"><strong>getBytes()</strong> 最好与 <strong>new String</strong> 一起结合来分析，一个是 String 到 bytes，一个是 bytes 到 String</span> 。</p>
<p>7.让解码与编码一致，不就不会出现乱码了吗！<br>　<span style="color:blue">既然前面说到，由于命令行窗口采用了 GBK 来解码 UTF-8 的字节流，从而导致了乱码，自然，我们就想，如果把命令行窗口也设置成 UTF-8 编码，事情不就 OK 了吗？</span><br>　<strong>1.</strong> 在 <strong>CMD</strong> 下验证：结果完全无法理喻(情况并不如我们想像那样，可以看到出来四个问号，按理应该只出来一个字符（哪怕不能显示）)，可能是有 bug，看来在 windows 的命令行窗口下是无法验证这点了。<br>    <img src="/img/programPearls/encoding-note/6_solve_messycode_CMD.png"/><br>　<strong>2.</strong> 在 <strong>git bash</strong> 上验证： 一样的问题，不清楚如何调整它的编码。<br>    <img src="/img/programPearls/encoding-note/6_solve_messycode_git_bash.png"/><br>　<strong>3.</strong> 在 <strong>cygwin</strong> 上验证：输出 $LANG 时可看到，它缺省已经是 UTF-8；这次终于算是正常了，可看到只有一个字符，不过由于字库不支持增补字符的原因而无法显示。<br>    <img src="/img/programPearls/encoding-note/6_solve_messycode_cygwin.png"/><br>　<strong>4.</strong> 非 Windows 平台，linux，mac…<br>　<span style="color:blue">这里原博主就没继续捣鼓了，不过，博主的捣鼓精神确实可敬，值得学习。上面也给我们展示了很多源于 linux，备受好评的东西，Windows 下的程序猿们舍不得离开，更不忍心只是傻看别人用，也在 Window 下弄一套。真是我们之福呀，大家有兴趣有机会多弄弄，定能学到好东西！！至于平台，个人觉得无所谓，扎实学好基本功才是关键，用熟就行</span></p>
<p>8.<strong>UTF-16</strong> 编码的问题<br>    <center><img src="/img/programPearls/encoding-note/6_UTF16_BOM.png"/></center><br>　我们使用 UTF-16 再试下，可以先简单计算一下，<strong>“hello你好”</strong> 7 个字符都在 BMP 中都是两字节，所以7×2=14，对吧？尼玛！！又见红了！仔细看看，它说实际是 16，哪里又多出两个字节来？这里也没有什么增补平面的字符呀！没辙了，打印出来：就在最头部的地方，楞是多出了两字节 “FEFF“，这是啥呢？我想有人看到这里已经明白了，这就是 <strong>BOM</strong>。</p>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> 上节捣鼓 <strong>Java</strong> 的 <strong>getlength</strong> 之后，这节捣鼓了 <strong>string.getBytes()</strong> 。表面看是在学  <strong>Java</strong> 语法，实际上是一些很底层很基础的通用知识。了解了 <strong>Java</strong> 的单元测试 <strong>JUnit</strong> 以及一些运行参数，<strong>JVM </strong> 的编码信息等一些底层原理。<br/><br>　<strong>2.</strong> 大概知道上一篇文章里面说的乱码机制是什么了，无非是解码编码用的编码方式不一致造成。大多数情况是源用的是一种编码(比如上面打印输出的字节流通过 <strong>string.getBytes()</strong> 方式得到，用的是 <strong>UTF-8</strong>)，使用数据的平台因获取不到源编码信息，又因显示需要，采用平台自己的解码信息(如上面不同的环境 <strong>CMD</strong>、<strong>git bash</strong>、<strong>cygwin</strong> )进行解码，所以造成了乱码。而解决办法嘛，无非就是让彼此一致，这个不简单。首先要弄清楚源用的是什么编码，尾用的是什么编码，为什么出现乱码了；其次，看怎样让彼此一致，改变源的编码还是改变尾的，哪种简单用哪种；最后，就是试一下，不行再改。如果清楚这一块的内容，我相信很快就能解决了。<br>　<strong>3.</strong> 除此之外，编码方式还涉及到数据在内存中的存储，比如上面提到的，<strong>Java</strong> 就采用 <strong>UTF-16</strong> 的方式保存数据，这一个其实就跟上一节 <strong>getlength</strong> 关系很大了。可以想象，假如运行时的解码方式可以改变，使用了 <strong>UTF-16</strong> 之外的编码方式进行解码的话，这里又会出现另一种乱码啦。<br/><br>　<strong>4.</strong> 理解清楚 <strong>代码页(Code Page)</strong> 这个概念了，跟上一篇文章呼应；反正真和编码概念差不多，而且似乎只有微软才这么说。不管，就一概念，清楚了就清楚了，以后遇到了也不觉得慌。<br/><br>　<strong>5.</strong> <strong>BOM</strong> 终于出来了，跟 <strong>UTF-16</strong> 有大关系，感觉似乎就跟 <strong>UTF</strong> 有干系。</p>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a><font color="#F40D64">BOM</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/323248">http://my.oschina.net/goldenshaw/blog/323248</a></p>
<ol>
<li><p>什么是 <strong>端法（endian）</strong>？<br>　<strong>1.</strong> <strong>大端法（Big endian）</strong><br>　　以两个 UTF-16 的编码 <code>0x0048</code> 与 <code>0x4F60</code> 为例，如果我们把它们书写成 <code>00 48 4F 60</code>，这样对我们而言也是非常自然的一种方式，<code>00</code> 与 <code>4F</code> 都属于高位，我们又常常说 “高大高大” 的，高与大总是关系紧密，自然这样一种 <font  color="blue">高位在前的方式就是<strong>大端法（Big endian）</strong></font> 了。<br/><br>　<strong>2.</strong> <strong>小端法（Little endian）</strong><br>　　还是以两个 UTF-16 的编码 0x0048 与 0x4F60 为例，如果我们把它们书写成 <code>48 00 60 4F</code>，那么这样一种 <font  color="blue">低位在前的方式就是<strong>小端法（Little endian）</strong></font> 了。<br/><br>　<strong>3.</strong> 大小端法应该是从存储层面考虑的<br>　　大端法放入内存，就单个编码而言，高位的字节反而放到了低地址上，而低位的字节却放到了高地址上。<br><img src="/img/programPearls/encoding-note/7_Big_endian_memory.png"/><br>　<strong>4.</strong> 大小端仅仅是字节间的关系，这也暗示了只有多字节情况才会有所谓的端法，而通常又在偶数字节情况下更为普遍，如 UTF-16，UTF-32，这样才能更好分出 “两个端” 来。下面谈到 UTF-8 时将会再度阐述这一问题。每个单独字节里的 8 个位依然还是高位在前，无论大小端均是如此，下图是小端法单个字节内部以二进制表示的示意图：<br><img src="/img/programPearls/encoding-note/7_endian_by_byte.png"/></p>
</li>
<li><p>端法与系统架构<br>　<strong>1.</strong> 在 <strong>Windows</strong> 平台下，当使用记事本程序保存文件时，编码里有几个选项，可以看到一个 <strong>“Unicode”</strong>  和 <strong>“Unicode big endian”</strong>， 通过以上名称的对比及对大端法的特别标示，我们可以猜测出，<strong>Windows</strong> 下缺省是小端法(注：关于这里的 <strong>Unicode</strong>，实际就是 UTF-16 编码)。<br><img src="/img/programPearls/encoding-note/7_notepad_encoding_selection.png"/><br>　<strong>2.</strong> <strong>Windows</strong> 平台为何使用小端法呢？说起来与 CPU 制造商 <strong>英特尔（Intel）</strong> 又有很大关系。<br>　　内存（Memory）中使用端法其实又是受到寄存器（Register）中使用的端法的影响，因为两者之间经常要来回拷贝数据。英特尔的 CPU 就使用了小端法。<br><img src="/img/programPearls/encoding-note/7_register_endian.png"/></p>
</li>
<li><p>什么是 <strong>BOM</strong>？<br>　<strong>1.</strong> 在记事本中以 ANSI 之外的三种编码分别保存一下 <strong>“hello你好”</strong>，分别命名为 <strong>UTF16BE.txt</strong>，<strong>UTF16.txt</strong>，<strong>UTF8.txt</strong>（分别对应 <strong>“Unicode big endian”</strong>，<strong>“Unicode”</strong>，<strong>“UTF-8”</strong>），使用 <strong>NotePad++</strong> 以 16 进制方式查看，<font color="red">注：不熟悉 <strong>NotePad++</strong> 的读者可以参考这里<a href="http://durant35.github.io/tags/NotePad/">《NotePad++》</a></font>。<br><img src="/img/programPearls/encoding-note/7_notepad++_UTF.png"/><br>　<strong>2.</strong> <font color="blue"><strong>BOM=Byte Order Mark</strong>，翻译过来就是 <strong>“字节顺序标识”</strong>，也即是上图中红色框中的部分。</font><br>　　自然地，这里所谓的字节顺序其实就是指使用了哪种端法。<br>　　前面说到，<strong>getBytes(“UTF-16”)</strong> 得到的缺省 BOM 是 <strong>“FEFF”</strong>，可见 JVM 中缺省是大端法，这与 Windows 平台下缺省为小端法恰好相反。<br/><br>　<strong>3.</strong> 下图是 <strong>UTF</strong> 各种 <strong>BOM</strong> 的一个汇总，<br><img src="/img/programPearls/encoding-note/7_UTF_BOMs.png"/><br>　　<strong>BOM</strong> 其实就是 <code>U+FEFF</code> 这一码点，<strong>“EF BB BF”</strong> 就是这一码点在 UTF-8 下的编码；<code>U+FEFF</code> 称为 <strong>“zero-width non-breaking space”</strong>，字面义： <strong>零宽度非换行空格</strong>。也即碰到时把它解释成这样，显示上的实际效果就是啥也没显示。在用作 <strong>BOM</strong> 之后，<strong>Unicode</strong> 不再建议这样去解释（deprecated），而是建议用 <code>U+2060</code> 来代替，<code>U+FEFF</code> 就作为 BOM 的专用。<code>U+2060</code> 称为 <strong>“Word Joiner”（字面义：词连接器）</strong>，缩写为 “WJ”。<br>　　<span style="color:blue"><strong>UTF-16 BE（Big Endian）</strong>的 BOM 是： <code>FE FF</code> <font color="red">（大端，高位在前，又因为 <code>U+FEFF</code> 在 BMP 之内，所以 BOM 就是<code>FE FF</code>）</font>；<strong>UTF-16 LE（Little Endian）</strong>的 BOM 是： <code>FF FE</code> <font color="red">（类似，不过因为是小端，低位要在前，所以 BOM 就是 <code>FF FE</code>）</font>；<br/><br>　　<strong>UTF-8</strong>的 BOM 是： <code>EF BB BF</code> <font color="red">（这个是 <code>U+FEFF</code> 的 UTF-8 编码）</font>；<br/><br>　　<strong>UTF-32 BE（Big Endian）</strong>的 BOM 是： <code>00 00 FE FF</code> <font color="red">（大端，高位在前，UTF-32 只需要对码点 <code>U+FEFF</code> 补足零就行，所以 BOM 就是 <code>00 00 FE FF</code>）</font>；<strong>UTF-32 LE（Little Endian）</strong>的 BOM 是： <code>FF FE 00 00</code> <font color="red">（类似，不过因为是小端，低位要在前，所以 BOM 就是 <code>FF FE 00 00</code>）</font></span></p>
</li>
<li><p><strong>UTF-8</strong> 的 <strong>BOM</strong><br>　java 中，<strong>UTF-8</strong> 缺省不带 BOM，这点与记事本又不同：<br>　　按 <font color="red">Unicode 组织的说法，<strong>UTF-8 可带可不带BOM</strong>，不作强制要求，但 <strong>不推荐用 BOM</strong>，原因之一是为与 ASCII 的兼容。另： <strong>UTF-8 也不存在所谓的大小端</strong> 两种情况，统一为大端法，BOM 仅仅作为一种所用编码的指示</font>。<br>　在 eclipse 中，以 UTF-8 保存时就没有 BOM，但它的编辑器也能正确处理带 BOM 的情况。</p>
</li>
</ol>
<blockquote>
<p>插一段与本节相关的评论区信息<br>　网友 1 提问博主：楼主有时间能否分析一下 <strong>操作系统和输入法是怎么处理编码</strong> 的<br>　网友 2 补问：关键是操作系统的显示，即所谓的 <strong>机内码</strong><br/><br>　博主回答：这个问题有点大，我可不是专家，只是有一点心得而已。<strong>JVM 在内存中字符串都是 UTF-16</strong>，<strong>.net 平台也是如此</strong>，<strong>新的 windows 平台内核都是 UTF-16</strong>，早期情况就复杂了，至于 <strong>linux 平台，据说是 UTF-8</strong>，没有详细了解，不敢妄下结论。至于输入法程序在它的进程空间如何表示字符串，如果它 <strong>能支持 unicode，那么在 windows 平台下应该用的就是 UTF-16 了；如果不支持 unicode，那么采用 GBK 之类</strong> 的来表示也是有可能的。对输入法我了解也不多，这些也仅是个人猜测。如果读者中有更清楚的，欢迎他们留言讨论！</p>
</blockquote>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> 老子终于明白带不带 <strong>BOM</strong> 之什么是 <strong>BOM</strong> 了！本质就一字符，一个无法显示的字符，其他不知道有木有，反正被 <strong>UTF</strong> 用来区分大小端了。什么是大小端，自己看概念去，一看就懂。<strong>BOM</strong> 的码点是 <code>U+FEFF</code>，然后用在不同的 <strong>UTF</strong> 编码，就按照相应编码下是什么，以及符合大小端定义。<br/><br>　<strong>2.</strong> <strong>UTF-8</strong> 可是能用 1-4 字节表示，奇数的话说大小端没什么意义，所以特殊一点，统一为大端，而只区分带不带 <strong>BOM(<code>EF BB BF</code>)</strong>。为了与 <strong>ASCII</strong> 兼容，建议不带 <strong>BOM</strong>，但是带不带，反正我们理解了这些东西，就能够处理了。就像上一篇文章里面因为没带 <strong>BOM</strong> 带来的编译警告，让我们知道 <strong>VS2013 的 cl 编译器</strong> 不能识别不带 <strong>BOM</strong> 的 <strong>UTF-8</strong>，想想也无伤大雅，就老老实实带上咯。<br/><br>　<strong>3.</strong> 到这里应该对 <strong>UTF</strong> 的编码有了比较全面的了解了。从 Unicode 字符集，到 Unicode 码点，再到由码点衍生出来的各种编码 <strong>UTF-8</strong>、<strong>UTF-16</strong>、<strong>UTF-32</strong>，再引入端法，进一步区分出带不带 <strong>BOM</strong> 的  <strong>UTF-8</strong>、<strong>UTF-16 BE</strong>、<strong>UTF-16 LE</strong>、<strong>UTF-32 BE</strong>、<strong>UTF-32 LE</strong>。</p>
<h2 id="ASCII-和-ISO-8859-1"><a href="#ASCII-和-ISO-8859-1" class="headerlink" title="ASCII 和 ISO-8859-1"></a><font color="#F40D64">ASCII 和 ISO-8859-1</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/351949">http://my.oschina.net/goldenshaw/blog/351949</a></p>
<ol>
<li><p><strong>ASCII</strong><br>　它的全称是 <strong>American Standard Code for Information Interchange（美国信息交换标准代码）</strong>，是一个 7 位字符编码方案。<br><img src="/img/programPearls/encoding-note/8_ASCII.png"/><br>　<strong>1.</strong> 控制字符：32 以下的及最后一个 127 是所谓的控制字符。<strong>（0x00~0x1F以及0x7F）</strong>，即上图最左边一列的 32 个字符及最右边一列最后的一个字符（DEL，删除）。<br>　　熟悉的有 <strong>0x09（TAB，horizontal tab，水平制表符）</strong>，<strong>0x0A（LF，line feed，’\n’换行符）</strong>，<strong>0x0D（CR，carriage return，’\r’回车符）</strong>，其它的很多现在已经是废弃不用了。<br/><br>　　<span style="color:blue">关于 <strong>回车换行(‘\r\n’)</strong>，在屏幕还不普及的时代，结果输出经常是依赖于所谓的电传打印机，打印头沿着打印杆从左向右移动并打印出一个个字符，当碰到一个 <strong>回车符（CR，0x0D，’\r’）</strong>时，打印机就指示打印头重新回到最左边的位置上，这即是传统意义上的回车了。（你可以把打印头想像成一辆小车，回车即是退回原处，现代意义上的回车则通常包含回车与换行两个动作）<br>　　回车符后常跟着一个 <strong>换行符（LF，0x0A，’\n’）</strong>，打印机收到换行符就会指示滚筒滚动，这样，打印头就对准了纸张上的新的一行。如果没有换行，新的打印输出就会重叠在上一行上，有时走纸不顺畅时也会造成这种后果。</span><br/><br>　　<span style="color:red">目前，在 Windows 系统上，回车键会产生两个字符 CRLF，一起表示换行；Unix/Linux 之类的则单独用 LF 表示换行；而苹果的 Mac 则单独用 CR 来表示换行。</span><br/><br>　<strong>2.</strong> 由于只定义了 2<sup>7</sup>=128 个字符，用 7bit 即可完全编码，而一字节 8bit 的容量是 256，所以<strong>一字节 ASCII 的编码最高位总是 0</strong>，这为后来的编码方案兼容它带来的便利。</p>
</li>
<li><p><strong>ISO-8859-1</strong><br>　<strong>ISO-8859-1</strong> 又称 <strong>Latin-1</strong>，是一个 8 位单字节字符集，它 <font color="red">把 <strong>ASCII</strong> 的最高位也利用起来，并兼容了 <strong>ASCII</strong> </font>，新增的理论空间是 128，但它并没有完全用完：<br><img src="/img/programPearls/encoding-note/8_ISO-8859-1.png"/><br>　可以看到，新增部分也保留了前面的 32 个位置<strong>（中间绿色部分，0x80-0x9F）</strong>，与前面的 ASCII 部分类似，所以实际只增加了 128-32=96 个，主要是 <strong>西欧的一些字符</strong>，另外可以看到 <strong>乘号（0xD7）</strong> 和 <strong>除号（0xF7）</strong> 也被包含进来了。<br/><br>　<span style="color:red"><strong>ISO-8859-1</strong> 能与 <strong>ASCII</strong> 兼容，同时它的适用范围又较广，一些协议或软件把它作为一种缺省编码，当然，现在更好的选择是 <strong>UTF-8</strong>。</span></p>
</li>
</ol>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> <strong>Unicode</strong> 相关的编码讲完了，剩下这些部分就像边角料一样，比较零散，但运用类似的思路就能够很快理解了。<br/><br>　<strong>2.</strong> 这一节基本都是理论的知识，到这里才和大家介绍 <strong>ASCII</strong> 编码，一个不复杂但很重要的编码，就像之前说的，是很多编码的大大，能不能很好的兼容 <strong>ASCII</strong>，往往是一种编码是否受欢迎的硬性指标。<br/><br>　<strong>3.</strong> 还介绍另一种编码，我们在捣鼓 <strong>VS2013</strong> 的时候可能会注意到，<strong>Latin-1</strong> 编码。大概就是在 <strong>ASCII</strong> 基础上扩展出来的一种编码吧，我们要知道的是，人家利用其 <strong>ASCII</strong> 的最高位，扩展了一些西欧字符，而且是兼容 <strong>ASCII</strong> 的就行了。</p>
<h2 id="GB2312、GBK、GB18030"><a href="#GB2312、GBK、GB18030" class="headerlink" title="GB2312、GBK、GB18030"></a><font color="#F40D64">GB2312、GBK、GB18030</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/352859">http://my.oschina.net/goldenshaw/blog/352859</a></p>
<ol>
<li><p>GB 系列包括 <strong>GB2312</strong>，<strong>GBK</strong>，<strong>GB18030</strong>。前面已经提过，<strong>GB=Guo Biao=国标=国家标准</strong>，至于所谓的 <strong>2312</strong> 就是一编号了，没有其它特别的意义，<strong>18030</strong> 类似。<font color="red"><strong>GBK</strong> 没有编号，所以它实际上并不是国家标准，只是一个事实标准</font>，<strong>GBK</strong> 中 K 指“扩展”的意思。</p>
</li>
<li><p><strong>GB2312</strong>：采用了所谓的二维区位编号，是一个 94×94 的表格，理论上有 94×94=8836 个空间；横的叫区，竖的叫位，总共 94 个区，区和位的编号都从 1 开始。粗略有三大部分。<br>　<strong>1.</strong> 中间黑色的主体部分即是汉字区了，具体为 <strong>16-87区</strong>，共 87-16+1=72 个区，理论空间为 72×94=6768。<br><center><img src="/img/programPearls/encoding-note/9_GB2312_part1.png"/></center><br>　　<strong>第 16－55 区</strong>：一级汉字，3755 个（以拼音字母排序）<br>　　<strong>第 56－87 区</strong>：二级汉字，3008 个（以部首笔画排序）<br>　<strong>2.</strong> 最下面的 <strong>88-94 区</strong> 是有待进一步标准化的空白区。<br>　<strong>3.</strong> 关于前面的 <strong>01-15 区</strong>，<br><img src="/img/programPearls/encoding-note/9_GB2312_part3.png" width="600px"/><br>　　<strong>01-09 区</strong> 为符号、字母、日文假名等，部分区还有空白位。<br>　　　<strong>03 区</strong>　即是对应 <strong>ASCII</strong> 字符的全角字符区。输入法的全角模式下输入的即是这些字符。<br>　　<strong>10-15 区</strong> 也是有待进一步标准化的空白区。<br>　<strong>4.</strong> 各区的一个具体情况：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">第<span class="number">01</span>区：中文标点、数学符号以及一些特殊字符</div><div class="line">第<span class="number">02</span>区：序号</div><div class="line">第<span class="number">03</span>区：全角西文字符</div><div class="line">第<span class="number">04</span>区：日文平假名</div><div class="line">第<span class="number">05</span>区：日文片假名</div><div class="line">第<span class="number">06</span>区：希腊字母表</div><div class="line">第<span class="number">07</span>区：俄文字母表</div><div class="line">第<span class="number">08</span>区：中文拼音字母表</div><div class="line">第<span class="number">09</span>区：制表符号 </div><div class="line">第<span class="number">10</span>－<span class="number">15</span>区：未定义</div><div class="line">第<span class="number">16</span>－<span class="number">55</span>区：一级汉字（以拼音字母排序）</div><div class="line">第<span class="number">56</span>－<span class="number">87</span>区：二级汉字（以部首笔画排序）</div><div class="line">第<span class="number">88</span>－<span class="number">94</span>区：未定义</div></pre></td></tr></table></figure>
</li>
<li><p><strong>区位码</strong><br>　在上图中还标出了一个汉字 <strong>“啊”</strong>，它就是 <strong>GB2312</strong> 方案中的天字第一号汉字，它处于 16 区 01 位上，所以它的区位码即是 <code>1601</code>。<br>　所谓区位码就是这一 94×94 的大表格中的行号与列号了，均从 1 开始编号。</p>
</li>
<li><p><strong>国标码</strong><br>　将区位码的区和位分别加上 <strong>32（=0x20）</strong> 就得到了国标码。<br>　“啊”的区位码是 16-01，分别加 32，得到 16+32-01+32=48-33，即是国标码。当然，你通常应该写成 16 进制，48-33 即是 0x30-0x21，所以 <strong>3021 即是 “啊” 十六进制的国标码，使用两字节保存，30 为高字节，21 为低字节</strong>。</p>
</li>
<li><p>GB2312 方案规定，对上述 94x94 表格中任意一个图形字符都采用两个字节表示，每个字节均采用七位编码表示。<br>　<strong>1.</strong> 为何不直接采用区位码呢？为什么要加 32 呢？你也许还记得前面说到 ASCII 时，前面 32 个字符是控制码，中文系统自然也不能少了这些控制码，为了不与这些控制码冲突，加上 32 就能跳过它们了。<br>　<strong>2.</strong> 一字节有 128 个空间，128-32=96，实际上，<strong>ASCII</strong> 中第 127 个也是控制码（DEL， 删除），再减去就还有 95 个有效位，再加上区位从 1 开始，又损失了一位，所以最终只有 94 个有效位了，这也是前面为何是一个 94×94 的表格。<br>　<strong>3.</strong> 国标码的定位实际应该是与 <strong>ASCII</strong> 一致的，是作为国家信息交换的标准码。从设计上看，它并没打算兼容 <strong>ASCII</strong>。</p>
</li>
<li><p><strong>机内码</strong><br>　<span style="color:red">将国标码高低字节分别加上 0x80（=128）就得到了机内码（有时又叫交换码）</span>。128 的二进制形式为 10000000，加 128，简单地讲，就是把国标码最高位置成 1.至于为什么要这样呢？我想你应该也清楚了，就是要 <span style="color:red">兼容 <strong>ASCII</strong>，<strong>ASCII</strong> 最高位为 0，国标码加 128 后，高低字节的最高位都成了 1</span>，这样就与 <strong>ASCII</strong> 区分开来。<br><img src="/img/programPearls/encoding-note/9_zoneCode_globalCode_machineCode.png"/><br>　<strong>1.</strong> 如果你新建一个文本文件，录入 <strong>“啊”</strong> 字，以 <strong>GB2312编码</strong> 方式保存（<strong>使用 GBK 即可，它兼容 GB2312</strong>），再用十六进制查看，你会发现使用的是机内码：<br><img src="/img/programPearls/encoding-note/9_GB2312_machineCode.png"/><br>　<strong>2.</strong> 虽然我们常把 <strong>GB2312</strong> 称为国标码，但我们应该清楚，实际存储使用的是机内码，通常说到 <strong>GB2312 编码</strong> 时指的就是这个机内码了。它能 <span style="color:red">兼容 <strong>ASCII</strong>，是一种变长的编码方案，对 <strong>ASCII</strong> 中的字符（也即所谓的 <strong>“半角西文字符”</strong>）采用一字节编码，最高位为 0；对区位表中的字符采用两字节编码，且每字节最高位均为 1，以此区分。</span><br/><br>　<strong>3.</strong> 三种码在 256×256 坐标中的位置的一个示意图，<br><img src="/img/programPearls/encoding-note/9_coordinate_3Code.png"/><br>　<span style="color:blue">区位码 (x<sub>1</sub>，y<sub>1</sub>)，x<sub>1</sub>、y<sub>1</sub>∈(01~94)；<br>　国际码 (x<sub>2</sub>，y<sub>2</sub>)，x<sub>2</sub>=x<sub>1</sub>+32、y<sub>2</sub>=y<sub>1</sub>+32；<br>　机内码 (x<sub>3</sub>，y<sub>3</sub>)，x<sub>3</sub>=x<sub>2</sub>+128、y<sub>3</sub>=y<sub>2</sub>+128.</span></p>
</li>
<li><p><strong>GBK</strong>： GBK 是对 GB2312 的一个扩展，兼容 GB2312，因此也兼容 ASCII，也是一个变长编码方案。下面是一个简介：<br>　<span style="color:red"><strong>GBK</strong> 总体编码范围为 <strong>8140-FEFE</strong>，首字节在 <strong>81-FE</strong> 之间，尾字节在 <strong>40-FE</strong> 之间</span>，总计 23940 个码位，共收入 21886 个汉字和图形符号，其中汉字（包括部首和构件）21003 个，图形符号 883 个。<br>　<strong>1.</strong> 首字节从 <strong>0x81</strong> 开始，这意味着最高位肯定是 1，这就兼容 <strong>ASCII</strong>；第二字节从 <strong>0x40</strong> 开始，不是从 0x00 也不是从 0x80 开始。因为不是从 0x80 开始，这意味着第二字节最高位也可能是 0，这点与 GB2312 不同，GB2312 确保了无论是高低字节最高位均是 1。<br/><br>　<strong>2.</strong> <strong>GBK</strong> 还是 <strong>UTF-8</strong>？<br>　　<strong>※</strong> <strong>GBK</strong> 使用两字节保存中文，也能兼容 <strong>ASCII</strong>，而对常用汉字，<strong>UTF-8</strong> 都是采用三字节编码，因此 <font color="red">无论是全中文还是中英文混合的情况，<strong>GBK</strong> 保存的效率都要好于 <strong>UTF-8</strong></font>。<br>　　<strong>※</strong> 但它也有些不好的地方，比如它不能支持一些国际性的文字，<font color="red">在国际化，通用性方面它肯定不如 <strong>UTF-8</strong></font>；就汉字而言，由于容量空间的限制，它也无法收录更多的汉字了。</p>
</li>
<li><p><strong>GB18030</strong>： <strong>GB18030</strong> 前后发布了两个标准，最新的是 2005 年发布的 <strong>GB18030-2005</strong>（《信息技术 中文编码字符集》），2000 年还有一版 <strong>GB18030-2000</strong>。<br>　<strong>1.</strong> 下面是一些简介（针对最新的 <strong>GB18030-2005</strong>）：<br>　　它也是一个多字节编码方案，有一，二，四字节三种变长组合。<br>　　它的编码空间很大，高达 160 万（约数），这甚至超过了 Unicode 规定的 110 万（约数）。<br>　　它兼容 GB2312，基本兼容 GBK（只有很少几处不同）。<br>　　它收录高达 7 万多的汉字，Unicode 中的 CJK 统一汉字，CJK 统一汉字扩充 A，CJK 统一汉字扩充 B 均收录了进来。<br>　　它还支持许多少数民族如藏、蒙古、彝、维吾尔等的文字。<br/><br>　<strong>2.</strong> <span style="color:green"><strong>GB18030</strong> 作为一个强制标准，但由于采用了高达四字节的情形，无论是操作系统还是各种应用软件，可能涉及许多调整才能很好地支持，这决不是一件简单的事情。<br>　　作为国际性标准的 <strong>Unicode</strong>，<strong>BMP</strong> 以外的字符的处理与显示都还有很多不完善，所以如果 <strong>GB18030</strong> 没有得到很好的支持，那也不足为奇了。</span></p>
</li>
</ol>
<p><font color="blue" size="4"><strong>小结：</strong></font><br>　<strong>1.</strong> 这一节主要介绍与我们中国人，或者说汉字息息相关的 <strong>GB 系列编码</strong>，包括 <strong>GB2312</strong>、<strong>GBK</strong>、<strong>GB18030</strong>，具体的国标不国标，这个并不重要；我们只需了解日常编程中经常用到的两种编码保存方式 <strong>GB2312</strong> 和 <strong>GBK</strong> 就行了，剩下那些，没什么卵用，看看知道就好。<br/><br>　<strong>2.</strong> 要清楚他们都兼容 <strong>ASCII</strong>，而且是怎么兼容的？<strong>GB2312</strong> 定义了一套所谓的 <strong>区位码</strong>，但实际编码是通过叫做 <strong>机内码</strong> 的形式，这种码需要两个字节，而且每个字节最高位都是 “1”；我们知道 <strong>ASCII</strong> 编码使用一个字节，而且最高位为 “0”。这样，就能够通过字节最高位判断是按照 <strong>ASCII</strong> 解码还是按照 <strong>GB2312</strong> 解码了，最高位为 “1”，连同下一个相邻字节一起按照 <strong>GB2312</strong> 解码；最高位为 “0”，该字节需要按照 <strong>ASCII</strong> 解码。<br/><br>　<strong>3.</strong> <strong>GBK</strong> 兼容 <strong>GB2312</strong>，也兼容 <strong>ASCII</strong>。唯一的区别是，<strong>GB2312</strong> 的第二字节最高位肯定为 “1”，而 <strong>GBK</strong> 扩展了不为 “1” 的可能，但只要某个字节最高位为 “1”，那么他就必须和下一个相邻字节一起按照 <strong>GBK</strong> 解码，这样也能区分开 <strong>ASCII</strong> 解码的字节。不过可以想象，假如某些字节丢失了，对于 <strong>GB2312</strong> 所有丢失字节的汉字数据均会发现错码；<strong>GBK</strong> 则可能将部分汉字数据按照 <strong>ASCII</strong> 解码了，可能就会错上加错了。<br/><br>　<strong>4.</strong> 此外，还需要了解什么是 <strong>区位码</strong>？<strong>国际码</strong>？<strong>机内码</strong>？三者之间如何相互转换，最主要是如何从 <strong>GB2312</strong> 定义的一套 <strong>区位码</strong> 转换到实际编码保存的<strong>机内码</strong>。</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><span style="color:#F40D64">Summary</span></h2><p>　上面就是所有的该系列博文的重要笔记，现在回过头来看，思路变得非常清晰了。</p>
<blockquote>
<ol>
<li><p>从字符集和编码的区别出发，紧接着介绍字符集需要定义的码点，然后对码点采取不同方式进行编码，主要方案便是定长方案或者变长方案。这些就是比较基础的一套理论知识；</p>
</li>
<li><p>接下来，具体应用这套理论知识，从常见的 <strong>Unicode</strong> 开始，通过实际例子进一步阐述。详细介绍 <strong>Unicode</strong> 字符集，也就是 <strong>Unicode</strong> 码点集合，主要涉及 <strong>BMP</strong>、<strong>SP</strong> 等概念，来源于 <strong>Unicode</strong> 一种划分、归档方式。然后就是具体的编码方案了： <strong>UTF-32</strong>、<strong>UTF-16</strong> 和 <strong>UTF-8</strong>，包括他们的具体实现方式，如 <strong>UTF-32</strong> 是定长 4 个字节，<strong>UTF-8</strong> 是变长 1-4 个字节；如何从码点转化到具体的编码数据，这个主要围绕如何扩充容量同时灵活存储，如： <strong>UTF-16</strong> 通过代理区、代理对编码 <strong>BMP</strong> 外的字符，如何转化？<strong>UTF-8</strong> 使用变长数据格式要求安放码点，同时兼容 <strong>ASCII</strong>；最后，就是通过 <strong>BOM</strong> 进一步介绍 <strong>UTF</strong> 编码，包括大小端和 <strong>UTF-8</strong> 带不带 <strong>BOM</strong>。</p>
</li>
<li><p>解决了庞大的 <strong>Unicode</strong> 系列编码，还需要了解其他一些常见的编码方式，包括 <strong>ASCII</strong> 还有与汉字息息相关的 <strong>GB2312</strong> 和 <strong>GBK</strong> 编码，在 <strong>UTF</strong> 编码的基础上就不难理解了，之中关键点是如何实现与 <strong>ASCII</strong> 兼容。</p>
</li>
<li><p>其中，围绕 <strong>UTF</strong> 系列编码，通过 <strong>Java</strong> 底层原理介绍，讲述字符如何在内存中保存啊，如何流动，以及为何出现乱码的根本原因，充分了解 “0101…” 和具体字符之间双向过程中的细节，乱码现象不再可怕。</p>
</li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> 编码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Coding中的编码问题之入门&概览]]></title>
      <url>/2016/02/21/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%85%A5%E9%97%A8$%E6%A6%82%E8%A7%88/</url>
      <content type="html"><![CDATA[<font color="green" size="4">[系列文章]上一篇：<a href="http://durant35.github.io/2016/02/02/programPearls_Qt_%E5%80%9FQt%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%B0%88%E8%B0%88Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/#more">《借Qt中文乱码谈谈Coding中的编码问题》</a> (<strong>可选择性阅读</strong>)<br>[系列文章]下一篇：<a href="http://durant35.github.io/2016/02/22/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/#more">《Coding中的编码问题之系统学习》</a></font>

<p>　　大家在看完<a href="http://durant35.github.io/2016/02/02/programPearls_Qt_%E5%80%9FQt%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%B0%88%E8%B0%88Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/#more">《借Qt中文乱码谈谈Coding中的编码问题》</a>后，估计对文章中提到的很多概念性的东西似懂非懂，本系列接下来的几篇文章会陆续为大家解释清楚 <strong>（没看过该文章也无所谓啦，hhhhhh）</strong>。由于本人也是通过零散阅读包括 <strong>开源中国</strong> 上<a href="http://my.oschina.net/goldenshaw/blog?disp=2&amp;p=1&amp;catalog=536953">《字符集编码系列》</a>等博文慢慢理解的，故本文及后续文章均会以阅读笔记的形式提供，会涵盖个人笔记以及个人小结，希望能对大家有所帮助。也方便日后自己回顾、学习。<br>　　本文借<a href="http://www.cnblogs.com/Kyzy/archive/2012/06/17/2552432.html">《学习程序设计的必要准备——稀里糊涂的说说各种字符编码到底是个怎么回事。》</a>为大家说说字符编码的大概起源和字符编码的大概发展，会再一次提及上一篇文章提到的几个<code>Key Word</code> (<strong>ASCII</strong>, <strong>GB2312</strong>, <strong>Big5</strong>, <strong>GBK</strong>, <strong>Unicode</strong>, <strong>UTF-8</strong>…)，希望能帮大家对字符编码有一个大概的认识，为下一步系统学习打下基础。<br><a id="more"></a></p>
<h2 id="稀里糊涂的说说各种字符编码"><a href="#稀里糊涂的说说各种字符编码" class="headerlink" title="稀里糊涂的说说各种字符编码"></a><font color="#F40D64">稀里糊涂的说说各种字符编码</font></h2><p>　　原文地址：<a href="http://my.oschina.net/goldenshaw/blog/304493">http://my.oschina.net/goldenshaw/blog/304493</a><br>　　<font color="red">[红色部分]</font>为标注笔记</p>
<p>　说起字符编码，相信做过一些开发的人都会接触过不止一种的字符编码，比如 <strong>ASCII</strong>，<strong>GB2312</strong>，<strong>Big5</strong>，<strong>Unicode</strong>，<strong>UTF-8</strong>，各种各样的编码常常把我们搞得不知所措，一不小心就会出现乱码问题，<br>　计算机这东西本质上是用来表示人类思维，帮助人类解决问题的一种机器，然而它是怎么表示人类思维的呢？我们知道计算机所能表示的只有 2 进制数字（靠高低电平实现），而我们人类的思维却是丰富多彩的，如何用简单的 2 进制数字来表示人类思维似乎成了一个不得不解决的复杂问题，人类思维这个话题是在太大了，我们很难对其做准确的定位，表示人类思维的问题就变得含糊不清，我们不妨把问题简单化，<font color="blue">如何用计算机的 2 进制数据表示人类所应用的语言和字符呢？</font>这样问题似乎变得简单了许多，我们知道二进制数据与十进制数据是可以互相转换的，也就说二进制数据与十进制数据本质上是没什么区别的，而十进制数据才是我们人类所熟悉的数据，在后面的内容中，我们常常会用十进制来代替二进制来进行说明（但是计算机内部可全部是由二进制表示的哦，我们用十进制只是为了说明起来方便，不要搞混了）。<br><span style="color:red">　作者借 <strong>计算机如何表示人类思维</strong> 做引入，引出 <strong>如何用计算机的 2 进制数据表示人类所应用的字符呢？</strong>，这个实际上就是 <strong>字符编码</strong>。<br></span><br>　接下来我们要进入编码的内部了，首先让我们举一个编码的简单例子，你知道 <strong>“520”</strong> 代表什么意思吗？呵呵，反应很快嘛，对的，<strong>“我爱你”</strong>，我们在网络上常常会用一些简单的数字来简化的表示一些词语，比如 “520” 代表“我爱你”，这其实就是一种简单的编码方式，<strong>“5”</strong> 代表 <strong>“我”</strong>、<strong>“2”</strong> 代表 <strong>“爱”</strong>、<strong>“0”</strong> 代表 <strong>“你”</strong>，这就是编码，没什么神奇的，以后无论多复杂的编码方式，其目的不过就像 <strong>“520”</strong> 代表 <strong>“我爱你”</strong> 一样，<font color="blue"> 用特定的数字来代表特定的字符，建立数字与字符间的对应关系。</font> 看到这也许聪明的你已经有了用计算机表示人类字符的解决办法了，既然计算机只能表示数字，那我们只需要 <font color="blue">将我们平时所用的字符一一对应成数字，在计算机内储存一大堆数字，到时候把这堆数字读出来，然后按照我们所规定的对应关系重新对应成字符</font> 不就 ok 了吗？是的，你想的没错，我们现在的计算机正是这么干的。<br><span style="color:red">　“将我们平时所用的字符一一对应成数字，在计算机内储存一大堆数字，到时候把这堆数字读出来，然后按照我们所规定的对应关系重新对应成字符” 简明扼要为大家形象生动展现了字符编码的两个方面：<br>　　(1)、一个是编码，如何建立这样一个字符和数字的表？这个表要收集哪些字符？最后这个数字可以按照上面形式保存在计算机里面，可能包括硬盘，也包括内存；<br>　　(2)、另一个则是解码，怎么知道这一堆数字对应哪张表？在一起的字符他们的数字会混淆在一起吗？<br></span><br>　老美有一帮大牛们按照我们上面的这种想法最早的发明了一种编码叫做 <strong>ASCII</strong>，这是一个单字节的字符编码方式（用一个字节来表示各种各样的字符，当然这时候只有英文字符，和少量的格式控制字符），<strong>ASCII</strong> 规定 0-127 (我们发现其实它只用了一个字节 8 位中的 7 位)分别表示不同的数字，英文字母大写，英文字母小写，各种符号和一些计算机内部必须用到的格式控制字符，这种编码方式在早期的计算机当中使用了很久，大家似乎已经觉得我们似乎已经解决用计算机来表示人类字符的问题，然后不久问题就来了。<br>　随着计算机的发展，慢慢不止老美们再用计算机了，很多使用希腊字符和拉丁字符的欧洲国家也开始使用计算机，这些大佬们发现目前的计算机有着严重的问题，居然不能表示希腊字符，和拉丁字符，这是严重不能接受的，后来 <strong>ASCII</strong> 就针对这个问题对自身进行了扩充，将原来用7位表示字符扩充到了 8 位，形成了完整单字节字符，所能表示的字符范围也从 128 个扩展到了 256 个。这种编码方式又继续使用了很多年。<br>　注： <font color="blue">以后的无论哪种编码方式都必须兼容 <strong>ASCII</strong>，不然以前所有用 <strong>ASCII</strong> 编码的程序全部不能使用了</font>。<br><span style="color:red">　这就是为什么代码是用英文写的的原因了。。。美国的计算机发展总是领先全球，所以他们最先想到文章开头提及的问题(中国人估计那时连计算机这种东西都还没听过吧)，制订了 <strong>ASCII</strong> 编码，编码的鼻祖。具体的 <strong>ASCII</strong> 编码后面会详细介绍，知道他用一个字节，而且只用了 7 位(也就是最高位始终为 0)表示，也就是有 2<sup>7</sup>=128 个字符。<br>　也提到了第一次扩展，那就是欧洲国家利用那一个字节剩下的空间补进去一些新的字符，当然是他们经常用的 <strong>希腊字符和拉丁字符</strong>，扩展到 2<sup>8</sup>=256 个字符。虽然作者没说，我觉得这个应该是 <strong>Latin-1</strong> 编码吧，学习完下一篇文章后你就知道了。<br></span><br>　但是事情并没有结束，不久人们就发现，一个字节的编码远远满足不了人类的需求，我们除了使用英文字符，希腊字符，拉丁字符以外，我们还使用韩文，日文，简体中文，繁体中文。暂且不说别的，单单一个简体中文的字符量就远远超出了 256，这时候我们迫切的希望有一种编码方式，能够解决我们的问题。后来 <font color="blue">各个国家就针对自己的语言做出了各自的编码方式</font>，别的国家我们暂且不去管它，我们就来说说中国所用到的编码方式，最早我们提出了两种主要的编码方式：一种叫 <strong>GB2312</strong> 用来表示简体中文，一种叫 <strong>Big5</strong> 用来表示繁体中文。其中 <strong>GB2312</strong> 采用两个字节的编码方式，兼容 <strong>Ascii</strong>，能够表示 6 千多个常用字（注意不是所有的汉字，仅仅是常用字），<font color="blue"> <strong>GB2312</strong> 做了这样的规定，如果发现一个单个字节小于 128，那么它表示一个英文字符（<strong>Ascii</strong> 字符），如果发现一个单个字节大于 128，那么这个字节就和他后面的字节一起构成一个双字节字符（很多情况是汉字），这样我们就一定程度上的解决了汉字的编码方式</font>，但显然 <strong>GB2312</strong> 有着严重的问题，缺字！缺字是个很严重的问题，为了解决这个问题，<strong>GB2312</strong> 规定了一些暂时不表示任何汉字的编码，如果你发现你所想表示的汉字在 <strong>GB2312</strong> 中没有，那么你可以利用这些空白编码自己造一个你所需要的汉字临时使用，不过这种方法显然是很麻烦的，后来到了 <strong>win95/98</strong> 的时代，人们将 <strong>GB2312</strong>进行了扩展，起名字叫 <strong>GBK</strong>，汉字扩展到了 21003 个，并且简体繁体融为一库，这时候很多不太常用的汉字也可以被表示了。<br>　然后问题并没有被完全解决，还有繁体中文呢，繁体中文也制定了一套编码叫做 <strong>Big5</strong>（台湾省全部在用这个编码），<strong>Big5</strong> 编码和 <strong>GB2312</strong> 编码编码方式是不同的，这就导致了一个很严重的问题，比如你在大陆用<strong>GB2312</strong> 编码写了一封 Email，这封 Email 发到台湾省，台湾省的同学们用 <strong>Big5</strong> 编码打开一看全是乱码，这种事情是很让人头疼的。类似的事情还有很多，比如日文韩文中也有很多的汉字（韩国历史甚至全部是用汉字写的），但日文韩文对汉字的编码和我们 <strong>GB2312</strong> 也是不一样的，也就是说韩国人全部用汉语写的东西发到大陆来，我们看到的还是乱码。<br><span style="color:red">　还是那个梗，随着国际化进程以及计算机的发展，越来越多的国家和 <strong>People</strong> 使用计算机了，这其中中国人绝对是始作俑者，哈哈。美国人越来越 hold 不住了，而且其他国家的人也有会弄计算机的了，那就是一个乱啊，没有就自己造，所以，好多种编码啊！！！为什么说中国人是始作俑者，我觉得中华文明博大精深，汉字应该是全世界最多的，人也是最多，一用起来啊，表示不了汉字字符肯定不行。中国人也是很聪明的，没有，咱们就山寨，也来弄一个，就出现 <strong>GB2312</strong>、<strong>Big5</strong> 和 <strong>GBK</strong> 编码，这些能有自己使用的字符了，爽。<br>　文中也提到，随着各种编码的出现，乱码也来了。原因很简单，因为沟通、因为懒。大陆人不学繁体字，就敲自己熟悉的简体字；台湾人则坚挺繁体字，不怎么学简体字，这样一来，大陆人用 <strong>GBK</strong> 编码的信息被台湾人用 <strong>Big5</strong> 解码了(反正不是编码时用的 <strong>GBK</strong>)，所以就出现乱码了。<br>　此外，我们开始觉得这个用数字表示字符不简单了，看看那个 <strong>GB2312</strong>，还真是巧妙；另外，也体会到兼不兼容实在很重要，要是有一种编码兼容所有编码，包括 N 个国家自己的编码，那用这种不就行了吗？有木有呀？还有就是上面也有提到的，特别要兼容 <strong>ASCII</strong>，不然可能会跪，很简单，美国人的程序是 <strong>ASCII</strong> 字符啊，他们又那么强，好多东西都是他们的，不兼容，万一用不了，怎么破。<br></span><br>　后来呢，中日韩一起专门搞了一个编码，叫 <strong>CJK编码</strong>，汉字在这个编码里变成了统一的编码，这样交流起来就不会有问题了，但这种问题不仅仅存在于中日韩，简体、繁体直接，这种问题在世界各国是广泛存在的。为了能统一解决这种问题，后来各大软件公司搞了一个联盟，叫做 <strong>Unicode联盟</strong>，这个联盟的思想很简单，就会创造一种全世界统一的编码，能够把全人类使用的所有字符全部包含进去，以后人类全部使用这张编码，就再也不会有什么编码方式不一致所导致的乱码问题了，这种编码就是强大的 <strong>Unicode编码</strong>。Unicode 的存在似乎解决以往我们存在的所有编码问题，然后事物的发展都是一步一步进行的，Unicode 也面临着挑战，这个挑战就是说服世界给地全部使用 <strong>Unicode编码</strong>，然而这个任务到今天为止还没有做到。打个比方，我们平常在 Visual Studio 中进行开发使用的是 Unicode编码，而我们平时使用记事本写一个文件，以保存默认使用的是 <strong>GB2312编码</strong> 方式保存的。<br><span style="color:red">　还真有这种编码，<strong>Unicode</strong> 带着我们的使命来了！不过，什么，竟然需要叫大家放弃之前的编码？怎么不能兼容所有编码呀？其实这是不可能的，比如，还有很多国家还没造个编码呢？怎么兼容他，开个玩笑啦。。。而且全世界真的很多个国家。<br>　另外，统一看来真是很重要，或者说定一个标准真的很重要。<br></span><br>　<strong>Unicode编码</strong> 与以往的编码是不太一样的，以往的编码都是一个字符对应一个数字，比如 <strong>Ascii</strong> 中 A 对应数字 65，但<font color="blue">在 <strong>Unicode</strong> 中，一个字符真正对应计算机中的那个数字是有好几种不同存储方法</font>的，也就是说一个字符有好几种不同的数字表示与之对应，这样做的好处是灵活，可以提供未来字符的扩展性（据说 Unicode 编码已经将未来宇宙统一所需要的编码都考虑进去了）。<br>　但目前，其实我们人类所使用的字符并不是很多，目前最常见的存储方法是双字节 16 位存储方式，两个字节最多可以表示 6 万多个字符，对于我们人类目前来说是足够用的了。<br>　由于存在着多种编码方式，当我们看到一堆十六进制、或者二进制字节，我们怎么知道它到底是哪种编码方式呢？以前的编码在内容中没有特殊的标记告诉你它用的是什么编码，看到字节的人必须提前知道它用的是什么编码方式才能对应的了解其中的内容，而 <font color="blue"><strong>Unicode</strong> 专门规定了一个特殊的标记 <strong>(BOM)</strong>，叫做 <strong>引导符也有叫引导续的</strong></font>，在开头用两个特殊的字节 <strong>（FF FE）</strong>，表示这个文件是用 <strong>Unicode</strong> 来进行编码的（你可以用任何二进制格式的工具打开一个 <strong>Unicode编码</strong> 的文件来检查一下，看看开头两个字节是不是 <code>FF FE</code>），这样我们就不用提前知道（往往我们也不可能提前知道）这个文件到底是用什么编码方式来进行编码的，在开头看到这两个字节 <strong>（FF FE）</strong> 我们就知道这是一个用 <strong>Unicode编码</strong> 的文件，让事情变得更加简单了。这种引导符只有在 <strong>Unicode</strong> 中才有，其他编码格式中都没有，所以我们平时在处理文件的时候强烈建议使用 <strong>Unicode</strong> 来进行编码。<br>　在我们平时所做的开发中比如 <strong>.net</strong>，所有的字符编码格式都是 <strong>UTF-8</strong>，这也是我们希望看到的，我们在平时做开发时强烈建议使用 <strong>UTF-8编码</strong>，这样可以避免很多编码上不必要的问题。至于如果我们碰到了不同的编码需要对其进行转换要怎么办，<strong>.net</strong> 中处理方法是非常方便的，利用 <strong>System.Text.Encoding</strong> 这个类来对字符进行编码解码，去 <strong>MSDN</strong>一下吧，简单易用。<br><span style="color:red">　<strong>Unicode</strong> 有好几种存储方式(<strong>UTF-8</strong> 得特别关注一下才行)，看来 <strong>Unicode</strong> 在努力的拯救着世界，不过，不增加编码，却增加存储方式，这不是一样乱吗？难道在做 <strong>trade-off</strong>？我们姑且相信这是真的吧。另外，<strong>Unicode</strong> 里面有个叫 <strong>BOM</strong> 的东西，应该是为了在各种 <strong>存储方式</strong> 间作区分。这个也是个办法！我用几种存储方式，我设定区分的标准，保证解码绝对能看出编码是什么。毕竟上面几种编码都没提到什么用作区分的东西，<strong>Unicode</strong> 的努力可见一斑。<br></span><br>　好了让我们做一个简单的总结，在上面的内容中我们稀里糊涂的说到了字符编码的大概起源，和字符编码的大概发展，<strong>从早期的 Ascii、GB2312、Big5 到后来的 GBK，CJK、Unicode，UTF-8</strong>，也稀里糊涂的说了说各个编码各自要解决的问题，我想现在聪明的你对字符编码已经有了一个大概的认识。<br><span style="color:red">　孰先孰后应该大致清楚了。起源、发展也有了了解。至于为什么有这样的发展，一个是用的人多了，形形色色的字符就多，需要对编码扩容；之前一段时间出现了几乎一个国家一套编码的混乱情况，迫切需要有一个统一的标准，那么 <strong>如何囊括世界所有的字符</strong>？ <strong>如何最好的兼容现存的编码(主要是 ASCII)</strong>？ <strong>如何让大家因为这种统一的好放弃原先的编码或者自然过渡到新编码</strong>？ 就是 <strong>Unicode</strong> 出现和亟需解决、正在解决的问题了。<br></span><br>　最后来分享一道我以前看到的面试题：有一个文本文件，用 <strong>GB2312编码</strong>，里边写了一大堆英文和中文的字符，要求写一个程序（当然不让用类似 <strong>System.Text.Encoding</strong> 这种类型），输出这个文本文件中，中文字符的个数，和英文字符的个数分别是多少？<br><span style="color:red">　回顾上面关于 <strong>GB2312编码</strong> 定义的说明，下面是我想到的方案：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</div><div class="line"> * Analysis_GB2312.cpp</div><div class="line"> *</div><div class="line"> *  Created on: 2016年1月27日</div><div class="line"> *      Author: Chen</div><div class="line"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">readFileBytes</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fileName, <span class="keyword">size_t</span>&amp; len)</span></span>&#123;</div><div class="line">　<span class="function">ifstream <span class="title">readFile</span><span class="params">(fileName, ios::in|ios::binary)</span></span>;</div><div class="line">　<span class="keyword">if</span>(!readFile)&#123;</div><div class="line">　　<span class="built_in">printf</span>(<span class="string">"文件打开失败!\n"</span>);</div><div class="line">　　<span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">　&#125;</div><div class="line">　readFile.seekg(<span class="number">0</span>, ios::end);</div><div class="line">　len = readFile.tellg();</div><div class="line">　<span class="keyword">char</span>* bytes = <span class="keyword">new</span> <span class="keyword">char</span>[len];</div><div class="line">　readFile.seekg(<span class="number">0</span>, ios::beg);</div><div class="line">　readFile.read(bytes, len);</div><div class="line">　readFile.close();</div><div class="line">　<span class="keyword">return</span> bytes;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">　<span class="keyword">const</span> <span class="keyword">char</span>* fileName = <span class="string">"your file name"</span>;</div><div class="line">　<span class="keyword">size_t</span> len;</div><div class="line">　<span class="keyword">char</span>* bytes = readFileBytes(fileName, len);</div><div class="line">　<span class="comment">//printf("len=%d\n", len);</span></div><div class="line">　<span class="keyword">size_t</span> countCN, countEN, countERR, countLine;</div><div class="line"> </div><div class="line">　countCN = <span class="number">0</span>;</div><div class="line">　countEN = <span class="number">0</span>;</div><div class="line">　countERR = <span class="number">0</span>;</div><div class="line">　countLine = <span class="number">0</span>;</div><div class="line">　<span class="keyword">for</span>(<span class="keyword">size_t</span> i=<span class="number">0</span>; i&lt;len; )&#123;</div><div class="line">　<span class="comment">/*</div><div class="line">　 * GB2312 做了这样的规定，</div><div class="line">　 *  如果发现一个单个字节小于 128(0x80)，那么它表示一个英文字符（Ascii 字符），</div><div class="line">　 *  如果发现一个单个字节大于 128，那么这个字节就和他后面的字节一起构成一个双字节字符（很多情况是汉字）</div><div class="line">　 * GB2312 要求汉字的每个字节均要大于 128，可能你需要以此为下面的代码做改进！！</div><div class="line">　 */</span></div><div class="line">　<span class="comment">//printf("%02x\n", (unsigned char)bytes[i]);</span></div><div class="line">　<span class="keyword">if</span>(((<span class="keyword">unsigned</span> <span class="keyword">char</span>)bytes[i]) &gt; <span class="number">0x80</span>)&#123;</div><div class="line">　　countCN++;</div><div class="line">　　i += <span class="number">2</span>;</div><div class="line">　&#125;<span class="keyword">else</span> <span class="keyword">if</span>(((<span class="keyword">unsigned</span> <span class="keyword">char</span>)bytes[i]) &lt; <span class="number">0x80</span>)&#123;</div><div class="line">　　<span class="keyword">if</span>(((<span class="keyword">unsigned</span> <span class="keyword">char</span>)bytes[i])==<span class="number">0x0d</span> &amp;&amp; ((<span class="keyword">unsigned</span> <span class="keyword">char</span>)bytes[i+<span class="number">1</span>])==<span class="number">0x0a</span>)&#123;</div><div class="line">　　　countLine++;</div><div class="line">　　　countEN += <span class="number">2</span>;</div><div class="line">　　　i += <span class="number">2</span>;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">else</span>&#123;</div><div class="line">　　　countEN++;</div><div class="line">　　　i++;</div><div class="line">　　&#125;</div><div class="line">　&#125;<span class="keyword">else</span>&#123;</div><div class="line">　　countERR++;</div><div class="line">　&#125;</div><div class="line">&#125;</div><div class="line">　<span class="built_in">printf</span>(<span class="string">"Summary:\n"</span>);</div><div class="line">　<span class="built_in">printf</span>(<span class="string">"\t本文包含中文字符: %d\n"</span>, countCN);</div><div class="line">　<span class="built_in">printf</span>(<span class="string">"\t本文包含英文字符: %d，其中换行符(2个字符): %d\n"</span>, countEN, countLine);</div><div class="line">　<span class="built_in">printf</span>(<span class="string">"\t本文包含不合法字符: %d\n"</span>, countERR);</div><div class="line"> </div><div class="line">　<span class="keyword">delete</span> []bytes;</div><div class="line">　<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></span></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><span style="color:#F40D64">Summary</span></h2><blockquote>
<ul>
<li>这篇文章大致阐述了字符编码的起源、发展，以及各阶段出现的编码，有些我们耳熟能详，有些我们第一次听到。但是具体怎么实现的字符编码，除 <strong>ASCII</strong>、<strong>GB2312</strong> 外，甚至没有提及；关于这两种编码的叙述也是甚少。</li>
<li>要直击问题所在，那就是需要表示的字符越来越多，需要不断对编码进行扩容；而且使用的人形形色色，字符使用频率也大小不一，造成编码方式有点泛滥，这就带来乱码的严重问题；如何进行扩容，最好能表示所有的字符，又不对现存的编码的过渡造成灾难，也就是兼容性，是一套统一的、国际的编码的最大难点，<strong>Unicode</strong> 为此在努力，我们需要好好学习一下他是怎么做的，毕竟是国际化的产物。</li>
<li>除了 <strong>Unicode</strong> 编码体系外，作为中国人有必要了解一下国人都干了啥，需要好好学习一下 <strong>GB2312</strong> 和 <strong>GBK</strong>，毕竟我们生活中都在用，也很频繁遇见。</li>
<li>这些，将在下一篇文章为大家详细阐述。</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> 编码 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[老顽童STM32开发板系列教程笔记]]></title>
      <url>/2016/02/16/mcu_%E8%80%81%E9%A1%BD%E7%AB%A5STM32%E5%BC%80%E5%8F%91%E6%9D%BF%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>　　本文作为追随老顽童孟瑞生老师 <strong>[<a href="http://www.rationmcu.com/">瑞生网</a>]</strong> 学习STM32单片机系列教程笔记，一来方便将其微信公众号推送教程移至PC端，方便观看学习；二来，也是更重要的，有些思考的地方，或者觉得说的很好的地方，也好记录留档。<br>　　<font color="red"><strong>最新一次更新： 第9集，时间2016-03-12。</strong></font><br><a id="more"></a></p>
<h2 id="视频教程第一集"><a href="#视频教程第一集" class="headerlink" title="视频教程第一集"></a><font color="#F40D64">视频教程第一集</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401306263&amp;idx=1&amp;sn=5b1489e0ed64862190177ca99e2c55cd&amp;scene=0#wechat_redirect">点击跳转至原文</a><br>　　<strong>笔记： </strong><br>　　+ 开发板拆装(主要是液晶屏)、<strong>液晶屏FPC排线</strong>。<br>　　+ 液晶屏<strong>16位驱动、8位驱动、SPI驱动</strong>，16位、8位应该说的是并口吧。<br>　　+ 短路帽。<br>　　+ 供电，电脑USB口输出5V，普通安卓手机充电器输出也是5V。<br>　　+ <strong>USB口</strong>，白底在下，从右至左依次为<strong>V<sub>+</sub>=5V</strong>、<strong>D<sub>-</sub></strong>、<strong>D<sub>+</sub></strong>、<strong>GND</strong>，中间为数据引脚，两侧为电源引脚。<br>　　+ <code>5V 2A</code> 电流是其最大输出量，最大可输出2A，电流输出多少看负载。<br>　　+ CAN通讯、485通讯、232通讯、NRF24L01无线通讯、红外发射、红外接收。<br>　　+ <strong>EEPROM vs FLASH</strong><br>　　　EEPROM:一个字节一个字节地写，随意写无需擦除。<br>　　　FLASH:一个扇区一个扇区(4K)地写，容量大，需要先擦除才能写入。</p>
<h2 id="短路帽介绍"><a href="#短路帽介绍" class="headerlink" title="短路帽介绍"></a><font color="#F40D64">短路帽介绍</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401341489&amp;idx=1&amp;sn=fd3780364cf341e47e7155d2d79f41a2&amp;scene=0#wechat_redirect">点击跳转至原文</a><br>　　<strong>笔记： </strong><br>　　+ 当你想让单片机一上电，就运行单片机中的程序，需要再上电之前，就把BOOT0引脚接地，BOOT1引脚无所谓高低，这也是为什么<strong>BOOT1引脚还可以作为其它复用功能</strong>的原因。<br>　　+ 你的疑问：开发板上，默认的短路帽配置是BOOT0和BOOT1都是低电平，也就是配置成了表中的第一种方式，就是一上电就默认运行单片机中的程序，那为什么还可以用串口下载程序？答：这是因为在串口下载程序时，开发板上的<strong>CH340这个芯片上的RTS引脚可以控制BOOT0引脚变高变低</strong>(查看原理图可知，此处采用短路帽兼容普通的BOOT0高、低电平连接方式)。<br>　　+ IR是PB0，即PB0控制红外接收；IE是PB1，即PB1控制红外发射。<br>　　+ FLASH存储芯片 SPI接口：W25Q_CS<strong>→</strong>PA4；SPI1_SCK<strong>→</strong>PA5；SPI1_MISO<strong>→</strong>PA6；SPI1_MOSI<strong>→</strong>PA7。<br>　　+ RS485接口：485_CTR<strong>→</strong>PA1；TXD2<strong>→</strong>PA2；RXD2<strong>→</strong>PA3。<br>　　+ 蜂鸣器：BEEP<strong>→</strong>PD6。<br>　　+ CAN通信：CAN_RX<strong>→</strong>PB8；CAN_TX<strong>→</strong>PB9。<br>　　+ EEPROM存储芯片 I2C接口：I2C1_SCL<strong>→</strong>PB6；I2C2_SDA<strong>→</strong>PB7。<br>　　+ CH340芯片 ISP下载接口：TXD1<strong>→</strong>PA9；RXD1<strong>→</strong>PA10。<br>　　+ RS232通信端口：TXD3<strong>→</strong>PB10；RXD3<strong>→</strong>PB11。</p>
<h2 id="电源部分"><a href="#电源部分" class="headerlink" title="电源部分"></a><font color="#F40D64">电源部分</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401345349&amp;idx=1&amp;sn=40e057fa74a590b05a9942fac10551f4&amp;scene=0#wechat_redirect">点击跳转至原文</a><br>　　<strong>笔记： </strong><br>　　+ 5V输出，实际上就是从USB口输入的5V经过了一个500mA的保险丝。3.3V输出，实际上就是通过AMS1117把5V转换成的3.3V输出。<br>　　+ 输出电流最大500mA，这是由那个500mA的保险丝决定的。<br>　　+ 有些人问我，可不可以从这个5V输出口供电？答案是可以，你只要保证你的输入电压最好在5V左右，不要相差太多即可。）<br>　　+ 500mA的保险丝电流超过500mA自动断开但不会坏掉，电流低于500mA时自动导通。<br>　　+ 电流指示灯的限流电阻2K，其实&gt;330Ω都是可以的，限流电阻越小，指示灯越亮。<br>　　+ 万用表的通断档。使用时注意不要将5V、3.3V和GND碰接，造成短路。<br>　　+ 六脚开关焊接的时候不需要区分方向。</p>
<h2 id="单片机-STM32-的引脚模式设置"><a href="#单片机-STM32-的引脚模式设置" class="headerlink" title="单片机 STM32 的引脚模式设置"></a><font color="#F40D64">单片机 STM32 的引脚模式设置</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401455207&amp;idx=1&amp;sn=b8db0e7805c3000f218f6ae543568703&amp;scene=23&amp;srcid=0303gfeYl6HZ0O8oWdPcRqAc#rd">点击跳转至原文</a><br>　　<strong>注：</strong> 参考博文 <a href="http://blog.csdn.net/kevinhg/article/details/17490273">《STM32中GPIO的8种工作模式！》</a><br>　　<strong>笔记： </strong><br>　　+ <font color="#F40D64">寄存器 or 库开发？</font><br>　　　　如果你是用 <font color="green">直接写寄存器</font> 来配置的话，那么，看上手册，给 “配置寄存器” 对应的位写 0 或者 1 就可以达到目的。如下图：<br>    <img src="/img/STM32/Kidult/04_GPIO_Config_by_register.png" /><br>　　　　如果是用 <font color="green">库函数</font> 来配置的话，就需要知道下面这个结构体中的变量代表的意义。<br>    <img src="/img/STM32/Kidult/04_GPIOMode_TypeDef.png" /><br>　　　　库函数，选择好 GPIO_Mode 之后，就要使用 <strong>void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</strong> 函数来配置，你可以打开这个配置函数，实际上也是在对 “配置寄存器” 进行写操作。</p>
<p>　　　　先解释一下这个结构体中的各个变量的意思：<br>　　　　　<strong>GPIO_Mode_AIN</strong>：    模拟输入模式<br>　　　　　<strong>GPIO_Mode_IN_FLOATING</strong>：    浮空输入模式<br>　　　　　<strong>GPIO_Mode_IPD</strong>：    下拉输入模式<br>　　　　　<strong>GPIO_Mode_IPU</strong>：    上拉输入模式<br>　　　　　<strong>GPIO_Mode_Out_OD</strong>：    通用开漏输出模式<br>　　　　　<strong>GPIO_Mode_Out_PP</strong>：    通用推挽输出模式<br>　　　　　<strong>GPIO_Mode_AF_OD</strong>：    复用开漏输出模式<br>　　　　　<strong>GPIO_Mode_AF_PP</strong>：    复用推挽输出模式<br>　　　　前四个是输入模式，后四个是输出模式。</p>
<p>　　+ <font color="#F40D64">结构图（本人整理部分）</font><br>    <img src="/img/STM32/Kidult/04_GPIO_Diagram.png" /><br>　　　　最右端为 I/O 引脚，左端的器件位于芯片内部。<font color="green">I/O 引脚并联了两个用于保护的二极管 ，可以防止外部电流倒灌</font>。</p>
<p>　　+ <font color="#F40D64">4种输入模式（本人整理部分）</font><br>    <img src="/img/STM32/Kidult/04_GPIO_Diagram_Input.png" width="600px" /><br>　　　　结构图的上半部分为输入模式结构，分为 <strong>上拉输入模式</strong>、<strong>下拉输入模式</strong>、<strong>浮空输入模式</strong> 和 <strong>模拟输入模式</strong>。</p>
<p>　　　　接下来就遇到了两个开关和电阻，与 V<sub>DD</sub> 相连的为上拉电阻，与 V<sub>SS</sub> 相连的为下拉电阻。再连接到 TTL 施密特触发器就把电压信号转化为 0、1 的数字信号存储在输入数据寄存器（IDR）。我们可以通过设置配置寄存器（CRL、CRH）来控制这两个开关，于是就可以得到 GPIO 的上拉输入模式 （ GPIO_Mode_IPU ） 和下拉输入模（GPIO_Mode_IPD ）了。</p>
<p>　　　　从它的结构我们就可以理解，若 <font color="green">GPIO 引脚配置为上拉输入模式，在默认状态下（GPIO 引脚无输入），读取得的 GPIO 引脚数据为 1，高电平。而下拉模式则相反，在默认状态下其引脚数据为 0，低电平</font>。 <font color="blue">[ 上拉输入默认是高电平，外接低电平有影响，故只能用来检测外接低电平；下拉模式则相反，故只用来检测外接高电平 ]</font></p>
<p>　　　　而 STM32 的浮空输入模式（GPIO_Mode_IN_FLOATING）在芯片内部既没有接上拉，也没有接下拉电阻，经由触发器输入。配置成这个模式直接用电压表测量其引脚电压为 1 点几伏，这是个不确定值（高、低电平都有可能）。由于其输入阻抗较大，一般把这种模式用于标准的通信协议如 I<sub>2</sub>C、USART 的接收端。 <font color="blue">[ 可以用来检测外接是高电平，还是低电平 ]</font></p>
<p>　　　　模拟输入模式（GPIO_Mode_AIN ）则关闭了施密特触发器，不接上、下拉电阻，经由另一线路把电压信号传送到片上外设模块。如传送至 ADC 模块，由 ADC 采集电压信号。所以使用 ADC 外设的时候，必须设置为模拟输入模式。 <font color="blue">[ 不管外接是高电平还是低电平，始终是检测到低电平。。。没意义了 ]</font></p>
<p>　　　　另外，经测试，<font color="blue"><strong>开漏输出模式</strong> 也能够实现正常检测高低电平，而且默认状态是高电平；<br>　　　　<strong>推挽输出模式</strong> 似乎也能检测，不过建议还是不要这样做</font>。。。
　　</p>
<p>　　+ <font color="#F40D64">4种输出模式（本人整理部分）</font><br>    <img src="/img/STM32/Kidult/04_GPIO_Diagram_Output.png" width="600px" /><br>　　结构图的下半部分为输出模式结构，分为 <strong>推挽输出模式</strong>、<strong>开漏输出模式</strong>、<strong>复用推挽输出模式</strong> 和 <strong>复用开漏输出模式</strong>。线路经过一个由 P-MOS 管和 N-MOS 管组成的单元电路。<br>　　而所谓 <strong>推挽输出模式</strong>，则是根据其工作方式来命名的。在输出高电平时，N-MOS 管导通（使输出接地） ；低电平时，P-MOS 管导通（输出高电平）。两个管子轮流导通，一个负责灌电流，一个负责拉电流，使其负载能力和开关速度都比普通的方式有很大的提高。推挽输出的供电平为 0 伏（<strong>void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)</strong>），高电平为 3.3 伏（<strong>void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)</strong>）。 <font color="blue">[ 推挽输出模式默认输出低电平，另外，必须配置引脚输出速率，否则会导致输出紊乱 ]</font><br>　　在开漏输出模式时，如果我们控制输出为 0，低电平，则使 N-MOS 管导通，使输出接地（<strong>void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)</strong>），<font color="green">若控制输出为 1 （无法直接输出高电平），则既不输出高电平，也不输出低电平，为 <strong>高阻态</strong>（高阻态就是电阻很大，或者说是趋向无穷大，用来隔开相当于断开但又不是真的断开）</font>。为正常使用时必须在外部接上一个上拉电阻。它具有“线与”特性，即很多个开漏模式引脚连接到一起时，只有当所有引脚都输出高阻态，才由上拉电阻提供高电平，此高电平的电压为外部上拉电阻所接电源的电压。若其中一个引脚为低电平，那线路就相当于短路接地，使得整条线路都为低电平，0 伏。<br>　　博客中关于 <strong>开漏输出模式</strong> 和 <strong>推挽输出模式</strong> 的阐述如下：<div style="background-color: #CFD5DB"><font color="blue"><br>一、推挽输出：</font><br/    ><br>　　可以输出高、低电平，连接数字器件；推挽结构一般是指两个三极管分别受两个互补信号的控制，总是在一个三极管导通的时候另一个截止。高低电平由 IC 的电源决定。<br>　　推挽电路是两个参数相同的三极管或 MOSFET，以推挽方式存在于电路中，各负责正负半周的波形放大任务，电路工作时，两只对称的功率开关管每次只有一个导通，所以导通损耗小、效率高。输出既可以向负载灌电流，也可以从负载抽取电流。推拉式输出级既提高电路的负载能力，又提高开关速度。<br/><br/><font color="blue"><br>二、开漏输出：</font><br/    ><br>　　输出端相当于三极管的集电极，要得到高电平状态需要上拉电阻才行。适合于做电流型的驱动，其吸收电流的能力相对强（一般 20mA 以内）。开漏形式的电路有以下几个特点：<br/><br>　　　<strong>1、</strong> 利用外部电路的驱动能力，减少 IC 内部的驱动。当 IC 内部 MOSFET 导通时，驱动电流是从外部的 VCC 流经上拉电阻、MOSFET 到 GND。IC 内部仅需很小的栅极驱动电流。<br/><br>　　　<strong>2、</strong> 一般来说，开漏是用来连接不同电平的器件，匹配电平用的，因为开漏引脚不连接外部的上拉电阻时，只能输出低电平，如果需要同时具备输出高电平的功能，则需要接上拉电阻，很好的一个优点是 通过改变上拉电源的电压，便可以改变传输电平。比如加上上拉电阻就可以提供 TTL/CMOS 电平输出等（上拉电阻的阻值决定了逻辑电平转换的速度。阻值越大，速度越低功耗越小，所以 负载电阻的选择要兼顾功耗和速度）。<br/><br>　　　<strong>3、</strong> 开漏输出提供了灵活的输出方式，但是也有其弱点，就是带来上升沿的延时。因为上升沿是通过外接上拉无源电阻对负载充电，所以当电阻选择小时延时就小，但功耗大；反之延时大功耗小。所以如果对延时有要求，则建议用下降沿输出。<br/><br>　　　<strong>4、</strong> 可以将多个开漏输出连接到一条线上。通过一只上拉电阻，在不增加任何器件的情况下，形成 “与逻辑” 关系，即 “线与”。可以简单的理解为：在所有引脚连在一起时，外接一上拉电阻，如果有一个引脚输出为逻辑 0，相当于接地，与之并联的回路 “相当于被一根导线短路”，所以外电路逻辑电平便为 0，只有都为高电平时，与的结果才为逻辑 1。<br/><br>    <img src="/img/STM32/Kidult/04_OpenPull_OpenCollector.png"/><br>　　关于推挽输出和开漏输出，最后用一幅最简单的图形来概括：该图中左边的便是推挽输出模式，其中比较器输出高电平时下面的 PNP 三极管截止，而上面 NPN 三极管导通，输出电平 V<sub>S+</sub>；当比较器输出低电平时则恰恰相反，PNP 三极管导通，输出和地相连，为低电平。右边的则可以理解为开漏输出形式，需要接上拉。<br>　　<br></div><br>　　STM32 的 GPIO 输出模式就分为 普通推挽输出（GPIO_Mode_Out_PP）、普通开漏输出（GPIO_Mode_Out_OD）及     复用推挽输出（GPIO_Mode_AF_PP ）、复用开漏输出（GPI O_Mode_AF_OD ）。</p>
<p>　　<font color="green">普通推挽输出模式一般应用在输出电平为 0 和 3.3 伏的场合。而普通开漏输出模式一般应用在电平不匹配的场合，如需要输出 5 伏的高电平，就需要在外部接一个上拉电阻，电源为 5 伏，把 GPIO 设置为开漏模式，当输出高阻态时，由上拉电阻和电源向外输出 5 伏的电平</font>。<br>　　对于相应的复用模式，则是根据 GPIO 的复用功能来选择的，如 GPIO 的引脚用作串口的输出，则使用复用推挽输出模式。如果用在 IC、SMBUS 这些需要线与功能的复用场合，就使用复用开漏模式。<br>　　在使用任何一种开漏模式时，都需要接上拉电阻。<br>　　<br>　　+ <font color="#F40D64">总结在 STM32 中选用 IO 模式（来自博客）</font><br>　　<strong>1、</strong> 浮空输入 GPIO_IN_FLOATING —— 浮空输入，可以做 KEY 识别，RX1<br>　　<strong>2、</strong> 带上拉输入 GPIO_IPU —— IO 内部上拉电阻输入<br>　　<strong>3、</strong> 带下拉输入 GPIO_IPD —— IO 内部下拉电阻输入<br>　　<strong>4、</strong> 模拟输入 GPIO_AIN —— 应用 ADC 模拟输入，或者低功耗下省电<br>　　<strong>5、</strong> 开漏输出 GPIO_OUT_OD —— IO 输出 0 接 GND，IO 输出 1，悬空，需要外接上拉电阻，才能实现输出高电平。当输出为 1 时，IO 口的状态由上拉电阻拉高电平，但由于是开漏输出模式，这样 IO 口也就可以由外部电路改变为低电平或不变。可以读 IO 输入电平变化，实现 C51 的 IO 双向功能<br>　　<strong>6、</strong> 推挽输出 GPIO_OUT_PP —— IO 输出 0-接GND， IO 输出 1-接VCC，读输入值是未知的<br>　　<strong>7、</strong> 复用功能的推挽输出 GPIO_AF_PP —— 片内外设功能（I<sub>2</sub>C 的 SCL，SDA）<br>　　<strong>8、</strong> 复用功能的开漏输出 GPIO_AF_OD —— 片内外设功能（TX1，MOSI，MISO，SCK，SS）</p>
<p>　　+ <font color="#F40D64">STM32 设置实例：（来自博客）</font><br>　　<strong>1、</strong> 模拟 I<sub>2</sub>C 使用开漏输出 _OUT_OD，接上拉电阻，能够正确输出 0 和 1；读值时先 <strong>GPIO_SetBits(GPIOB, GPIO_Pin_0)；</strong> 拉高，然后可以读 IO 的值；使用 <strong>GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0)；</strong><br>　　<strong>2、</strong> 如果是无上拉电阻，IO 默认是高电平；需要读取 IO 的值，可以使用带上拉输入 _IPU 和 浮空输入_IN_FLOATING 和开漏输出 _OUT_OD。</p>
<p>　　+ <font color="#F40D64">通常有 5 种方式使用某个引脚功能，它们的配置方式如下：（来自博客）</font><br>　　 <strong>1、</strong> 作为普通 GPIO 输入：根据需要配置该引脚为浮空输入、带弱上拉输入或带弱下拉输入，同时不要使能该引脚对应的所有复用功能模块。<br>　　 <strong>2、</strong> 作为普通GPIO输出：根据需要配置该引脚为推挽输出或开漏输出，同时不要使能该引脚对应的所有复用功能模块。<br>　　 <strong>3、</strong> 作为普通模拟输入：配置该引脚为模拟输入模式，同时不要使能该引脚对应的所有复用功能模块。<br>　　 <strong>4、</strong> 作为内置外设的输入：根据需要配置该引脚为浮空输入、带弱上拉输入或带弱下拉输入，同时使能该引脚对应的某个复用功能模块。<br>　　 <strong>5、</strong> 作为内置外设的输出：根据需要配置该引脚为复用推挽输出或复用开漏输出，同时使能该引脚对应的所有复用功能模块。<br>　　 注意 <font color="green">如果有多个复用功能模块对应同一个引脚，只能使能其中之一，其它模块保持非使能状态</font>。比如要使用 STM32F103VBT6 的 47、48 脚的 USART3 功能，则需要配置 47 脚为复用推挽输出或复用开漏输出，配置 48 脚为某种输入模式，同时使能 USART3 并保持 I<sub>2</sub>C 的非使能状态。如果要使用 STM32F103VBT6 的 47 脚作为 TIM2_CH3，则需要对 TIM2 进行重映射，然后再按复用功能的方式配置对应引脚。</p>
<p>　　+ <font color="#F40D64">在上面基础上，最后，我们再从 <strong>瑞生哥</strong> 的分类来进行回顾</font><br>　　 <strong>1、</strong> 输入和输出<br>　　 　从 51 过来的人，对输入和输出比较陌生。<font color="green">51 单片机不用设置输入和输出模式，自动变换，无需程序配置，当我们写程序读引脚的电平的时候，实际上就是作为输入模式来使用，当我们写程序让引脚输出电平的时候，实际上就是作为输出模式来使用</font>。也就是说，并不是 51 单片机没有输入和输出这个概念，而是你已经使用了很久却没有发现。<br>　　 　STM32 与 51 的区别就是：当我们要读引脚电平的时候，也就是作为输入，我们必须要先把引脚设置为输入功能，才可以读。当我们要控制引脚高低电平的时候，也就是作为输出，我们必须要先把引脚设置为输出功能，才可以设置。<br>　　 　概念比较抽象，你只需要记住：在引脚上没有外界干扰的情况下，上拉就是把引脚设置为高电平了，你用万用表量上拉引脚，就是高电平；下拉就是把引脚设置为低电平了，你用万用表量下拉引脚，就是低电平，也就是 0 V。</p>
<p>　　 <strong>2、</strong> 推挽与开漏<br>　　 　概念比较抽象，你只需要记住： <font color="green">设置为推挽，就是提高了引脚的输出电流能力。设置为开漏，就是提高了引脚的输入电流能力</font>。然后还要知道，<font color="green">设置为开漏时，如果外部不加上拉电阻，默认输出是低电平</font>。</p>
<p>　　 <strong>3、</strong> 通用与复用<br>　　 　通用就是作为普通的输入和输出引脚。复用就是该引脚可以作为 SPI 引脚 I<sub>2</sub>C 引脚等其他功能的引脚。</p>
<p>　　 <strong>4、</strong> 使用介绍<br>　　 　结合上面讲的，可以得到一些简单的应用设置方式。<br>　　 　比如检测按键，就应该设置为输入，如果 <font color="green">外部没有加上拉电阻，你就需要设置引脚为上拉输入，这样如果检测到引脚是低电平，就是按下按键</font>了。如果 <font color="green">外部加了上拉电阻，你这时既可以把引脚设置为上拉输入，也可以设置为浮空输入，设置为这两种，由于外部上拉电阻的原因，默认就是高电平，同样，检测到低电平时，就是按键按下</font> 了。<br>　　 　当你要控制引脚高低电平做应用时，就是需要把引脚设置为输出功能。例如驱动一个器件，驱动一个发光二极管等。如果你要 <font color="green">使用高电平点亮发光二极管，就需要把引脚设置为推挽输出，以增大电流输出能力，如果你设置为开漏输出，发光二极管肯定是点不亮了</font>。但是如果你 <font color="green">使用低电平点亮发光二极管，那么设置为开漏和推挽输出都可以正常点亮发光二极管</font>。</p>
<h2 id="STM32-之串口介绍"><a href="#STM32-之串口介绍" class="headerlink" title="STM32 之串口介绍"></a><font color="#F40D64">STM32 之串口介绍</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401488699&amp;idx=1&amp;sn=a778d11a59c683301b1aa1e83b0203a8&amp;scene=4#wechat_redirect">点击跳转至原文</a><br>　　<strong>笔记： </strong></p>
<ul>
<li><p><font color="#F40D64">串口硬件电路介绍</font><br>　　+ <strong>CH340</strong> 虚拟出一个串口（电脑使用的是 USB，<strong>CH340</strong> 即是 USB 转 TTL 芯片），电脑上需要安装相应的驱动。<br>　　+ <strong>CH340</strong> 需要晶振（12MHz），晶振的 <font color="green">匹配电容异常时可以不焊接，只是稳定性不太好</font>。<br>　　+ <strong>CH340</strong> 的 DTR 引脚（高电平3.3V）需要连接到 STM32 的复位引脚 RST（<a href="http://www.rationmcu.com/stm32/1317.html">ISP下载程序</a>）。</p>
</li>
<li><p><font color="#F40D64">如何用串口下载程序</font><br>　　+ <strong>手动 ISP 下载程序</strong>，<font color="green">STM32 上电，会自动检测 BOOT0 引脚是什么电平，如果是高电平，等待用户下载程序；如果是低电平，运行用户之前下载到单片机的程序</font>。所以我们需要把 BOOT0 引脚引出，然后控制其接地或接 VCC 来下载程序或者运行程序。在调试过程中，我们需要不断的控制 BOOT0，非常麻烦。<br>  <img src="/img/STM32/Kidult/05_BootMode.png" width="600px"/><br>　　+ <strong>自动 ISP 下载程序</strong>，把 BOOT0 与地直接连接，那么每次上电就会运行程序，而且只要点击电脑上的 “下载” 按钮，就开始下载程序，下载完程序，就开始执行。实现此目的，需要借助串口握手信号 DTR 和 RTS。<font color="green">DTR 连接 RESET（复位引脚），控制复位；RTS 连接 BOOT0，用来控制程序运行或者等待下载</font>。<br>  <img src="/img/STM32/Kidult/05_AUTO_ISP.png"/><br>　　+ 按道理应该是 DTR 低电平复位，然后 RTS 低电平进入 BootLoader 呀。但是，有一点需要注意，它这里讲的高低电平，是针对电脑原始的 <strong>9 针串口</strong> 的，也就是 <strong>“232 电平”</strong>，我们用的 <strong>USB</strong> 转 TTL 芯片是 <strong>“TTL 电平”</strong>，正好相反（<a href="http://www.rationmcu.com/elecjc/947.html">《USB 转串口-硬件扫盲》</a>）。<br>  <img src="/img/STM32/Kidult/05_STM32自动ISP软件DTR和RTS的选择.png"/><br>　　　单片机串口是 TTL 电平，要和电脑串口(或者USB 转串口线)通信，就需要使得他俩的电平逻辑一样才可以通信。这时候，就需要用到 <strong>TTL 转 232 电平</strong> 的芯片：MAX232、MAX3232、SP232、SP3232（232 芯片用于 5V 单片机，3232 用于 3.3V 的单片机）。<br>　　　如果用的不是电脑原生的串口，而是 USB 转的串口，也就是，直接把 USB 转的串口，变成了可以和单片机直接通信的 TTL 电平了。<strong>USB 转 TTL</strong> 芯片有很多，例如：<strong>CH340</strong>、PL2303、CP2102、FT232 等。<br>　　+ 串口通讯的交叉连接方式：Rx1 &lt;–&gt; Tx2、Tx1 &lt;–&gt; Rx2。<br>　　+ ISP 下载方式必须使用 STM32 的 USART1（PA9[TxD1]、PA10[RxD1]）。</p>
</li>
</ul>
<h2 id="STM32-之-JLINK-下载程序"><a href="#STM32-之-JLINK-下载程序" class="headerlink" title="STM32 之 JLINK 下载程序"></a><font color="#F40D64">STM32 之 JLINK 下载程序</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401511909&amp;idx=1&amp;sn=fbd322da77d5267a6b1c91e57c8dfed7&amp;scene=4#wechat_redirect">点击跳转至原文</a><br>　　<strong>笔记： </strong><br>　　+ JLINK V8/V9、STLINK、ULINK2 等都可以使用。<br>　　+ 仿真器一般不提供电源，使用仿真器下载时，需要为开发板提供电源！！<br>　　+ 只有通过 JLINK 发现了单片机的器件号（IDCODE），才可以正常使用<br>　　+ 仿真器下载有 JTAG和 SW 两种方式，STM32 单片机均支持，板子上用的是 20PIN 的 JTAG 座（个人认为可以兼容 SW）。</p>
<h2 id="STM32-之引脚高低电平"><a href="#STM32-之引脚高低电平" class="headerlink" title="STM32 之引脚高低电平"></a><font color="#F40D64">STM32 之引脚高低电平</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401558555&amp;idx=1&amp;sn=f16b1cfc47e8ff93a8efac668b3bb288&amp;scene=4#wechat_redirect">点击跳转至原文</a><br>　　<strong>笔记： </strong><br>　　+ 单片机引脚在上电之后默认是输入模式。<br>　　+ 不接地电路不构成回路，没有电流流过，LED 不亮；最好串联一限流电阻，防止 LED 烧坏！<br>　　+ 模板例程的概念，具体如何建立模板例程后续再介绍。</p>
<h2 id="STM32-之检测引脚电平"><a href="#STM32-之检测引脚电平" class="headerlink" title="STM32 之检测引脚电平"></a><font color="#F40D64">STM32 之检测引脚电平</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401612574&amp;idx=1&amp;sn=83888de9810cfcca21be196b25c0d099&amp;scene=4#wechat_redirect">点击跳转至原文</a><br>　　<strong>笔记： </strong><br>　　+ 单片机引脚内部有带上拉电阻，故可选择性在引脚外部电路带或不带上拉电阻（采用上拉输入模式）。<br>　　+ 四角按键，左右两同侧引脚按下，均导通。<br>　　+ <font color="green">使用万用表测通断时，千万不要给开发板上电！</font> ！<br>　　+ <strong>uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)</strong> 返回的其实就是 0、1。</p>
<h2 id="STM32-之蜂鸣器应用"><a href="#STM32-之蜂鸣器应用" class="headerlink" title="STM32 之蜂鸣器应用"></a><font color="#F40D64">STM32 之蜂鸣器应用</font></h2><p>　　<strong>链接：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNTUzNDA1MQ==&amp;mid=401620696&amp;idx=1&amp;sn=767696fdfd8dc34bbe04c3e50645d230&amp;scene=4#wechat_redirect">点击跳转至原文</a><br>　　<strong>笔记： </strong><br>　　+ 蜂鸣器电路： <font color="green">下拉电阻 （NPN 三极管高电平导通，单片机引脚上电后为输入模式，防止复位时蜂鸣器误动作而鸣叫）</font> + 基极限流电阻（防止烧坏 NPN 三极管）。<br>    <img src="/img/STM32/Kidult/05_ZeepModule.png" width="540px"/></p>
<p>　　+ 其他参考电路：<br>    <img src="/img/STM32/Kidult/05_ZeepModule_3_3V.png" width="360px" style="float: left"/><br>    <img src="/img/STM32/Kidult/05_ZeepModule_5V.png" width="360px"/></p>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> MCU </category>
            
        </categories>
        
        
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[漫威21部系列电影(持续更新)]]></title>
      <url>/2016/02/11/movies_%E6%BC%AB%E5%A8%81%E7%94%B5%E5%BD%B1/</url>
      <content type="html"><![CDATA[<p>　　漫威21部系列电影的计划 <a href="http://bbs.feng.com/read-htm-tid-9131622.html">摘自《[讨论] 漫威计划的21部系列电影全览，漫威迷，可以了解下，还有后面几部电影的上映时间》</a>：<br>　　<strong>第一阶段</strong><br>　　+ 《钢铁侠》 Iron Man（2008.04.30）<br>　　+ 《无敌浩克》 The Incredible Hulk（2008.08.20）<br>　　+ 《钢铁侠2》Iron Man 2（2010.04.25）<br>　　+ 《雷神》 Thor（2011.05.02）<br>　　+ 《美国队长：第一个复仇者》 Captain America: The First Avenger（2011.07.19）<br>　　+ 《复仇者联盟》 The Avengers（2012.05.04)<br>　　<strong>第二阶段</strong><br>　　+ 《钢铁侠3》 Iron Man 3（2013.05.01）<br>　　+ 《雷神2：黑暗世界》 Thor: The Dark World（2013.11.08）<br>　　+ 《美国队长2：冬日战士》 Captain America: The Winter Soldier（2014.04.04）<br>　　+ 《银河护卫队》 Guardians of the Galaxy（2014.10.10）<br>　　+ 《复仇者联盟2：奥创纪元》 Avengers: Age of Ultron（2015.05.12）<br>　　+ 《蚁人》 Ant-man（2015.07.17）<br>　　<strong>第三阶段</strong><br>　　+ 《美国队长3：内战》 Captain America: Civil War（2016.05.06）（未上映）<br>　　+ 《奇异博士》 Doctor Strange（2016.11.04）（未上映）<br>　　+ 《银河护卫队2》 Guardians of the Galaxy 2（2017.05.05）（未上映）<br>　　+ 《蜘蛛侠：新复仇者》Untitled Spider-Man film（2017.07.28）（未上映）<br>　　+ 《雷神3：诸神黄昏》 Thor: Ragnarok（2017.11.03）（未上映）<br>　　+ 《复仇者联盟3：无限战争（上）》 Avengers: Infinity War Part Ⅰ（2018.05.04）（未上映）<br>　　+ 《黑豹》 Black Panther（2018.07.06）（未上映）<br>　　+ 《惊奇队长》 Captain Marvel（2018.11.02）（未上映）<br>　　+ 《复仇者联盟3：无限战争（下）》 Avengers: Infinity War Part Ⅱ（2019.05.03）（未上映）<br>　　+ 《异人族》 Inhumans（2019.07.12）（未上映）<br><a id="more"></a><br>　　时间轴仅为时间发展顺序，仅作参考，包括系列电影和电视剧：《美国队长》→《探员卡特》→《特工卡特》→《钢铁侠》→《钢铁侠2》→《无敌浩克》→《神盾顾问》→《寻找雷神锤子路上发生的趣事》→《雷神》→《复仇者联盟》→《47号物品》→《钢铁侠3》→《王者万岁》→《神盾局特工》（1-7集）→《雷神2：黑暗世界》→《神盾局特工》（8-16集）→《美国队长2》→《神盾局特工》（17-22集）→《银河护卫队》→《神盾局特工第二季》（1-19集）→《复仇者联盟2：奥创纪元》→《神盾局特工第二季》（20-22集）</p>
<h2 id="《钢铁侠》"><a href="#《钢铁侠》" class="headerlink" title="《钢铁侠》"></a><strong>《钢铁侠》</strong></h2><p>　　<img src="/img/movies/Iron_Man_1.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Iron Man</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2008.4.30</strong></font><br>　　<font color="#F40D64"><strong>获取资源: <a href="https://yunpan.cn/cxjz6excnqKJj">https://yunpan.cn/cxjz6excnqKJj</a>  访问密码<code>a5a5</code></strong></font><br>　　<font color="#3385FF">托尼·斯塔克（小罗伯特·唐尼饰）是“斯塔克工业”的董事长，作为军火商他毁誉不一，但还是过着上流生活。此时，托尼令人称羡的生活出现一百八十度的大转变，他在国外的一次武器展示后遭到攻击，而他也被一群暴徒挟持沦为人质。在这次的意外事件中，他的心脏因受到炮弹碎片伤害及而生命垂危，他只好服从神秘的暴徒首领之命，为他制作斯塔克工业的新型导弹。不过，在一个同样被挟持的科学家的帮助下，他暗钢铁侠 官方剧照图册16张中运用他的聪明才智为自己打造出一套钢铁衣，帮助他维持生命并逃出暴徒的魔掌。回到美国之后，托尼必须重新面对过去，并誓言带领“斯塔克工业”迈向新的方向。然而，他不在公司期间，他的领导地位被他的左右手——最高执行长奥巴代·斯坦（杰夫·布里吉斯饰）顶替，他只好设法在奥巴代·斯坦的阻挠下，每天从早到晚埋头待在自己的工厂开发更先进的钢铁衣，以求得超出人类的力量来保护自己的身体。藉由助理佩佩·波兹“小辣椒”（格温妮斯·帕特洛饰）及值得信任的罗德上校（特伦斯·霍华德饰）的鼎力相助，托尼揭发了一个全球性的恐怖破坏计划。他穿上赋予他强大力量的全新红金色钢铁衣，宣示要保护这个世界不受邪恶势力的威胁。</font></p>
<h2 id="《无敌浩克》"><a href="#《无敌浩克》" class="headerlink" title="《无敌浩克》"></a><strong>《无敌浩克》</strong></h2><p>　　<img src="/img/movies/The_Incredible_Hulk.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: The Incredible Hulk</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2008.6.12</strong></font><br>　　<font color="#F40D64"><strong>获取资源: <a href="https://yunpan.cn/cxjzGBI648cMI">https://yunpan.cn/cxjzGBI648cMI</a>  访问密码<code>8242</code></strong></font><br>　　<font color="#3385FF">故事讲述科学家布鲁斯·班纳（爱德华·诺顿）继续绝望地寻找能治愈他那被γ辐射毒害的体内细胞之疗法，以及解除那蕴藏体内、不受约束的另一个自己——绿巨人。<br>　　活在孤独及没有爱人的阴霾之下，布斯在治疗过程中还需过五关斩六将，一方面需逃避不断找寻他、扰人的复仇者霹雳将军罗斯（威廉·赫特）；另一方面要逃离一直欲捉拿他、利用他的异能之残暴军方。当布鲁斯在治疗上有了重大突破，变回常人的日子近在眼前之际，另一股同样拥有恐怖摧毁程度的力量突然出现。布斯眼看一切努力与心血快要毁于一旦，决定作出一次前所未有的反击。</font><br>　　<strong>《无敌浩克》是”绿巨人”系列的第二部<a href="https://yunpan.cn/cxjzWexKCeUqy"> 点击获取《绿巨人1》，访问密码<code>6260</code></a>，2003年李安执导了第一部《绿巨人》被批评为过于人性化，没有传统漫画英雄的火爆。《无敌浩克》此次重装上阵，打斗激烈，恢复了好莱坞传统的漫画英雄电影风格。</strong></p>
<h2 id="《钢铁侠-2》"><a href="#《钢铁侠-2》" class="headerlink" title="《钢铁侠 2》"></a><strong>《钢铁侠 2》</strong></h2><p>　　<img src="/img/movies/Iron_Man_2.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Iron Man 2</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2010.5.7</strong></font><br>　　<font color="#F40D64"><strong>获取资源: <a href="https://yunpan.cn/cxjzhUtum72YY">https://yunpan.cn/cxjzhUtum72YY</a>  访问密码<code>ff53</code></strong></font><br>　　<font color="#3385FF">《钢铁侠2》剧情发生在托尼公布自己“钢铁侠”身份的六个月后，这带来了意想不到的连锁反应，他与周围人的关系发生了改变，他亲近的人也成为敌人的报复对象。<br>　　扮演的亿万富翁发明家托尼·斯塔克，因为公布了自己钢铁侠的身份，造成许多混乱，导致媒体、舆论和社会各界不断施压，希望能释出他的专业军事技术。但唐尼为避免公开钢铁侠秘密后，会遭不肖人士利用。于是，唐尼凭借小辣椒波兹（格温妮丝·帕特洛饰）以及罗德上校（唐·钱德尔饰）的协助，合力对抗由米基·洛克扮演的强大新兴恶势力。</font><br>　　<strong>值得一提的是，本片中神盾局局长尼克弗瑞(塞缪尔 杰克逊饰)，黑寡妇(斯嘉丽 约翰逊饰)和菲儿 科尔森(克拉克 格雷格)也都出场，片尾彩蛋中，科尔森前往墨西哥发现了雷神之锤，为下片埋下伏笔。</strong></p>
<h2 id="《雷神》"><a href="#《雷神》" class="headerlink" title="《雷神》"></a><strong>《雷神》</strong></h2><p>　　<img src="/img/movies/Thor_1.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Thor</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2011.5.6</strong></font><br>　　<font color="#F40D64"><strong>获取资源: <a href="https://yunpan.cn/cxjpStzWM6fu6">https://yunpan.cn/cxjpStzWM6fu6</a>  访问密码<code>f4c6</code></strong></font><br>　　<font color="#3385FF">勇敢善战雷神托尔（克里斯•海姆斯沃斯 Chris Hemsworth 饰），作为永恒境界阿斯加德的王位继承人，受人敬仰。然而由于一次鲁莽的行动，险些挑起一场古老的战争，因此被父亲天神奥丁（安东尼•霍普金斯 Anthony Hopkins 饰）流放到人间。托尔在人间认识了 美丽的女科学家珍•福斯特（娜塔莉•波特曼 Natalie Portman 饰）和她的工作伙伴，在他们的帮助下，托尔找到了和自己一起被贬的雷神之锤，但此时的雷神之锤并不属于他。此间，托尔的弟弟洛基为了成为阿斯加德的王，居然联合寒冰巨人，企图在永恒境界掀起一场腥风血雨。为了维持永恒之界的法度，托尔的四位朋友也来到人间，他们决定带托尔返回永恒之境。此时，为了阻止雷神重归永恒境界，洛基派出巨人杀死托尔。丧失能力和法战的托尔为了保护无辜的人类与自己的朋友，献出了自己的生命。托尔的死打破了天神的的咒语，托尔复活并重获雷神之力战胜巨人。此时，天神生命危在旦夕，托尔必须与自己的朋友们重返永恒之界，维护那里的法度。</font></p>
<h2 id="《美国队长：第一个复仇者》"><a href="#《美国队长：第一个复仇者》" class="headerlink" title="《美国队长：第一个复仇者》"></a><strong>《美国队长：第一个复仇者》</strong></h2><p>　　<img src="/img/movies/Captain_America_1.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Captain America: The First Avenger</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2011.9.9</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 百度云盘<a href="http://pan.baidu.com/s/1pKb6B7X">http://pan.baidu.com/s/1pKb6B7X</a></strong></font><br>　　<font color="#3385FF">1941年，全世界都陷入第二次世界大战的战火，一个来自布鲁克林的瘦弱小子斯蒂芬（克里斯·埃文斯饰）也想要从军报国，却因为体弱多病不断受到军方拒绝，但是他在偶然的情况下受到征召，参加美国军方的一项秘密计划，把这个瘦弱小子变成一名超级战士－美国队长。美国队长和他的队友詹姆斯巴恩斯中士（塞巴斯蒂安·斯坦饰）以及佩姬（海莉·阿特维尔饰）在菲利普斯将军（汤米·李·琼斯饰）的指挥之下向邪恶的九头蛇军团宣战，九头蛇军团是纳粹党的一个神秘科学组织，首领则是邪恶的红骷髅（雨果·维文饰）。</font><br>　　<strong>《美国队长 1》中的宇宙魔方是7颗无限宝石之一的 空间之石。无限宝石是拥有强大力量的7件宝物，后来灭霸(Thanos)集齐了空间，时间，灵魂，现实，力量，心灵6颗宝石，打造了超级武器无限手套，秒杀复联。</strong></p>
<h2 id="《复仇者联盟》"><a href="#《复仇者联盟》" class="headerlink" title="《复仇者联盟》"></a><strong>《复仇者联盟》</strong></h2><p>　　<img src="/img/movies/The_Avengers_1.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: The Avengers</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2012.5.4</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 暂无</strong></font><br>　　<font color="#3385FF">一股突如其来的强大邪恶势力对地球造成致命威胁，没有任何一个超级英雄能够单独抵挡。长期致力于保护全球安危的神盾局感到措手不及，其指挥官“独眼侠”尼克·弗瑞（塞缪尔·杰克逊饰）意识到他必须创建一个“史上最强”的联盟组织，云集各方超级英雄一起发威，才能拯救世界于水深火热，抵御黑暗势力的侵袭。<br>　　于是由六大超级英雄——钢铁侠（小罗伯特·唐尼饰）、美国队长（克里斯·埃文斯饰）、雷神（克里斯·海姆斯沃斯饰）、绿巨人（马克·鲁弗洛饰）、黑寡妇（斯嘉丽·约翰逊饰）和鹰眼侠（杰瑞米·雷纳饰）组成的 “复仇者联盟”应运而生。他们各显神通，团结一心，终于战胜了邪恶势力，保证了地球的安全。</font><br>　　<strong>据传，洛基的权杖可能是无限宝石之一。</strong></p>
<h2 id="《钢铁侠-3》"><a href="#《钢铁侠-3》" class="headerlink" title="《钢铁侠 3》"></a><strong>《钢铁侠 3》</strong></h2><p>　　<img src="/img/movies/Iron_Man_3.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Iron Man 3</strong></font><br>　　<font color="#38AD03"><strong>上映时间:2013.5.1</strong></font><br>　　<font color="#F40D64"><strong>获取资源: <a href="https://yunpan.cn/cxwgBDch8aKiV">https://yunpan.cn/cxwgBDch8aKiV</a>  访问密码<code>7e44</code></strong></font><br>　　<font color="#3385FF">托尼·斯塔克遭遇到强敌挑战，这个人毁坏了托尼·斯塔克的生活，斯塔克为前所未有的焦虑症所困扰。与此同时，臭名昭著的恐怖头目满大人（本·金斯利ben kingsley 饰）制造了一连串的爆炸袭击事件，托尼当年最忠诚的保镖即在最近的一次袭击中身负重伤。未过多久，托尼、佩珀以及曾与他有过一面之缘的女植物学家玛雅（丽贝卡·豪尔rebecca hall 饰）在家中遭到猛烈的炮火袭击，几乎丧命，而这一切都与13年前那名偶然邂逅的科学家阿尔德里奇·基连（盖·皮尔斯guy pearce 饰）及其终极生物的研究有关。</font><br>　　<strong>♤♢建议在观看 雷神2前 ，观看电视剧《神盾局特工 第1季(1-7集)》作为衔接。♡♧</strong></p>
<h2 id="《雷神-2：黑暗世界》"><a href="#《雷神-2：黑暗世界》" class="headerlink" title="《雷神 2：黑暗世界》"></a><strong>《雷神 2：黑暗世界》</strong></h2><p>　　<img src="/img/movies/Thor_2.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Thor: The Dark World</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2013.11.8</strong></font><br>　　<font color="#F40D64"><strong>获取资源: <a href="https://yunpan.cn/cxwsvg5ACddBP">https://yunpan.cn/cxwsvg5ACddBP</a>  访问密码<code>08d3</code></strong></font><br>　　<font color="#3385FF">剧情承接《复仇者联盟》，讲诉了在纽约大战结束一年后，押送着弟弟洛基（汤姆·希德勒斯顿 Tom Hiddleston 饰）回到神域接受审判的雷神托尔（克里斯·海姆斯沃斯 Chris Hemsworth 饰）将面对一股远古黑暗势力的挑战——复仇心切的黑暗精灵首领马勒凯斯（克里斯托弗·埃克莱斯顿 Christopher Eccleston 饰）率领神秘而强大的种族卷土重来，了解他们的人只有一个——洛基。托尔不得不向洛基寻求帮助，并与之结盟，踏上有生以来最危险的征程——这次旅途固然会令他与地球恋人简·福斯特（娜塔丽·波特曼 Natalie Portman 饰）久别重逢，但也将迫使他牺牲一切，唯此才能拯救整个宇宙。</font><br>　　<strong>《雷神2》中的以太是无限宝石，具体是哪一颗不能确定。</strong><br>　　<strong>♡建议在看《美队2》前，观看电视剧《神盾局特工 第1季（8-16集）》作为衔接。♧</strong></p>
<h2 id="《美国队长-2：冬日战士》"><a href="#《美国队长-2：冬日战士》" class="headerlink" title="《美国队长 2：冬日战士》"></a><strong>《美国队长 2：冬日战士》</strong></h2><p>　　<img src="/img/movies/Captain_America_2.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Captain America: The Winter Soldier</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2014.4.4</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 在线高清<a href="http://www.yakuhd.com/programs/158589.html">http://www.yakuhd.com/programs/158589.html</a></strong></font><br>　　<font color="#3385FF">在经历了《复联》的纽约大战后，美国队长史蒂夫·罗杰斯如今在华盛顿过着恬淡的生活，努力尝试着融入现代社会。然而当一名神盾局同事遭遇袭击后，史蒂夫卷入了一场阴谋。他与黑寡妇携手出击，一边防备欲将自己灭口的杀手，一边努力揭露这个巨大阴谋的真面目。而当敌人的邪恶计划被识破后，美国队长和黑寡妇得到了一位新同盟“猎鹰”的协助。然而他们也发现自己将要面临的，是前所未遇、出乎意料的黑暗劲敌——冬兵。</font><br>　　<strong>♡建议在看完《美国队长 2》后，观看电视剧《神盾局特工 第1季（17-22集）》、《神盾局第二季（1-10集）》。</strong></p>
<h2 id="《银河护卫队》"><a href="#《银河护卫队》" class="headerlink" title="《银河护卫队》"></a><strong>《银河护卫队》</strong></h2><p>　　<img src="/img/movies/Guardians_of_the_Galaxy_1.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Guardians of the Galaxy</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2014.8.1</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 暂无</strong></font><br>　　<font color="#3385FF">自以为是的冒险家”星爵”彼得·奎尔在偷走一块神秘球体后成为赏金猎人的头号目标，原来科瑞星将军指控者罗南对此物体垂涎已久。为了逃脱无休止的追杀，奎尔被迫和四个格格不入的乌合之众结成同盟——手持机枪的火箭浣熊、树人格鲁特、凶残神秘的加美拉，以及复仇心切的毁灭者德拉克斯。然而当奎尔发现这颗球体蕴含的真正能量，以及它能给宇宙带来的巨大威胁时，他必须团结这群不入流的队友，破釜沉舟、决一死战，才有可能解救整个银河系。</font><br>　　<strong>银河护卫队中的无限原石是无限宝石—力量之石。</strong></p>
<h2 id="《复仇者联盟-2：奥创纪元》"><a href="#《复仇者联盟-2：奥创纪元》" class="headerlink" title="《复仇者联盟 2：奥创纪元》"></a><strong>《复仇者联盟 2：奥创纪元》</strong></h2><p>　　<img src="/img/movies/The_Avengers_2.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Avengers: Age of Ultron</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2015.5.1</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 暂无</strong></font><br>　　<font color="#3385FF">身经百战的超级英雄们产生了职业倦怠，已经卸下钢铁战甲的托尼·斯塔克因此发明了“奥创”——有自我意识、有学习能力的人工智能机器人，并将指挥机器人军团的重任交给奥创。令超级英雄们始料不及的是，不断进化的奥创得出了“人类是地球上最大的威胁”这一结论，进而开始实施清洗人类的毁灭计划。有强大能力的变种人姐弟绯红女巫和快银也成为奥创的帮手，四处制造麻烦。复仇者联盟必须再度集合，解决这个由他们亲手制造的危机。</font><br>　　<strong>漫威主线宇宙Earth-616中，奥创由一代蚁人—皮姆·汉克博士研发。目的是为了制造混乱，然后由他本人解决，来重新赢取他的恋人—黄蜂女的芳心</strong></p>
<h2 id="《蚁人》"><a href="#《蚁人》" class="headerlink" title="《蚁人》"></a><strong>《蚁人》</strong></h2><p>　　<img src="/img/movies/Ant_man.jpg" style="float: right"/><br>　　<font color="#F40D64"><strong>片名: Ant-man</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 2015.07.17</strong></font><br>　　<font color="#F40D64"><strong>获取资源: <a href="https://yunpan.cn/cxwyHSPn8ItKS">https://yunpan.cn/cxwyHSPn8ItKS</a>  访问密码<code>4631</code></strong></font><br>　　<font color="#3385FF">行骗为生的斯科特·朗（保罗·路德饰），在偷了生化学家汉克·皮姆博士（迈克尔·道格拉斯饰）发明的蚁人战服后，拥有了自由收缩身体大小的超能力。汉克·皮姆博士开发出一种“皮姆粒子”，并和斯科特·朗一同成为“蚁人”。斯科特也不得不接受自己的英雄身份，并帮助皮姆博士守护蚁人技术之谜。在强大的敌人威胁下，两人必须精心策划并执行一场惊天骗局来拯救世界维护和平。<br>　　网传本片中有黄衫侠，真实身份是Cross公司的总裁(克罗斯工业，斯塔克工业，奥斯本工业漫威三大工业巨头)。漫画中，大家知道，蚁人，巨化侠，黄衫侠都是皮姆博士。</font></p>
<h2 id="《美国队长-3：内战》"><a href="#《美国队长-3：内战》" class="headerlink" title="《美国队长 3：内战》"></a><strong>《美国队长 3：内战》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Captain America: Civil War</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2016.05.06</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">在奥创对这个世界造成了巨大的影响之后，复仇者联盟还是团结一致保护人类的。但是在一些政治角力的背后，政府中有人认为是有必要控制一下这些超级英雄的超自然能力和他们的行动了。于是，一项管控措施出台。这个措施就是要求复联按照政府的要求来行动。任务的开展、进程和结束，都要由政府主导。这个管控措施在复联中引起了极大的争议。意见最极端、最两极分化不可调和的，就是钢铁侠和美国队长之间的问题，于是，这两个同盟者之间的矛盾就此爆发了出来。而复联的“内战”也不可避免的爆发。[1]<br>　　政府启动了“超级英雄注册法案”电影叫“索科威亚协议”。黑豹查德维克·博斯曼和蜘蛛侠汤姆·赫兰德等人将全新加盟到《美国队长3：内战》中。<br>　　在原版漫画的主线Earth-616中，提出了超级英雄注册法案，美队反对该法案，倡导隐私与自由，而钢铁侠非常赞成此法案。慢慢产生矛盾发生了内战。起初蜘蛛侠信了钢铁侠，并接受了钢铁侠赠送的钢铁蜘蛛侠装甲，但由于自己的身份公开，他唯一的亲人梅姑妈死于恶人之手，妻子玛丽·简也流产了。出于这些原因，蜘蛛侠转投美国队长。<br>　　所以，蜘蛛侠是复仇者内战的重要人物，但目前蜘蛛侠的电影改编权在SONY影业，且谈判屡次破裂，故蜘蛛侠回归希望渺茫。<br>　　内战结局是美队失败，在前往法院接受审判途中，美队被九头蛇手下狙杀。此后，美队由冬日战士接替。由于塞巴斯蒂安·斯坦(饰冬兵 巴基·巴恩斯)与漫威签约的电影数较多，所以个人以为电影中史蒂夫·罗杰斯也没多少时间了。</font></p>
<h2 id="《奇异博士》"><a href="#《奇异博士》" class="headerlink" title="《奇异博士》"></a><strong>《奇异博士》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Doctor Strange</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2016.11.04</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">奇异博士史蒂芬在漫威宇宙里是地球上已知的最强魔法师之一，他可以将能量实体化，物质转移、念动力、空间转移、幻像术和精神离体等等。体能方面，他也接受过严格的武术训练。奇异博士的故事中涉及到大量魔法奇幻场面，同时他还会与绿巨人合作抵抗魔界的入侵，是漫威作品中相当有号召力的人物。复仇者之一。<br>　　奇异博士（Doctor Strange），本名史蒂芬·斯特兰奇（Stephen “Steve” Vincent Strange），原本是一名的出色的外科手术专家，因一次车祸导致其双手再也无法使用手术刀正常工作，为了治好自己的双手史蒂芬来到喜马拉雅山上拜访传说中的至尊魔法师古一（Ancient One），却被古一看中并传授其使用魔法的能力，史蒂芬化身奇异博士守卫世界，后在师父阵亡后接任成为至尊法师对抗魔界入侵。奇异博士拥有强大的魔法能力，可以将能量实体化，物质转移、念动力、空间转移、幻像术和精神离体等，体能方面他也接受过严格的武术训练，是漫威世界一线超级英雄之一。<br>　　漫威影业此次花大手笔制作电影《奇异博士》，对该片寄予厚望。漫威的执行总裁对好莱坞记者透漏《奇异博士》将会打破之前已经成文的标准，对本片形象孕育良久，他不同于之前做的任何形象。<br>　　《奇异博士》与以往的漫威电影有着很大不同，该片聚焦的是一个未知的神秘世界，这个神秘世界在《雷神》中有所提及。</font></p>
<h2 id="《银河护卫队-2》"><a href="#《银河护卫队-2》" class="headerlink" title="《银河护卫队 2》"></a><strong>《银河护卫队 2》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Guardians of the Galaxy 2</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2017.05.05</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">在《银河护卫队》中，星爵的父亲惊鸿一瞥，被称为“古老的外星人”而被人所惦记。而《银河护卫队2》或许会从这位神秘的人物身上开始自己故事的讲述。影片的导演詹姆斯·古恩表示，这部电影将继续把故事主线放在星爵一家的关系之上，这次，将讲述的是星爵的父亲。他说：“这会是一个关于父亲们（fathers）的故事，所以我很期待故事的进展和最终的成品。”</font></p>
<h2 id="《蜘蛛侠：新复仇者》"><a href="#《蜘蛛侠：新复仇者》" class="headerlink" title="《蜘蛛侠：新复仇者》"></a><strong>《蜘蛛侠：新复仇者》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Untitled Spider-Man film</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2017.07.28</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">彼得·帕克作为一个总是没办法融入到周遭环境的高中生，彼得很小的时候由于父母工作原因，由他的叔叔本和婶子梅抚养长大。在一次意外中被蜘蛛咬伤，获得了神奇的超能力。</font><br>　　《蜘蛛侠（Spider-Man）》（点击获取<a href="https://yunpan.cn/cxwJHqh6yY8S4">《蜘蛛侠三部》</a>，访问密码<code>e3fe</code>）是美国漫威漫画旗下超级英雄，由编剧斯坦·李和画家史蒂夫·迪特科联合创作，初次登场于1962年8月出版的《惊奇幻想》第15期，因为广受欢迎，几个月后，便开始拥有以自己为主角的单行本漫画。本名彼得·本杰明·帕克（Peter Benjamin Parker），原是一位普通的高中生，后意外的被一只受过放射性感染的蜘蛛咬伤后，获得了蜘蛛一般的超能力，从此化身蜘蛛侠守卫纽约。<br>　　《超凡蜘蛛侠》（点击获取<a href="https://yunpan.cn/cxwJPAgGI88mZ">《超凡蜘蛛侠两部》</a>，访问密码<code>bcb5</code>）不同于此前山姆·雷米执导的《蜘蛛侠》三部曲，此部将视角拉回到彼得·帕克的高中时代，年轻的他一方面要同自己的初恋格温共同经历爱情承诺的考验，另一方面还要揭开双亲神秘失踪的真相，在人生最大的挑战中完成从常人到英雄的命运转变。</p>
<h2 id="《雷神-3：诸神黄昏》"><a href="#《雷神-3：诸神黄昏》" class="headerlink" title="《雷神 3：诸神黄昏》"></a><strong>《雷神 3：诸神黄昏》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Thor: Ragnarok</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2017.11.03</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">诸神的黄昏（Ragnarök）是北欧神话预言中的一连串巨大劫难，包括造成许多重要神祇死亡的大战（奥丁（Odin）、索尔（Thor）、弗雷（Freyr）、海姆达尔（Heimdallr，古北欧语：Heimdallr）、火巨人（Muspel）、霜巨人、洛基（Loki）等），无数的自然浩劫，之后整个世界沉没在水底。然而最终世界复苏了，存活的神与两名人类重新建立了新世界。诸神的黄昏主要记录在诗体埃达与散文埃达。其原名 Ragnarökr 或 Ragnarökkr 意为“诸神的末日”。</font></p>
<h2 id="《复仇者联盟-3：无限战争-上-》"><a href="#《复仇者联盟-3：无限战争-上-》" class="headerlink" title="《复仇者联盟 3：无限战争(上)》"></a><strong>《复仇者联盟 3：无限战争(上)》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Avengers: Infinity War Part Ⅰ</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2018.05.04</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">普遍认为BOSS将是土星泰坦上的灭霸(Thanos)，他集齐了6块无限宝石，打造了无限手套。<br>　　灭霸知晓永恒之族的所有超人的哲理，这给与了他无法超越的力量，持久力，恢复能力和敏捷度。他的皮肤近乎无法摧毁，尤其是在对抗冷/热/电/辐射/毒/衰老和疾病的时候。早在他被他所暗恋的死亡女神诅咒成为永生之前他就可以撒诺斯图册5张不吃任何东西以及饮水而生存。Thanos的精神也是近乎无敌的，这使得他对于绝大多数精神攻击都能产生免疫能力，与此同时他可以聚涌出法力能量波或是通过双眼双手释放出等离子能或者宇宙能。<br>　　　能力：战略家，拥有远远超越地球科技的知识，能通晓一切未知<br>　　　武器：Thanos有时候乘坐一个装有进攻性武器且能穿越银河的浮空王座<br>　　　装备：[曾经]宇宙立方；无限手套；真实宝石<br>　　出于与演员签约的合同等原因，预计(上)中以银河护卫队打灭霸为主。</font></p>
<h2 id="《黑豹》"><a href="#《黑豹》" class="headerlink" title="《黑豹》"></a><strong>《黑豹》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Black Panther</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2018.07.06</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">提恰拉（T’Challa），是1966年的瓦坎达国王——“黑豹”。 其父T’Chaka为前代“黑豹”，在位其间曾有陨石落在Wakanda，而带来大量稀有吸音金属Vibranium。T’Chaka令国家Wakanda隐藏并与外间隔绝，他将Vibranium 卖出足以送国内的学士到外国念书从而令Wakanda成为了高科技国家。不过探险家Ulysses Klaw 发现了Wakanda国，他秘密地建了一台利用Vibranium作原料的武器。当Ulysses Klaw被发现之后他利用其武器杀掉初代”黑豹”，年轻的T’Challa 为了报父仇废掉了Klaw的右手，但是最后还是让Klaw逃了。<br>　　为了成为新一任黑豹，T’Challa要经过多重考验以证明他有能力保护国人。成为黑豹后他到了外国念书以学习治国之道。刚前往欧美学习，他遇到了刚刚建立的复仇者联盟，还攻击神奇四侠（F4）——为了试验他们看他们有没有能力帮助他打败回归Wakanda的Klaw。后来他逐渐被这个团体接纳，黑豹也完全放下戒备，与诸位复仇者一同出生入死。黑豹的性格像极了美国队长，稳重中带有王者风范，就连给复仇者打酱油都是那么华丽。<br>　　其实年轻的T’Challa 曾与当年刚成为孤儿的Ororo Munroe（暴风女，Storm）相爱，不过T’Challa为了报父仇而跟她分手，而Ororo Munroe（暴风女，Storm）其后亦被X教授招揽成为X战警的队员。黑豹后来加入复仇者（Avengers）。在09年大事件“内战”其间他跟暴风女结婚，之后加入了美国队长的反对立法派。后来他曾代替神奇四侠的神奇先生加入了神奇四侠。</font></p>
<h2 id="《惊奇队长》"><a href="#《惊奇队长》" class="headerlink" title="《惊奇队长》"></a><strong>《惊奇队长》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Captain Marvel</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2018.11.02</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">Mar-Vell是克里某舰队尉官，属于克里人中肤色较浅的一族，类似地球人。他在与斯克鲁尔的战斗中表现出众，受到至高智慧赏识，派他去地球卧底，破坏人类的航天工程，但Mar-Vell对地球人产生了敬意，帮助他们解决困难，获得了惊奇队长的英雄称号。</font></p>
<h2 id="《复仇者联盟-3：无限战争-下-》"><a href="#《复仇者联盟-3：无限战争-下-》" class="headerlink" title="《复仇者联盟 3：无限战争(下)》"></a><strong>《复仇者联盟 3：无限战争(下)》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Avengers: Infinity War Part Ⅱ</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2019.05.03</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF"></font></p>
<h2 id="《异人族》"><a href="#《异人族》" class="headerlink" title="《异人族》"></a><strong>《异人族》</strong></h2><p>　　<font color="#F40D64"><strong>片名: Inhumans</strong></font><br>　　<font color="#38AD03"><strong>上映时间: 预计2019.07.12</strong></font><br>　　<font color="#F40D64"><strong>获取资源: 未上映</strong></font><br>　　<font color="#3385FF">异人族是漫威漫画（Marvel）里的一种人种种族，类似漫威漫画《X战警》系列里的变种人。<br>　　地球时间数百万年前，宇宙两大种族Kree人和Skrull人发生了战争，为战略需要，Kree人来到太阳系，在天王星上设立了工作站。不久他们对当时地球生命的遗传潜能发生了兴趣，于是他们在当时的智人身上进行了一系列试验。这类试验的显然有双重意义，一是为了研究并防止自身进化中可能出现的停滞现象，同时为当时的战场制造一种强大的变种士兵。然而，当他们成功地创造出一群拥有非凡能力的人形物种时，不知什么原因，Kree人遗弃了他们的试验产物。<br>　　这个种群——异人族（Inhumans），在之后的日子里开始自我发展，他们发展出了自己的社会制度；与世隔离的生活使得他们拥有超越人类的先进技术。通过Terrigen雾，他们得到了各式各样的超能力，但同时也造成了基因的损坏与畸形。这导致一个长期的选育计划的实施，目的是为了减轻这些变异。他们的城市Attilan经常迁移，截至2005年的故事，Attilan已搬迁到了月球上的Blue Area。<br>　　异人族由异人王黑蝠王（Black Blot）及其皇室之家领导，成员包括美杜莎（Medusa）， 卡尔耐克（Karnak），戈尔工（Gorgon），崔坦（Triton），水晶（Crystal）, 疯狂的马克西穆斯（Maximus the Mad），以及大狗Lockjaw。虽与世隔绝，不过异人族还是或多或少地与人类社会和地球上的超级英雄们有着接触。比如异人女王美杜莎，就曾经是神奇四侠的一份子；她的妹妹水晶也曾加入过复仇者联盟。</font><br>　　<strong>电视剧《神盾局特工》第二季第十集，异人族引入漫威电影宇宙。斯凯和蕾娜在接触暴露的Terrigen水晶后成为异人族。斯凯(斯凯的真名震波女-黛西约翰逊。漫画里的Level 10十级神盾特工(神盾局10级特工仅两人，另一个是尼克 弗瑞) 能力是能产生震动类似于地震。</strong><br>　　<strong>点击获取 <a href="[https://yunpan.cn/cxwZHZ4jPKjsc">《X战警系列》1-6</a>，访问密码<code>bcb8</code>。</strong></p>
<h2 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a><strong>Version Control</strong></h2><center><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse; width: 680px"><br><tr><td style="width: 80px; text-align: center">版本号</td><td style="width: 120px; text-align: center">日期</td><td style="width: 360px; text-align: center">内容</td><td style="width: 120px; text-align: center">作者</td></tr><tr><td style="text-align: center">V1</td><td style="text-align: center">2016.2.11</td><td style="text-align: center">完成内容框架，更新至《蚁人》</td><td style="text-align: center">Tarantula-7</td></tr></table></center>]]></content>
      
        <categories>
            
            <category> Codes源于生活 </category>
            
            <category> 电影人生 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漫威电影 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[借Qt中文乱码谈谈Coding中的编码问题]]></title>
      <url>/2016/02/02/programPearls_Qt_%E5%80%9FQt%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%B0%88%E8%B0%88Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<font color="green" size="4">[系列文章]上一篇：<a href="http://durant35.github.io/2016/02/02/programPearls_Qt_%E5%80%9FQt%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%B0%88%E8%B0%88Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/#more">《这是第一篇》</a><br>[系列文章]下一篇：<a href="http://durant35.github.io/2016/02/21/programPearls_Coding%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E4%B9%8B%E5%85%A5%E9%97%A8&amp;%E6%A6%82%E8%A7%88/#more">《Coding中的编码问题之入门&amp;概览》</a></font>

<p>　　因为想着把毕业设计中的读写器上位机软件放在 <strong>Qt</strong> 上开发，这学期<a href="http://durant35.github.io/categories/%E7%89%A9%E8%81%94%E7%BD%91%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%AE%BA%E5%AE%9E%E9%AA%8C%E8%AF%BE/">《物联网导论实验课程》</a>也做过一个类似的上位机软件，不过是在 <strong>MFC</strong> 上开发，所以想到先做一下这个课程 <strong>Project</strong> 的移植，体验一发 <strong>Qt</strong>，没想到一开始就碰大壁了。。。</p>
<p>　　相信大家也经常遇到，那就是做 <strong>UI</strong> 界面时或者通过 <strong>UI</strong> 给用户提示时，<strong>中文乱码</strong> 的现象。比如，这学期，在上《物联网导论实验课》的时候，虽然课程建议的开发平台是 <strong>VC++ 6.0</strong>，但是有部分同学尝试在 <strong>VS≥2012</strong> 开发，就发现，课程 <strong>Demo</strong> 给的部分示例代码直接放到 <strong>VS</strong> 上，就出现了 <strong>UI</strong> 中文乱码的现象。他们，或者说大多数人一开始想到的问题，无非就是项目相关文件保存方式弄错了，也许改一下保存编码方式就行。但是真的是这样吗？还有编码方式是什么，解决这个问题需要了解多少东西？本期及之后的几篇文章，将会跟大家讲述本人在解决这个问题过程中的学习体会，包括从网上学习的各种资料的汇总。一来希望能给遇到相关问题的亲们指引一下(希望对你有帮助，嘻嘻)，二来更是把自己这近几周的学习作一个系统总结，留档，方便后知后觉忘了的时候，可以温故知新。<br><a id="more"></a></p>
<h2 id="先说说环境"><a href="#先说说环境" class="headerlink" title="先说说环境"></a><font color="#F40D64">先说说环境</font></h2><p>　　这是我的本本：<br>　　　- <strong>操作系统：</strong> <strong>Win8.1</strong> 专业版<br>　　　- <strong>VS：</strong> 安装了 <strong>Visual Studio2013</strong>，应该是 <strong>64-bit</strong> 的<br>　　　- <strong>Qt版本：</strong> <a href="http://download.qt.io/official_releases/qt/5.5/5.5.1/qt-opensource-windows-x86-msvc2013_64-5.5.1.exe.mirrorlist">Qt 5.5.1 for Windows 64-bit (VS 2013, 823 MB)，qt-opensource-windows-x86-msvc2013_64-5.5.1.exe</a><br>　　　- <strong>开发IDE：</strong> 使用上述安装包中自带的 <strong>Qt Creator3.5.1(Based on Qt5.5.1(MSVC2013, 32bit))</strong>，不过上面的 <strong>Qt</strong> 版本应该是 <strong>64</strong> 位的(见下图)。<br>　　　- <strong>其他： </strong>32 位的 <strong>MINGW</strong> (这个后来发现没什么卵用)<strong>：</strong><br>    <center><img src="/img/programPearls/encoding/mingw.png" width="440px"/></center><br>　　　下面是 <strong>Qt Creator</strong> 中构建套件截图：<center><img src="/img/programPearls/encoding/kit.png" width="480px"/></center></p>
<h2 id="再看看问题"><a href="#再看看问题" class="headerlink" title="再看看问题"></a><font color="#F40D64">再看看问题</font></h2><p>　　新建 <strong>Qt Widgets Application</strong>，<strong>UI</strong> 主框架是两个切换选项卡，只需要在界面设计栏中拖入 <strong>Containers → Tab Widget</strong>，适当调整大小即可。然后需要在 <strong>MainWindow 类构造函数</strong> 中添加代码(因为这部分是在界面呈现之前需要完成的部分，放在构造函数中理所应当)：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 设置标签名</span></div><div class="line">    ui-&gt;tabWidget-&gt;setTabText(<span class="number">0</span>, <span class="string">"调试助手"</span>);</div><div class="line">    ui-&gt;tabWidget-&gt;setTabText(<span class="number">1</span>, <span class="string">"应用开发"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>ui</strong> 通过初始化列表<font color="blue"><strong>（初始化列表以冒号开头，后跟一系列以逗号分隔的初始化字段）</strong></font>这种方式已经和我们的界面绑定，通过 <strong><code>ui-&gt;tabWidget</code></strong> 则可以获取到我们新添加进去的 <strong>Tab Widget</strong>，然后就是调用 <strong>Tab Widget</strong> 的 <strong>API</strong>，<strong><code>setTabText</code></strong> 设置标签名，第一个参数是下标，从 <strong>0</strong> 开始计数，第二个参数则是标签名。构建运行，结果如下图：<br>    <center><img src="/img/programPearls/encoding/uierror.png" width="640px"/></center><br><span style="color:red; font-size:138%"><strong>分析： </strong></span></p>
<ul>
<li>确实实现了两个标签的选项卡，也能正常实现切换，问题就是，这两个标签究竟是什么鬼…这就是上面提到多次的 <strong>中文乱码</strong>。</li>
<li>有人会说肯定是源文件编码方式出错了，造成乱码。<strong>Qt Creator</strong> （更准确的说，我这里的 <strong>Qt Creator</strong> ）文件保存方式默认是 <strong>使用带BOM的UTF-8</strong> 保存的（说的是什么鸟语，如果不懂这些到后面你就会懂了，还有，我是怎么知道的，用 <strong>NotePad++</strong> 打开 <strong>Qt</strong> 工程目录下的文件，<strong>HexViewer</strong> 一下便知道了，后续也会说）。而我们的 <strong>UI</strong> 文件，也是按照 <strong>UTF-8</strong> 编码的，因为 <strong>.ui</strong> 文件其实是一个 <strong>xml</strong> 文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">ui</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">ui</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　按理说，不会因此造成乱码的。事实是，不管你把源文件（主要是带有我们汉字的 <strong><code>mainwindow.cpp</code></strong>）的编码方式变成哪一种，还是照样乱码，而且是同一种乱法，都是上图那个样。</p>
<font color="red" size="4"><strong>怎么调文件的编码呢？ </strong></font>

<p>　　<strong>第一种： </strong>菜单栏<code>工具</code> →<code>选项</code> →<code>文本编辑器</code> →<code>行为</code>：<br>    <center><img src="/img/programPearls/encoding/behavior.png" width="720px"/></center><br>　　对<strong><code>文件编码</code></strong> 的 <strong><code>默认编码</code></strong> 和 <strong><code>UTF-8 BOM</code></strong> 进行设置，然后 <strong><code>Apply</code></strong> 应用设置。注意，个人认为此处设置的是默认编码，会对新建的项目或文件有效，也就是说，这里设置成什么样，整个 <strong>Qt</strong> 的文件默认编码方式就是什么；不过对你已经创建的文件，可能没什么影响，个人体会是这样。</p>
<p>　　<strong>第二种： </strong>那已经存在的文件怎么修改编码方式呢？菜单栏 <strong><code>编辑</code> →<code>Select Encoding...</code> →<code>选择编码方式</code> →<code>按编码保存</code></strong>。</p>
<p>　　如上图所示，我的默认编码采用 <strong><code>UTF-8</code></strong> 而且采取 <strong><code>如果编码是UTF-8则添加BOM</code></strong> 的方式，也是 <strong>建议大家采用的（后面你就明白了）</strong>。上面说到修改文件的编码，我通过第二种方式大概尝试了 <strong>System</strong> (本系统是简体中文的 <strong>Win8.1</strong>，这里的 <strong>System 编码</strong>，应该等同于 <strong>ANSI</strong>，也就是 <strong>GBK 编码</strong>（繁体中文则是 <strong>Big5 编码</strong>）)、<strong>GB2312</strong> (汉字国(家)标(准)，<strong>GBK</strong> 兼容 <strong>GB2312</strong>，是其的扩展)、<strong>UTF-8带BOM</strong> 和 <strong>不带BOM的UTF-8</strong> （设置成<code>如果编码是UTF-8则添加</code>然后按 <strong>UTF-8</strong> 编码保存即是 <strong>带BOM的UTF-8</strong>，设置成 <code>总是删除</code> 然后按 <strong>UTF-8</strong> 编码保存则是 <strong>不带BOM的UTF-8</strong> ）这几种。具体的编码是什么，这一块的知识会在后面陆续为大家介绍。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><font color="#F40D64">解决方案</font></h2><p>　　不管你按照上面说的改文件编码方式，改成什么，都没有用。还是乱码，而且乱的是一个样子，故我的初步估算是，这其实跟源文件的编码没什么关系。更恐怖的是，如果你改成 <strong>不带BOM的UTF-8</strong> 保存你的文件，甚至会报错，如下：<br>    <center><img src="/img/programPearls/encoding/noBOM_error.jpg"/></center><br>　　看到这个，我的疑惑只有，什么是 <strong>代码页</strong>（后面也会跟你说的）；还有，哦不，太可怕了，我赶紧退回去上一种编码，然后运行一下，发现错误没了，这才松了口气。<br>　　既然该文件编码没用，跟源文件编码没多大关系，那怎么解决呀，存在乱码可不行，毕竟这是 <strong>BUG</strong> 呀。</p>
<p>　　我就看了下这一篇文章<a href="http://blog.csdn.net/libaineu2004/article/details/19245205">《解决Qt中文乱码以及汉字编码的问题(UTF-8/GBK)》</a>。主要的内容摘要如下，你可以亲自去看看。</p>
<div style="background-color: #CFD5DB"><font color="blue"><br>一、<strong>Qt 环境设置</strong><br>　　文件从 <strong>window</strong> 上传到 <strong>Ubuntu</strong> 后会显示乱码,原因是因为 <strong>Ubuntu</strong> 环境设置默认是 <strong>utf-8</strong>，<strong>Windows</strong> 默认都是<strong>GBK</strong>。<br>　　<strong>Windows</strong> 环境下，<strong>Qt Creator</strong>，<code>菜单-&gt;工具-&gt;选项-&gt;文本编辑器-&gt;行为-&gt;文件编码</code>:<br>　　默认编码: <strong>System</strong> (简体中文 <strong>windows</strong> 系统默认指的是 <strong>GBK</strong> 编码，即下拉框选项里的 <strong>GBK/windows-936-2000/CP936/MS936/ windows-936</strong>)<br>　　<font color="#D3442D">注： 这些是不是和我上面说的差不多，其实我是参考人家的，现在看来，其实也验证了我上面的说法。</font><br>二、<strong>编码知识科普</strong><br>　　<strong>Qt</strong> 常见的两种编码是: <strong>UTF-8</strong> 和 <strong>GBK</strong><br>　　★ UTF-8： <strong>Unicode TransformationFormat-8bit</strong>，允许含 <strong>BOM</strong>，但通常不含 <strong>BOM</strong>。是用以解决国际上字符的一种多字节编码，它对英文使用 8 位（即一个字节），中文使用 24 位（三个字节）来编码。<strong>UTF-8</strong> 包含全世界所有国家需要用到的字符，是国际编码，通用性强。<strong>UTF-8</strong> 编码的文字可以在各国支持 <strong>UTF8</strong> 字符集的浏览器上显示。如，如果是 <strong>UTF8</strong> 编码，则在外国人的英文 IE 上也能显示中文，他们无需下载 IE 的中文语言支持包。<br>　　★ <strong>GBK</strong> 是国家标准 <strong>GB2312</strong> 基础上扩容后兼容 <strong>GB2312</strong> 的标准。<strong>GBK</strong> 的文字编码是用双字节来表示的，即不论中、英文字符均使用双字节来表示，为了区分中文，将其最高位都设定成 1。<strong>GBK</strong> 包含全部中文字符，是国家编码，通用性比 <strong>UTF-8</strong> 差，不过 <strong>UTF-8</strong> 占用的数据库比 <strong>GBK</strong> 大。<strong>GBK</strong> 是 <strong>GB2312</strong> 的扩展，除了兼容 <strong>GB2312</strong> 外，它还能显示繁体中文，还有日文的假名。<br>　　★ <strong>GBK</strong>、<strong>GB2312</strong> 等与 <strong>UTF-8</strong> 之间都必须通过 <strong>Unicode 编码</strong> 才能相互转换：<br>　　　GBK、GB2312－－Unicode－－UTF8<br>　　　UTF8－－Unicode－－GBK、GB2312<br>　　★在简体中文 <strong>windows</strong> 系统下，<strong>ANSI 编码</strong> 代表 <strong>GBK/GB2312</strong> 编码，<font color="green"><strong>ANSI</strong>  通常使用 <code>0x80&lt;sub&gt;0xFF</code> 范围的 2 个字节来表示 1 个中文字符</font>。<code>0x00&lt;/sub&gt;0x7F</code> 之间的字符，依旧是 1 个字节代表 1 个字符。<strong>Unicode(UTF-16)</strong> 编码则所有字符都用 2 个字节表示。<br>　　<font color="#D3442D">注：这里贴给大家先做个了解，大概的疑惑应该会有：<br>　　　1、什么是 <strong>UTF-8</strong> 和 <strong>GBK</strong>，他们是怎样表示汉字和英文的？<br>　　　2、<strong>UTF-8</strong> 有带不带 <strong>BOM</strong> 之分，究竟什么是 <strong>BOM</strong> 呢？<br>　　　3、<strong>GBK</strong> 中英文都用两个字节表示，为了区分中文，将其最高位都设定为 1，这种区分似乎挺重要的，我要仔细了解一下！<br>　　　4、这中间提到的 <strong>GB2312</strong> 和 <strong>Unicode</strong> 编码又是什么？<br>　　　5、<strong>ANSI</strong> 中 <code>0x00&lt;sub&gt;0x7F</code> 之间的字符，依旧是 1 个字节代表 1 个字符，<code>0x00&lt;/sub&gt;0x7F</code>是不是就是最常见的 <strong>ASCII</strong> 编码，起码他们的范围是一致的，而且都是一个字节。<br><br>　　　这些疑惑相信你后续都会弄明白的。不过这里说的 <strong>Unicode</strong> 编码，就像作者后面 <strong>(UTF-16)</strong> 这个括号加上去一样，他应该指的是 <strong>UTF-16</strong> 这种编码方式。而 <strong>Unicode</strong>，更准确的理解，它应该是一种字符集。那你<font color="green">可能会疑惑，字符集又是什么，他跟编码方式为什么不能一概而论，有什么区别？</font>另外这里说的，<strong>UTF-16</strong> 编码则所有字符都用两个字节表示，其实不太对，<strong>UTF-16</strong> 跟 <strong>UTF-8</strong> 一样，都是变长编码方式(你一定会想到有变长肯定有定长之说，的确，那二者有什么区别呢？)。此外，不只 <strong>UTF-8</strong> 有 <strong>BOM</strong>，<strong>UTF-16</strong> 也有 <strong>BOM</strong>，而且，<strong>UTF-8</strong> 的 <strong>BOM</strong> 可有可无，<font color="green"><strong>UTF-16</strong> 的 <strong>BOM</strong> 可是有大用处，也是 <strong>BOM</strong> 的本质由来，区分大小端——那什么是大小端？怎么区分法？</font>这些你先大致了解，后续会让你明白的。</font><br>三、<strong>编码转换</strong><br>　　<strong>UTF-8</strong> 与 <strong>ANSI</strong> （即 <strong>GBK</strong>）的互转,可以使用 <strong>EditPlus</strong> 工具”文件另存为”或者 <strong>Encodersoft</strong> 编码转换工具对 <strong>.cpp</strong> 和 <strong>.h</strong> 源文件文本进行批量转换。<br>　　<font color="#D3442D">注：我试了下 <strong>EditPlus</strong> 工具，哭晕了，不好用的啦。后来发现 <strong>NotePad++</strong> 似乎更好用好多。怎么用嘛，<a href="http://durant35.github.io/2016/02/02/tool_NotePad/#more">看这里</a>。</font><br>四、<strong>Qt 编码指定</strong><br>　　<strong>Qt</strong> 需要在 <strong>main()</strong> 函数指定使用的字符编码:<br>　　　<code>#include &lt;QTextCodec&gt;</code><br>　　　<code>QTextCodec *codec = QTextCodec::codecForName(&quot;GBK&quot;);</code>　//情况 2 是此处 <strong>“GBK”</strong> 变为 <strong>“UTF-8”</strong><br>　　　<code>QTextCodec::setCodecForTr(codec);</code><br>　　　<code>QTextCodec::setCodecForLocale(codec);</code><br>　　　<code>QTextCodec::setCodecForCStrings(codec);</code><br>　　这里只列举大家最常用的3个编译器（<strong>微软VS的中的cl</strong>，<strong>Mingw中的g++</strong>，<strong>Linux下的g++</strong>），源代码分别采用 <strong>GBK</strong> 和 <strong>无BOM的UTF-8</strong> 以及 <strong>有BOM的UTF-8</strong> 这 3 种编码进行保存，发生的现象如下表所示。<br>    <center><img src="/img/programPearls/encoding/encodingResult.png" width="640px"/></center><br>　　<font color="#D3442D">注：上面的现象似乎挺对的，反正我们在 <strong>Win</strong> 下使用 <strong>VS2013的cl编译器</strong>，保存成 <code>不带BOM的UTF-8</code> 出现上面的错误，编译确实不通过。至于其他平台，有兴趣你就去试试吧，反正姑且我是信了他。至于这其中的乱码解决方案，尝试了一下，才发现，<code>setCodecForTr</code> 和 <code>setCodecForCStrings</code> 这两个 <strong>API</strong> 在 <strong>Qt5</strong> 及以上版本已经不存在了，这一部分是通过阅读这一篇博客了解到<a href="http://blog.csdn.net/dbzhang800/article/details/7325698">《QTextCodec中的setCodecForTr等终于消失了 (Qt5)》</a>，下面是这篇<a href="#blog_analysis">博客的摘要及分析。</a>所以，这一篇文章到此处，只能说他提出的解决方案并不太好，已经被人舍弃了，而且这个解决方案也不适用于我目前的情况，谁叫我的版本已经是最新的 <strong>Qt5.5</strong> 了呢…</font><br>五、<strong>应用案例</strong><br>　　<strong>QCom</strong> 跨平台串口调试助手(<a href="http://www.qter.org/?page_id=203">http://www.qter.org/?page_id=203</a>)<br>　　　　… …<br><br>　　<font color="#D3442D">注：这一部分主要说了作者自己的一个开源项目，串口调试助手，看了一下，有相关需要再借鉴参考；另外就是上面我们提到的不带 <strong>BOM</strong> 的 <strong>UTF-8</strong> 保存的话会报的错，只能改成其他其他编码了，反正 <strong>UTF-8</strong> 一定要带 <strong>BOM</strong> 就是了；至于他解决乱码的方式，使用的是 <strong>Qt5</strong> 以下的那种，上面也提到说已经被拧掉，加上我们这里是 <strong>Qt5</strong> 以上，就不说他了。</font><br>六、<strong>结论</strong><br>　　①、<strong>Windows</strong> 环境下，<strong>Qt Creator</strong> + <strong>微软VS编译器</strong>，新建工程，<br>　　　1、如果该工程不需要跨平台使用（只在 <strong>win</strong>），那么工程设置请使用 <strong>GBK</strong> 的编码方式.<br>　　　2、如果该工程要跨平台使用（<strong>win+linux</strong>），那么工程设置请使用 <strong>UTF-8+BOM</strong> 的编码方式.<br>　　②、<strong>Linux</strong> 环境下，<strong>Qt Creator+gcc</strong>，新建工程，<br>　　　没有 <strong>GBK</strong> 编码可选，默认是 <strong>UTF-8(无BOM)</strong> 编码方式，考虑到跨平台，建议选择 <strong>UTF-8+BOM</strong> 的编码方式.<br>　　<font color="#D3442D">注：这一个，个人觉得大致是可行的，只不过，<strong>Qt5</strong> 之后，所有的东东好像都是 <strong>UTF</strong> 为默认，比如 <strong>QString</strong> 就是默认按照 <strong>UTF-16</strong> 保存的，所以估计 <strong>GBK</strong> 这一套行不通。考虑到跨平台，也建议全都使用 <strong>UTF-8+BOM</strong> 的编码方式保存，至于乱码的解决方案，下面会跟大家详细说明。</font><br>七、<strong>参考文献</strong><br>　　<strong>Qt</strong> 中文乱码问题 <a href="http://blog.csdn.net/brave_heart_lxl/article/details/7186631">http://blog.csdn.net/brave_heart_lxl/article/details/7186631</a><br></font></div>

<p>　　所以，到底这篇博客还是搞不定我们的问题呀，怎么办呢？上面不是说到，阅读期间按照博主的方法试了一下发现那两个 <strong>API</strong> 行不通吗。后来就把这个跟 <strong>Qt</strong> 版本有关的问题一搜，找到另外一篇<span id="blog_analysis"><a href="http://blog.csdn.net/dbzhang800/article/details/7325698">《QTextCodec中的setCodecForTr等终于消失了 (Qt5)》</a><span>，这篇文章内容比较散，就把读后认为比较重要的内容记录在下：</p>
<div style="background-color: #CFD5DB"><font color="blue"><br>　　<font color="#D3442D">博客前面部分正是对上述博客 <strong>《解决 Qt 中文乱码以及汉字编码的问题（UTF-8/GBK）》</strong> 中提出的该种解法的说词，道出这种解法的不合理以及最终在 <strong>Qt5</strong> 中这两个 <strong>API</strong> 木有了，终于让这种乱套解法到头了！</font><br>　　在 Qt5 中，这两个函数：<br>　　　QTextCodec::setCodecForTr(…)<br>　　　QTextCodec::setCodecForCStrings(…)<br>　　被直接去掉了。这样一来，受影响的直接是如下代码了：<br>　　　QString s1 = “我是中文”;<br>　　　QString s2(“我是中文”);<br>　　　QString s3 = QObject::tr(“我是中文”);<br>　　<font color="#D3442D">通过这篇博客，了解到上面的”我是中文”，以及我们上述示例中的”调试助手”和”应用开发”是 <strong>const char*窄字符串</strong>，因为其中包含了中文，所以出现了乱码。<br>　　博客说道：</font><br>　　现在 <strong>Qt5</strong> 中尽管去掉了<strong>setCodecXXX</strong> 这两个函数，但是默认编码还是 <strong>latin-1</strong>。如果你要想使用”我是中文”这样的字符串，必须自己使用 <strong>QTextCodec</strong> 或这 <strong>QString::fromXXX</strong> 这种东西进行转换。<br>　　<font color="#D3442D">却又说到：</font><br>　　<strong>Qt5</strong> 发布之时，默认将会是 <strong>utf8</strong> 编码，完全可以将你从 <strong>Qt</strong> 编码问题解放出来。如果你在 <strong>Windows</strong> 下，且使用的是 <strong>MinGW</strong>，那么只要你将源码文件保存成 <strong>utf8</strong>，下面的代码将直接可以工作（无须其他设置）<br>　　　QString s1 = “我是中文”;<br>　　　QString s2(“我是中文”);<br>　　　QString s3 = QObject::tr(“我是中文”);<br>　　如果你在其他平台了，那么应该都默认是<strong>utf8</strong> 文件。同样无须进行设置。<br>　　<font color="#D3442D">那究竟默认编码是 <strong>latin-1</strong> 还是 <strong>utf-8</strong> 啊喂…后面会通过捣鼓 <strong>Qt</strong>，来验证说，<strong>QString</strong> 的默认编码应该不是这里说的 <strong>latin-1</strong>，而应该是 <strong>UTF</strong>，至于是不是 <strong>utf-8</strong>，我就不太确定了，后面会说。还有，就是说 <strong>Qt5</strong> 之后其实不会让你遇到乱码的情况的，你随便写随便就不会有乱码，除非，就像我们踩到下面要说的这个坑一样，我们就奇迹般地遇到乱码了。</font><br><br>　　如果使用的是 <strong>MSVC2005/2008/2010</strong>，可能无法使用 <strong>utf8</strong> 编码，于是下面的代码<br>　　　QString s1 = “我是中文”;<br>　　　QString s2(“我是中文”);<br>　　　QString s3 = QObject::tr(“我是中文”);<br>　　将不会工作。因为<font color="green">从 <strong>MSVC2005</strong> 起，你无法给编译器设置字符串要使用的编码。尽管 2003 之前，也无法设置，但是它会遵循源码文件的编码；而 2005 就自作聪明了，即使你源码文件保存成 <strong>不带BOM的utf8</strong>，它都会试图帮你转换一下</font>。<br>　　<font color="#D3442D">下面 <a href="#vs2013">捣鼓一下 <strong>VS 2013</strong> </a>那部分会为大家充分说明这个，这里先解释一下，其实就是：<br/><br>　　　　1. <strong>VS</strong> 的 <strong>cl</strong> 编译器可不管你的源文件是什么编码格式，反正不乱码，编译器能读出来内容就行。那怎么读，也许你会问，无非就是通过各种编码方式的一些标记，其实很多时候就是 <strong>BOM</strong> 来识别，或者，像那种<strong>不带BOM</strong> 的 <strong>UTF-8</strong> 那样，他并不知道是什么，就笼统的用 <strong>ANSI</strong>（应该就是 <strong>GBK</strong>）解码，反正一般死不了，因为语言标识符都是英文字母，那就是 <strong>ASCII</strong> 嘛，<strong>utf-8</strong> 兼容 <strong>ASCII</strong>，<strong>GBK</strong> 也兼容，那就是一样一样的，无所谓。其他的不就是汉字注释，或者包含汉字的字符串嘛，注释对编译器又没什么卵用，至于包含汉字的字符串，那就，你源文件是什么字节数据我就照单收，我编译器读源文件本来就可以知道你一个字节一个字节是什么，我想大概是这样子的。<br>　　　　2. 这种他按照一个字节一个字节来也许是幸福的，因为他不知道你是什么，不敢乱改造你，这就带来，你字符串内存中的数据和你本来的字节数据会是一样的，编译器采用的编码方式并没影响。但是，那种他知道你内容的，比如说带 <strong>BOM</strong> 的 <strong>UTF-8</strong>，人家知道你三个字节的数据是一个汉字，他就自作聪明按照自己的编码方式（下面你会知道是 <strong>GBK</strong>）来处理，那么内存中就是这个汉字对应的两个字节的数据了（<strong>GBK</strong> 的话，而且这里只说常用字，也就是 <strong>BMP</strong> 之内的汉字，什么是 <strong>BMP</strong>，后续你就知道了），他处理什么的时候就变成两个字节了，比如输出到 <strong>console</strong>，这个还好，<strong>Window</strong> 下的 <strong>console</strong> 也几乎都是 <strong>GBK</strong> 的；输出到 <strong>UI</strong> 呢？就比如我们输出给 <strong>UTF-8</strong> 编码的 <strong>Qt</strong> 界面，结果就跪了，而且这个 <strong>UI</strong> 界面还不让改编码（我用 <strong>NotePad++</strong> 在 <strong>Qt Creator</strong> 外面动手脚，结果不是 <strong>UTF-8</strong> 编码的直接不让读！！可以的话，改成 <strong>GBK</strong> 估计会通)…<strong>GBK</strong> 的字节数据按照 <strong>UTF-8</strong> 来解码，造不出几个奇怪的字来，只会是一个字节就一个未知符(就像上面运行界面截图中的乱码)。</font><br></font></div>

<p>　　上文中提到的 <strong>QString::fromXXX</strong> 正是乱码问题的一个解决方案：<br>　　　　<strong>QString::fromLocal8Bit(“xxxx…”);</strong><br>　使用 <strong>fromLocal8Bit</strong> 对包含中文汉字的 <strong>窄字符串</strong> 进行处理。</p>
<p>　另外一个解决方案则是使用如下的预编译头修改执行字符集。本文后续部分会回顾并分析这两个解决方案。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*  </div><div class="line"> *  建议放置在源文件，放置在头文件好像每次都必须重新保存源文件才对源文件有影响</div><div class="line"> *  这个好像跟 C++ 预编译头 原理有关...</div><div class="line"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(5,0,0)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> defined(_MSC_VER) &amp;&amp; (_MSC_VER &gt; 1600)</span></div><div class="line">        <span class="comment">// Coding: UTF-8</span></div><div class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> execution_character_set(<span class="meta-string">"utf-8"</span>)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<h2 id="捣鼓一下VS-2013"><a href="#捣鼓一下VS-2013" class="headerlink" title="捣鼓一下VS 2013"></a><font color="#F40D64"><span id="vs2013">捣鼓一下VS 2013</span></font></h2><p>　　按照上述的方法确实把问题解决了，但是，为什么可以呢？ <strong>No Zuo No Die</strong>，可还是要 <strong>try</strong> 一 <strong>try</strong> 呀。想到这里的环境是基于 <strong>MSVC2013</strong>，隔着一层弄可能弄不出什么名堂，干脆先在纯生的 <strong>VS2013</strong> 上面捣鼓一下，看能不能看出点眉目。以下几个实验参考 <strong>开源中国社区</strong> <a href="http://www.oschina.net/question/179574_103974#answers">《Qt 5 中文显示问题》</a>。</p>
<p>　　　<font color="#D3442D" size="4"><strong>实验原理</strong></font><br>　　1. <strong>VS2013</strong> 如何修改源代码的编码方式：<br>　　　菜单栏 <strong>文件</strong> –&gt; <strong>高级保存选项</strong> –&gt; <strong>编码</strong>，对编码方式进行修改，然后保存即可生效。我这里默认的编码是 <strong>简体中文(GB2312) - 代码页936</strong>，涉及的编码主要是 <strong>Unicode(UTF-8 带签名) - 代码页65001、Unicode(UTF-8 无签名) - 代码页65001</strong> （还是那句话，<strong>GB2312</strong> 啊、<strong>Unicode</strong> 啊、<strong>代码页</strong> 啊后续会讲）。<br>　　2. 简体中文系统的本地编码(这里不严格的区分了，你可以看看这个<a href="http://www.crifan.com/files/doc/docbook/char_encoding/release/htmls/ansi_encoding.html">《2.6.6. 为何”ANSI编码”（在Windows中）被称为”本地编码”》</a>)是 <strong>GBK，代码页936</strong>；繁体中文系统则是 <strong>Big5，代码页950</strong>。<br>    <center><img src="/img/programPearls/encoding/ANSI-GBK.png" width="360px" style="float: left"/><img src="/img/programPearls/encoding/ANSI-Big5.png" width="360px"/></center><br>　　　<font color="#D3442D" size="4"><strong>实验(1)、默认(简体中文 GB2312 )编码格式的源代码</strong></font><br>　　新建普通的<strong> Win32 控制台应用程序</strong>，主函数所在源文件代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// executionEncoding.cpp : 定义控制台应用程序的入口点。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line">  </div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">  <span class="comment">/*</div><div class="line">   * Unicode 的码点分别是(十进制)： 中(20013)，文(25991)。</div><div class="line">   * UTF8 编码分别(16进制): 中(E4B8AD)，文(E69687)。</div><div class="line">   * GBK 编码16进制(GBK内码)分别是： 中(D6D0)，文(CEC4)。</div><div class="line">   * Unicode(UTF-16) 编码: 中(2d4e)，文(8765)。</div><div class="line">   * Big5编码： 中(A4A4)，文(A4E5)。</div><div class="line">   */</span></div><div class="line">  <span class="comment">// 不能写成：const char str* = "中文"; 这样变成sizeof(指针)了，大小就一直是4了(我的64位机子)</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"中文"</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// 数组的sizeof值等于数组所占用的内存字节数，-1去掉'\0'。</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(str) - <span class="number">1</span>; ++i)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, str[i] &amp; <span class="number">0xFF</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</div><div class="line">  <span class="comment">// Output:			</span></div><div class="line">  <span class="comment">// 0xd6 0xd0 0xce 0xc4</span></div><div class="line">  <span class="comment">// 中文</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><font color="red"><strong>分析： </strong></font><br>　　1. 所谓的默认编码(这里是指文件的默认编码)是 <strong>GB2312</strong>，实际上跟 <strong>GBK</strong> 不差啦，就认是 <strong>GB</strong> 的编码吧，和本地编码一致。<br>　　2. 没有编译错误也没有警告，输出也和源代码一致(你可以用 <strong>NotePad++</strong> 看一下)： <strong>“0xd6 0xd0 0xce 0xc4”</strong>，打印字符也能解码： <strong>“中文”</strong>。</p>
<p>　　　<font color="#D3442D" size="4"><strong>实验(2)、UTF-8 (带签名)格式的源代码</strong></font><br>　　代码不变，编码改为 <strong>Unicode(UTF-8 带签名) - 代码页65001</strong>，保存。<br/><font color="red"><strong>分析： </strong></font><br>　　1. 没有编译错误也没有警告，但是输出有问题： <strong>“0xd6 0xd0 0xce 0xc4”</strong>，还是和上面的一样，源文件明明是  <strong>UTF-8</strong> 编码的格式： <strong>“0xe4 0xb8 0xad 0xe6 0x96 0x87”</strong>，怎么变成了 <strong>“0xd6 0xd0 0xce 0xc4”</strong> (这个是”中文”的 <strong>GBK</strong> 编码)？<br>　　2. 长度也不对呀，应该是 6 个字节，怎么变成 4 个字节了呢？<br>　　3. 打印字符也能解码： <strong>“中文”</strong>，这不和上面的一个一个样嘛…奇了个怪了。</p>
<p>　　　<font color="#D3442D" size="4"><strong>实验(3)、UTF-8 (无签名)格式的源代码</strong></font><br>　　代码不变，编码改为 <strong>Unicode(UTF-8 无签名) - 代码页65001</strong>，保存。<br/><font color="red"><strong>分析： </strong></font><br>　　1. 没有编译错误但是有警告 <strong>“warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失”</strong>，潜台词就是，你这个代码有 <strong>GBK</strong>（代码页 936，见上图）不能表示的字符，请用 <strong>Unicode</strong> 方式保存。<strong>cl</strong> 编译器根本就没把源代码当作 <strong>UTF-8</strong> 处理，只是把它按照 <strong>GBK</strong> 编码方式处理罢了。<br>　　2. 不过输出和源代码是一致的： <strong>“0xe4 0xb8 0xad 0xe6 0x96 0x87”</strong> (这个是”中文”的 <strong>UTF-8</strong> 编码)。长度也是 6 个字节，这和源代码是一致的！<br>　　3. 但是（ <strong>Everything has a but</strong> ），打印字符乱码了，输出是： <strong>“涓枃”</strong>，这是什么鬼…</p>
<p>　　　<font color="#D3442D" size="4"><strong>实验(4)、使用 #pragma execution_character_set(“UTF-8”) 预编译头</strong></font><br>　　在源代码使用 <code>#pragma execution_character_set(&quot;UTF-8&quot;)</code> 预编译头：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// executionEncoding.cpp : 定义控制台应用程序的入口点。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line">  </div><div class="line"><span class="comment">// 目前只能带参数"UTF-8"，其他似乎不支持</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> execution_character_set(<span class="meta-string">"UTF-8"</span>)</span></div><div class="line">  </div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">  <span class="comment">/*</div><div class="line">   * Unicode 的码点分别是(十进制)： 中(20013)，文(25991)。</div><div class="line">   * UTF8 编码分别(16进制): 中(E4B8AD)，文(E69687)。</div><div class="line">   * GBK 编码16进制(GBK内码)分别是： 中(D6D0)，文(CEC4)。</div><div class="line">   * Unicode(UTF-16) 编码: 中(2d4e)，文(8765)。</div><div class="line">   * Big5 编码： 中(A4A4)，文(A4E5)。</div><div class="line">   */</span></div><div class="line">  <span class="comment">// 不能写成：const char str* = "中文"; 这样变成sizeof(指针)了，大小就一直是4了(我的64位机子)</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"中文"</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// 数组的sizeof值等于数组所占用的内存字节数，-1去掉'\0'。</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(str) - <span class="number">1</span>; ++i)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, str[i] &amp; <span class="number">0xFF</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</div><div class="line">  <span class="comment">// Output:			</span></div><div class="line">  <span class="comment">// 0xd6 0xd0 0xce 0xc4</span></div><div class="line">  <span class="comment">// 中文</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　重复试验(1)~(3)，试验结果如下：</p>
<center><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse; width: 840px"><tr><td style="width: 15%; text-align: center"><strong>源文件编码方式</strong></td><td style="width: 40%; text-align: center"><strong>试验结果</strong></td></tr><tr><td style="text-align: center">默认编码</td><td style="text-align: center">编译无错误无警告，输出： <strong>“0xe4 0xb8 0xad 0xe6 0x96 0x87”</strong> (这个是 <strong>“中文”</strong> 的 <strong>UTF-8</strong> 编码)，和源代码不一致；打印字符出现乱码，输出是： <strong>“涓枃”</strong></td></tr><tr><td style="text-align: center"><strong>UTF-8</strong> (带签名)</td><td style="text-align: center">编译无错误无警告，输出： <strong>“0xe4 0xb8 0xad 0xe6 0x96 0x87”</strong> (这个是 <strong>“中文”</strong> 的 <strong>UTF-8</strong> 编码)，和源代码一致；打印字符出现乱码，输出是： <strong>“涓枃”</strong>；输出结果与上一种情况一致</td></tr><tr><td style="text-align: center"><strong>UTF-8</strong> (无签名)</td><td style="text-align: center">编译无错误，还是报 <strong>“warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失”</strong> 这个警告，输出： <strong>“0xe6 0xb6 0x93 0xee 0x85 0x9f 0xe6 0x9e 0x83”</strong> (这个是 <strong>“涓枃”</strong> 的 <strong>UTF-8</strong> 编码)，和源代码相差甚大；打印字符出现乱码，输出是： <strong>“娑擃厽鏋?”</strong></td></tr></table></center>


<p><font color="red"><strong>分析： </strong></font><br>　　1. 可以借助各种在线查看工具查看字符编码情况，这里使用 <a href="http://www.mytju.com/classcode/tools/encode_utf8.asp">查看字符编码（UTF-8）</a>或者 <a href="http://www.qqxiuzi.cn/bianma/zifuji.php">汉字字符集编码查询</a>。<br>　　2. 目前这个预编译头好像只能带参数 <strong> “UTF-8”</strong>，其他似乎不支持…我试过 <strong> “UTF-16”</strong>，报了这样一个警告 <strong>warning C4695: #pragma execution_character_set: ‘UTF-16’ 不是受支持的参数:  当前仅支持”UTF-8”</strong>。</p>
<p>　　3. 我们可以在 <strong>CMD窗口右键</strong> -&gt; <strong>属性</strong> -&gt; <strong>选项</strong>，查看到用于打印的窗口的编码方式，实际上就是前面所述的本地编码，实验(1)~(4)均在简体中文系统下进行，本地编码是 <strong>GBK</strong>。此处可以知道：上述窗口打印的字符，实际上就是对前面输出字节按照 <strong>GBK</strong> 解码的输出结果。假如输出的是 <strong>UTF-8</strong> 编码，显然按照 <strong>GBK</strong>  无法解码出原有汉字，所以出现了乱码。例如：输出的 <strong>“涓枃”</strong> 的 <strong>GBK</strong> 编码正是 <strong>“0xe4 0xb8 0xad 0xe6 0x96 0x87”</strong>。</p>
<p>　　4. 虽然<font color="green">添加了预编译头，但是报的 <strong>warning</strong> 还是一样的，<strong>cl</strong> 编译器还是没把不带签名的源代码当作 <strong>UTF-8</strong> 处理，还是按照 <strong>GBK</strong> 编码方式处理</font>了。</p>
<p>　　　<font color="#D3442D" size="4"><strong>实验(5)、切换成繁体中文系统</strong></font><br>　　将系统从简体中文切换至繁体中文，可以参考 <a href="http://durant35.github.io/2016/02/02/System_Win8.1%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%B3%BB%E7%BB%9F%E5%88%87%E6%8D%A2%E5%88%B0%E7%B9%81%E4%BD%93%E4%B8%AD%E6%96%87%E7%B3%BB%E7%BB%9F/#more">《Win8.1简体中文系统切换到繁体中文系统》</a>，重复试验(1)~(4)。实验结果如下表：</p>
<center><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse; width: 840px"><tr><td style="width: 20%; text-align: center"><strong>源文件编码方式</strong></td><td style="width: 40%; text-align: center"><strong>试验结果</strong></td></tr><tr><td style="text-align: center"><strong>GB2312</strong> 编码，无预编译头</td><td style="text-align: center">编译无错误无警告，输出： <strong>“0xd6 0xd0 0xce 0xc4”</strong>(这个是 <strong>“中文”</strong> 的 <strong>GBK</strong> 编码)，和源代码一致；打印字符出现乱码： <strong>“笢恅”</strong></td></tr><tr><td style="text-align: center"><strong>UTF-8</strong> (带签名)，无预编译头</td><td style="text-align: center">编译无错误无警告，输出： <strong>“0xa4 0xa4 0xa4 0xe5”</strong>(这个是 <strong>“中文”</strong> 的 <strong>Big5</strong> 编码)，和源代码不一致；打印字符不出现乱码</td></tr><tr><td style="text-align: center"><strong>UTF-8</strong> (无签名)，无预编译头</td><td style="text-align: center">编译无错误，报 <strong>“warning C4819: 该文件包含不能在当前代码页(950)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失”</strong>，输出是： <strong>“0xe4 0xb8 0xad 0xe6 0x3f”</strong>（<strong>“Big5编码：e4b8(銝)ade6(剜)9687(未知)；GBK编码：e4b8(涓)ade6(非法)9687(枃)”</strong>），和源代码不一致；打印字符出现乱码： <strong>“銝剜?”</strong></td></tr><tr><td style="text-align: center"><strong>GB2312</strong> 编码，带预编译头</td><td style="text-align: center">编译无错误无警告，输出： <strong>“0xe7 0xac 0xa2 0xe6 0x81 0x85”</strong>(这个是 <strong>“笢恅”</strong> 的 <strong>UTF-8</strong> 编码)，和源代码不一致；打印字符也出现乱码： <strong>“蝚Ｘ?”</strong></td></tr><tr><td style="text-align: center"><strong>UTF-8</strong>（带签名），带预编译头</td><td style="text-align: center">编译无错误无警告，输出： <strong>“0xe4 0xb8 0xad 0xe6 0x96 0x87”</strong>（这个是 <strong>“中文”</strong> 的<strong>UTF-8</strong>编码），和源代码一致；打印字符出现乱码： <strong>“銝剜?”</strong></td></tr><tr><td style="text-align: center"><strong>UTF-8</strong>（无签名），带预编译头</td><td style="text-align: center">编译无错误，报 <strong>“warning C4819: 该文件包含不能在当前代码页(950)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失”</strong>，输出是： <strong>“0xe9 0x8a 0x9d 0xe5 0x89 0x9c 0x3f</strong>（这个是 <strong>“銝剜?”</strong> 的 <strong>UTF-8</strong> 编码），和源代码不一致；打印字符出现乱码： <strong>“???”</strong></td></tr></table></center>

<p><font color="red"><strong>分析： </strong></font><br>　　1. 繁体中文系统下默认编码似乎是：<strong>Unicode-代码页1200</strong>，为了与前面实验对比，这里需要修改为 <strong>简体中文(GB2312) - 代码页936</strong>。<br>　　2. 因为切换成繁体中文系统，可以查看到用于<font color="green">打印的 <strong>Console窗口</strong> 的编码方式虽然还是本地编码，但已经变成 <strong>Big5(大五码)</strong></font>。所以，上述窗口打印的字符，变成是对前面输出字节按照 <strong>Big5</strong>（不再是简体中文系统下的 <strong>GBK</strong> 了）解码的输出结果。而对于 <strong>UTF-8</strong> 编码或者是 <strong>GBK</strong> 编码，按照 <strong>Big5</strong> 编码还是无法解码出原有汉字，所以还是出现了乱码。</p>
<p>　　3. 为什么有的字节变成 <strong>“”</strong>，有的字节变成 <strong>“?”</strong> 呢？大致查了一下，<font color="blue"><strong>Big5</strong> 编码：”高位字节”使用了 <strong>0x81-0xFE</strong>，”低位字节”使用了 <strong>0x40-0x7E</strong>，及 <strong>0xA1-0xFE</strong>；而 <strong>GBK</strong> 编码：首字节在 <strong>0x81-0xFE</strong> 之间，尾字节在 <strong>0x40-0xFE</strong> 之间，剔除 <strong>0x??7F</strong> 一条线</font>。对比上面出现的 <strong>“”</strong>、<strong>“?”</strong>，你会发现，那些解码成 <strong>“?”</strong> 的，其字节数据均在合法范围内，只是对应的字符还未定义；而那些解码成 <strong>“”</strong>，其字节数据不全在合法范围内，属于非法字符。</p>
<p>　　4. 通过报的 <strong>warning</strong> 可以看出，<strong>cl</strong> 编译器还是没把不带签名的源代码当作 <strong>UTF-8</strong> 处理，不过并不是像在简体中文系统下按照 <strong>GBK</strong> 编码方式处理，而是按照 <strong>Big5</strong> 编码方式(代码页950)。</p>
<p>　　5. 结合前面的实验可知：加了预编译头之后，有点像先按照没加预编译头处理的结果再转换成 <strong>UTF-8</strong>。更准确地说，编译过程中，<strong>cl</strong> 编译器按照 <strong>Big5</strong> 或者 <strong>GBK</strong> 编码方式（分别对应繁体和简体中文系统，这里感觉说成 <strong>ANSI</strong> 更好）解码，如果添加了预编译头，再把解码的结果转化为 <strong>UTF-8</strong> 编码。最终解码结果即是汉字在内存中的保存方式（ <strong>GBK/Big5</strong> 为 2 个字节，<strong>UTF-8</strong> 一般为 3 个字节）。</p>
<p>　　6. 通过前面的实验，也可以大概猜测到，上述过程中，假如编译器按照 <strong>ANSI</strong> 解码，遇到非法字符（如简体中文系统下的 <strong>“涓枃”</strong> 中的 <strong>“0xad 0xe6”</strong>）或者未定义字符（如繁体中文系统下的 <strong>“銝剜?”</strong> 中的 <strong>“0x96 0x87”</strong>）：<font color="green">对于非法字符，保留原有字节数据；对于未定义字符，则有可能变成了 <strong>“?”(0x3f)</strong></font>。<font color="blue">而当这些情况发生时，<strong>cl</strong> 编译器发现这些字节数据并不是 <strong>ANSI</strong> 编码能表达的合理方式，因此也就出现了那个 <strong>C4819 编译警告</strong></font>。</p>
<p>　　7. 至于源文件的编码方式，实际上和上述过程没有联系，只是 <font color="green"><strong>cl</strong> 编译器不认得 <strong>UTF-8(无签名)</strong>，如果遇到这种编码方式保存的文件，会按照默认编码方式，即 <strong>ANSI</strong> 对源文件进行解码</font>。你可能会惊讶： <strong>Big5</strong> 不是有一点点不兼容 <strong>ASCII</strong> 吗?还好上面代码中的 <strong>keyword</strong> 都能准确解码。</p>
<p>　　8. 上述试验中，有些结果似乎与上述结论相违背，比如：实验(3)中输出结果： <strong>“0xe4 0xb8 0xad 0xe6 0x96 0x87”</strong>，这个确实是 <strong>“中文”</strong> 的<strong>UTF-8</strong> 编码。但是如果如上述结论所述，不是会被按照 <strong>GBK</strong> 解码成其他字符吗？字节数据应该会变的呀。又比如：实验(5)，源文件编码方式是 <strong>GB2312编码，无预编译头</strong>，怎么它的输出还是 <strong>“中文”</strong> 的 <strong>GBK</strong> 编码，不是会被按照 <strong>Big5</strong> 解码成其他字符吗？。反正就是这种输出和源文件编码一致的情况，令人摸不着头脑。对于这种情况，通过对比加没加预编译头，你就会发现，<font color="blue">虽然输出和源文件编码一致，但是对于程序来说，已经不是原先我们输入的 <strong>“中文”</strong> 字面值了，只是这些字节数据在这些 <strong>ANSI</strong> 编码中既不非法也不是未知字符，恰巧能表示另一个字符罢了</font>。带编译头的输出结果完全能说明这一点。</p>
<p>　<font color="#D3442D" size="4"><strong>实验(1)~(5)总结分析</strong></font><br>　　1. 使用繁体中文系统的情况属于少数，我们了解就好。<br>　　2. 简体中文系统，编码方式按照默认就行，源文件保存是 <strong>GBK</strong>（更准确说是 <strong>GB2312</strong>），编译器解码是 <strong>GBK</strong>，<strong>console(CMD)</strong> 窗口编码也是 <strong>GBK</strong>。<br>　　3. 如果涉及跨平台，<strong>UTF-8(无签名)</strong> 估计是没戏了（<strong>UTF-8</strong> 本来就不需要 <strong>BOM</strong>，<strong>Linux</strong> 默认编码好像就是这个)，会被 <strong>cl</strong> 编译器自作主张，那就使用 <strong>UTF-8(带签名)</strong>，不过需要添加预编译头 <code>#pragma execution_character_set(&quot;UTF-8&quot;)</code>，这一句的作用是，将 <font color="green"><strong>执行字符集</strong> 修改为  <strong>“UTF-8”</strong>。这里你也知道，不加的话，简体中文系统下估计这个 <strong>执行字符集</strong> 缺省就是 <strong>GBK</strong></font> 了。</p>
<h2 id="捣鼓一下基于VS2013构建套件的Qt"><a href="#捣鼓一下基于VS2013构建套件的Qt" class="headerlink" title="捣鼓一下基于VS2013构建套件的Qt"></a><font color="#F40D64">捣鼓一下基于VS2013构建套件的Qt</font></h2><p>　　捣鼓完 VS2013 之后，带着上述得出的结论，再来捣鼓 <strong>Qt5.5 MSVC2013</strong>，思路就清晰多了。新建 <strong>Qt Console Application</strong>，<strong>main.cpp</strong> 代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//#pragma execution_character_set("utf-8")</span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></div><div class="line"></span>&#123;</div><div class="line">  <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">  </div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"中文"</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(str)<span class="number">-1</span>; i++) &#123;    <span class="comment">// -1除去'\0'</span></div><div class="line">      <span class="built_in">printf</span>(<span class="string">"0x%02x "</span>, str[i]&amp;<span class="number">0xFF</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\n%s\n"</span>, str);</div><div class="line">  <span class="comment">// 简体中文系统Output:</span></div><div class="line">  <span class="comment">// 0xe4 0xb8 0xad 0xe6</span></div><div class="line">  </div><div class="line">  <span class="comment">// 繁体中文系统Output:</span></div><div class="line">  <span class="comment">// A4 A4 A4 E5</span></div><div class="line">  <span class="keyword">return</span> a.exec();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实验结果如下：<br>　<font color="blue"><strong><1>、 </strong></font>按 <strong>编码<font color="green">[System]</font>保存</strong> → <strong>Build</strong> → <strong>Run</strong>，结果是：<strong>“0xd6 0xd0 0xce 0xc4”</strong>，打印字符不出现乱码：<strong>“中文”</strong>；<br>　<font color="blue"><strong><2>、 </strong></font>预设<strong>UTF-BOM</strong> 选项：<strong>如果编码是UTF-8则添加</strong>，按 <strong>编码<font color="green">[UTF-8]</font>保存</strong> → <strong>Build</strong> → <strong>Run</strong>，结果也是：<strong>“0xd6 0xd0 0xce 0xc4”</strong>，打印字符不出现乱码：<strong>“中文”</strong>；<br>　<font color="blue"><strong><3>、 </strong></font>预设<strong>UTF-BOM</strong> 选项：<strong>总是删除</strong>，按 <strong>编码<font color="green">[UTF-8]</font>保存</strong> → <strong>Build</strong> → <strong>Run</strong>，结果是：<strong>“0xe4 0xb8 0xad 0xe6 0x96 0x87”</strong>，打印字符出现乱码：<strong>“涓枃”</strong>；<br>　<font color="blue"><strong><4>、 ······</strong></font><br>　<font color="blue"><strong><5>、 </strong></font>实验结果和上面一节 <font color="#F40D64"><strong>《捣鼓一下VS 2013》</strong></font> 其实是完全一致的！这也不奇怪，本身用的就是同一个编译器，编译运行环境应该是一致的。</p>
<p>唯一的区别可能就是：<br>　假如是一个 <font color="green"><strong>Qt Widgets Application</strong> 工程，源文件按照 <strong>不带BOM 的UTF-8</strong> 保存，不仅仅只是简单的一个编译警告，而是还会出现像 <font color="#F40D64"><strong>《解决方案》</strong></font> 一节开头说的那个令人大跌眼镜的错误：<font color="#E36565"><strong>error: C2001</strong>: 常量中有换行符</font> ！！</font><br>    <center><img src="/img/programPearls/encoding/noBOM_error.jpg"/></center></p>
<p>　<font color="#D3442D" size="4"><strong>问题透析，再捣鼓</strong></font><br>　　在已经有了上述经验的基础上，我们重新回顾一下前面提出的问题。发现我们似乎忽略了一个地方，那就是 <strong>隐式类型转换</strong>！<br>　　<strong><code>setTabText</code></strong> 的函数原型是：<strong>setTabText (int index, const QString &amp; label)</strong>，所以这里是不是应该存在一个 <strong>字符串</strong> 转 <strong>QString</strong> 的过程呢？从这篇文章 <a href="http://blog.csdn.net/brave_heart_lxl/article/details/7186631">《qt中文乱码问题》</a> 我们明确以下概念：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">明确概念0：</div><div class="line">　　"我是汉字" 是C语言中的字符串，它是char型的窄字符串。</div><div class="line">  </div><div class="line">明确概念1：</div><div class="line">　　源文件是有编码的，但是这种纯文本文件却不会记录自己采用的编码</div><div class="line">  </div><div class="line">明确概念2：</div><div class="line">　　如同我们都了解的'A'与'\x41'等价一样。</div><div class="line">　　GBK编码下的</div><div class="line">　　　　const char * str = "我是汉字";　　等价于</div><div class="line">　　　　const char * str = "\xce\xd2\xca\xc7\xba\xba\xd7\xd6";</div><div class="line">  </div><div class="line">　　当用UTF-8编码时，等价于</div><div class="line">　　　　const char * str = "\xe6\x88\x91\xe6\x98\xaf\xe6\xb1\x89\xe5\xad\x97";</div><div class="line">注意：这个说法不全对，比如保存成带BOM的UTF-8，用cl编译器时，汉字本身是UTF-8编码，但程序内保存时却是对应的GBK编码。</div></pre></td></tr></table></figure></p>
<p>　　所以，此处存在 <strong>const char*</strong> 到 <strong>QString</strong> 隐式类型转化的过程，另外，通过上面的捣鼓，我们很容易理解 <font color="red"><strong>注意</strong></font> 部分的内容：执行字符集确定了上述 <strong>窄字符串</strong> 在内存中的编码方式，说到底，内存中保存的都是 <strong>01010…</strong>，是通过执行字符集解码获得的。</p>
<p>　　另外，从这里 <a href="http://www.cnblogs.com/findumars/p/4011848.html">《QString够绕的，分为存储(编译器)和解码(运行期)，还有VS编译器的自作主张，还有QT5的变化》</a> 了解到 <strong>QString</strong> 分为 <strong>存储(编译器)</strong> 和 <strong>解码(运行期)</strong>，由于我们的隐式类型转化显然发生在运行期，也就是通过  <strong>窄字符串</strong> 参数提供的字节数据构造 <strong>QString</strong>，那么他使用的解码方式是？我们通过下面代码进行测试：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ui-&gt;tabWidget-&gt;setTabText(<span class="number">0</span>, <span class="string">"\xe4\xb8\xad\xe6\x96\x87"</span>);   <span class="comment">// UTF-8 编码序列</span></div><div class="line">ui-&gt;tabWidget-&gt;setTabText(<span class="number">1</span>, <span class="string">"\xd6\xd0\xce\xc4"</span>);           <span class="comment">// GBK 编码序列</span></div><div class="line">ui-&gt;tabWidget-&gt;setTabText(<span class="number">2</span>, <span class="string">"\xA4\xA4\xA4\xE5"</span>);           <span class="comment">// Big5 编码序列</span></div><div class="line">ui-&gt;tabWidget-&gt;setTabText(<span class="number">3</span>, <span class="string">"\x4e\x2d\x65\x87"</span>);           <span class="comment">// UTF-16 编码序列</span></div></pre></td></tr></table></figure></p>
<p>　　运行结果如下图：<br>    <img src="/img/programPearls/encoding/QString_encoding.png"/><br>　　所以此处大胆推测，上述隐式类型转化过程，会通过调用 <strong>QString::fromUtf8(“xxx…”)</strong> 动态构造 <strong>QString</strong>，至此，就不难解释前面出现的乱码问题和相应的解决方案了！</p>
<p>　　<strong>乱码问题原因：</strong> <strong>cl</strong> 编译器的默认执行字符集是 <strong>GBK</strong>，这造成不管你的源码文件是哪一种编码方式（<strong>cl</strong> 编译器不能识别不带 <strong>BOM</strong> 的 <strong>UTF-8</strong> 编码方式保存的文件，会按照默认的 <strong>GBK</strong> 编码方式解码源文件），编译时都会按照执行字符集对解码结果进行重新编码，而这就是数据（如这里的窄字符串）最终在内存中的存储形式！<br>　　另外，<strong>setTabText</strong> 函数存在一个 <strong>QString</strong> 的隐式构造过程，采用 <strong>UTF-8</strong> 编码方式动态解码，结果，原本按照 <strong>GBK</strong> 编码保存的字节数据被按照 <strong>UTF-8</strong> 编码进行解码，所以出现了乱码！</p>
<p>　　<strong>方案一思路：</strong> 因为默认情况下，是按照 <strong>GBK</strong> 编码对解码的数据进行编码的，也就是 <strong>QString</strong> 隐式构造过程中的字节数据是按照 <strong>GBK</strong> 编码的。所以，只要我们在构造 <strong>QString</strong> 采取正确的解码方式 <strong>GBK</strong>，就能正确构造 <strong>QString</strong> ，从而避免乱码。 <strong>QString::fromLocal8Bit ( const char * str, int size = -1 )</strong> 中的 <strong>local8Bit</strong> 在简体中文 <strong>Windows</strong> 下，是 <strong>GBK</strong>；在繁体中文 <strong>Windows</strong> 下，则是 <strong>Big5</strong>；所以实际上 <strong>local8Bit</strong> 对应的编码方式就是我们接下来会了解的 <strong>ANSI</strong> 编码。此外，上面漏说的一个是，从对 <strong>VS2013</strong> 的捣鼓结果来看，这个执行字符集更准确来说，也是 <strong>ANSI</strong> 编码，参考 <strong>简体中文/繁体中文</strong> 系统下的不同结果可以得出。<br>　　故，使用 <strong>QString::fromLocal8Bit ( const char * str, int size = -1 )</strong> 可以解决我们的乱码问题。而且，为了保证运行结果与源文件保持一致，我们的源文件编码方式也最好采用 <strong>GBK/GB2312</strong> 编码方式保存。</p>
<p>　　<strong>方案二思路：</strong> 另一种思路就是，既然 <strong>QString</strong> 的隐式构造过程中采用 <strong>UTF-8</strong> 编码方式动态解码，我们可不可以在编译时就把数据按照 <strong>UTF-8</strong> 编码方式进行保存呢？答案是可以的，就像我们从 <strong>VS2013</strong> 的捣鼓得到的结果一样，通过 <strong><code>#pragma execution_character_set(&quot;utf-8&quot;)</code></strong> 即可实现。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*  </div><div class="line"> *  建议放置在源文件，放置在头文件好像每次都必须重新保存源文件才对源文件有影响</div><div class="line"> *  这个好像跟 C++ 预编译头 原理有关...</div><div class="line"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(5,0,0)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> defined(_MSC_VER) &amp;&amp; (_MSC_VER &gt; 1600)</span></div><div class="line">        <span class="comment">// Coding: UTF-8</span></div><div class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> execution_character_set(<span class="meta-string">"utf-8"</span>)</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>　　建议采用上述的参考代码，因为预编译头的使用涉及 <strong>Qt</strong> 版本（似乎大于 5.0 才有用），<strong>VS</strong> 版本（如上面所说，VS2005 以后）；此外留意上面的注释说明，即注意这部分预编译头在代码中的位置！！而且，为了保证运行结果与源文件保持一致，我们的源文件编码方式则最好采用 <strong>UTF-8</strong> 编码方式保存，而且必须 <strong>带 BOM</strong>。</p>
<p>　　最后，我们来讨论一下，为什么 <font color="green"><strong>Qt</strong> 中在 <strong>UI</strong> 设计过程中编辑的中文字符不会出现乱码的问题</font>。比如，你可以在 <strong>UI</strong> 设计时通过修改 <strong>QTabWidget</strong> 的 <strong>currentTabText</strong> 来设置选项卡标签，从而快速实现文章开头的代码功能。这里我们通过这种方式添加两个标签：<strong>调试助手</strong>、<strong>应用开发</strong>，你会发现，通过这种方式很容易就实现我们需要的功能！重要的是不会出现乱码！那这又是怎么实现的？或者说 <strong>Qt</strong> 工程是如何将 <strong>UI</strong> 界面的 <strong>XML</strong> 文件引入到工程的，毕竟我们的项目，或者说我们知道 <strong>Qt</strong> 最终都是通过 <strong>C++</strong> 来编译构建的。</p>
<p>　　实际上， <strong>Qt</strong> 在编译的过程中会自动使用一个叫 <font color="green"><strong>uic.exe</strong> 的工具（这个工具可以在<strong>“Qt根目录\5.5\msvc2013_64\bin”</strong> 找到）</font>将 <strong>UI</strong> 界面的 <strong>XML</strong> 文件转化为 <strong>.h</strong> 头文件，比如这里，<strong>mainwindow.ui</strong> 文件就被转化为 <strong>ui_mainwindow.h</strong> 文件，并在 <strong>mainwindow.cpp</strong> 中通过 <strong><code>#include &quot;ui_mainwindow.h&quot;</code></strong> 的方式引入。那究竟这个 <strong>ui_mainwindow.h</strong> 头文件长怎么样？怎样能够实现 <strong>UI</strong> 设计与执行代码分离，最后又能够整合在一起呢？<br>　　这个 <strong>ui_mainwindow.h</strong> 头文件似乎只是一个中间临时文件，在 <strong>工程目录</strong> 或者 <strong>生成目录</strong> 都找不到它的影子，需要我们手动生成，生成过程如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">手动生成ui文件对应类：</div><div class="line">　　ui文件只是一个xml文件，编译器是不认识的，所以qt做了一个uic.exe的工具，</div><div class="line">　　会将ui文件（xml）默认编译成ui_xxx.h（编译过程如下描述），</div><div class="line">　　这样编译器就能使用designer做出来的界面文件了，你在mainxxx.cpp中包含的头文件就是上面提到的ui_xxx.h，</div><div class="line">　　你可以打开这个文件看一下(右键 → Open Include Hierarchy → 打开ui_xxx.h)，</div><div class="line">　　其实就是用代码描述了你在disigner中画的界面。</div><div class="line">  </div><div class="line">　　命令：</div><div class="line">　　　　cd D:\Workspace\Qt Workspace\Demo			@进入界面文件 xxx.ui 所在目录</div><div class="line">　　　　d:						@通过此方式切换盘符</div><div class="line">　　　　<span class="built_in">set</span> path=S:\Qt\<span class="number">5.5</span>\msvc2013_64\bin;%path%		@把 uic.exe 路径追加到当前 CMD 的 path 中</div><div class="line">              @只对当前窗口有效</div><div class="line">　　　　uic mainwindow.ui &gt; ui_mainwindow.h 		@生成.ui 对应的.h 文件，并保存在 ui_xxx.h 文件中</div></pre></td></tr></table></figure></p>
<p>　　生成的 <strong>ui_xxx.h</strong> 头文件结构大致如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/********************************************************************************</div><div class="line">** Form generated from reading UI file 'mainwindow.ui'</div><div class="line">**</div><div class="line">** Created by: Qt User Interface Compiler version 5.5.1</div><div class="line">**</div><div class="line">** WARNING! All changes made in this file will be lost when recompiling UI file!</div><div class="line">********************************************************************************/</span></div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UI_MAINWINDOW_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UI_MAINWINDOW_H</span></div><div class="line">  </div><div class="line"><span class="comment">// 此处有一系列 include，包括选项卡相关的 QtWidgets 等相关类</span></div><div class="line">...</div><div class="line">  </div><div class="line">QT_BEGIN_NAMESPACE</div><div class="line">  </div><div class="line"><span class="keyword">class</span> Ui_MainWindow</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// 界面中使用的一系列控件的成员声明，包括QWidget(选项卡主框架)、QTabWidget(选项卡标签)、QPushButton(按钮)</span></div><div class="line">    ...</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setupUi</span><span class="params">(QMainWindow *MainWindow)</span></div><div class="line">    </span>&#123;</div><div class="line">        <span class="comment">// 成员变量的一系列初始化</span></div><div class="line">        ...</div><div class="line">  </div><div class="line">        retranslateUi(MainWindow);</div><div class="line">  </div><div class="line">        tabWidget-&gt;setCurrentIndex(<span class="number">0</span>);</div><div class="line">  </div><div class="line">        <span class="comment">// 信号槽机制！！</span></div><div class="line">        QMetaObject::connectSlotsByName(MainWindow);</div><div class="line">    &#125; <span class="comment">// setupUi</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retranslateUi</span><span class="params">(QMainWindow *MainWindow)</span></div><div class="line">    </span>&#123;</div><div class="line">        <span class="comment">// 主界面标题、按钮、选项卡标签等涉及中文汉字的转义</span></div><div class="line">        ...</div><div class="line">  </div><div class="line">        <span class="comment">// 下面是左右两个标签"调试助手"、"应用开发"的转义</span></div><div class="line">        tabWidget-&gt;setTabText(tabWidget-&gt;indexOf(tab), </div><div class="line">        QApplication::translate(<span class="string">"MainWindow"</span>, </div><div class="line">                                        <span class="string">"\350\260\203\350\257\225\345\212\251\346\211\213"</span>, <span class="number">0</span>));</div><div class="line">        tabWidget-&gt;setTabText(tabWidget-&gt;indexOf(tab_2), </div><div class="line">        QApplication::translate(<span class="string">"MainWindow"</span>, </div><div class="line">                                        <span class="string">"\345\272\224\347\224\250\345\274\200\345\217\221"</span>, <span class="number">0</span>));</div><div class="line">    &#125; <span class="comment">// retranslateUi</span></div><div class="line">  </div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line">    <span class="keyword">class</span> MainWindow: <span class="keyword">public</span> Ui_MainWindow &#123;&#125;;</div><div class="line">&#125; <span class="comment">// namespace Ui</span></div><div class="line">  </div><div class="line">QT_END_NAMESPACE</div><div class="line">  </div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// UI_MAINWINDOW_H</span></span></div></pre></td></tr></table></figure></p>
<p>　<strong>uic.exe</strong> 工具将我们设计的 <strong>UI</strong> 界面文件转化为一个相关的类，并以头文件的形式提供给主程序，这就是我们上面提到的转化过程。<font color="green">注意这里有关中文汉字的转义，使用的是一种叫做 <strong>“八进制转义序列”（Octal Escape Sequence）</strong>，<strong>ui</strong> 生成的 <strong>UTF8</strong> 是用  <strong>C</strong> 语言的转义字符实现的，<strong>VC</strong> 不会私下做手脚，因此是能显示的。</font>举个例子，<strong>“调试助手”</strong> 的 <strong>“调”</strong> 的 <strong>UTF-8</strong> 编码是： <strong><code>E8 B0 83</code></strong>，使用的是十六进制，换成八进制，正是： <strong><code>\350\260\203</code></strong>，其他汉字字符均是按照这种方式进行转义的。</p>
<p>　有这样的理解：<br>　　只要代码知道 <strong><code>&quot;\350\260\203\350\257\225\345\212\251\346\211\213&quot;</code></strong> 这段转义是按照什么编码转义的，那么不管到哪都能最后生成唯一的 <strong>Unicode</strong> 字符串。<br>　　因为，这段转义文本（不是转义前的文本）不管是用 <strong>gbk</strong> 还是 <strong>utf8</strong> 编码的，<strong>ascii</strong> 字符的编码是对应的，到哪看都是 <strong><code>&quot;\350\260\203\350\257\225\345\212\251\346\211\213&quot;</code></strong>，而不会变成乱码，而你要是直接写中文就不好说了；<br>　　或者说，为了 <font color="green">避免源码字符集不同而导致最后程序的字符集不同，那些在不同字符集中有歧义的非 <strong>ascii</strong> 字符就要转义成上面这种形式才可以避免</font>！<br>　　注意，假如你在界面文件中输入 <strong>ASCII</strong> 字符，是不会发生上面的转化的！！</p>
<p>　所以，<font color="green">我们也可以在代码中仿造这种方式，直接使用中文汉字的<strong>（Octal Escape Sequence）</strong>，不过，这样转化实在太麻烦了，你不觉得烦吗？要先获取 <strong>UTF-8</strong>编码，再转成八进制！</font>，建议还是理解上面所述的内容，这样你就能够顺利、清晰的解决乱码问题！</p>
<h2 id="说在前头的总结"><a href="#说在前头的总结" class="headerlink" title="说在前头的总结"></a><font color="#F40D64">说在前头的总结</font></h2><ol>
<li>我们大概可以猜测到乱码的原因：无非就是编码方式与解码方式不一致造成。但！编码方式体现在哪里？编译时采用的编码方式？解码方式又体现在哪里？运行时使用的动态解码方式？</li>
<li>各种编码方式是怎样的?为什么方式不一致就会出现乱码呢？那有什么办法可以避免?</li>
<li>借 <strong>Qt</strong> 中文乱码问题的分析，拉开我们有关字符编码系列的阐述，在接下来的三篇文章里面，将会尽可能多的为大家讲述 <strong>字符编码</strong> 的相关概念和问题分析，希望能帮助大家建立这一块的知识网络。</li>
</ol>
<h2 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control "></a><strong>Version Control</strong> <center><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse; width: 92%"></h2><p><tr><td style="width: 80px; text-align: center">版本号</td><td style="width: 150px; text-align: center">日期</td><td style="width: 330px; text-align: center">内容</td><td style="width: 120px; text-align: center">作者</td></tr><tr><td style="text-align: center">V1</td><td style="text-align: center">2016.2.1</td><td style="text-align: center">起草博客、框架</td><td style="text-align: center">Tarantula-7</td></tr><tr><td style="text-align: center">V1.5</td><td style="text-align: center">2016.2.3</td><td style="text-align: center">添加两篇博文摘要</td><td style="text-align: center">Tarantula-7</td></tr><tr><td style="text-align: center">V2</td><td style="text-align: center">2016.2.5</td><td style="text-align: center">完成捣鼓VS2013部分</td><td style="text-align: center">Tarantula-7</td></tr><tr><td style="text-align: center">V3</td><td style="text-align: center">2016.2.29(返校)</td><td style="text-align: center">完成捣鼓一下基于VS2013构建套件的Qt部分</td><td style="text-align: center">Tarantula-7</td></tr><tr><td style="text-align: center">V4</td><td style="text-align: center">2016.3.1(在校)</td><td style="text-align: center">完成全部内容初稿</td><td style="text-align: center">Tarantula-7</td></tr><tr><td style="text-align: center">V4.1</td><td style="text-align: center">2016.3.2</td><td style="text-align: center">完成内容复审</td><td style="text-align: center">Tarantula-7</td></tr></table></center></p>
]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
            <tag> Qt </tag>
            
            <tag> VS2013 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Win8.1简体中文系统切换到繁体中文系统]]></title>
      <url>/2016/02/02/System_Win8.1%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%B3%BB%E7%BB%9F%E5%88%87%E6%8D%A2%E5%88%B0%E7%B9%81%E4%BD%93%E4%B8%AD%E6%96%87%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>　　今天在捣鼓<strong>VS2013</strong>的时候，出于验证<strong>VS2013</strong>默认执行字符集究竟是<strong>GBK</strong>还是<strong>ANSI</strong>，心想能不能把目前的<strong>Win8.1简体中文系统</strong>直接换成<strong>繁体中文系统</strong>，试一下再换回来。就搜了一下，果然有，虽然是百度经验<a href="http://jingyan.baidu.com/article/4ae03de3fabbe93eff9e6b1f.html">《win8.1简体系统切换到繁体系统》</a>，不过这种东西，百度还是可以信一下的，不行改回去应该不会死(有时就是这样死掉的，O(∩_∩)O哈哈~)。下面就是我Follow此百度经验切换的过程。<br><a id="more"></a></p>
<p>　<font color="#F40D64"><strong>格式</strong></font><br>　　打开<strong>控制面板</strong>，依次进入<strong>时钟、语言和区域</strong>、<strong>区域</strong>，打开下面的设置窗口(注意，下面截图均是本人Win8.1简体中文系统的原始配置，改回来的时候也是按照这些参数修改)。将第一栏的格式修改为<strong>“中文(繁体，台湾)”</strong>。<br>    <center><img src="/img/system/GBK2Big5_1.png" width="440px"/></center></p>
<p>　<font color="#F40D64"><strong>位置</strong></font><br>　　将当前位置改为<strong>“台湾”</strong>。<br>    <center><img src="/img/system/GBK2Big5_2.png" width="440px"/></center></p>
<p>　<font color="#F40D64"><strong>管理</strong></font><br>　　更改系统区域设置，改为<strong>“中文(繁体，台湾)”</strong>。<br>    <center><img src="/img/system/GBK2Big5_3.png" width="440px"/></center></p>
<p>　　在更改<strong>系统区域设置</strong>时可能回要求你先应用前面的<strong>格式</strong>、<strong>位置</strong>，确认即可。因此也建议按照上述这样的顺序进行修改。<strong>系统区域设置</strong>修改会要求重启，如果修改无误即可进入重启；否则则重新选择后应用也可进入重启或者手动重启。</p>
<p>　　重启可能因为生效需要时间，会有一会儿没动静。改回去原先配置就不需要这么久了。</p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> 系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NotePad++]]></title>
      <url>/2016/02/02/tool_NotePad/</url>
      <content type="html"><![CDATA[<p>　　简单说说<strong>NotePad++</strong>几个实用的地方，特别是在字符编码，字节查看这方面很有用处。<br><a id="more"></a></p>
<p>　　安装包嘛，我这里倒有个安装那时候的安装包 <a href="https://yunpan.cn/crDFPJBbEP9Pa">NotePad++ 6.8.8(Windows)<code>访问密码 05b7</code></a>，建议你大可直接百度去下载，也不大，不用钱。</p>
<h2 id="右键快捷方式"><a href="#右键快捷方式" class="headerlink" title="右键快捷方式"></a>右键快捷方式</h2><p>　　安装之后就可以使用右键快捷方式<strong>Edit with NotePad++</strong>，很方便，和<strong>Sublime Text</strong>一样。</p>
<h2 id="安装Hex-Editor插件"><a href="#安装Hex-Editor插件" class="headerlink" title="安装Hex-Editor插件"></a>安装Hex-Editor插件</h2><p>　　刚安装的<strong>NotePad++</strong>还不能以十六进制方式查看文件，需要安装个插件。菜单栏 <strong>插件</strong> –&gt;<strong>Plugin Manager</strong> –&gt;<strong>Show Plugin Manager</strong> 打开插件管理工具，在 <strong>Availabe </strong>栏中找到<strong> Hex-Editor </strong>，点击<strong> Install </strong>安装后重启即可在菜单栏 <strong>插件</strong> 中找到该插件，使用时点击<strong> View in HEX </strong>即可以十六进制方式查看文件(一个字节一个字节看)。这对于查看汉字在不同编码方式下的编码以及各种编码方式的标识(BOM)都非常方便。<br>    <center><img src="/img/tool/NotePad++_1.png" width="540px"/></center></p>
<h2 id="常见编码方式查看和保存"><a href="#常见编码方式查看和保存" class="headerlink" title="常见编码方式查看和保存"></a>常见编码方式查看和保存</h2><p>　　点击菜单栏<strong> 格式</strong>，可以清楚看到下面几种编码方式。<br>    <center><img src="/img/tool/NotePad++_2.png" height="640px"/></center><br>　　<strong>以…格式编码</strong>修改的是文件的查看方式，当阅读文件发生乱码时可以先<strong> View in HEX </strong>看一下是什么编码，然后以相应的编码查看即可。<br>　　<strong>转为…编码格式</strong>会修改文件的编码然后自动以相应的编码方式查看。建议在<strong>以…格式编码</strong>查看文件不出现乱码的时候在使用，转换后，也要记得保存才能生效。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　灵活结合 <strong>编码方式查看和保存</strong>以及<strong> View in HEX </strong>可以解决很多乱码问题以及了解一些编码相关的知识和做出一些解决方案。</p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> 小工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
            <tag> NotePad++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在hexo new之后立即打开Markdown文稿]]></title>
      <url>/2016/02/02/hexo_%E5%9C%A8hexo%20new%E4%B9%8B%E5%90%8E%E7%AB%8B%E5%8D%B3%E6%89%93%E5%BC%80%E6%96%B0%E5%BB%BA%E7%9A%84Markdown%E6%96%87%E7%A8%BF/</url>
      <content type="html"><![CDATA[<p>　　之前已经说过，在hexo中新建一篇博文非常简单，只需要在<strong>git bash</strong>中输入以下命令回车执行即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">new</span> <span class="string">"title"</span></div></pre></td></tr></table></figure></p>
<p>　　一般新建完之后，就需要对该博文源代码进行编辑，通常你需要依次打开<strong> hexo-home/source/_post</strong> 目录，然后在成堆的<strong>Markdown文件</strong>中找到刚才创建的文档<strong>title.md</strong>。虽然hexo以你输入的<strong>title</strong>来给你的<strong>Markdown文件</strong>命名，命名的不咋地(诸如，空格和<code>.</code>变成<code>-</code>，括号<code>(xxx)</code>变成<code>-xxx-</code>，而且通常我们需要为博文源代码文件名字加个前缀，这样更加容易管理)，你通常需要找到该文件，重新起个名字再打开，但是很多时候，命名的还是过得去的。藏在这么深的目录下，每次都得去找一番甚是烦人，有没有什么办法能够创建完(也就是敲个回车)之后自动帮我们用系统上已经安装的<strong>Markdown编辑器</strong>打开呢？<br><a id="more"></a></p>
<h2 id="搜寻"><a href="#搜寻" class="headerlink" title="搜寻"></a><font color="#F40D64">搜寻</font></h2><p>　　所以上网一搜，搜到这样一篇文章<a href="http://liam0205.me/2015/05/01/open-editor-after-hexo-new-immediately/">《在 hexo new 之后立即打开新建的 Markdown 文稿》</a>。内容嘛，这里就不多说了，大概的步骤我就摘在下面，有兴趣的你可以点进去看一下。</p>
<div style="background-color: #CFD5DB"><font color="blue"><br>　　Tommy<font color="#D3442D">　(就是弄这个Hexo的鼻祖，博主还说Hexo是其时为大学生的台湾人Tommy开发的轻量级静态博客生成器，具有简洁、快速、扩展性好等特点，我们都得感谢此大牛，真心感谢，这个好东西，太赞了！！)　</font>指出，可以在<strong> Hexo </strong>目录下的 <strong>scripts </strong>目录（若没有，则新建一个）中创建一个<strong>JavaScript 脚本</strong>，监听<strong> hexo new </strong>这个动作。并在检测到<strong> hexo new </strong>之后，执行编辑器打开的命令。<br>　　Tommy给出的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</div><div class="line"> </div><div class="line"><span class="comment">// Hexo 2.x</span></div><div class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</div><div class="line">  spawn(<span class="string">'vi'</span>, [path]);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="comment">// Hexo 3</span></div><div class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  spawn(<span class="string">'vi'</span>, [data.path]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br><br>　　<font color="#D3442D">博主就是参考这个代码，领悟到其精髓后，给出了自己实践可行的代码。</font><br>　　我<font color="#D3442D">　(是该博客博主，蓝色部分均摘自博客)　</font>使用的 Hexo 是 2.5.4 版本，然而，测试过 Tommy 给出的代码之后并没有顺利地打开编辑器。不过精髓已经理解，需要的就只是细节的改变了。<br>　　简单翻阅了一下 JavaScript 的语法规则，我尝试了下列 JavaScript 代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</div><div class="line"> </div><div class="line"><span class="comment">// Hexo 2.x</span></div><div class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</div><div class="line">    exec(<span class="string">'open -a "/Applications/Sublime Text.app" '</span> + path);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br><br>　　注意，我这里执行的系统命令，是 OS X 下的 open。换到 Windows 中，可能需要改为 start。<br></font></div>

<p>　　卧槽，博主有钱淫，用的是苹果机…我可是穷渣渣，只能用Windows，那他说可能改为<strong>start</strong>，我就试一下嘛，照着他说的一步一步来(如果你是苹果机，可以照着这里的代码改改看，应该可以吧，虽然我没试过)。</p>
<h2 id="试水"><a href="#试水" class="headerlink" title="试水"></a><font color="#F40D64">试水</font></h2><p>　　<strong>第一步： </strong><br>　　　在根目录新建一个文件夹<strong>scripts</strong>(因为本来没有，只能新建)，然后新建txt文本文件，重命名为 <strong>“open_editor_after_hexo_new_immediately.js”</strong>，这个在Windows下干活的人都知道吧，名字可以随便，不过我觉得这个名字比较好认，你以后可能要改也方便。</p>
<p>　　<strong>第二步： </strong><br>　　　随便用一个文本编辑器打开，我是习惯用<strong>Sublime Text</strong>。修改内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</div><div class="line"> </div><div class="line"><span class="comment">// Hexo 2.x 传进来的参数即是路径</span></div><div class="line"><span class="comment">/*</div><div class="line">hexo.on('new', function(path)&#123;</div><div class="line">    exec('"S:\\Hexo\\MarkdownPad2\\MarkdownPad2.exe" ' + "\"" + [path] + "\"");</div><div class="line">&#125;);</div><div class="line">*/</span></div><div class="line"></div><div class="line"><span class="comment">// Hexo 3 传进来的参数是一个&#123;&#125;定义的多属性对象，</span></div><div class="line"><span class="comment">//		参见"hexo根目录/node_modules/hexo/lib/plugins/console/new.js"</span></div><div class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    exec(<span class="string">'"S:/Hexo/MarkdownPad2/MarkdownPad2.exe" '</span> + <span class="string">"\""</span> + [data.path] + <span class="string">"\""</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="回头分析"><a href="#回头分析" class="headerlink" title="回头分析"></a><font color="#F40D64">回头分析</font></h2><p>　　其实上面的代码是经过近半个小时的折腾才弄出来的，亲测可用。现在说说这个过程顺便简单分析一下。<br>　　　1. 首先当然是试了博主的代码，只不过改了<strong>start</strong>，之前是知道<strong>start</strong>是<strong>CMD</strong>里面用于重新打开一个窗口的命令；还有就是，参考鼻祖的<strong>Hexo 3</strong>的代码，因为之前已经说过，我<strong>从2.x迁移到3了</strong>(你也看到上面Hexo 2.x部分被我注释掉了)。试了一下，报<code>-a</code>参数错误，肯定就把他删了再试，心想，而且知道这代码确实监听到我的<code>hexo new</code>命令了。<br>　　　2. 再new再回车，结果报<strong>“找不到文件D:/Workspace/Hexo”</strong>的错误，不过这个路径好像就是我Hexo根目录的路径，只不过，我那个是<strong>“D:/Workspace/Hexo Workspace”</strong>，我看到路径里面有个空格，想到以前曾经在<strong>CMD</strong>上踩过的坑，果断知道需要给路径加上个引号什么的。<br>　　　3. 还好之前也弄过一点<strong>Javascript</strong>，知道用个”+”来拼接就行了，就试了一下。显然你去弄的话也知道这里还需要灵活使用一下转义符<code>\</code>反斜杠。再试。<br>　　　4. 成功用我系统上的编辑器<strong>MarkdownPad2</strong>打开我新new的博文源代码。我也明白了，其中原理不过像我们在<strong>CMD</strong>里面敲的一样吗，只不过这个<strong>CMD</strong>起始路径不知道而已，我想应该就是<strong>Git Bash</strong>的路径吧(这里就是我的Hexo根目录<strong>“D:/Workspace/Hexo Workspace”</strong>)。反正我们上面用的都是绝对路径，这点就无所谓了。<br>　　　5. 想到这里，我想<strong>start</strong>也是没必要的，去掉一试，就成了上面的最终代码了。<br>　　之后也想弄清楚一下两个版本的代码为什么要不一样，心想传进来的其实都是函数的形式参数(本人有一点<strong>JS</strong>基础，不过跟其他语言在这一块原理差不多)，只不过一个直接用，一个还需要索引。心想命令是<code>hexo new</code>，就去Hexo根目录的<strong>node_modules</strong>找一下，应该有这么个名字的JS文件，果不其然，在<strong>“hexo根目录/node_modules/hexo/lib/plugins/console/new.js”</strong>，里面有段代码，内容如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">    <span class="attr">title</span>: args._.pop(),</div><div class="line">    <span class="attr">layout</span>: args._.length ? args._[<span class="number">0</span>] : <span class="keyword">this</span>.config.default_layout,</div><div class="line">    <span class="attr">slug</span>: args.s || args.slug,</div><div class="line">    <span class="attr">path</span>: args.p || args.path</div><div class="line">  &#125;;</div></pre></td></tr></table></figure></p>
<p>　　然后上网了解到<strong>JS里面用{}定义的叫做多属性对象</strong>，猜测<strong>Hexo 3</strong>传进来给<strong>new监听函数</strong>的参数是应该一个<strong>{}定义的多属性对象</strong>(如上面代码)，通过<code>.</code>操作符获取其<strong>path</strong>属性，而<strong>Hexo 2.x</strong>传进来的参数应该就是一个普通变量吧，通过不一样的方式获取到新建<strong>Markdown文件</strong>的全局路径。</p>
<h2 id="Windows-CMD下的-和"><a href="#Windows-CMD下的-和" class="headerlink" title="Windows CMD下的\和/"></a><font color="#F40D64">Windows CMD下的<code>\</code>和<code>/</code></font></h2><p>　　如果你仔细看上面我贴的用于<strong>Hexo 3</strong>和<strong>Hexo 2.x</strong>的代码，你会发现，上面用来获取<strong>MarkdownPad2</strong>编辑器的路径有点不一样，熟悉<strong>CMD</strong>的人应该都知道，这两种方式都是可以的，下面是我获取到的资料：</p>
<div style="background-color: #CFD5DB"><font color="blue"><br>　　　Windows 用反斜杠<strong>（”\”）</strong>的历史来自 DOS，而 DOS 的另一个传统是用斜杠<strong>（”/“）</strong>表示命令行参数，比如：<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> <span class="variable">%SystemDrive%</span><span class="built_in">dir</span> </div><div class="line">/s /b shell32.dll</div></pre></td></tr></table></figure><br><br>　　　既然 DOS 这边斜杠被占用了，只好找一个最接近的。那就是”\”了。<br>　　　而在 UNIX 环境中，我们用减号（”-“）和双减号（”–”）表示命令行参数。<br>　　　我们也知道，转义字符不是都用”\”么，所以如果用来当文件路径的话就要写成”\“。<br></font></div>

]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> CMD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo自定义主题]]></title>
      <url>/2016/01/26/hexo_%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>　　有时你会觉得hexo自带的主题不太顺眼，换了个主题，又觉得某个地方不太顺眼。有时看到别人hexo上的某个特性，就想到能不能也为自己的hexo添上。能够弄懂整个hexo的架构的前端攻城狮来说，这个肯定不难，但是，我只是想快速实现我的目的，鬼管他架构懂多少。这个时候，其实就是follow，看看有没有弄出来的亲们的笔记，此处就把本人这一过程搜集的或者自己积累的列在这里。<br><a id="more"></a></p>
<h2 id="如何获取主题"><a href="#如何获取主题" class="headerlink" title="如何获取主题"></a><font color="#F40D64"><strong>如何获取主题</strong></font></h2><p>　　hexo是开源的，hexo的主题也是开源的！只需要简单的命令<code>git clone</code>即可获取主题，至于主题的仓库在哪，你可以<a href="https://github.com/search?utf8=%E2%9C%93&amp;q=hexo-theme&amp;type=Repositories&amp;ref=searchresults">看这里</a>或者大可自己Github搜索。我就用以下命令获取了一个新的主题<code>light</code>，注意其中的clone保存路径，此处是位于hexo的根目录。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git:<span class="comment">//github.com/tommy351/hexo-theme-light.git themes/light</span></div></pre></td></tr></table></figure></p>
<p>　　此外，开源项目更新快是一个显著特点，那我们要更新已经获取的主题要应该怎么做呢？通过以下命令即可：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd themes/主题			#进入主题所在文件夹</div><div class="line">git pull</div></pre></td></tr></table></figure></p>
<h2 id="Hexo根目录介绍"><a href="#Hexo根目录介绍" class="headerlink" title="Hexo根目录介绍"></a><font color="#F40D64"><strong>Hexo根目录介绍</strong></font></h2><p>　　为什么上述在更新主题的时候需要<code>cd themes/主题</code>，还有我们获取的主题为什么要保存在<code>themes/light</code>，这些都需要对整个Hexo的目录框架有一点认识，这一部分先为大家介绍Hexo的根目录。<a href="http://ibruce.info/2013/11/22/hexo-your-blog/">摘自《hexo你的博客》</a>—— 目录介绍。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .deploy</div><div class="line">├── node_modules</div><div class="line">├── <span class="keyword">public</span></div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _posts</div><div class="line">|   └── img</div><div class="line">├── themes</div><div class="line">├── _config.yml</div><div class="line">├── db.json</div><div class="line">└── package.json</div></pre></td></tr></table></figure></p>
<ul>
<li>.deploy：执行hexo deploy命令部署到GitHub上的内容目录。</li>
<li>node_modules：通过NPM命令安装的Node模块。</li>
<li>public：执行hexo generate命令，输出的静态网页内容目录。</li>
<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑。<br>　　draft.md：草稿源码文件模板<br>　　page.md：新网页源码文件模板<br>　　post.md：文章源码文件模板</li>
<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<br>　　_posts：发布文章<br>　　　xxx.md：一系列源码文件<br>　　img：图片文件夹<br>　　about：新网页源码文件夹</li>
<li>themes：主题文件目录<br>　　landscape：本人自带主题<br>　　light：获取的新主题</li>
<li>_config.yml：全局配置文件，大多数的设置都在这里。</li>
<li>db.json：缓存数据。</li>
<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮。</li>
<li><h2 id="主题目录介绍"><a href="#主题目录介绍" class="headerlink" title="主题目录介绍"></a><font color="#F40D64"><strong>主题目录介绍</strong></font></h2>　　获取到主题后，将保存在<code>根目录/themes/获取主题</code>，下面是对该主题目录的相关介绍。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class="line">|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制</div><div class="line">|   └── _widget        #小挂件的布局，页面侧边栏的控制</div><div class="line">|   └── *.ejs</div><div class="line">├── source             #源码</div><div class="line">|   ├── css            <span class="meta">#css源码</span></div><div class="line">|   |   ├── _partial   #*.styl局部css </div><div class="line">|   |   ├── _util      #*.styl基础css</div><div class="line">|   |   ├── fonts      #字体</div><div class="line">|   |   ├── images     #图片，banner.jpg是header的背景图</div><div class="line">|   |   |   ├── banner.jpg</div><div class="line">|   |   └── style.styl #*.styl引入需要的css源码</div><div class="line">|   ├── fancybox       <span class="meta">#fancybox效果源码</span></div><div class="line">|   └── js             <span class="meta">#javascript源代码</span></div><div class="line">├── _config.yml        #主题配置文件</div><div class="line">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="主题配置文件-config-yml扫盲"><a href="#主题配置文件-config-yml扫盲" class="headerlink" title="主题配置文件_config.yml扫盲"></a><font color="#F40D64"><strong>主题配置文件_config.yml扫盲</strong></font></h2><p>　　要想达到某个主题的效果，还需要对主题配置文件进行修改，下面是结合自身修改做的一些注释。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"># Header</div><div class="line">menu: 				#站点右上角导航栏，按照格式添加，右侧为<span class="keyword">public</span>文件夹下的路径，索引至index.html</div><div class="line">        #从上至下依次显示在右上角从左至右处</div><div class="line">  Home: /</div><div class="line">  All-lists: /archives</div><div class="line">  Resume: /Shengjie</div><div class="line">  About: /about</div><div class="line"> </div><div class="line"># Sidebar</div><div class="line">sidebar: left		<span class="meta">#right将侧边栏置于右侧</span></div><div class="line">widgets: 			#站点右边栏</div><div class="line">#- search 			# 搜索</div><div class="line">- category 			# 分类</div><div class="line">- tag 				# 标签</div><div class="line">##- archive			# 归档</div><div class="line">- blogroll 			# 友情链接</div><div class="line">- weibo 			# 微博秀</div><div class="line">- recent_posts			# 最新文章</div><div class="line"> </div><div class="line"># Content</div><div class="line"># 阅读全文按钮显示内容</div><div class="line">excerpt_link: Read More... </div><div class="line"># excerpt_link: 阅读全文	#替换为中文</div><div class="line">fancybox: <span class="literal">true</span> #图片效果，默认</div><div class="line"> </div><div class="line">favicon: /favicon.png		#网站的标志</div><div class="line"> </div><div class="line"># Miscellaneous</div><div class="line">duoshuo_shortname: Durant35	#用于加入多说评论的参数</div><div class="line">##</div><div class="line"><span class="meta">#twitter: #右边栏要显示twitter展示的话，需要在此设置</span></div><div class="line"><span class="meta">#  username:</span></div><div class="line">#  show_replies: <span class="literal">false</span></div><div class="line">#  tweet_count: <span class="number">5</span></div><div class="line"> </div><div class="line"><span class="meta">#addthis: #SNS分享，身在天朝，当然用“百度分享”，暂时默认，后面会介绍</span></div><div class="line"><span class="meta">#  enable: true</span></div><div class="line"><span class="meta">#  pubid:</span></div><div class="line"><span class="meta">#  facebook: true</span></div><div class="line"><span class="meta">#  twitter: true</span></div><div class="line"><span class="meta">#  google: true</span></div><div class="line"><span class="meta">#  pinterest: true</span></div><div class="line"> </div><div class="line">google_analytics: #要使用google_analytics进行统计的话，这里需要配置ID，暂时默认</div><div class="line">tongji: <span class="literal">true</span></div><div class="line">baidu_tongji: <span class="literal">true</span></div><div class="line"> </div><div class="line">#comment_provider: facebook</div><div class="line"># Facebook comment</div><div class="line"><span class="meta">#facebook:</span></div><div class="line"><span class="meta">#  appid: 123456789012345</span></div><div class="line">#  comment_count: <span class="number">5</span></div><div class="line">#  comment_width: <span class="number">840</span></div><div class="line">#  comment_colorscheme: light</div></pre></td></tr></table></figure></p>
<p>　　<strong>Miscellaneous</strong>以下的参数其实都是一些自定义的键值对，或者说跟主题本身并无关系。此外，主题配置文件<strong>_config.yml</strong>中的参数都会在<code>/themes/主题</code>目录下<code>layout</code>文件夹中的<code>.ejs</code>文件中引用，方式是<code>theme.key</code>。<code>config.key</code>则是引用根目录下的<strong>_config.yml</strong>配置文件中的参数。</p>
<h2 id="添加微博秀"><a href="#添加微博秀" class="headerlink" title="添加微博秀"></a><font color="#F40D64"><strong>添加微博秀</strong></font></h2><p>　　在上述的<strong>_config.yml</strong>主题配置文件中，启用了<code>weibo</code>微博秀这一侧边栏，但是原始的主题并没有包含这一特性，即<code>layout/_widget</code>下没有相应的<code>.ejs</code>文件。此处也许你也看出了个中奥妙，即主题配置文件中的参数索引至相应的<code>.ejs</code>文件。我们想要启用微博秀，需要在<code>layout/_widget</code>下创建相应的<code>.ejs</code>文件，新建txt文件，命名为<code>weibo.ejs</code>即可。那内容是什么，空肯定不行吧！此处需要获取<strong>微博第三方代码</strong>。进入<a href="http://open.weibo.com/widgets?cat=wb">微博组件平台</a>，登陆后点击<strong>微博秀</strong>，进行一些基础设置和样式设置，即可复制代码粘贴进<code>weibo.ejs</code>。</p>
<h2 id="添加百度分享"><a href="#添加百度分享" class="headerlink" title="添加百度分享"></a><font color="#F40D64"><strong>添加百度分享</strong></font></h2><p>　　要在每篇文章结尾处添加百度分享按钮，需要修改<code>你的主题/layout/_partial/article.ejs</code>。找到<strong>footer</strong>标签，如下进行相应的修改<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;footer class="article-footer"&gt;</div><div class="line">  &lt;!-- Share按钮，注释掉，不显示Share按钮</div><div class="line">    landscape代码:</div><div class="line">    &lt;a data-url="&lt;%- post.permalink %&gt;" data-id="&lt;%= post._id %&gt;" class="article-share-link"&gt;Share&lt;/a&gt;</div><div class="line">    landscape-plus代码:</div><div class="line">    &lt;% if (config.baidushare || theme.baidushare)&#123; %&gt;</div><div class="line">      &lt;a data-url="&lt;%- post.permalink %&gt;" data-id="&lt;%= post._id %&gt;" class="article-share-link" data-share="baidu"&gt;&lt;%= __('share') %&gt;&lt;/a&gt;</div><div class="line">    &lt;% &#125; else &#123; %&gt;</div><div class="line">      &lt;a data-url="&lt;%- post.permalink %&gt;" data-id="&lt;%= post._id %&gt;" class="article-share-link"&gt;&lt;%= __('share') %&gt;&lt;/a&gt;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line">  --&gt;</div><div class="line"> </div><div class="line">  &lt;!-- Comment按钮，注释掉，不显示Comment按钮</div><div class="line">    landscape代码:</div><div class="line">    &lt;% if (post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</div><div class="line">      &lt;a href="&lt;%- post.permalink %&gt;#disqus_thread" class="article-comment-link"&gt;Comments&lt;/a&gt;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line">    landscape-plus代码:</div><div class="line">    &lt;% if (post.comments &amp;&amp; (config.duoshuo_shortname || theme.duoshuo_shortname))&#123; %&gt;</div><div class="line">      &lt;a href="&lt;%- post.permalink %&gt;#ds-thread" class="article-comment-link"&gt;&lt;%= __('comments') %&gt;&lt;/a&gt;</div><div class="line">    &lt;% &#125; else if (post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</div><div class="line">      &lt;a href="&lt;%- post.permalink %&gt;#disqus_thread" class="article-comment-link"&gt;&lt;%= __('comments') %&gt;&lt;/a&gt;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line">--&gt;</div><div class="line"> </div><div class="line">  &lt;!-- 百度分享 --&gt;</div><div class="line">  &lt;div class="bdsharebuttonbox"&gt;</div><div class="line">  &lt;a href="#" class="bds_more" data-cmd="more"&gt;&lt;/a&gt;</div><div class="line">  &lt;a href="#" class="bds_qzone" data-cmd="qzone"&gt;&lt;/a&gt;</div><div class="line">  &lt;a href="#" class="bds_tsina" data-cmd="tsina"&gt;&lt;/a&gt;</div><div class="line">  &lt;a href="#" class="bds_tqq" data-cmd="tqq"&gt;&lt;/a&gt;</div><div class="line">  &lt;a href="#" class="bds_renren" data-cmd="renren"&gt;&lt;/a&gt;</div><div class="line">  &lt;a href="#" class="bds_weixin" data-cmd="weixin"&gt;&lt;/a&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    window._bd_share_config=&#123;"common":&#123;"bdSnsKey":&#123;&#125;,"bdText":"","bdMini":"2","bdPic":"","bdStyle":"0","bdSize":"16"&#125;,"share":&#123;&#125;,"image":&#123;"viewList":["qzone","tsina","tqq","renren","weixin"],"viewText":"分享到：","viewSize":"16"&#125;,"selectShare":&#123;"bdContainerClass":null,"bdSelectMiniList":["qzone","tsina","tqq","renren","weixin"]&#125;&#125;;with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</div><div class="line">  &lt;/script&gt; </div><div class="line">  &lt;%- partial('post/tag') %&gt;</div><div class="line">&lt;/footer&gt;</div></pre></td></tr></table></figure></p>
<p>　　你可以参考上述的<strong>百度分享代码</strong>，也可以自己从<a href="http://share.baidu.com/code">百度分享</a>获取代码。此外，建议将上述<strong>百度分享代码</strong>独立放置在单独的<code>.ejs</code>文件中，即在<code>layout/_partial/post</code>目录下新建<code>baidushare.ejs</code>文件，粘贴<strong>百度分享代码</strong>，然后在上述文件中通过以下方式引用：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;footer class="article-footer"&gt;</div><div class="line">  &lt;%- partial('post/baidushare') %&gt;</div><div class="line">  &lt;%- partial('post/tag') %&gt;</div><div class="line">&lt;/footer&gt;</div></pre></td></tr></table></figure></p>
<h2 id="加入多说评论"><a href="#加入多说评论" class="headerlink" title="加入多说评论"></a><font color="#F40D64"><strong>加入多说评论</strong></font></h2><p>　　摘自<strong>多说官网</strong>的<a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9">《Hexo使用多说教程》</a>。首先登陆<a href="http://duoshuo.com/">多说</a>进行相关配置。其次，在根目录下的全局配置文件<strong>_config.yml</strong>中添加参数<strong>duoshuo_shortname</strong>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Extensions 插件</div><div class="line">## Plugins: http:<span class="comment">//hexo.io/plugins/</span></div><div class="line">## Themes: http:<span class="comment">//hexo.io/themes/</span></div><div class="line">#<span class="meta">#theme: light</span></div><div class="line">theme: tarantula7					# 自定义主题，from landscape</div><div class="line">duoshuo_shortname: 你站点的short_name			# 用于加入多说评论的参数</div><div class="line">baidushare: <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>　　<code>你的主题/layout/_partial/article.ejs</code>文件，将原先的<strong>Disqus评论</strong>，即<code>&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname){ %&gt;</code>部分代码替换为<strong>多说评论</strong>：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</div><div class="line">  &lt;section id="comments"&gt;</div><div class="line">    &lt;!-- 多说评论框 start --&gt;</div><div class="line">    &lt;div class="ds-thread" data-thread-key="&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;" data-title="&lt;%= post.title %&gt;" data-url="&lt;%= page.permalink %&gt;"&gt;&lt;/div&gt;</div><div class="line">    &lt;!-- 多说评论框 end --&gt;</div><div class="line">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class="line">    &lt;script type="text/javascript"&gt;</div><div class="line">    var duoshuoQuery = &#123;short_name:'&lt;%= config.duoshuo_shortname %&gt;'&#125;;</div><div class="line">      (function() &#123;</div><div class="line">        var ds = document.createElement('script');</div><div class="line">        ds.type = 'text/javascript';ds.async = true;</div><div class="line">        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';</div><div class="line">        ds.charset = 'UTF-8';</div><div class="line">        (document.getElementsByTagName('head')[0] </div><div class="line">         || document.getElementsByTagName('body')[0]).appendChild(ds);</div><div class="line">      &#125;)();</div><div class="line">      &lt;/script&gt;</div><div class="line">    &lt;!-- 多说公共JS代码 end --&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<h2 id="修改归档页面的时间格式"><a href="#修改归档页面的时间格式" class="headerlink" title="修改归档页面的时间格式"></a><font color="#F40D64"><strong>修改归档页面的时间格式</strong></font></h2><p>　　摘自<strong>石佳劼的博客</strong><a href="http://blog.csdn.net/shi0090/article/details/48087353">《Hexo 官方主题 landscape-plus 优化》</a>。</p>
<h2 id="添加文章目录"><a href="#添加文章目录" class="headerlink" title="添加文章目录"></a><font color="#F40D64"><strong>添加文章目录</strong></font></h2><p>　　转自<strong>The Bloom of Youth</strong>的<a href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/">《为Hexo博客添加目录》</a>，两步走。第一步，修改<code>你的主题/layout/_partial/article.ejs</code>如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="keyword">class</span>=<span class="string">"article-entry"</span> itemprop=<span class="string">"articleBody"</span>&gt;</div><div class="line">  &lt;% <span class="keyword">if</span> (post.excerpt &amp;&amp; index)&#123; %&gt;</div><div class="line">    &lt;%- post.excerpt %&gt;</div><div class="line">    &lt;% <span class="keyword">if</span> (theme.excerpt_link)&#123; %&gt;</div><div class="line">      &lt;p <span class="keyword">class</span>=<span class="string">"article-more-link"</span>&gt;</div><div class="line">      &lt;a href=<span class="string">"&lt;%- url_for(post.path) %&gt;#more"</span>&gt;&lt;%= theme.excerpt_link %&gt;&lt;/a&gt;</div><div class="line">     &lt;/p&gt;</div><div class="line">   &lt;% &#125; %&gt;</div><div class="line">  &lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</div><div class="line">    &lt;!-- Table of Contents --&gt;</div><div class="line">    &lt;% <span class="keyword">if</span> (!index &amp;&amp; post.toc)&#123; %&gt;</div><div class="line">      &lt;div id=<span class="string">"toc"</span> <span class="keyword">class</span>=<span class="string">"toc-article"</span>&gt;</div><div class="line">      &lt;strong <span class="keyword">class</span>=<span class="string">"toc-title"</span>&gt;文章目录&lt;/strong&gt;</div><div class="line">      &lt;%- toc(post.content) %&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line"> </div><div class="line">    &lt;%- post.content %&gt;</div><div class="line">  &lt;% &#125; %&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>　　在<strong>article-entry</strong>块中，<code>else</code>部分<code>&lt;%- post.content %&gt;</code>前加上<code>&lt;!-- Table of Contents --&gt;</code>部分代码，代码核心其实是<strong>toc()</strong>函数，该函数Hexo博客系统的核心是支持的。<code>post.toc</code>参数需要在每篇文章源代码文件<code>.md</code>开头加以配置，诸如<strong>categories</strong>、<strong>tags</strong>。第二部，需要定义相应的<strong>CSS样式</strong>。在<code>你的主题/source/css/_partial/article.styl</code>文件结尾处添加：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 文章目录CSS样式 */</span></div><div class="line"><span class="selector-class">.toc-article</span></div><div class="line">  <span class="selector-tag">background</span> <span class="selector-id">#eee</span></div><div class="line">  <span class="selector-tag">border</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#bbb</span></div><div class="line">  <span class="selector-tag">border-radius</span> 10<span class="selector-tag">px</span></div><div class="line">  <span class="selector-tag">margin</span> 1<span class="selector-class">.5em</span> 0 0<span class="selector-class">.3em</span> 1<span class="selector-class">.5em</span></div><div class="line">  <span class="selector-tag">padding</span> 1<span class="selector-class">.2em</span> 1<span class="selector-tag">em</span> 0 1<span class="selector-tag">em</span></div><div class="line">  <span class="selector-tag">max-width</span> 28%</div><div class="line"> </div><div class="line"><span class="selector-class">.toc-title</span></div><div class="line">  <span class="selector-tag">font-size</span> 120%</div><div class="line"> </div><div class="line"><span class="selector-id">#toc</span></div><div class="line">  <span class="selector-tag">line-height</span> 1<span class="selector-tag">em</span></div><div class="line">  <span class="selector-tag">font-size</span> 0<span class="selector-class">.9em</span></div><div class="line">  <span class="selector-tag">float</span> <span class="selector-tag">right</span></div><div class="line">  <span class="selector-class">.toc</span></div><div class="line">    <span class="selector-tag">padding</span> 0</div><div class="line">    <span class="selector-tag">margin</span> 1<span class="selector-tag">em</span></div><div class="line">    <span class="selector-tag">line-height</span> 1<span class="selector-class">.8em</span></div><div class="line">    <span class="selector-tag">li</span></div><div class="line">      <span class="selector-tag">list-style-type</span> <span class="selector-tag">none</span></div><div class="line"> </div><div class="line">  <span class="selector-class">.toc-child</span> </div><div class="line">    <span class="selector-tag">margin-left</span> 1<span class="selector-tag">em</span></div></pre></td></tr></table></figure></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a><font color="#F40D64"><strong>更多</strong></font></h2><p>　　摘自<a href="http://www.lichanglin.cn/categories/hexo/">奋进的大头</a>。<br>    <center><img src="/img/hexo/more_lichanglin.png" width="800px"/></center></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo添加about导航栏]]></title>
      <url>/2016/01/26/hexo_%E6%B7%BB%E5%8A%A0about%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      <content type="html"><![CDATA[<p>　　如何添加关于的导航栏呢？首先需要创建用于关于导航栏的网页，通过命令<code>hexo new page &quot;about&quot;</code>创建，即在source下创建about文件夹，该文件夹下新建<code>index.md</code>，根据普通文章正文要求对其书写即可。<br><a id="more"></a><br>　　接下来，就需要将该新网页绑定在新的导航栏上面。修改<strong> theme/使用主题 </strong>目录下对应的<strong>_config.yml</strong>主题配置文件，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Header</div><div class="line">menu: 				#站点导航栏，按照如下格式添加: 右侧为<span class="keyword">public</span>文件夹下的路径，索引至index.md</div><div class="line">                #从上至下依次显示在右上角从左至右处</div><div class="line">  Home: /			#主页导航栏</div><div class="line">  All-lists: /archives		#所有列表导航栏</div><div class="line">  Resume: /Shengjie		#个人简历导航栏</div><div class="line">  About: /about			#关于导航栏</div></pre></td></tr></table></figure></p>
<p>　　在你想插入的位置上插入关于导航栏(支持中文)，然后将新创建的<code>/about</code>作为其路径，即可导航至你自定义的<code>index.md</code>。</p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo错误的分类或标签无法删除]]></title>
      <url>/2016/01/24/hexo_hexo%E9%94%99%E8%AF%AF%E7%9A%84%E5%88%86%E7%B1%BB%E6%88%96%E6%A0%87%E7%AD%BE%E6%97%A0%E6%B3%95%E5%88%A0%E9%99%A4/</url>
      <content type="html"><![CDATA[<p>　　<strong>描述：</strong><br>　　　有的时候我们在编写<code>.md</code>文件时，可能一时没注意，将<code>categories:</code> 或<code>tags:</code>写错，直到通过<code>$ hexo s[erver]</code>预览时才发现；或者我们一开始定义了一个分类或一个标签，细想觉得不合适。这些情况都涉及到分类和标签的修改，但是有时我们会苦恼于，明明原先的分类/标签改掉了，可为何预览时他还在，折腾很久还是没有干掉他！！！<br><a id="more"></a></p>
<p>　　<strong>原因：</strong><br>　　　错误的标签/分类在修改后即使<code>$ hexo g[enerate]</code>后还一直存在，根本原因是相关db文件，如<code>db.json</code>文件保留了原先的错误数据。</p>
<p>　　<strong>解决办法：</strong><br>　　　先<code>$ hexo clean</code>清除db文件和public文件夹，再重新<code>$ hexo g[enerate]</code>更新生成即可。</p>
<p>　　<strong>总结：</strong><br>　　　以前根本不晓得<code>$ hexo clean</code>这个命令，部署的时候老以为<code>CTRL+S</code>加上<code>$ hexo g[enerate]</code>、<code>$ hexo d[eploy]</code>就一劳永逸了，以后必要时还是需要<strong>clean</strong>一发，个人还是养成了部署新习惯：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CTRL S</div><div class="line">$ hexo clean</div><div class="line">$ hexo g[enerate]</div><div class="line">$ hexo d[eploy]</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo扫盲]]></title>
      <url>/2016/01/24/hexo_hexo%E6%89%AB%E7%9B%B2/</url>
      <content type="html"><![CDATA[<p>　　下述盲点也是本人在搭建过程中遇到的疑惑，在此文中做一个整理：<br>　　　<a href="#spot01"><strong><1> </strong> 用于配置的<strong>_config.yml</strong>文件的这种<strong>.yml</strong>格式是什么？</a><br>　　　<a href="#spot02"><strong><2> </strong> 安装hexo时用到的<strong>npm命令</strong>究竟是什么？</a><br><a id="more"></a></p>
<p>　　<span id="spot01"><strong>+. 盲点1 </strong> 用于配置的<strong>_config.yml</strong>文件的这种<strong>.yml</strong>格式是什么？</span><br>　　　YML文件格式是<strong>YAML(YAML Ain’t Markup Language，YAML不是标记语言)</strong>编写的文件格式，<a href="http://www.yaml.org/">YAML</a>是一种直观的能够被电脑识别的的数据数据序列化格式，他并且容易被人类阅读，容易和脚本语言交互的，可以被支持<strong>YAML库</strong>的不同的编程语言程序导入，比如：<strong>C/C++, Ruby, Python, Java, Perl, C#, PHP</strong>等。<strong>YAML</strong>作为一种比<strong>XML</strong>、<strong>JSON</strong>更为简单易读的序列化语言，正越来越多地被用于应用及配置文件的开发中。<br>　　　Structure通过空格来展示，Sequence里的项用”-“来代表，Map里的键值对用”:”分隔，这几乎就是所有的语法了。<br>　　　YAML没有XML那么啰嗦了，大部分YAML文件内容就是真实的数据，没有了无穷尽的打开和关闭标记列表，在XML中，这些标记往往比它们描述的数据还大。此外，YAML没有提供方案或<strong>DTD概念</strong>，因此无法验证文件格式是否符合你的预期，XML的啰嗦也有它的价值，但总的说来是因为XML的成熟使它具有大量额外的工具来验证它的格式，而YAML还没有。<br>　　　JSON也适合于任何数据，它主要面向提高性能和文件尺寸的大小，因为它几乎不使用空格和关闭标签，然而，JSON文件的内容增加了复杂性，它的关闭标识就象下地狱一样，其复杂程度几乎使文件变得无法理解。<br>　　　<a href="http://developer.51cto.com/art/200808/85469_all.htm">摘自《超越XML和JSON：YAML，Java开发人员的新选择》</a>以及IBM的<a href="">《YAML 简介》</a>。</p>
<p>　　<span id="spot02"><strong>+. 盲点2 </strong> 安装hexo时用到的<strong>npm命令</strong>究竟是什么？</span><br>　　　<strong>NPM(node package manager)</strong>，通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。<br>　　　<strong>node.js</strong>的出现，可以算是前端里程碑式的一个事件，它让前端攻城狮们摆脱了浏览器的束缚，踏上了一个更加宽广的舞台。随着一系列基于<strong>node.js</strong>的应用/工具的出现，工作中与<strong>node.js</strong>打交道的机会越来越多。无论在node应用的开发，还是使用中，包管理都扮演着一个很重要的作用。<br>　　　<a href="http://www.tuicool.com/articles/VB7nYn">摘自《NPM小结 - 程序猿小卡》</a></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2.0x hexo迁移至最新版本笔记]]></title>
      <url>/2016/01/24/hexo_2.0x%20hexo%E8%BF%81%E7%A7%BB%E8%87%B3%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>　　今天看到<strong><a href="http://zhiqiu.github.io">zhiqiu</a></strong>的hexo有<strong>年/月视图</strong>的特性，<br>    <center><img src="/img/hexo/view_archive.png" width="800px"/></center><br>心想这是自己需要的功能，这样会让All-list里面的归档更为清晰，就按照网上提示，只需修改根目录下<strong>_config.yml</strong>，添加如下配置：<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">archive_generator:</div><div class="line">  per_page: <span class="number">50</span> 		##歸檔頁面<span class="number">50</span>篇文章標題</div><div class="line">  yearly: <span class="literal">true</span>  		##生成年視圖</div><div class="line">  monthly: <span class="literal">true</span>		##生成月視圖</div></pre></td></tr></table></figure></p>
<p>发现并没有什么卵用！所以就以为是hexo版本的问题，想想也是该为hexo升级一下了。但是，这是件危险的问题，<strong>建议先把博客workspace，即整个文件夹备份！！ </strong>万一，那些<code>.md</code>文件木有了，是一件非常苦逼的事。其实，先说句后话，上述所述的特性其实换个<strong>theme</strong>就有了，之前使用的是<strong>light</strong>，需要更换为<strong>landscape </strong>。而且，也不需要修改什么配置，就有这个功能，至于<strong>年/月视图</strong>，其实是右边栏中的这个：<br>    <center><img src="/img/hexo/view_yearmonth.png" width="400px"/></center><br>　　要想实现这个效果，除了按照上述配置根目录下的<strong>_config.yml</strong>文件外，还需要在<strong>/theme/对应主题/</strong>目录下的<strong>_config.yml</strong>文件中启用相应的<strong>widgets</strong>(归档)。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">widgets: 			# 站点右边栏</div><div class="line">  #- search 			# 搜索</div><div class="line">  - category			# 分类</div><div class="line">  - tag				# 标签</div><div class="line">  #- archive			# 归档</div><div class="line">  - blogroll			# 友情链接</div><div class="line">  - weibo			# 微博秀</div><div class="line">  - recent_posts		# 最新文章</div></pre></td></tr></table></figure>
<p>　　说了这么多题外话，还是回到我们本文的重点，<strong>Migrating from 2.x to newest</strong>，我是参考<a href="https://github.com/hexojs/hexo/wiki/Migrating-from-2.x-to-3.0">官方迁移文档</a>来进行的，这里列出：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"># Step1: Modify package.json</div><div class="line">  Add hexo data to package.json.</div><div class="line">  &#123;</div><div class="line">    <span class="string">"hexo"</span>: &#123;</div><div class="line">      <span class="string">"version"</span>: <span class="string">""</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line"># Step2: Clean cache</div><div class="line">  &gt; hexo clean</div><div class="line"> </div><div class="line"># Step3: Install hexo-cli</div><div class="line">  &gt; npm install hexo-cli -g</div><div class="line"> </div><div class="line"># Step4: Install Hexo</div><div class="line">  &gt; npm install hexo --save</div><div class="line"> </div><div class="line"># Step5: Install generators</div><div class="line">  &gt; npm install hexo-generator-index --save</div><div class="line">  &gt; npm install hexo-generator-archive --save</div><div class="line">  &gt; npm install hexo-generator-category --save</div><div class="line">  &gt; npm install hexo-generator-tag --save</div><div class="line"> </div><div class="line"># Step6: Install server</div><div class="line">  &gt;  install hexo-server --save</div><div class="line"> </div><div class="line"># Step7: Install deployers</div><div class="line">  &gt; npm install hexo-deployer-git --save</div><div class="line">  &gt; npm install hexo-deployer-heroku --save</div><div class="line">  &gt; npm install hexo-deployer-rsync --save</div><div class="line">  &gt; npm install hexo-deployer-openshift --save</div><div class="line"> </div><div class="line"># Step8(个人认为这一步可选): Update plugins</div><div class="line">  &gt; npm install hexo-renderer-marked@<span class="number">0.2</span> --save</div><div class="line">  &gt; npm install hexo-renderer-stylus@<span class="number">0.2</span> --save</div><div class="line">  &gt; npm install hexo-generator-feed@<span class="number">1</span> --save</div><div class="line">  &gt; npm install hexo-generator-sitemap@<span class="number">1</span> --save</div></pre></td></tr></table></figure></p>
<p>　　更新之后也许你会像我一样遇到这样的问题，<br>    <center><img src="/img/hexo/error_tittle.png" width="700px"/></center><br>　　右边是博客效果，左边则是对应的<strong>Markdown代码</strong>。由于版本问题，原先使用的第一种方式全部无效，只能使用语法要求的第二种方式( <a href="http://www.thinksaas.cn/ask/question/22799/">请看这里</a>)，留意两个<strong>“##”</strong>之后的空格，再输入标题，至于标题后面的两个<strong>“##”</strong>，可有可无，建议不要带，毕竟少敲两个字符，而且符合标准语法一定不会错。</p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo，push你的新博客到Github]]></title>
      <url>/2016/01/22/hexo_push%E4%BD%A0%E7%9A%84%E6%96%B0%E5%8D%9A%E5%AE%A2%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<h2 id="第一步-为hexo配置你的Github"><a href="#第一步-为hexo配置你的Github" class="headerlink" title="第一步 为hexo配置你的Github"></a><font color="#F40D64"><strong>第一步 为hexo配置你的Github</strong></font></h2><p>　　首先编辑你hexo根目录下的<strong>_config.yml</strong>文件，找到以下内容并修改为github的部署方式<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Deployment 需要进行部署方式的修改</div><div class="line">## Docs: http:<span class="comment">//hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  type: git 			#部署类型, 本文使用Github</div><div class="line">  repository: https:<span class="comment">//github.com/username/username.github.io.git </span></div><div class="line">        #部署的仓库的SSH</div><div class="line">  branch: master 		#部署分支,一般使用master主分支</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>　　运行以下命令设置你的git全局变量，即设置你的用户名和邮箱<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; git config --global user.name <span class="string">"Your Name Here"</span>  </div><div class="line">&gt; git config --global user.email <span class="string">"your_email@example.com"</span></div></pre></td></tr></table></figure></p>
<h2 id="第二步-发表一篇文章"><a href="#第二步-发表一篇文章" class="headerlink" title="第二步 发表一篇文章"></a><font color="#F40D64"><strong>第二步 发表一篇文章</strong></font></h2><p>　　发表一篇文章，标题为<code>title</code>，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo <span class="keyword">new</span> <span class="string">"title"</span></div></pre></td></tr></table></figure></p>
<p>　　即在hexo根目录下的<code>/source/_posts/</code>生成<code>title.md</code>。用<code>Markdown</code>打开，配置开头:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">title: title 				# 支持中文</div><div class="line">date: <span class="number">2013</span><span class="number">-05</span><span class="number">-29</span> <span class="number">07</span>:<span class="number">56</span>:<span class="number">29</span> 		# 发表日期，一般不改动</div><div class="line">categories: blog 			# 文章文类</div><div class="line">tags: TAG 				# 文章标签，多于一项时采用如下这种格式</div><div class="line">- TAG1</div><div class="line">- TAG2</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h2 id="第三步-书写文章"><a href="#第三步-书写文章" class="headerlink" title="第三步 书写文章"></a><font color="#F40D64"><strong>第三步 书写文章</strong></font></h2><p>　　接下来是正文部分，用<strong>markdown</strong>写，下面列出本人书写过程中用到那部分语法。更多Markdown指南可以参照Zipper’s blog的<a href="http://zipperary.com/2013/05/22/introduction-to-markdown/">《Markdown指南》</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"># 这里是一级标题</div><div class="line">### 这里是三级标题</div><div class="line">###### 这里是六级标题，就到这里了，木有七级！</div><div class="line"> </div><div class="line">段落前面没有缩进，要想使用缩进，在中文输入法中改成「全角」输入，再按两个空格</div><div class="line"> </div><div class="line">**两个星号包围的是粗体**</div><div class="line"> </div><div class="line">*一个星号包围的是斜体*</div><div class="line"> </div><div class="line">`反引号包围的是行内代码`，这个按键在「Tab」上边</div><div class="line"> </div><div class="line">列表</div><div class="line">1. 有序列表1，注意点之后的空格。</div><div class="line">2. 有序列表2.</div><div class="line">1. 我这里写成1，在显示时还是3，厉害不。</div><div class="line"> </div><div class="line">1. 有序列表1</div><div class="line"> 详细内容，注意前面有一个空格</div><div class="line">2. 有序列表2</div><div class="line"> 详细内容</div><div class="line"> </div><div class="line">- 无序列表1</div><div class="line">- 无序列表2</div><div class="line">- 无序列表3</div><div class="line"> - 小1，注意前面有一个空格</div><div class="line"> - 小2</div><div class="line"> </div><div class="line">超链接:</div><div class="line">  [超链接内容](超链接url)</div><div class="line"> </div><div class="line">分割线用`---`，注意单独一行，上面必须是一个空行</div><div class="line"> </div><div class="line">另外，markdown完全兼容html，更多高级的格式，请果断插入html标签</div><div class="line">插入图片(插入的图片需放置于source目录下的img文件夹下，可以使用多级目录，方便资源管理):</div><div class="line">  &lt;center&gt;&lt;img src="/img/xxx.png" width="?px"/&gt;&lt;/center&gt;</div><div class="line">  &lt;center&gt;&lt;img src="/img/xxx/xxx.png" width="?px"/&gt;&lt;/center&gt;</div><div class="line"> </div><div class="line">插入表格(可以按照以下格式插入，具体属性选择性修改):</div><div class="line">&lt;table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif;font-size:18px; </div><div class="line">color:#333333; background-color:#c3dde0; margin: 0; </div><div class="line">border-color: #333333; border-collapse:collapse"&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">  &lt;td style="width: ?px; text-align: center"&gt;标题1&lt;/td&gt;</div><div class="line">  &lt;td style="width: ?px; text-align: center"&gt;标题2&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;tr&gt;</div><div class="line">  &lt;td style="text-align: center"&gt;内容1&lt;/td&gt;</div><div class="line">  &lt;td style="text-align: center"&gt;内容2&lt;/td&gt;</div><div class="line">&lt;/tr&gt;</div><div class="line">&lt;/table&gt;</div><div class="line">注: 使用时，请删除上述格式中的换行，此处出于展示的目的。所有输入应在一行上。</div><div class="line"> </div><div class="line">插入书签:</div><div class="line">  插入书签 &lt;span id="自定义id"&gt;书签&lt;/span&gt;</div><div class="line">  超链接书签 &lt;a href="#书签1"&gt;内容区&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>　　还有就是插入代码块，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">```python</div><div class="line">#三个反引号包围的是代码块</div><div class="line">#会显示行号</div><div class="line">#也有高亮显示</div><div class="line">#我上面加了python，你也可以不加。如果不能高亮，那么还是加上吧。</div><div class="line">#另外，如果你的代码块包围的是html，那你应该写html而不是python。</div><div class="line">#目前觉得只有写cpp才能满足我的要求</div></pre></td></tr></table></figure></p>
<h2 id="第四步-预览和修改"><a href="#第四步-预览和修改" class="headerlink" title="第四步 预览和修改"></a><font color="#F40D64"><strong>第四步 预览和修改</strong></font></h2><p>　　使用命令<code>hexo s[erver]</code>启动服务器，其中[..]为可选输入，git解析命令时会自动补全。使用浏览器访问<strong>localhost:4000</strong>预览效果，退出server则使用Ctrl+c。<br>　　按照第三步进行修改，保存后通过浏览器刷新即可预览修改。有时因为Cache的缘故，刷新后没有更新修改。使用命令<code>hexo clean</code>清楚缓存，然后通过<code>hexo g[enerate]</code>重新生成网站，再启动服务器，刷新预览。<br>　　最终修改确定后，即可进入下一步。</p>
<h2 id="第五步-同步到github"><a href="#第五步-同步到github" class="headerlink" title="第五步 同步到github"></a><font color="#F40D64"><strong>第五步 同步到github</strong></font></h2><p>　　使用命令<code>hexo d[eploy]</code>将你的博客发布到github上了，当然需要根据提示输入你的Github用户名和密码。<br>　　如果部署失败，尝试上述第一步中<strong>_config.yml</strong>配置文件中deploy的type改成git，然后运行下    命令<code>npm install hexo-deployer-git --save</code>，再hexo g，hexo d。</p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ADO连接MySQL数据库]]></title>
      <url>/2015/11/29/iotCourse_03_ADO%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>　　本文旨在指导大家如何通过使用<strong>ADO数据库访问技术</strong>实现对<strong>MySQL数据库</strong>的访问和<strong>CURD</strong>等相关操作。在这个过程中，大家将会初步接触并了解：<br>　　　　<strong>+1.　</strong> 存在哪些<strong>数据库访问技术</strong>;<br>　　　　<strong>+2.　</strong> 什么是<strong>Windows COM编程</strong>;<br>　　　　<strong>+3.　</strong> 如何为<strong>MySQL数据库</strong>配置<strong>ODBC数据源</strong>;<br>　　　　<strong>+4.　</strong> <strong>ADO编程</strong>如何实现访问和操作<strong>MySQL数据库</strong>。<br><a id="more"></a></p>
<h2 id="第一节-数据库访问技术"><a href="#第一节-数据库访问技术" class="headerlink" title="第一节 数据库访问技术"></a><strong>第一节 数据库访问技术</strong></h2><p>　　当一个项目存在大量的数据需要存储时，通常都会采用数据库来存储这些数据。最初，厂商推出一个新的数据库产品时，会为程序员提供一套访问该数据库的接口(<strong>即API</strong>)，显然不同的数据库产商提供的访问接口是不会完全一样的。这样，在使用一个新的数据库时，就不得不学习一套新的<strong>API</strong>，无疑加大程序员的开发难度；数据移植性也受到影响，比如想使用另一种数据库的数据，你只能使用那种数据库提供的<strong>API</strong>重新写代码；总之，不利于数据库在软件开发过程中的应用。<br>　　解决这个问题的关键，就是<strong>实现一种隐藏机制，提供一套统一的访问接口，让访问接口与具体数据库实现脱离</strong>。<strong>Windows</strong>下一些标准的数据库访问技术应运而生，常用的有<strong>:</strong></p>
<p>　　<font color="green"><strong>+. ODBC(Open Database Connectivity)</strong></font><br>　　<strong>开放数据库互联</strong>体系结构如下图<strong>：</strong><br>    <center><img src="/img/RFID/03-00.png" width="600px"/></center><br>　　我们编写的客户程序直接与<strong>ODBC驱动程序管理器</strong>打交道，在访问不同的数据库时，需要指定相应的<strong>ODBC驱动程序</strong>，<strong>ODBC驱动程序管理器</strong>将客户的请求转换为相应的<strong>ODBC驱动</strong>传递给数据库。<strong>ODBC</strong>提供了一个单一的<strong>API</strong>，使用<strong>ODBC API</strong>的应用程序可以与任何具有<strong>ODBC驱动程序</strong>的<strong>关系型数据库</strong>进行通信。</p>
<p>　　<font color="green"><strong>+. OLE DB(Object Link and Embed Database)</strong></font><br>　　<strong>对象链接与嵌入数据库</strong>体系结构如下图<strong>：</strong><br>    <center><img src="/img/RFID/03-01.png" width="720px"/></center><br>　　<strong>OLE DB</strong>在两个方面对<strong>ODBC</strong>进行了扩展<strong>：</strong><br>　　　　<strong>1. </strong>提供了一个数据库编程的<a href="#com"><strong>COM接口</strong> (点击查看<strong>《COM(Componet Object Model)》</strong>一节)</a><strong>;</strong>　　<br>　　　　<strong>2. </strong>提供可用于<strong>关系型</strong>和<strong>非关系型</strong>的数据源的接口。<strong>ODBC</strong>只能访问关系型数据库，<strong>OLE DB</strong>还可以访问<strong>电子表格</strong>、<strong>文本文件</strong>等非关系型数据源。<br>　　<strong>OLE DB应用程序</strong>利用不同的<strong>OLE DB提供程序</strong>可以访问不同的数据源，只要这些数据源提供了相应的<strong>OLE DB提供程序；</strong>如果某个<strong>关系型数据库</strong>没有<strong>OLE DB提供程序</strong>，可以利用访问<strong>ODBC的OLE DB提供程序</strong>去访问<strong>ODBC</strong>，然后再利用<strong>ODBC</strong>去访问支持<strong>ODBC</strong>的数据库(<strong>我们访问MySQL数据库的方式正是如此，不过刚安装好的MySQL数据库还不能通过ODBC直接访问，需要先为其<a href="#ODBC">配置好ODBC数据源!!</a></strong>)。</p>
<p>　　<font color="green"><strong>+. ADO(ActiveX Data Object)</strong></font><br>　　如上 <strong>“图:OLE DB体系结构”</strong> 所示，<strong>ActiveX数据对象</strong>建立在<strong>OLE DB</strong>之上，本身就是一个<strong>OLE DB应用程序(Consumer)</strong>，<strong>ADO应用程序</strong>通过<strong>ADO</strong>再访问<strong>OLE DB提供程序  </strong><font color="red">(所以访问速度会变慢一些)</font>，实现对不同类型数据源的访问。<br>　　<strong>OLE DB</strong>通过一系列<strong>COM接口</strong>提供数据的底层连接，<strong>ADO</strong>则通过<strong>对象模型</strong>，将这些接口封装成一个对象，使其成为<strong>抽象实体</strong>，简化了<strong>OLE DB</strong>的数据访问过程。<br>　　此外，<strong>OLE DB</strong>对<strong>自动化</strong>的支持不是很好，像<strong>VBScript</strong>这种<strong>自动化脚本语言</strong>就不能使用<strong>OLE DB</strong>访问数据库，而<strong>ADO</strong>则能更好的支持<strong>自动化</strong>。</p>
<h2 id="第二节-COM-Componet-Object-Model"><a href="#第二节-COM-Componet-Object-Model" class="headerlink" title="第二节 COM(Componet Object Model)"></a><strong><span id="com">第二节 COM(Componet Object Model)</span></strong></h2><p>　　软件工程的目的是：<strong>软件能像堆积木一样累积起来、组装起来，而不是一点点编出来</strong>。大概历经了如下几个过程<strong>：</strong></p>
<p>　　　<font color="green"><strong>1&gt;. 面向功能的结构化编程</strong></font><br>　　　在这个过程中，程序员注重事物之间的联系，然而联系是多变的，而事物本身不会发生大的变化。<strong>软件工程的核心是模块化，</strong>联系一变，就是另一种功能，就得写多一个模块了。</p>
<p>　　　<font color="green"><strong>2&gt;. 面向对象编程</strong></font><br>　　　注重事物本身固有的属性，固有的行为。面向对象的着眼点就是事物这种稳定的概念，而事物之间的联系是多变的，运动的。用类描述事物，当类间的联系发生改变时只需重新使用类库即可。然而面向对象方法在重用上存在不少问题。<strong>类库的重用是基于源码</strong>，限制了编程语言；类库发行新版本时，必须重新编译，重新调试。</p>
<p>　　　<font color="green"><strong>3&gt;. DLL编程</strong></font><br>　　　<strong>DLL</strong>是基于二进制的代码重用，不存在类库重用时的问题，不过，<strong>DLL</strong>中存在的函数重名、各编译器对C++函数名字改编不兼容、<strong>DLL</strong>路径(将<strong>DLL</strong>放在自己的目录下面，别人的程序找不到，放在系统目录下，又可能有重名的问题，<strong>真正的组件应该可以放在任何地方甚至可以不在本机，用户根本不需考虑这个问题</strong>)、可执行程序的依赖性(如果<strong>DLL</strong>发行了一个新版本，很有必要重新链接一次，因为DLL里面导出函数的地址可能已经发生了改变)等问题。</p>
<p>　　　<font color="green"><strong>4&gt;. COM编程</strong></font><br>　　　<strong>COM</strong>中通过<strong>虚函数表</strong>、<strong>查找注册表</strong>等手段能够很好的解决上述列举的<strong>DLL</strong>不足。</p>
<p>　　所谓<strong>COM(Componet Object Model，组件对象模型) </strong>是一种跨应用和语言共享二进制代码的规范，此规范提供了为保证能够互操作，应用程序和共享组件应遵循的一些二进制和网络标准。<strong>COM</strong>定义了这样的一种二进制标准<strong>：</strong><br>　　　<strong>首先，COM </strong> 明确指出二进制模块<strong>(DLLs和EXEs)</strong>必须被编译成指定的结构，这个标准也确切规定了在内存中如何组织<strong>COM对象</strong>。<br>　　　<strong>其次，COM</strong> 定义的二进制标准必须独立于任何编程语言，即不允许出现类似<strong>DLL</strong>的名字改编不兼容的问题。</p>
<p>　　通过这种标准实现可以任意使用共享组件而不用考虑应用程序与共享组件所处的操作环境是否相同、使用的开发语言是否一致以及是否运行在同一台计算机上。<br>　　<font color="blue">遵循<strong>COM规范</strong>编写的任何一个<strong>组件</strong>(<strong>特指在二进制级别上进行集成和重用而能够被独立开发和配置的软件单元</strong>)都可以被用来组合成应用程序。在<strong>COM规范</strong>下将能够以高度灵活的编程手段来开发、维护应用程序，可以将一个单独的复杂应用程序划分为多个独立的模块进行开发，这里的每一个独立模块都是自给自足的<strong>组件</strong>，可以采用不同的开发语言，在运行时将这些<strong>组件</strong>通过<strong>接口</strong>组装起来以形成所需要的应用程序。构成应用程序的每一个<strong>组件</strong>都可以在不影响其它<strong>组件</strong>的前提下升级。</font><br>　　<font color="#625A05">应用程序在与<strong>COM组件</strong>进行交互时(如：使用<strong>ADO COM</strong>库操纵<strong>MySQL</strong>数据库)，只需知道与哪个<strong>COM对象</strong>进行交互即可，而不必关心组件模块的具体名称和所处的位置，也就是<strong>COM对象</strong>的位置对客户是透明的。通过调用<strong>COM库</strong>的<strong>API</strong>来创建对象，通过<strong>Release</strong>方法减少对象自己保持的引用计数，当引用计数为零时，<strong>COM对象</strong>将自己从内存中释放<strong>(记得调用Release，减少不必要的内存开销)</strong>。</font><br>　　最后，得记住的是，<strong>COM</strong>不是<strong>Win32</strong>特有的，从理论上讲，它可以被移植到其他操作系统，因为它本身只是一种规范!!</p>
<h2 id="第三节-配置ODBC数据源"><a href="#第三节-配置ODBC数据源" class="headerlink" title="第三节 配置ODBC数据源"></a><strong><span id="ODBC">第三节 配置ODBC数据源</strong></span></h2><p>　　经过上述的描述后，你现在应该大概明白，所谓通过<strong>ADO</strong>操纵<strong>MySQL数据库</strong>，即 <strong>我们写的应用程序直接与ADO COM库的API打交道，ADO则使用访问ODBC的OLE DB提供程序去访问ODBC，然后再利用ODBC去访问我们的MySQL数据库！</strong> <strong>MySQL数据库</strong>支持<strong>ODBC</strong>，但需要进行相关配置，安装好<strong>MySQL数据库</strong>后需要为其安装<strong>ODBC驱动程序</strong>以及<strong>配置ODBC数据源</strong>，才可以在应用程序中通过<strong>ADO访问该ODBC数据源</strong>进而操纵<strong>MySQL数据库</strong>。<a href="http://yunpan.cn/c3Vd49IQzEVs8">所有安装文件可以从这里获取</a>，访问密码<strong><code>bbaa</code></strong>。<br>　　安装<strong>MySQL</strong>及其<strong>ODBC驱动程序</strong>后，我们需要先在<strong>MySQL数据库</strong>中为项目创建一个数据库，然后才可以为<strong>MySQL数据库</strong>配置<strong>ODBC数据源</strong>。</p>
<p>　　<font color="#625A05"><strong>第一步，开始 <font size="5">→</font> 控制面板 <font size="5">→</font> 管理工具 <font size="5">→</font> 打开数据源(ODBC)</strong></font><strong>：</strong><br>    <center><img src="/img/RFID/03-04.png" /></center><br>　　<font color="red"><strong>注意： </strong></font>安装文件中用的是<strong>32位的MySQL</strong>，需要用<strong>32位的ODBC配置管理器</strong>，而一般<strong>64位系统存在的快捷方式都是64位的ODBC配置管理器(如上图Win7旗舰版管理工具下显示的数据源(ODBC))</strong>，这就需要你在<strong> C:\Windows\SysWOW64\ </strong>下找到<strong>32位的ODBC配置管理器 “odbcad32.exe”</strong>，双击运行它。<strong>Win8.1已经在这方面做出改进，如上图，32位和64位的数据源(ODBC)均将其列出！</strong></p>
<p>　　<font color="#625A05"><strong>第二步，在用户DSN选项卡中点击”添加”按钮，弹出”创建新数据源”窗口</strong></font><strong>：</strong><br>    <center><img src="/img/RFID/03-05.png" width="540px"/></center></p>
<p>　　<font color="#625A05"><strong>第三步，选中”MYSQL ODBC 5.1 Driver”，点击”完成”按钮</strong></font><strong>：</strong><br>    <center><img src="/img/RFID/03-06.png"  width="720px"/></center></p>
<p>　　<font color="#625A05"><strong>最后一步，正确输入数据源信息，进行Test验证</strong></font><strong>：</strong><br>    <center><img src="/img/RFID/03-07.png"  width="400px"/></center><br>　　<font color="red"><strong>注意： </strong></font>此处的数据源信息与<a href="#ConnString"> 下一节ADO编程使用的连接字符串</a> (<strong>“DSN=datasource_name; Database=database_name; uid=user_name;pwd=password”</strong>)密切相关，编程时使用的连接字符串必须与此处的配置信息保持一致才能访问成功。<strong>此处的Database下拉菜单中如不意外，将出现上面操作中为项目创建的数据库，我们选择其来创建数据源</strong>。</p>
<p>　　<font color="#625A05"><strong>如果出现以下结果，测试成功，数据源已经成功配置！否则，一般是数据库密码没有正确输入，重新输入后再次Test</strong></font><strong>：</strong><br>    <center><img src="/img/RFID/03-08.png"  width="720px"/></center></p>
<p>　　数据库开发环境搭建完毕后，就需要结合项目功能需求考虑<strong>需要哪几张表</strong>，每张<strong>表的结构</strong>如何设计等问题。<strong>DEMO </strong>中的数据库结构简单如下<strong>：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">drop database if exists ZD124UE_DEMO;</div><div class="line">create database ZD124UE_DEMO;</div><div class="line">use ZD124UE_DEMO;</div><div class="line"> </div><div class="line"># 用户余时表</div><div class="line">drop table if exists RemainTimeTable;</div><div class="line">create table RemainTimeTable(</div><div class="line">　　UID char(10) primary key,</div><div class="line">　　RemainTime int default 0</div><div class="line">);</div><div class="line"> </div><div class="line"># 用户上机表</div><div class="line">drop table if exists OnTable;</div><div class="line">create table if not exists OnTable(</div><div class="line">　　UID char(10) primary key,</div><div class="line">　　RemainTime int default 0,</div><div class="line">　　# datetime格式必须是"%Y/%m/%d %H:%M:%S"</div><div class="line">　　StartTime datetime,</div><div class="line">　　isOvertime boolean default false,</div><div class="line">　　# 可以增加上机时间记录(单位:秒) UsingTime int default 0,</div><div class="line">　　foreign key(UID) references RemainTimeTable(UID)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="第四节-ADO编程"><a href="#第四节-ADO编程" class="headerlink" title="第四节 ADO编程"></a><strong>第四节 ADO编程</strong></h2><p>　　<strong>ADO</strong>通过<strong>OLE DB</strong>实现对不同类型数据源的访问。<strong>OLE DB</strong>是底层的编程接口，它通过一系列<strong> COM接口 </strong>提供数据的底层连接，<strong>ADO</strong>也是以<strong>COM</strong>的方式提供，所以它的很多行为遵循<strong>COM规范</strong>。我们也直接用<strong>COM</strong>提供的<strong>ADO API</strong>访问<strong>MySQL数据库</strong>。首先要导入<strong>ADO</strong>的<strong> COM文件</strong>。<br>　　<font color="#FF2400" size="4"><strong>@-引入ADO COM文件</strong></font><br>　　使用预处理指令<strong>#import</strong>导入<strong> msado15.dll </strong>这个<strong> ADO COM文件：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </div><div class="line"> * 导入ADO的COM文件</div><div class="line"> * no_namespace是指忽略命名空间，因此需要将EOF重命名为ADOEOF, BOF重命名为ADOBOF防止命名冲突</div><div class="line"> * 该代码需要在一行中完成，如果写成两行或者多行，行末要加上“\”续行符，表示把这几行看成一行</div><div class="line"> */</span></div><div class="line"><span class="meta">#import <span class="meta-string">"./libs/msado15.dll"</span> no_namespace rename(<span class="meta-string">"EOF"</span>,<span class="meta-string">"ADOEOF"</span>) rename(<span class="meta-string">"BOF"</span>,<span class="meta-string">"ADOBOF"</span>)</span></div></pre></td></tr></table></figure></p>
<p>　　在<strong>XP及以上</strong>的系统都自带有<strong> msado15.dll </strong>，并且都已经在系统中注册(<strong>全局路径一般是C:\Program Files\Common Files\System\ado\msado15.dll</strong>)，所以我们的应用程序打包时，可以不用将<strong> msado15.dll </strong>打包，程序可以直接在<strong>XP及以上</strong>的系统上运行。<br>　　<font color="red"><strong>建议将 msado15.dll 拷贝到”工程目录/libs/“ 第三方库目录下(没有libs可以通过新建文件夹的方式创建)，此处的 “./libs/msado15.dll” 正是通过此方式导入</strong></font>。<br>　　程序在编译过程中，<strong>VC++</strong> 会读出<strong> msado15.dll </strong>中的类型库信息，自动产生两个该类型库的头文件(<strong> msado15.tlh </strong>)和实现文件(<strong> msado15.tli </strong>)，在这两个文件里定义了<strong>ADO</strong>的所有<strong>对象和方法</strong>，以及一些<strong>枚举型的常量</strong>等，我们只需直接调用这些方法就行了。</p>
<p>　　<font color="#FF2400" size="4"><strong>@-初始化COM</strong></font><br>　　用<strong>ADO</strong>写代码前，要将<strong>COM 初始化</strong>，这时因为<strong> COM组件 </strong>在使用前需要初始化<strong> COM库</strong>，访问完<strong> COM库 </strong>后，程序还需要卸载<strong> COM库</strong>。常见的手段是在代码前后加上<strong> CoInitialize(NULL); </strong>和<strong> CoUninitialize(); </strong>，也可以用<strong> AfxOleInit(); </strong>和<strong> AfxOleTerm(); </strong>来初始化库，后一种方法具体实现中除了调用<strong> CoInitialize(NULL); </strong>初始化<strong> COM库 </strong>外，还做了一些其他的操作，这些操作对<strong> OLE 应用 </strong>来说是必须的。考虑到性能，一般使用第一种方法初始化。</p>
<p>　　<font color="#FF2400" size="4"><strong>@-三个核心对象</strong></font><br>　　<strong>ADO</strong>主要包含了七个对象，包括三个独立对象(<strong>Connection、Recordset、Command</strong>)和依赖独立对象才能使用的四个非独立对象(<strong>Field、Parameter、Property、Error</strong>)。<br>　　<strong>+. Connection连接对象： </strong>表示到数据库的连接，管理应用程序和数据库之间的通信<strong>；</strong></p>
<p>　　<strong>+. Recordset记录集对象： </strong>存放查询的结果，结果由数据的行(<strong>称为记录</strong>)和列(<strong>称为字段</strong>)组成<strong>；</strong></p>
<p>　　<strong>+. Command命令对象： </strong>用于执行对数据库的操作<strong>；</strong></p>
<p>　　<strong>+. Field字段对象： </strong>依赖于<strong>Recordset对象</strong>使用，可使用<strong> Fields集合 </strong>获得记录集中每个字段的信息<strong>；</strong></p>
<p>　　<strong>+. Parameter参数对象： </strong>依赖于<strong>Command命令对象</strong>使用，用于为参数查询提供数据<strong>；</strong></p>
<p>　　<strong>+. Property属性对象： </strong>每个连接、记录集、命令对象以及字段对象都有一个属性对象集合<strong>；</strong></p>
<p>　　<strong>+. Error错误对象： </strong>依赖<strong>Connection对象</strong>使用，连接对象的<strong> Errors集合 </strong>保存错误信息<strong>。</strong></p>
<p>　　要实例化<strong>Connection、Recordset、Command</strong>这三个核心对象，进而使用它们提供的方法，需要使用它们的智能指针<strong>_XxxxPtr</strong> <font color="#625A05">(<strong>其中的”_Xxxx”可以是Connection、Recordset或者是Command</strong>)</font>。</p>
<p>　　<font color="#FF2400" size="4"><strong><span id="CoreObj">@-对象实例化</strong></span></font><br>　　通过名字创建对象可能会冲突，通过 <strong>uuid(通用唯一识别码)</strong> 创建对象则是唯一的。<strong>注意： 使用的名字必须为”ADODB.Xxxx”，其中的”Xxxx”可以是Connection、Recordset或者是Command！</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * 方式一: 通过名字创建</div><div class="line"> */</div><div class="line">_XxxxPtr m_pXxxx;</div><div class="line">m_pXxxx.CreateInstance("ADODB.Xxxx");</div><div class="line"> </div><div class="line"># 或者直接初始化</div><div class="line">_XxxxPtr m_pXxxx("ADODB.Xxxx");</div><div class="line"> </div><div class="line">/*</div><div class="line"> * 方式二: 通过uuid创建</div><div class="line"> */</div><div class="line">_XxxxPtr m_pXxxx;</div><div class="line">m_pXxxx.CreateInstance(__uuidof(Xxxx));</div><div class="line"> </div><div class="line"># 或者直接初始化</div><div class="line">_XxxxPtr m_pXxxx(__uuidof(Xxxx));</div></pre></td></tr></table></figure></p>
<p>　　所谓<strong> 智能指针_XxxxPtr </strong>，在初始化(<strong>CreateInstance</strong>)或释放(<strong>Release</strong>)等操作时，它们是一个对象，用<strong><code>.</code>操作符</strong>，其他大部分操作则使用<code>-&gt;</code>操作符。<br>　　数据类型<strong> _XxxxPtr </strong>实际上是由类模板<strong> _com_ptr_t </strong>而得到的一个具体的实例类，<strong> msado15.tlh </strong>中有<strong>：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">_COM_SMARTPTR_TYPEDEF(_Connection, __uuidof(_Connection));</div><div class="line">_COM_SMARTPTR_TYPEDEF(_Recordset, __uuidof(_Recordset));</div><div class="line">_COM_SMARTPTR_TYPEDEF(_Command, __uuidof(_Command));</div></pre></td></tr></table></figure></p>
<p>　　经宏扩展后就得到了<strong> _XxxxPtr </strong>类，该类封装了<strong> Xxxx </strong>对象、<strong>Idispath接口指针 </strong>及一些必要的操作，我们就是通过<strong> 智能指针_XxxxPtr </strong>来操纵<strong> Connection对象、Recordset对象和Command对象</strong>的<strong> !!!</strong></p>
<p>　　<font color="#FF2400" size="4"><strong><span id="ConnString">@- _ConnectionPtr实现数据库连接与断开</span></strong></font><br>　　<strong>ADO</strong>使用<strong>Connection对象</strong>来建立与数据库服务器的连接，只有建立了连接后，才能进行其他有关数据库的访问和操作。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * @function 连接数据库</div><div class="line"> * @param void</div><div class="line"> * @retval BOOL</div><div class="line"> *    连接成功返回true，失败则返回false</div><div class="line"> */</div><div class="line">BOOL CAdoMySQLHelper::MySQL_Connect()&#123;</div><div class="line">　　# 初始化OLE/COM库环境</div><div class="line">　　CoInitialize(NULL);		# ADO也是一个COM组件，COM组件在使用时需要调用CoInitialize初始化库</div><div class="line">　　/*</div><div class="line">　　 * 另外一种方式初始化COM库，建议使用第一种</div><div class="line">　　 * AfxOleInit();</div><div class="line">　　 */</div><div class="line">　　try &#123;</div><div class="line">　　　　# 通过名字创建Connection对象</div><div class="line">　　　　HRESULT hr = this-&gt;m_pConnection.CreateInstance("ADODB.Connection");</div><div class="line">　　　　if(FAILED(hr))&#123;</div><div class="line">　　　　　　AfxMessageBox("创建_ConnectionPtr智能指针失败");</div><div class="line">　　　　　　return false;</div><div class="line">　　　　&#125;</div><div class="line"> </div><div class="line">　　　　# 设置连接超时时间  </div><div class="line">　　　　this-&gt;m_pConnection-&gt;ConnectionTimeout = 600;</div><div class="line">　　　　# 设置执行命令超时时间</div><div class="line">　　　　this-&gt;m_pConnection-&gt;CommandTimeout = 120;</div><div class="line"> </div><div class="line">　　　　/*</div><div class="line">　　　　 * 打开数据库连接两种方式</div><div class="line">　　　　 * Connection对象的Open方法中的连接字符串参数必须是_bstr_t类型，形式为:</div><div class="line">　　　　 *　　"DSN=datasource_name;Database=database_name;uid=user_name;pwd=password"</div><div class="line">　　　　 * 调用Open方法，即通过ODBC Driver连接到Database Server</div><div class="line">　　　　 * m_pConnection-&gt;Open("DSN=datasource_name;Database=database_name;uid=user_name;pwd=password",	</div><div class="line">　　　　 *　　　　　　　　　　　　"",</div><div class="line">　　　　 *　　　　　　　　　　　　"",</div><div class="line">　　　　 *　　　　　　　　　　　　adModeUnknown);</div><div class="line">　　　　 */</div><div class="line">　　　　this-&gt;m_pConnection-&gt;Open("DSN=MySQL5.5;Server=localhost;Database=ZD124UE_DEMO",  #数据库连接字符串</div><div class="line">  　　　　　　　　　　　"root",</div><div class="line">  　　　　　　　　　　　"Tarantula7",</div><div class="line">  　　　　　　　　　　　adModeUnknown);</div><div class="line">　　&#125; catch(_com_error &amp;e)&#123;</div><div class="line">　　　　# 不能使用MessageBox函数，在CView CDialog等类之外要用全局函数AfxMessageBox</div><div class="line">　　　　AfxMessageBox(e.Description());</div><div class="line">　　　　return false;</div><div class="line">　　&#125;</div><div class="line">　　return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<font color="red"><strong>需要注意的是：</font></strong> <strong> 连接字符串的格式为:</strong><br>　　　　<font color="#905a05"><strong>“DSN=datasource_name;Database=database_name;uid=user_name; pwd=password”</font></strong>，<strong>其中各参数的设置需与你的ODBC数据源配置保持一致，如：这里本人的数据源DSN=MySQL5.5，数据库名=ZD124UE_DEMO，用户名=root，密码=Tarantula7</strong>。<br>　　<font color="red"><strong>此外</strong></font>，<strong>CAdoMySQLHelper是一个自定义的数据库辅助类，m_pConnection是其_ConnectionPtr类型的私有成员变量；<code>#</code>后面内容为注释，这里只是为了显示美观才不用<code>//</code>，</strong><font color="red"><strong>后续代码与此部分雷同</strong></font>。</p>
<p>　　类似的，使用<strong>Connection对象</strong>断开数据库连接则相对简单一些。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </div><div class="line"> * @function 断开数据库连接</div><div class="line"> * @param void</div><div class="line"> * @retval void</div><div class="line"> */</span></div><div class="line"><span class="keyword">void</span> CAdoMySQLHelper::MySQL_Close()&#123;</div><div class="line">　　<span class="keyword">if</span>((<span class="literal">NULL</span> != <span class="keyword">this</span>-&gt;m_pConnection) &amp;&amp; (<span class="keyword">this</span>-&gt;m_pConnection-&gt;State))&#123;</div><div class="line">　　　　<span class="keyword">this</span>-&gt;m_pConnection-&gt;Close();		# 关闭连接</div><div class="line">　　　　<span class="keyword">this</span>-&gt;m_pConnection.Release();		# 释放连接</div><div class="line">　　　　<span class="keyword">this</span>-&gt;m_pConnection = <span class="literal">NULL</span>;</div><div class="line">　　&#125;</div><div class="line">   </div><div class="line">　　# 访问完COM库后，需要调用CoUninitialize函数卸载COM库</div><div class="line">　　CoUninitialize();		</div><div class="line">　　<span class="comment">/*</div><div class="line">　　 * 另外一种方式卸载COM库，建议使用第一种</div><div class="line">　　 * AfxOleTerm();</div><div class="line">　　 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<font color="red"><strong>注意：</font></strong> 使用<strong>Release方法释放智能指针在相应的COM接口的引用计数</strong>，回顾上一段有关<a href="#CoreObj">核心对象实例化</a>的描述，也应该明白此处<strong>必须使用<code>·</code>操作符</strong>。<br>　　<font color="red"><strong>此外</strong></font>，数据库的连接与断开通常处于一系列数据库操作的开始与结尾，故此处<strong>在数据库连接函数开头处初始化COM库，在数据库断开函数结尾处卸载COM库！</strong></p>
<p>　　<font color="#FF2400" size="4"><strong>@-_RecordsetPtr打开数据集，操作数据库</strong></font><br>　　使用<strong> Recordset记录集对象 </strong>几乎可以完成所有数据操作。</p>
<p>　　　<strong>&lt;1. 查询记录</strong><br>　　通过调用<strong> Recordset记录集对象 </strong>的<strong>Open方法</strong>即可打开一个数据集。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"># 打开数据集SQL语句，table_name为表名</div><div class="line"><span class="keyword">_variant_t</span> sql = <span class="string">"SELECT * FROM table_name"</span>;</div><div class="line"> </div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">　　# 定义_RecordsetPtr智能指针，然后通过它调用Recordset记录集对象的Open方法</div><div class="line">　　_RecordsetPtr m_pRecordset;</div><div class="line">　　HRESULT hr = m_pRecordset.CreateInstance(__uuidof(Recordset));</div><div class="line">　　<span class="keyword">if</span>(FAILED(hr))&#123;</div><div class="line">　　　　AfxMessageBox(<span class="string">"创建_RecordsetPtr智能指针失败"</span>);</div><div class="line">　　　　<span class="keyword">return</span>;　　　　　　　　　　　　　　　　　　# 中止退出</div><div class="line">　　&#125;</div><div class="line"> </div><div class="line">　　# 打开连接，获取数据集</div><div class="line">　　m_pRecordset-&gt;Open( sql,</div><div class="line">　　　　　　　　　　　　　<span class="keyword">_variant_t</span>((IDispatch*)(<span class="keyword">this</span>-&gt;m_pConnection), <span class="literal">true</span>),</div><div class="line">　　　　　　　　　　　　　adOpenForwardOnly,　　# 游标类型 </div><div class="line">　　　　　　　　　　　　　　　　　　　　　　　　　# adOpenStatic(其他用户所做的添加、更改获删除不可见) </div><div class="line">　　　　　　　　　　　　　　　　　　　　　　　　　# adOpenDynamic(其他用户所做的添加、更改获删除均可见)</div><div class="line">　　　　　　　　　　　　　adLockReadOnly,　　　　# 表示数据库的锁定类型</div><div class="line">　　　　　　　　　　　　　　　　　　　　　　　　　# adLockReadOnly(只读记录集) </div><div class="line">　　　　　　　　　　　　　　　　　　　　　　　　　# adLockOptimistic(仅在调用m_pRecordset-&gt;Update方法时锁定记录)</div><div class="line">　　　　　　　　　　　　　　　　　　　　　　　　　# adLockBatchOptimistic(乐观批更新)</div><div class="line">　　　　　　　　　　　　　adCmdText);　　　　　　# 如果Source是SQL语句，则是adCmdText</div><div class="line">　　　　　　　　　　　　　　　　　　　　　　　　　# 如果Source是表名，则是adCmdTableDirect</div><div class="line"> </div><div class="line">　　# 确定表不为空</div><div class="line">　　<span class="keyword">if</span>(!m_pRecordset-&gt;ADOEOF)&#123;</div><div class="line">　　　　# 移动游标到最前，即ADOBOF</div><div class="line">　　　　m_pRecordset-&gt;MoveFirst();</div><div class="line">   		</div><div class="line">　　　　# 循环遍历数据集，可以获取每行记录每列字段的属性值</div><div class="line">　　　　<span class="keyword">while</span>(!m_pRecordset-&gt;ADOEOF)&#123;</div><div class="line">　　　　　　# 方式一</div><div class="line">　　　　　　<span class="keyword">_variant_t</span> var1 = m_pRecordset-&gt;Fields-&gt;GetItem(<span class="string">"字段名"</span>)-&gt;Value;</div><div class="line">　　　　　　# 此处需要进行类型转换</div><div class="line">　　　　　　var1.ChangeType(VT_INT);</div><div class="line">　　　　　　<span class="keyword">int</span> varInt = var1.intVal;</div><div class="line"> </div><div class="line">　　　　　　# 方式二</div><div class="line">　　　　　　<span class="keyword">_variant_t</span> var2 = m_pRecordset-&gt;Fields-&gt;GetItem(<span class="string">"字段名"</span>)-&gt;GetValue();</div><div class="line">　　　　　　# 此处需要进行类型转换</div><div class="line">　　　　　　var2.ChangeType(VT_BOOL);</div><div class="line">　　　　　　BOOL varBool = (var2.boolVal == VARIANT_FALSE);</div><div class="line"> </div><div class="line">　　　　　　# 方式三</div><div class="line">　　　　　　<span class="keyword">_variant_t</span> var3 = m_pRecordset-&gt;GetCollect(<span class="string">"字段名"</span>);</div><div class="line">　　　　　　# 此处需要进行类型转换</div><div class="line">　　　　　　CString varString = (LPCSTR)<span class="keyword">_bstr_t</span>(var3);</div><div class="line">　　　　　　# 游标向前移动</div><div class="line">　　　　　　m_pRecordset-&gt;MoveNext();</div><div class="line">　　　　&#125; <span class="comment">// end of while(!m_pRecordset-&gt;ADOEOF)</span></div><div class="line">　　　　m_pRecordset-&gt;Close();</div><div class="line">　　&#125; <span class="comment">// end of if(!m_pRecordset-&gt;ADOEOF)</span></div><div class="line">&#125;<span class="keyword">catch</span>(_com_error &amp;e)&#123;</div><div class="line">　　AfxMessageBox(e.ErrorMessage());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>Open</strong>方法<strong>：</strong><br>　　　　第一个参数可以是<strong>SQL语句、表名或一个命令对象；</strong><br>　　　　第二个参数就是前面建立的<strong>连接对象智能指针，编程时参考上述示例代码进行转换以满足参数类型要求；</strong><br>　　　　第三个参数为游标类型<strong>；</strong><br>　　　　第四个参数为数据库的锁定类型<strong>；</strong><br>　　　　第五个参数指定第一个参数<strong>Source</strong>的命令类型<strong>。</strong><br>　　第3-5个参数取值和说明如下表<strong>：</strong><br>    <center><img src="/img/RFID/03-02.png" width="720px"/></center><br>　　<font color="red"><strong>建议：</font></strong><br>　　　　游标类型采用默认的<strong>adOpenForwardOnly</strong>即可。<br>　　　　数据库的锁定类型如果只是查询记录，使用<strong>adLockReadOnly </strong>只读即可<strong>；</strong>如果涉及记录的修改，添加和删除的，则使用<strong>adLockOptimistic。</strong><br>　　　　至于命令类型，如果第一个参数是<strong>SQL语句</strong>，采用<strong>adCmdText</strong>，如果是表名，则是<strong>adCmdTableDirect</strong>。</p>
<p>　　另外，<strong>Fields </strong>是<strong> Recordset对象 </strong>的容器，<strong>GetItem</strong>方法返回的是<strong>Field对象</strong>，而<strong>Value </strong>则是<strong>Field对象 </strong>的一个属性，即该字段的值(即方式一)，也可以利用属性的<strong>Get</strong>方法获得属性(即方式二)。</p>
<p>　　判断是否达到记录集的末尾，使用记录集的<strong>EOF属性</strong>，其值为真则到了结尾；判断是否到达记录集的开头，则可用<strong>BOF属性(注意二者的重命名问题)</strong>。<br>　　上述过程中的类型转换将在后续的<a href="#TypeTransfer">《数据使用与类型转换》</a>部分详细说明。</p>
<p>　　　<strong>&lt;2. 修改记录</strong><br>　　在上述<strong>查询记录</strong>中，改变了<strong>Value属性</strong>的值，即改变了字段的值，同样地，也有三种方式。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"># table_name为表名</div><div class="line"><span class="keyword">_variant_t</span> table_name = <span class="string">"table_name"</span>;</div><div class="line"> </div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">　　# 定义_RecordsetPtr智能指针，然后通过它调用Recordset记录集对象的Open方法</div><div class="line">　　_RecordsetPtr m_pRecordset;</div><div class="line">　　HRESULT hr = m_pRecordset.CreateInstance(__uuidof(Recordset));</div><div class="line">　　<span class="keyword">if</span>(FAILED(hr))&#123;</div><div class="line">　　　　AfxMessageBox(<span class="string">"创建_RecordsetPtr智能指针失败"</span>);</div><div class="line">　　　　<span class="keyword">return</span>;　　　　　　　　　　　　　　　　　　# 中止退出</div><div class="line">　　&#125;</div><div class="line"> </div><div class="line">　　# 打开连接，获取数据集</div><div class="line">　　m_pRecordset-&gt;Open( table_name,</div><div class="line">　　　　　　　　　　　　　<span class="keyword">_variant_t</span>((IDispatch*)(<span class="keyword">this</span>-&gt;m_pConnection), <span class="literal">true</span>),</div><div class="line">　　　　　　　　　　　　　adOpenForwardOnly,　　　# 游标类型</div><div class="line">　　　　　　　　　　　　　adLockOptimistic,　　　　# 仅在下方调用m_pRecordset-&gt;Update方法时锁定记录</div><div class="line">　　　　　　　　　　　　　adCmdTableDirect);　　　# Source是表名，则是adCmdTableDirect</div><div class="line"> </div><div class="line">　　# 确定表不为空</div><div class="line">　　<span class="keyword">if</span>(!m_pRecordset-&gt;ADOEOF)&#123;</div><div class="line">　　　　# 移动游标到最前，即ADOBOF</div><div class="line">　　　　m_pRecordset-&gt;MoveFirst();</div><div class="line"> 			</div><div class="line">　　　　# 循环遍历数据集，获取每行记录每列字段的属性值</div><div class="line">　　　　<span class="keyword">while</span>(!m_pRecordset-&gt;ADOEOF)&#123;</div><div class="line">　　　　　　# 寻找满足某个条件的记录</div><div class="line">　　　　　　<span class="keyword">if</span>(属性值 == (m_pRecordset-&gt;Fields-&gt;GetItem(<span class="string">"字段名"</span>)-&gt;Value))&#123;</div><div class="line">　　　　　　　　# 方式一</div><div class="line">　　　　　　　　<span class="keyword">_variant_t</span> var1;</div><div class="line">　　　　　　　　var1.ChangeType(VT_INT);</div><div class="line">　　　　　　　　var1.intVal = <span class="number">123</span>;</div><div class="line">　　　　　　　　m_pRecordset-&gt;Fields-&gt;GetItem(<span class="string">"字段名"</span>)-&gt;Value = var1;</div><div class="line"> </div><div class="line">　　　　　　　　# 方式二</div><div class="line">　　　　　　　　<span class="keyword">_variant_t</span> var2;</div><div class="line">　　　　　　　　var2.ChangeType(VT_BOOL);</div><div class="line">　　　　　　　　var2.boolVal == VARIANT_TRUE;</div><div class="line">　　　　　　　　m_pRecordset-&gt;Fields-&gt;GetItem(<span class="string">"字段名"</span>)-&gt;PutValue(var2);</div><div class="line"> </div><div class="line">　　　　　　　　# 方式三</div><div class="line">　　　　　　　　<span class="keyword">_variant_t</span> var3 = <span class="string">"xxx"</span>;</div><div class="line">　　　　　　　　m_pRecordset-&gt;PutCollect(<span class="string">"字段名"</span>, var3);</div><div class="line"> </div><div class="line">　　　　　　　　# 必须在移动游标前执行更新!!</div><div class="line">　　　　　　　　m_pRecordset-&gt;Update();</div><div class="line"> </div><div class="line">　　　　　　　　<span class="keyword">break</span>;</div><div class="line">　　　　　　&#125;</div><div class="line">　　　　　　# 游标向前移动</div><div class="line">　　　　　　m_pRecordset-&gt;MoveNext();</div><div class="line"> </div><div class="line">　　　　&#125; <span class="comment">// end of while(!m_pRecordset-&gt;ADOEOF)</span></div><div class="line">　　　　m_pRecordset-&gt;Close();</div><div class="line"> </div><div class="line">　　&#125; <span class="comment">// end of if(!m_pRecordset-&gt;ADOEOF)</span></div><div class="line">&#125;<span class="keyword">catch</span>(_com_error &amp;e)&#123;</div><div class="line">　　AfxMessageBox(e.ErrorMessage());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<font color="red"><strong>注意：</font></strong> 此处涉及对数据库的修改，故第四个参数<strong>数据库锁定类型</strong>需采用<strong>adLockOptimistic</strong>，这样，数据集仅在执行<strong>第49行代码Update方法</strong> 时锁定<strong>；</strong>又第一个参数<strong>Source</strong>是表名，相应的最后一个参数应使用<strong>adCmdTableDirect</strong>。采用三种方式中的任何一种改变字段的值之后，必须在<strong>移动游标或者关闭数据库前</strong>调用<strong>Update 方法 </strong>更新数据集到数据库。</p>
<p>　　　<strong>&lt;3. 添加记录</strong><br>　　利用<strong> Recordset对象 </strong>也能实现增、删操作，不过建议使用<strong>Command对象</strong>完成这两类操作，达到简化的目的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># table_name为表名</div><div class="line">_variant_t table_name = "table_name";</div><div class="line"> </div><div class="line">try&#123;</div><div class="line">　　# 定义_RecordsetPtr智能指针，通过它调用Recordset记录集对象的Open方法</div><div class="line">　　_RecordsetPtr m_pRecordset;</div><div class="line">　　HRESULT hr = m_pRecordset.CreateInstance(__uuidof(Recordset));</div><div class="line">　　if(FAILED(hr))&#123;</div><div class="line">　　　　AfxMessageBox("创建_RecordsetPtr智能指针失败");</div><div class="line">　　　　return;　　　　　　　　　　　　　　　　　　# 中止退出</div><div class="line">　　&#125;</div><div class="line"> </div><div class="line">　　# 打开连接，获取数据集</div><div class="line">　　m_pRecordset-&gt;Open( table_name,</div><div class="line">　　　　　　　　　　　　　_variant_t((IDispatch*)(this-&gt;m_pConnection), true),</div><div class="line">　　　　　　　　　　　　　adOpenForwardOnly,　　　 # 游标类型</div><div class="line">　　　　　　　　　　　　　adLockOptimistic,　　　　 # 仅在调用m_pRecordset-&gt;Update方法时锁定记录</div><div class="line">　　　　　　　　　　　　　adCmdTableDirect);　　　 # Source是表名，则是adCmdTableDirect</div><div class="line">　　if(!m_pRecordset-&gt;Supports(adAddNew))&#123;</div><div class="line">　　　　return;　　# 不允许添加记录，中止退出</div><div class="line">　　&#125;</div><div class="line">　　# 新纪录添加成功后，即自动成为当前记录</div><div class="line">　　m_pRecordset-&gt;AddNew();</div><div class="line"> </div><div class="line">　　# 使用三种方式中的任意一种为新添加的记录各个字段赋值</div><div class="line">　　# ...</div><div class="line"> </div><div class="line">　　# 关闭数据库前执行更新</div><div class="line">　　m_pRecordset-&gt;Update();</div><div class="line">　　m_pRecordset-&gt;Close();</div><div class="line">&#125;catch(_com_error &amp;e)&#123;</div><div class="line">　　AfxMessageBox(e.ErrorMessage());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　　<strong>&lt;4. 删除记录</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># 打开数据集SQL语句，table_name为表名字符串，cond为类似<span class="string">"字段=属性值"</span>的条件字符串</div><div class="line"><span class="keyword">_variant_t</span> sql = <span class="string">"SELECT * FROM "</span> + table_name + <span class="string">" where "</span> + cond;</div><div class="line"> </div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">　　# 定义_RecordsetPtr智能指针，通过它调用Recordset记录集对象的Open方法</div><div class="line">　　_RecordsetPtr m_pRecordset;</div><div class="line">　　HRESULT hr = m_pRecordset.CreateInstance(__uuidof(Recordset));</div><div class="line">　　<span class="keyword">if</span>(FAILED(hr))&#123;</div><div class="line">　　　　AfxMessageBox(<span class="string">"创建_RecordsetPtr智能指针失败"</span>);</div><div class="line">　　　　<span class="keyword">return</span>;　　　　　　　　　　　　　　　　　　# 中止退出</div><div class="line">　　&#125;</div><div class="line"> </div><div class="line">　　# 打开连接，获取数据集</div><div class="line">　　m_pRecordset-&gt;Open( sql,</div><div class="line">　　　　　　　　　　　　　<span class="keyword">_variant_t</span>((IDispatch*)(<span class="keyword">this</span>-&gt;m_pConnection), <span class="literal">true</span>),</div><div class="line">　　　　　　　　　　　　　adOpenForwardOnly,　　　</div><div class="line">　　　　　　　　　　　　　adLockOptimistic,</div><div class="line">　　　　　　　　　　　　　adCmdText);</div><div class="line"> </div><div class="line">　　# 确定表不为空</div><div class="line">　　<span class="keyword">if</span>(!m_pRecordset-&gt;ADOEOF)&#123;</div><div class="line">　　　　# 移动游标到最前，即ADOBOF</div><div class="line">　　　　m_pRecordset-&gt;MoveFirst();</div><div class="line">   		</div><div class="line">　　　　# 循环遍历数据集，删除所有满足条件的记录</div><div class="line">　　　　<span class="keyword">while</span>(!m_pRecordset-&gt;ADOEOF)&#123;</div><div class="line">　　　　　　# 删除的是当前游标所在记录</div><div class="line">　　　　　　m_pRecordset-&gt;Delete(adAffectCurrent);</div><div class="line">　　　 </div><div class="line">　　　　　　# 必须在移动游标前执行更新!!</div><div class="line">　　　　　　m_pRecordset-&gt;Update();</div><div class="line">　　　　　　m_pRecordset-&gt;MoveNext();</div><div class="line">　　　　&#125; <span class="comment">// end of while(!m_pRecordset-&gt;ADOEOF)</span></div><div class="line">　　　　m_pRecordset-&gt;Close();</div><div class="line"> </div><div class="line">　　&#125; <span class="comment">// end of if(!m_pRecordset-&gt;ADOEOF)</span></div><div class="line">&#125;<span class="keyword">catch</span>(_com_error &amp;e)&#123;</div><div class="line">　　AfxMessageBox(e.ErrorMessage());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<font color="red"><strong>注意：</font></strong> <strong>cond条件字符串 </strong>查询条件为<strong>文本格式 </strong>时要求用引号，如<strong>varchar、char、time、datetime类型</strong>等(单引号、双引号一般都有效)；反之数值格式不要加引号，如bit、double、float、int类型等(不过加了引号也不会报错，会自动转换类型，但是最好不要加引号)。 <strong>SQL语句 </strong>拼接时注意拼接字符串间是否需要添加空格，防止拼接字符串中的两个关键字因连接在一次而出错。</p>
<p>　　<font color="#FF2400" size="4"><strong>@-_CommandPtr执行SQL语句</strong></font><br>　　使用<strong> Command对象 </strong>的关键就是把表示命令的<strong>MySQL语句</strong>设置到<strong>CommandText属性</strong> 中，然后再调用<strong> Command对象 </strong>的<strong>Execute方法</strong> 执行。一般情况下在命令中无需使用参数，但有时使用参数，可以增加其灵活性和效率。<strong>SQL语句</strong> 中的问号<code>?</code>就代表参数，如果有多个参数，就多放几个问号<code>?</code>，每个问号<code>?</code>代表一个参数。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * @function 对数据库进行删除操作</div><div class="line"> * @param </div><div class="line"> *   @CString uid唯一标识删除记录</div><div class="line"> *   @Cstring table指定删除记录所在表名</div><div class="line"> * @retval BOOL</div><div class="line"> *   成功删除返回true，失败则返回false</div><div class="line"> */</div><div class="line">BOOL CAdoMySQLHelper::MySQL_Delete(CString uid, CString table)&#123;</div><div class="line">　　_CommandPtr m_pCommand;</div><div class="line">　　try&#123;</div><div class="line">　　　　HRESULT hr = m_pCommand.CreateInstance("ADODB.Command");</div><div class="line">　　　　if(FAILED(hr))&#123;</div><div class="line">　　　　　　AfxMessageBox("创建_CommandPtr智能指针失败");</div><div class="line">　　　　　　return false;</div><div class="line">　　　　&#125;</div><div class="line">　　　　# 定义为无参数</div><div class="line">　　　　_variant_t vNULL;</div><div class="line">　　　　vNULL.vt = VT_ERROR;</div><div class="line">　　　　vNULL.scode = DISP_E_PARAMNOTFOUND;	</div><div class="line">　　　　# 注意文本格式数据需要使用引号，\'此处使用转义符；拼接字符串间合理使用空格！</div><div class="line">　　　　m_pCommand-&gt;CommandText = "delete from " + (_bstr_t)table + " where UID=\'" + (_bstr_t)uid +"\'";</div><div class="line">　　　　 </div><div class="line">　　　　# 非常关键的一句，将建立的连接与命令对象绑定							</div><div class="line">　　　　m_pCommand-&gt;ActiveConnection = this-&gt;m_pConnection;</div><div class="line">   </div><div class="line">　　　　# 执行删除命令</div><div class="line">　　　　m_pCommand-&gt;Execute(&amp;vNULL, &amp;vNULL, adCmdText);		</div><div class="line">　　&#125; catch(_com_error &amp;e) &#123;	</div><div class="line">　　　　AfxMessageBox(e.ErrorMessage());</div><div class="line">　　　　return false;</div><div class="line">　　&#125;</div><div class="line">　　return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　当命令对象的<strong>SQL语句</strong> 带有参数时，可以通过以下方式为其添加参数数据<strong>：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">_ParameterPtr Param;</div><div class="line"># adInteger为DataTypeEnum，表示数据类型；adParamInput则表示参数方向</div><div class="line">Param = m_pCommand-&gt;CreateParameter(<span class="keyword">_bstr_t</span>(<span class="string">"参数名"</span>), adInteger, adParamInput, <span class="number">-1</span>);</div><div class="line">Param-&gt;Value = <span class="keyword">_variant_t</span>(<span class="string">"参数值"</span>);</div><div class="line">m_pCommand-&gt;Parameters-&gt;Append(Param);</div></pre></td></tr></table></figure></p>
<p>　　第4个参数为长度，如果是固定长度的数据类型该参数为<strong>-1</strong>；如果是字符串等可变长度类型，该参数的值为实际长度。<strong>Parameters</strong>是<strong> Command对象 </strong>的一个容器，<strong>Append</strong>进去的参数按先后顺序与<strong>SQL语句</strong>中的<code>?</code>从左到右一一对应。</p>
<p>　　<font color="red"><strong>注意：</font></strong> 用<strong> Command 和 Connection对象 </strong>也能得到一个记录集，不过这种方式得到的<strong>Recordset </strong>是只读的，因为在打开<strong>Recordset </strong>之前，我们无法设置它的<strong> LockType(故使用默认值adLockReadOnly)</strong>，而在打开之后设置的<strong>LockType </strong>将不起作用。故一般我们通过<strong> Command对象 </strong>来执行<strong>Insert、Delete、Update三类SQL语句</strong>，并不需要操作数据集；<strong> Command对象 </strong>代码简洁( 你可以比较上述两种实现)，能够达到简化数据库操作的目的。</p>
<p>　　<font color="#FF2400" size="4"><span id="TypeTransfer"><strong>@-数据使用与类型转换</strong></span></font><br>　　计算机语言多种多样，各自又都有自己的数据类型，<strong>COM</strong> 产生目的，其中之一就是跨语言。<strong>_variant_t </strong>数据类型就具有跨语言的特性，同时它可以表示(存储)任意类型的数据。从C语言的角度来讲，<strong>_variant_t </strong>其实是一个结构，结构中用一个域(vt)表示该变量到底表示的是什么类型数据，同时真正的数据则存贮在<strong>union</strong>空间中。常见的<strong>COM类型 </strong>类型转换使用如下<strong>：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">_variant_t</span> var;</div><div class="line"> </div><div class="line"># 对<span class="keyword">_variant_t</span>变量赋值</div><div class="line">var.ChangeType(VT_BOOL/VT_INT/VT_BSTR...);</div><div class="line">var.intVal/boolVal/bstrVal... = xxx;</div><div class="line"> </div><div class="line"># 从<span class="keyword">_variant_t</span>变量取值</div><div class="line"><span class="keyword">if</span>(var.vt != VT_NULL)&#123;</div><div class="line">　　var.ChangeType(VT_BOOL/VT_INT/VT_BSTR...);</div><div class="line">　　<span class="keyword">int</span>/<span class="keyword">bool</span>/CString... xxx = var.intVal/boolVal/bstrVal...;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"># 对于字符串，建议通过以下方式进行赋值和取值操作</div><div class="line">var = <span class="string">"..."</span>;</div><div class="line">xxx = (LPCSTR)<span class="keyword">_bstr_t</span>(var);</div></pre></td></tr></table></figure></p>
<p>　　其中需要留意的是<strong>VT_BOOL</strong>类型与更为常见的<strong>bool </strong>类型的区别<strong>：</strong><br>    <center><img src="/img/RFID/03-03.png" width="640px"/></center><br>　　注意到<strong>VARIANT_TRUE </strong>的值并不是<strong>1</strong>，而是<strong>-1！ </strong>另外，<strong>任何布尔类型的”假”都是0</strong>，因此作为一个好习惯，在做布尔判断的时候，<strong>不要和”真值”相比较，而要与”假值”做比较</strong>。<br>　　<br>　　<font color="#FF2400" size="4"><strong>@-关闭与释放</strong></font><br>　　用完三大核心对象之后，需要关闭并释放之，方法还是通过<strong>智能指针</strong>来实现，这一点在上述的实例代码中并没有很好的实现，是一个值得考虑和改进的地方(参见下一段<strong>错误捕获</strong>的示例代码)<strong>：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">m_Recordset-&gt;Close();</div><div class="line">m_pConnection-&gt;Close();</div><div class="line"># 注意Command对象没有Close方法</div><div class="line">m_Recordset.Release();</div><div class="line">m_pCommand.Release();</div><div class="line">m_pConnection.Release();</div></pre></td></tr></table></figure></p>
<p>　　<font color="#FF2400" size="4"><strong>@-错误捕获</strong></font><br>　　数据库操作难免出现错误(<strong>连接串错误，SQL语句错误等</strong>)。对所有调用<strong>ADO COM库</strong>的语句一定要用<strong> try-catch </strong>语句捕捉异常，否则发生异常时，程序会异常退出。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">　　/*</div><div class="line">　　 * 调用ADO API的所有语句</div><div class="line">　　 */</div><div class="line">&#125; catch(_com_error &amp;e)&#123;</div><div class="line">　　# 若连接打开，需要在异常处理中关闭和释放连接</div><div class="line">　　if((NULL != this-&gt;m_pConnection) &amp;&amp; this-&gt;m_pConnection-&gt;State)&#123;</div><div class="line">　　	　this-&gt;m_pConnection-&gt;Close();</div><div class="line">　　	　this-&gt;m_pConnection.Release();</div><div class="line">　　	　this-&gt;m_pConnection = NULL;			</div><div class="line">　　&#125;</div><div class="line"></div><div class="line">　　# 若记录集打开，需要在异常处理中关闭和释放记录集</div><div class="line">　　if((NULL != m_pRecordset) &amp;&amp; m_pRecordset-&gt;State)&#123;</div><div class="line">　　	　m_pRecordset-&gt;Close();</div><div class="line">　　	　m_pRecordset.Release();</div><div class="line">　　	　m_pRecordset = NULL;			</div><div class="line">　　&#125;</div><div class="line"></div><div class="line">　　# 需要在异常处理中释放命令对象</div><div class="line">　　if((NULL != m_pCommand) &amp;&amp; m_pCommand-&gt;State)&#123;</div><div class="line">　　	　m_pCommand.Release();</div><div class="line">　　	　m_pCommand = NULL;			</div><div class="line">　　&#125;</div><div class="line"></div><div class="line">　　# 不能使用MessageBox函数，在CView、CDialog等之外要用全局函数AfxMessageBox</div><div class="line">　　AfxMessageBox(e.Description());	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<font color="red"><strong>注意： </strong></font> <strong>“&amp;”</strong>只是一个引用，写不写无所谓，切忌写成<strong> “_com_error *e” </strong>，因为这时异常是<strong> _com_error </strong>类型却对着<strong> _com_error* </strong>来捕获，当然捕获不到<strong>!! </strong>可能还是会导致程序异常退出。<br>　　另外，<strong>catch块 </strong>中只需释放<strong>try </strong>块中操纵的对象即可，上述代码只是为了演示所有例子。　<br>　　<br>　　<font color="#FF2400" size="4"><strong>@-封装自己的数据库辅助类</strong></font><br>　　习惯上，我们会将对数据库的一系列重复的操作封装起来，构建一个<strong>数据库辅助类</strong>，提供<strong>数据库连接、断开、以及基本的增、删、改、查操作</strong>。 这样，在应用开发过程中，我们就可以直接通过<strong> 数据库辅助类 </strong>完成需要实现的功能，大大简化代码，也使应用开发更有目的，更有层次；提高效率，方便维护。<br>　　<font color="#625A05"><strong>VC++类视图选中”工程名 classes”右键<font size="5">→</font> New Class<font size="5">→</font> Class Type选择Generic Class，输入数据库辅助类类名， </strong></font>即可自动生成辅助类代码框架。<strong>DEMO</strong>中的数据库辅助类定义如下<strong>：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"># RemainTimeTable余时表记录结构</div><div class="line"><span class="keyword">struct</span> RemainTime&#123;</div><div class="line">　　CString UID;</div><div class="line">　　<span class="keyword">int</span> RemainSeconds;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"># OnTable上机表记录结构</div><div class="line"><span class="keyword">struct</span> OnRecord&#123;</div><div class="line">　　CString UID;</div><div class="line">　　<span class="keyword">int</span> RemainSeconds;</div><div class="line">　　CString StartTime;</div><div class="line">　　BOOL isOvertime;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">class</span> CAdoMySQLHelper  </div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　# 构造函数&amp;析构函数</div><div class="line">　　CAdoMySQLHelper();</div><div class="line">　　<span class="meta"># virtual是因为当用基类操作派生类(派生类引用赋值给基类指针)，在析构时防止只析构基类而不析构派生类的情况	</span></div><div class="line">　　<span class="keyword">virtual</span> ~CAdoMySQLHelper();	</div><div class="line"> </div><div class="line">　　# 连接数据库</div><div class="line">　　<span class="function">BOOL <span class="title">MySQL_Connect</span><span class="params">()</span></span>;</div><div class="line">　　# 关闭数据库</div><div class="line">　　<span class="function"><span class="keyword">void</span> <span class="title">MySQL_Close</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">　　# 数据库增、删、改、查操作函数</div><div class="line">　　# 对数据库进行插入操作</div><div class="line">　　<span class="function">BOOL <span class="title">MySQL_Insert</span><span class="params">(<span class="keyword">struct</span> RemainTime record)</span></span>;</div><div class="line">　　<span class="function">BOOL <span class="title">MySQL_Insert</span><span class="params">(<span class="keyword">struct</span> OnRecord record)</span></span>;</div><div class="line">　　# 对数据库进行删除操作</div><div class="line">　　<span class="function">BOOL <span class="title">MySQL_Delete</span><span class="params">(CString uid, CString table)</span></span>;</div><div class="line">　　# 对数据库进行更新操作</div><div class="line">　　<span class="function">BOOL <span class="title">MySQL_UpdateRemainTime</span><span class="params">(CString uid, <span class="keyword">int</span> updateTime)</span></span>;</div><div class="line">　　# 对数据库进行查询操作，查询语句为cond，例如: <span class="string">"UID = xxxx"</span></div><div class="line">　　<span class="function"><span class="keyword">void</span>* <span class="title">MySQL_Query</span><span class="params">(CString cond, CString table)</span></span>;</div><div class="line">　　# 定时扫描OnTable，使用扫描周期timer更新当前上机用户余时，捕捉超时用户</div><div class="line">　　<span class="function"><span class="keyword">void</span> <span class="title">MySQL_ScanOnTable</span><span class="params">(<span class="keyword">int</span> timer)</span></span>;</div><div class="line"> </div><div class="line"><span class="keyword">private</span>:</div><div class="line">　　# 保存打开的数据库连接智能指针</div><div class="line">　　_ConnectionPtr m_pConnection;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>　　<font color="red"><strong>说明： </strong></font><br>　　　除了数据库的连接和断开属于典型、通用的功能外，其他关于数据库的<strong> 增、删、改、查 </strong>操作建议在需要时才添加，同时根据自己项目的实际需求对接口进行调整(调整参数、调整返回值等)，必要时也需要添加新的特定功能的接口函数。<br>　　　另外，强烈建议采用<strong> static </strong>将各部分接口调整为类方法，这样使用辅助类将更加方便，直接通过<strong>辅助类调用接口</strong> 即可；也更高效，<strong>不需要对辅助类进行实例化</strong> 即可使用接口！</p>
<h2 id="最后，小结"><a href="#最后，小结" class="headerlink" title="最后，小结"></a><strong>最后，小结</strong></h2><p>　　<font color="blue">本文通过对当前常用的几种<strong>数据库访问技术</strong>的介绍，引出项目中使用数据库的<strong>开发原理</strong>，进而推出项目数据库的<strong>开发流程</strong>。详细地介绍了如何通过<strong>ADO编程</strong>，实现操纵<strong>MySQL数据库</strong>。出于<strong>ADO编程</strong>采用其<strong>COM库</strong>的<strong>API</strong>这种方式，故跟大家简短叙说了<strong>COM规范 </strong>的由来，主要是领会其中蕴含的编程思想。相信到这里，你对如何<strong>使用ADO操纵MySQL数据库</strong> 肯定有了比较深刻的认识。思路清晰了，那就开始Coding吧！！！</font></p>
<h2 id="附录-常用的SQL语句整理"><a href="#附录-常用的SQL语句整理" class="headerlink" title="附录 - - 常用的SQL语句整理"></a><font color="#625A05" size="3"><strong>附录 - - 常用的SQL语句整理</strong></font></h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"># 修改数据库密码</div><div class="line">use mysql;</div><div class="line">update user set password=password('新密码') where user='root';</div><div class="line">flush privileges;</div><div class="line"> </div><div class="line"># 查看数据库是32位还是64位</div><div class="line">show variables like "%version_%";</div><div class="line"># 查询结果中的version_compile_os即为数据库位数，Win32和Win64分别对应32位和64位</div><div class="line"> </div><div class="line"># 创建数据库</div><div class="line">drop database if exists database_name;</div><div class="line">create database database_name;</div><div class="line"> </div><div class="line"># 查看所有数据库名</div><div class="line">show databases;</div><div class="line"> </div><div class="line"># 表操作前需要使用某个数据库 注意database_name大小写不敏感</div><div class="line">use database_name;</div><div class="line"> </div><div class="line"># 创建表</div><div class="line">drop table if exists table_name;</div><div class="line">create table table_name(</div><div class="line">　　字段1名字 字段1类型 字段1属性,</div><div class="line">　　字段2名字 字段2类型 字段2属性,</div><div class="line">　　...</div><div class="line">);</div><div class="line"> </div><div class="line"># 查看所有表名</div><div class="line">show tables;</div><div class="line"> </div><div class="line"># 查看表的结构时使用，注意table_name大小写不敏感</div><div class="line">show create table table_name;</div><div class="line"> </div><div class="line"># 调整表某个字段的数据类型</div><div class="line">alter table table_name modify column 字段 新的数据类型;</div><div class="line"> </div><div class="line"># 删除表</div><div class="line">drop table if exists table_name;</div><div class="line"> </div><div class="line"># 删除数据库 </div><div class="line">drop database if exists database_name;</div><div class="line"> </div><div class="line"># 查询记录(where不写则查询所有记录)</div><div class="line">select * from table_name [where condition];</div><div class="line"> </div><div class="line"># 添加记录</div><div class="line">insert into table_name(字段1, 字段2...) values(字段1值, 字段2值...);</div><div class="line">insert into table_name values(字段1值, 字段2值, 字段3值, ..., 最后一个字段值);</div><div class="line"> </div><div class="line"># 更新记录(where不写则更新所有记录)</div><div class="line">update table_name set 字段=字段值 [where condition];</div><div class="line"> </div><div class="line"># 删除记录(where不写则删除所有记录)</div><div class="line">delete from table_name [where condition];</div><div class="line">  </div><div class="line"># 其他的自行度娘"MySQL下如何xxxx"</div></pre></td></tr></table></figure>
<h2 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a><strong>Version Control</strong></h2><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse"><br><tr><td style="width: 60px; text-align: center">版本号</td><td style="width: 80px; text-align: center">日期</td><td style="width: 320px; text-align: center">内容</td><td style="width: 100px; text-align: center">作者</td></tr><tr text-align="center"><td style="text-align: center">V0.1</td><td style="text-align: center">2015.11.29</td><td style="text-align: center">起草博客</td><td style="text-align: center">Tarantula-7</td></tr></table>
]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下的静态库和动态库]]></title>
      <url>/2015/10/16/iotCourse_02%20Windows%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>　　本文旨在指导大家如何创建和使用<strong>Windows下的DLL动态链接库</strong>以及通过<strong>DLL动态链接库导出导入</strong>这一过程介绍一些<strong>编译链接、动态加载</strong>的小知识。本章内容作为本学期项目开发的延伸扩展，目的是让大家对项目中使用的读写器接口函数库由来以及如何在项目中使用该函数库有更深入的理解。在这个过程，大家将会初步接触并了解：<br>　　　　<strong>+1.　</strong> <strong>Windows静态链接库和动态链接库</strong>的一些背景知识;<br>　　　　<strong>+2.　</strong> 如何创建和使用<strong>DLL动态链接库</strong>。<br><a id="more"></a></p>
<h2 id="静态库和动态库的区别"><a href="#静态库和动态库的区别" class="headerlink" title="静态库和动态库的区别"></a><strong>静态库和动态库的区别</strong></h2><p>　　<font color="#FF2400"><strong>@-静态链接库(.lib)</strong></font><br>　　函数和数据被编译进一个二进制文件。在使用静态库编译链接成可执行文件时，链接器从库中复制这些<font color="red"><strong>函数和数据</strong></font>并把它们和应用程序的其他模块组合起来创建.exe可执行程序。</p>
<p>　　<font color="#FF2400"><strong>@-动态链接库(.lib &amp; .dll)</strong></font><br>　　一个引入库(.lib)文件和一个DLL(.dll)文件。<font color="red"><strong>引入库文件只包含该DLL导出的函数和变量的符号名，并没有包含实际代码，只是用来为链接程序提供必要信息，以便在可执行文件中建立动态链接时需要用到的重定位表</strong></font>，而<strong>.dll文件包含该DLL实际的函数和数据</strong>。在使用动态库编译链接成可执行文件时，只链接该DLL的引入库文件，该DLL文件中的函数代码和数据并不复制到可执行文件中，直到可执行程序执行时，才将该DLL映射到进程的地址空间中，然后访问DLL中导出的函数。<br>　　动态链接库包含能被可执行程序或其他DLL调用来完成某项工作的函数<strong> → </strong><font color="red"><strong>动态链接库只有在其他模块调用库中的函数时才发挥作用</strong>。</font></p>
<p>　　<font color="#FF2400"><strong>@-为什么使用动态链接库</strong></font><br>　　<font color="green"><strong>&lt;1. </strong>节省磁盘空间和内存</font><br>　　　如果多个应用程序需要访问同样的功能，可以将该功能以DLL的形式提供，这样在机器上只需要一份该DLL文件就可以了，节省磁盘空间；多个应用程序使用同一个DLL，该DLL的页面只需要放入内存一次，所有的应用程序都可以共享它的页面，内存的使用更加有效。<br>　　<font color="green"><strong>&lt;2. </strong>采用多种语言编写动态链接库</font><br>　　　采用自己熟悉的开发语言编写DLL，然后由其他语言编写的可执行程序来调用这些DLL。<br>　　<font color="green"><strong>&lt;3. </strong>增强产品功能</font><br>　　　更新DLL，替换产品原有的DLL。<br>　　<font color="green"><strong>&lt;4. </strong>提供二次开发平台</font><br>　　　用户利用DLL，调用其中实现的功能，开发业务所需的产品。<br>　　<font color="green"><strong>&lt;5. </strong>简化项目管理</font><br>　　　并行开发，不同功能交由各项目小组以多个DLL的方式实现。</p>
<p>　　<font color="#FF2400"><strong>@-我们可以怎么做</strong></font><br>　　<strong>把完成某种功能的函数放在一个动态链接库中，提供给其他程序调用。</strong></p>
<h2 id="利用VC-创建DLL"><a href="#利用VC-创建DLL" class="headerlink" title="利用VC++创建DLL"></a><strong>利用VC++创建DLL</strong></h2><p>　　<strong>第一步： </strong> <strong>VC++</strong> <strong>→</strong> <strong>File</strong> <strong>→</strong> <strong>New</strong> <strong>→</strong> <strong>Win32 Dynamic-Link Library</strong> <strong>→</strong> <strong>An Empty DLL Project</strong>，创建动态链接库工程；<br>    <center><img src="/img/RFID/01-00-01.png" width="720px"/></center><br>　　<strong>第二步： </strong> <strong>VC++</strong> <strong>→</strong> <strong>File</strong> <strong>→</strong> <strong>New</strong> <strong>→</strong> <strong>C++ Source(Header) File</strong>添加源文件或头文件，编写代码；<br>    <center><img src="/img/RFID/01-00-02.png" width="720px"/></center><br>　　<strong>第三步： </strong> <strong>Build</strong>，便会在工程目录下的<strong> Debug/ </strong>下查看到<strong> 工程名.dll </strong>动态链接库文件以及<strong> 工程名.lib </strong>引入库文件。</p>
<p>　　<font color="red">具体代码如何编写以及生成动态链接库后，如何在我们的应用程序中调用库中的函数实现某种功能将会在下面章节仔细讲述</font>。</p>
<h2 id="从DLL中导出全局函数"><a href="#从DLL中导出全局函数" class="headerlink" title="从DLL中导出全局函数"></a><strong>从DLL中导出全局函数</strong></h2><p>　　为了让DLL导出一些函数，需要在每一个将要被导出的函数前面添加标识符: <strong><code>_declspec(dllexport)</code></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 函数声明 </div><div class="line">_declspec(dllexport) <span class="function">ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>;</div><div class="line"></div><div class="line"><span class="function">ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>&#123;</div><div class="line">　　...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="从DLL中导出C-类"><a href="#从DLL中导出C-类" class="headerlink" title="从DLL中导出C++类"></a><strong>从DLL中导出C++类</strong></h2><p>　　类似的，使用导出标识符: <strong><code>_declspec(dllexport)</code></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 类指定导出标识 </div><div class="line"><span class="keyword">class</span> _declspec(dllexport) ClassName</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　<span class="function">ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>指定导出标识的类的所有函数都将被导出；否则，只有那些声明了导出标识的类成员函数才会被导出。</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 只有类成员函数指定导出标识 </div><div class="line"><span class="keyword">class</span> ClassName</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　_declspec(dllexport) <span class="function">ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><font color="red">注意：</font></strong><br>　　<strong>导出的成员函数必须具有public访问权限，否则即使被导出，也不能被其他程序访问</strong>。</p>
<h2 id="使用dumpbin命令查看DLL导出导入信息"><a href="#使用dumpbin命令查看DLL导出导入信息" class="headerlink" title="使用dumpbin命令查看DLL导出导入信息"></a><strong>使用dumpbin命令查看DLL导出导入信息</strong></h2><p>　　首先，<strong>DUMPBIN.EXE</strong>程序位于<strong>/Bin/</strong>目录下(中文版则是<strong>/VC98/Bin/</strong>)。为了在<strong>cmd命令行</strong>里面方便使用，我们将其所在的全局路径加入到环境变量<strong>Path</strong>中，如下图(火狐/IE浏览器可以点击查看大图)。<br>    <center><img src="/img/RFID/01-01.png" width="800px"/></center><br>　　右键计算机，属性<strong>→</strong>高级系统配置<strong>→</strong>环境变量<strong>→</strong>双击系统变量中的<strong>Path→</strong>在变量值后面加上<strong>DUMPBIN.EXE</strong>程序所在全局路径。<strong>(<font color="red">注意：添加路径前需要有”；”隔开，因为变量值是通过”；”分隔的</font>)</strong><br>　　接下来我们就可以使用这个工具查看一个<strong>DLL</strong>提供的导出函数：<strong><code>dumpbin -exports xxx.dll</code></strong>(如下左图)。<br>　　其中要注意的<strong>“ordinal列”</strong>列出的信息是导出函数的序号；<strong>“RVA列”</strong>是一些地址值，也就是导出函数在<strong>DLL</strong>模块中的位置，通过该地址值可以在<strong>DLL</strong>中找到相应的函数；<strong>“name列”</strong>是导出函数的名称，使用该<strong>DLL</strong>的客户端程序通过该名称找到所需的<strong>DLL</strong>导出函数。<br>    <center><img src="/img/RFID/01-02.png" width="800px"/></center><br>　　还可以使用这个工具查看一个<strong>可执行模块依赖的动态链接库信息</strong>以及该<strong>动态链接库中被可执行模块调用的函数</strong>：<strong><code>dumpbin -imports xxx.exe</code></strong>。<br>　　<strong>这里需要注意的是：一个可执行模块依赖的库函数名称必须与该动态链接库导出的函数名字相一致，因为可执行模块使用依赖的库函数名称来调用DLL中的函数，只有在二者相一致的情况下，可执行模块才能找到所需的DLL导出函数</strong>。因此客户端程序引用的函数符号名必须与<strong>DLL</strong>中的导出函数名称一致才能成功调用！</p>
<p>　　我们知道，<strong>C++</strong>支持函数重载，对于重载的多个函数来说，依照我们上述的说法，他们的导出函数名理应都是一样的，显然这样的话调用的时候会出问题。为了加以区分，<strong>C++</strong>会按照自己的规则篡改函数的名称，这一过程称为<strong>“名字改编”</strong>。一旦对导出函数名字进行改编，就会造成调用时<strong>可执行模块依赖的库函数名称与动态链接库导出的函数名字不一致</strong>的问题。这就需要在导出时设置导出规则，然后在调用时设置相匹配的调用约定，最终<strong>保证引用的函数名称与动态链接库中导出的函数名字一致</strong>。</p>
<h2 id="DLL导出函数的名字改编问题"><a href="#DLL导出函数的名字改编问题" class="headerlink" title="DLL导出函数的名字改编问题"></a><strong>DLL导出函数的名字改编问题</strong></h2><p>　　接上面所说的，<strong>C++</strong>编译器在生成<strong>DLL</strong>时，会对导出的函数进行名字改编，并且不同的编译器使用的改编规则不一样，因此改编后的名字是不一样的。这样，如果利用不同的编译器分别生成<strong>DLL</strong>和生成访问该<strong>DLL</strong>的客户端程序的话，后者在访问该<strong>DLL</strong>的导出函数时就会因二者函数符号不一致而出现调用失败的问题。<br>　　<font color="#FF2400"><strong>1. extern “C”</strong></font><br>　　利用限定符：<strong>extern “C”</strong>(注意<strong>C要大写</strong>)可以解决C++和C语言之间相互调用时函数命名的问题，使用该限定符，动态链接库文件在编译时，导出函数的名称不会发生改编。下面是一个具体例子，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllExample.cpp</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.18</div><div class="line"> *	Description: 使用extern "C"范例</div><div class="line"> ******************************************************/</span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　我们使用<strong>DUMPBIN.EXE命令</strong>来查看生成的<strong>DLL</strong>导出函数信息，如下图：<br>    <center><img src="/img/RFID/01-03.png" width="720px"/></center><br>　　容易看到，导出函数名与函数声明中的函数名是一致的<font color="green">(<strong>= </strong>后面的函数名为一个等价的导出函数名)</font>，这就是<strong>extern “C” </strong>限定符的作用，我们可以把该限定符去掉，对比一下没有使用<strong>extern “C” </strong>限定符该<strong>DLL</strong>的导出信息。<br>　　如下所示，把原先的声明注释掉，改为没有<strong>extern “C” </strong>限定符修饰的普通导出函数声明。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//extern "C" _declspec(dllexport) int add(int a, int b);</span></div><div class="line"><span class="comment">//extern "C" _declspec(dllexport) int subtract(int a, int b);</span></div><div class="line">_declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">_declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　正如上述所说的，没有添加<strong>extern “C” </strong>限定符，<strong>C++</strong>编译器对导出函数进行了名字改编(从下图我们可以看到，改变后的名字加上了<strong>?</strong>作为前缀，<strong>@@…</strong>作为后缀)。<br>    <center><img src="/img/RFID/01-04.png" width="720px"/></center><br>　　但是使用<strong>extern “C” </strong>限定符这种方法有一个缺陷，就是不能用于导出<strong>C++</strong>类(如下图，函数名字仍然发生改编)。<strong>extern “C” </strong>限定符只能用于导出上述的全局函数这种情况。<br>    <center><img src="/img/RFID/01-05.png" width="800px"/></center><br>　　以下这种方式则是不允许的，编译时直接报错！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Point&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　<span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">void</span> Point::output(<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</div><div class="line">　　<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<font color="#FF2400"><strong>2. _stdcall标准调用</strong></font><br>　　上述添加<strong>extern “C” </strong>限定符这种方式保证不对导出函数名字进行改编，这样在引用导出函数时就可以直接通过原始函数名字进行调用，确保<strong>依赖库函数名称与导出的函数名字一致</strong>。<br>　　如果导出函数的调用约定发生了改变，那么即使使用了<strong>extern “C” </strong>限定符，该函数的名字仍会按照调用约定发生相应的改编。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllExample.cpp</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.18</div><div class="line"> *	Description: 使用_stdcall标准调用范例</div><div class="line"> ******************************************************/</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="keyword">int</span> _<span class="function">stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="keyword">int</span> _<span class="function">stdcall <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> _<span class="function">stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">　　<span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> _<span class="function">stdcall <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">　　<span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　从下图的导出函数信息，我们可以知道：在添加了<strong>_stdcall关键字</strong>之后，导出函数的名字仍发生改编(在原始函数名字前面添加<strong> _ </strong>，后面添加一个<strong>@</strong>，接着是<strong>数字，表示函数参数所占的字节数</strong>，例如<strong>add函数具有两个int类型的参数，占用8个字节，所以add函数该数字为8</strong>)。<br>    <center><img src="/img/RFID/01-06.png" width="720px"/></center><br><strong>总结一下：</strong><br>　　1）上述<strong> 第1.节 </strong>中没有添加<strong>_stdcall关键字</strong>，实际上该函数的调用约定是缺省的<strong>C调用预定</strong>，该约定不对名字进行改编；<br>　　2）添加<strong>_stdcall关键字</strong>后，调用约定变成<strong>标准调用约定</strong>，<strong>标准调用约定</strong>是<strong>WINAPI调用约定</strong>，也就是<strong>pascal调用约定</strong>，显然这种调用约定与<strong>C调用预定</strong>不一样，会对函数名字进行改编，改编方式则按照我们上面描述的规则进行。<br>　　3）因此，我们也可以在导出函数时添加调用约定，然后在引用函数时使用相匹配的调用约定进行调用，这样也能解决因名字改编出现的<strong>依赖库函数名称与导出的函数名字不一致</strong>的问题。</p>
<p>　　<font color="#FF2400"><strong>3. DEF模块定义文件</strong></font><br>　　除了上述两种方式外，我们还可以通过一个称为<strong>模块定义文件(DEF)</strong>的方式，实现动态链接库文件在编译时，导出函数的名称不要发生改编。动态链接库源文件就和我们最开始介绍的普通导出函数源文件一致：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllExample.cpp</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.18</div><div class="line"> *	Description: 使用DEF模块定义文件范例</div><div class="line"> ******************************************************/</span></div><div class="line">_declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">_declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　按照添加源文件的方式，我们为工程添加一个模块定义文件，<strong>File→New→Files选项卡→Text File→文件名后缀一定要是.def(文件名建议和工程名一致)</strong>。<br>    <center><img src="/img/RFID/01-07.png" width="720px"/></center><br>　　模块定义文件(<strong>DllExample.def</strong>)内容如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllExample.def</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.18</div><div class="line"> *	Description: 导出函数模块定义文件</div><div class="line"> ******************************************************/</span></div><div class="line">LIBRARY DllExample</div><div class="line">DESCRIPTION 描述一些关于DllExample导出函数信息</div><div class="line"> </div><div class="line">EXPORTS</div><div class="line">add</div><div class="line">subtract</div></pre></td></tr></table></figure></p>
<p>　　<strong> LIBRARY xxx </strong>一行可加可不加，用来指定动态链接库的内部名称，注意<strong>该名称与生成的动态链接库的名称(也就是我们的工程名)一定要匹配</strong>；<br>　　<strong> DESCRIPTION xxx </strong>一行是对该动态链接库的描述，也是可加可不加；<br>　　<strong> EXPORTS </strong>表明<strong>DLL</strong>将要导出的函数以及这些导出函数指定的符号名。当链接器在链接时，会分析<strong>EXPORTS</strong>下面的符号名，假如是上述例子所示的形式，即单独的符号名(<strong>add</strong>或<strong>subtract</strong>)，并且<strong>符号名与源文件中定义的函数名一致</strong>时，就会以该符号名作为相应导出函数的函数名字，这样导出函数的名字便不会发生改编。(或者以另外一种形式：<strong>entryname=internalname(例如：myadd=add)</strong>，其中<strong>entryname</strong>表示导出函数的函数名字，<strong>internalname</strong>则为源文件中定义的函数名，这种形式会对导出函数名字进行改编，<strong>entryname</strong>即为导出函数的函数名字。)</p>
<font color="red"><strong>总结：</strong><br>　　归根结底，名字改编造成<strong>依赖库函数名称与相应导出的函数名字不一致</strong>的问题，通过上述三种方式，最终保证<strong>可执行模块依赖的库函数名称与该动态链接库导出的函数名字相一致</strong>，只有这样指定函数才能成功调用。</font>

<h2 id="加载DLL的两种方式"><a href="#加载DLL的两种方式" class="headerlink" title="加载DLL的两种方式"></a><strong>加载DLL的两种方式</strong></h2><p>　　当我们把一些常用的功能封装成动态链接库之后，接下来就是在我们的应用程序中使用这些功能。首先，经过上述步骤创建好动态链接库，会在<strong> Debug/ </strong>目录下生成<strong>工程名.dll</strong>、<strong>工程名.lib</strong>：<br>　　　<strong>+ 工程名.dll </strong>就是我们所说的<strong>DLL</strong>动态链接库，我们的应用程序会在运行过程中动态加载该库；<br>　　　<strong>+ 工程名.lib </strong>则是文章开头所说的<strong>引入库文件</strong>，保存生成的<strong>DLL</strong>动态链接库中导出的函数和变量的符号名，并没有包含实际代码，只是用来为链接程序提供必要信息，以便在可执行文件中建立动态链接时需要用到的重定位表。<br>　　在程序中，有以下两种方式加载动态链接库：<br>　　　　<strong>@ 隐式链接</strong>；<br>　　　　<strong>@ 显示加载</strong>。</p>
<p>　　<font color="#FF2400"><strong>@-隐式链接方式加载DLL</strong></font><br>　　<strong>第一步： </strong>头文件中添加引入的外部函数声明。<br>　　在应用程序中调用动态链接库的导出函数之前，为了让编译器知道这些函数，需要对其作一个声明，通常前面加上<strong> extern关键字 </strong>表明函数是在外部定义的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　除了使用<strong>extern关键字</strong>表明函数时外部定义的之外，还可以使用<strong> _declspec(dllimport) </strong>标识符来表明函数是从动态链接库中引入的。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_declspec(<span class="name">dllimport</span>) ReturnType FunctionName(<span class="name">args</span>...)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意： </strong>使用<strong> _declspec(dllimport) </strong>标识符声明外部函数，它将告诉编译器该函数是从动态链接库中引入的，因此<strong>编译器可以生成运行效率更高的代码</strong>。故，如果调用的函数来自于动态链接库，应该采用这种方式声明外部函数。<br>　　另外，正如在<strong> DLL导出函数的名字改编问题 </strong>一节中所说的，为了<strong>保证可执行模块依赖的库函数名称与该动态链接库导出的函数名字相一致</strong>，需要在导出时设置导出规则，然后在调用时设置相匹配的调用约定。当导出函数通过<strong> extern “C”限定符 </strong>防止导出的函数名称发生改编，显然单单使用上述的声明会造成<strong>可执行模块依赖的库函数名称与该动态链接库导出的函数名字不一致</strong>，因为普通的外部声明引用的导出函数，其名字是对应于被<strong>C++编译器</strong>进行改编了的，而添加<strong>extern “C”限定符</strong>的导出函数名称并没有发生改编，所以，对应的需要使用如下的外部定义：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extern <span class="string">"C"</span> _declspec(<span class="name">dllimport</span>) ReturnType FunctionName(<span class="name">args</span>...)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>　　经过上述的分析，我们也知道，没有添加<strong> _stdcall关键字 </strong>修饰使用的是<strong> C调用约定 </strong>；那么当导出函数通过添加<strong> _stdcall关键字 </strong>设置为<strong> 标准调用约定 </strong>，则相应的外部定义声明应如下：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extern <span class="string">"C"</span> _declspec(<span class="name">dllimport</span>) ReturnType _stdcall FunctionName(<span class="name">args</span>...)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<font color="red"><strong>总结： </strong>应用程序引用导出函数时需要保证<strong>调用时设置的调用约定与导出时设置的导出规则相匹配</strong>；进而保证<strong>可执行模块依赖的库函数名称与该动态链接库导出的函数名字相一致</strong>，这样<strong>客户端程序才能成功调用DLL中的导出函数</strong>！</font>

<p>　　<strong>第二步： </strong>包含该动态链接库提供的引入库文件。<br>　　添加外部引用函数声明后，我们还需要将<strong>DLL</strong>对应的引入库文件导入到工程中；不然，<strong>即使添加了外部应用声明，源文件能够成功编译，但是当链接器进行链接生成可执行程序时，因为缺少引入库文件，链接器会找不到相应的外部引用函数实现，造成链接失败</strong>！导入引入库文件的作用正是<strong>告诉链接器这些外部引用函数是以动态链接库的形式实现的，在运行时动态加载</strong>，这样就能够解决链接器链接失败的问题。<br>　　具体操作如下： <strong>菜单栏Project→ Settings→ Link选项卡→ 选择Input(输入设置)作为”Category”→ “Object/library modules”输入动态链接库对应的引入库文件；</strong>当引入库文件直接放在工程目录下，<strong>“Additional library path”为空</strong>，当放在其他路径下，则需要添加该路径说明，链接器会按照该路径寻找引入库文件；<font color="red">在我们的项目中，需要调用设备的接口函数，<strong>各个接口函数是以动态链接库的形式提供</strong>，<strong>“ZM124U.lib”</strong>为对应的引入库文件，见下图右侧，<strong>“Additional library path”为”./libs”</strong>，这是因为该引入库文件放置在工程目录下的<strong> libs </strong>文件夹下，其中<strong>“ . “</strong>表示当前路径，也就是工程目录。</font><br>    <center><img src="/img/RFID/01-08.png"/></center><br>　　到这里，我们就完成了通过隐式链接的方式加载动态链接库的所有操作，可以生成<strong>一个需要依赖动态链接库的可执行程序</strong>；最后，因为该可执行程序运行时需要动态加载动态链接库才能执行某种功能，所以我们需要将相应的<strong>DLL</strong>动态链接库文件放在程序能够搜索到的路径下(<a href="#someKeys">关于<strong>动态链接库搜索顺序</strong>可以点击查看<strong> 几点注意的地方 </strong>一节中的<strong>第1)点</strong></a>)。<br>　　<font color="red"><strong>建议： </strong></font>将动态链接库与可执行程序放在同一目录下。</p>
<p>　　<font color="#FF2400"><strong>@-隐式链接方式下动态链接库创建和使用完善方案</strong></font><br>　　<strong>在实际应用中，多采用隐式链接方式加载动态链接库</strong>。通过上述的介绍，相信大家对创建动态链接库以及在应用程序中采用隐式链接方式引用创建好的动态链接库的流程有了比较清晰的认识，我们不妨再回顾一下:<br>　　<strong> 　+. </strong>首先，创建动态链接库工程，其中需要注意的是需要设置好导出函数的导出规则，通过<strong> extern “C” _declspec(dllexport) </strong>进行函数声明；如果采用<strong>标准调用约定</strong>，则需要添加<strong> _stdcall </strong>关键字。<br>　　<strong> 　　+. </strong>在应用程序中调用生成的动态链接库，先是需要添加调用函数的外部定义声明，再将该动态链接库对应的引入库文件导入工程；注意调用约定与导出规则必须相匹配才能成功调用。<br>　　在实际应用中，完善的创建与使用动态链接库的方案是通过一个统一的<strong> 头文件声明 </strong>解决<strong>调用约定与导出规则相匹配</strong>这个问题，我们采用这种标准来完善上述举出的例子。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllDemo.h</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.19</div><div class="line"> *	Description: 动态链接库创建和使用完善方案范例</div><div class="line"> ******************************************************/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DLLDEMO_API</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DLLDEMO_API extern <span class="meta-string">"C"</span> _declspec(dllimport)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line"><span class="comment">/************************* C调用约定声明如下 *********************/</span></div><div class="line"><span class="function">DLLDEMO_API <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function">DLLDEMO_API <span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="comment">/************************* C调用约定声明 *************************/</span></div><div class="line"> </div><div class="line"><span class="comment">/************************* 标准调用约定声明如下 ******************/</span></div><div class="line"><span class="comment">//DLLDEMO_API int _stdcall add(int a, int b);</span></div><div class="line"><span class="comment">//DLLDEMO_API int _stdcall subtract(int a, int b);</span></div><div class="line"><span class="comment">/************************* 标准调用约定声明 **********************/</span></div></pre></td></tr></table></figure></p>
<p>　　在<strong> DllDemo.h </strong>头文件声明中通过一个预编译宏<code>DLLDEMO_API</code>，当该宏未被定义时，将其定义为<strong> extern “C” _declspec(dllimport) </strong>，是外部定义声明修饰符；所以，我们可以在应用程序中直接通过<strong> #include “DllDemo.h” </strong>声明我们要调用的从动态链接库中导出的函数。<br>　　以上是解决在应用程序中调用的问题，那么这种方式在创建动态链接库时又是怎样进行导出函数声明的呢？<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</div><div class="line"> *	File Name: DllDemo.cpp</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.19</div><div class="line"> *	Description: 动态链接库创建和使用完善方案范例</div><div class="line"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></div><div class="line">#define DLLDEMO_API extern <span class="string">"C"</span> _declspec(dllexport)</div><div class="line">#include <span class="string">"DLLDemo.h"</span></div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> C调用约定实现如下 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line"><span class="built_in">int</span> add(<span class="built_in">int</span> a, <span class="built_in">int</span> b)&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">int</span> subtract(<span class="built_in">int</span> a, <span class="built_in">int</span> b)&#123;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> C调用约定实现如下 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> 标准调用约定实现如下 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</span></span></div><div class="line"><span class="comment">//int _stdcall add(int a, int b)&#123;</span></div><div class="line"><span class="comment">//	return a+b;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"> </div><div class="line"><span class="comment">//int _stdcall subtract(int a, int b)&#123;</span></div><div class="line"><span class="comment">//	return a-b;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> 标准调用约定实现如下 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</span></span></div></pre></td></tr></table></figure></p>
<p>　　相似的，还是需要通过<strong> #include “DllDemo.h” </strong>对函数进行声明，但是，在<strong> #include “DllDemo.h” </strong>之前，对<code>DLLDEMO_API</code>宏进行定义，为<strong> extern “C” _declspec(dllexport) </strong>，是导出函数标识符；这样，当包含头文件时，因为<code>DLLDEMO_API</code>宏已经被定义，<strong> #define DLLDEMO_API extern “C” _declspec(dllimport) </strong>一行不会被执行，从而完成了对相应函数的导出声明。<br>　　通过以上这种方式，使得我们在使用动态链接库提供的接口时，只需要包含一个头文件即可完成对调用函数的外部定义，而该头文件则是开发该动态链接库的程序员提供；另外，通过这种方式，保证了<strong>应用程序调用接口函数采用的调用约定与对应动态链接库的导出规则相匹配</strong>。 (<font color="#9A32CD">我们的设备接口函数就是按照这种方式实现的</font>)</p>
<p>　　<font color="#FF2400"><strong>@-显示加载方式加载DLL</strong></font><br>　　显示加载方式是另外一种加载动态链接库的方式，这里简单介绍一下。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> CDLLtestDlg::OnBtnSubtract() </div><div class="line">&#123;</div><div class="line">　　HINSTANCE hInst = LoadLibrary(<span class="string">"./DLLDemo.dll"</span>);		<span class="comment">// 动态加载DLL</span></div><div class="line"> </div><div class="line">　　<span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> 标准调用预定 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line">　　<span class="comment">//typedef int (_stdcall *SUBTRACTPROC)(int a, int b);	// 定义函数指针类型</span></div><div class="line">　　<span class="comment">//SUBTRACTPROC Subtract = (SUBTRACTPROC)GetProcAddress(hInst, "_subtract@8");	</span></div><div class="line">                <span class="comment">// 通过导出符号名获取DLL的导出函数</span></div><div class="line">                <span class="comment">// GetProcAddress的第二个参数是按照标准调用规则改编后的导出符号名</span></div><div class="line">　　<span class="comment">//SUBTRACTPROC Subtract = (SUBTRACTPROC)GetProcAddress(hInst, MAKEINTRESOURCE(2));	</span></div><div class="line">                <span class="comment">// 也可以通过序号获取DLL的导出函数</span></div><div class="line">　　<span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> 标准调用预定 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line"> </div><div class="line">　　<span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> C调用预定 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line">　　<span class="keyword">typedef</span> <span class="built_in">int</span> (*SUBTRACTPROC)(<span class="built_in">int</span> a, <span class="built_in">int</span> b);</div><div class="line">　　SUBTRACTPROC Subtract = (SUBTRACTPROC)GetProcAddress(hInst, <span class="string">"subtract"</span>);</div><div class="line">　　<span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> C调用预定 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line"> </div><div class="line">　　<span class="keyword">if</span>(!Subtract)&#123;						<span class="comment">// 函数指针为NULL说明获取DLL导出函数失败</span></div><div class="line">　　　　	MessageBox(<span class="string">"获取函数地址失败!"</span>);</div><div class="line">　　　　	<span class="keyword">return</span>;</div><div class="line">　　&#125;</div><div class="line"> </div><div class="line">　　CString str;</div><div class="line">　　str.Format(<span class="string">"5-3=%d"</span>, Subtract(<span class="number">5</span>, <span class="number">3</span>));			<span class="comment">// 通过Subtract调用DLL中的subtract函数</span></div><div class="line">　　MessageBox(str);</div><div class="line"> </div><div class="line">　　FreeLibrary(hInst);						<span class="comment">// 释放该DLL的引用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意： 1. </strong>不同的调用约定在定义函数指针时是有区别的，如果采用标准调用约定，则需要添加<strong> _stdcall </strong>关键字。<br>　　　 <strong>2. </strong>通过导出函数名获取<strong>DLL</strong>导出函数时(<strong>GetProcAddress</strong>的第二个参数)，要注意是否发生名字改编。使用<strong> extern “C” </strong>同时采用<strong>C调用约定</strong>，导出函数的名字不会发生改编；采用<strong>标准调用约定</strong>，会对函数名字进行改编，改编原则是原始函数名前面添加<strong>“ _ “</strong>，后面添加<strong>“ @数字” </strong>，其中数字为函数参数所占字节数。<br>　　　 <strong>3. </strong>通过序号获取<strong>DLL</strong>导出函数时(<strong> MAKEINTRESOURCE(序号) </strong>)，最好通过<strong>dumpbin命令</strong>从导出信息中获取函数对应的序号(<strong>“ ordinal列 “</strong>信息)；不过由于这种方式<strong>代码可读性不强</strong>，不建议使用。<br>　　　<strong>4. </strong>采用显示加载方式加载<strong>DLL</strong>，在需要访问时调用<strong>LoadLibrary</strong>函数加载该<strong>DLL</strong>；当不需要访问该<strong>DLL</strong>时，调用<strong>FreeLibrary</strong>函数减少对该<strong>DLL</strong>的引用计数，当此计数变为0时，该<strong>DLL模块</strong>将从调用进程的地址空间卸载；调用<strong>FreeLibrary</strong>函数后，<strong> hInst </strong>句柄不再有效。<br>　　　 <strong>5. </strong>采用隐式链接方式访问<strong>DLL</strong>时，在程序启动时也是通过<strong>LoadLibrary</strong>函数加载该进程需要的动态链接库的；如果程序需要访问十多个<strong>DLL</strong>，如果都采用隐式链接方式加载它们的话，那么在改程序启动时，这些<strong>DLL</strong>都需要被加载到内存中，并映射到调用进程的的地址空间，这样将加大程序的启动时间。<br>　　　 <strong>6. </strong>一般来说，程序运行过程中只是在某个条件满足时才需要访问某个<strong>DLL</strong>中的某个函数，这种情况下，就可以采用显式加载的方式访问<strong>DLL</strong>，在<strong>需要时才加载所需的DLL</strong>。</p>
<h2 id="动态链接库搜索顺序"><a href="#动态链接库搜索顺序" class="headerlink" title="动态链接库搜索顺序"></a><span id="someKeys"><strong>动态链接库搜索顺序</strong></span></h2><p>　　当应用程序运行时，系统将会为它分配一个<strong>4GB</strong>(<strong>x86-32架构</strong>)的地址空间，然后加载模块会分析该应用程序的输入信息，从中找到改程序将要访问的动态链接信息，然后在用户机器上搜索这些动态链接库，进而加载它们，搜索的顺序如下：<br>　　　<strong>&lt;1. </strong>程序的执行目录，即<strong>.exe</strong>文件所在目录；<br>　　　<strong>&lt;2. </strong>当前目录<strong>“.”</strong>，也叫当前工作目录，即进行某项操作的目的目录；<br><strong>举例： </strong><font color="green">A居住在珠海，这是执行目录；但是A的工作地点是在广州，这是当前目录</font>。<br>　　　<strong>&lt;3. </strong>系统目录，常见的就是<strong>C:\Windows\System32</strong>、<strong>C:\Windows\System</strong>，64位系统的<strong>C:\Windows\SysWOW64</strong>；<br>　　　<strong>&lt;4. Path环境变量</strong>中所列出的路径。</p>
<h2 id="几点注意的地方"><a href="#几点注意的地方" class="headerlink" title="几点注意的地方"></a><strong>几点注意的地方</strong></h2><p>　　<strong>1）</strong>应用程序不需要调用一个动态链接库的所有导出函数，可以根据需要调用；<br>　　<strong>2）</strong>应用程序需要调用某个动态链接库提供的函数时，在程序链接时只需要包含该动态链接库提供的引入库文件，引入库文件并没有包含实际代码，只是用来为链接程序提供必要信息，以便在可执行文件中建立动态链接时需要用到的重定位表；<br>　　<strong>3）</strong>导出时设置的调用约定必须与引用时匹配，保证引用符号名与动态链接库中的导出符号名一致。
　</p>
<blockquote>
<p>Reference: 　</p>
<ul>
<li>《Win32动态链接库与静态链接库的区别》<br><a href="https://yq.aliyun.com/articles/2740?spm=5176.blog2739.yqblogcon1.8.pJ3E7X">https://yq.aliyun.com/articles/2740?spm=5176.blog2739.yqblogcon1.8.pJ3E7X</a></li>
<li>error C1041: 无法打开程序数据库“x:\projects\hellococo\debug.win32\vc120.pdb”；如果要将多个 CL.EXE 写入同一个 .PDB 文件，请使用 /FS 。<br><a href="http://home.eeworld.com.cn/my/space-uid-291513-blogid-239457.html">http://home.eeworld.com.cn/my/space-uid-291513-blogid-239457.html</a></li>
</ul>
</blockquote>
<h2 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a><strong>Version Control</strong></h2><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse"><br><tr><td style="width: 60px; text-align: center">版本号</td><td style="width: 80px; text-align: center">日期</td><td style="width: 320px; text-align: center">内容</td><td style="width: 100px; text-align: center">作者</td></tr><tr text-align="center"><td style="text-align: center">V0.1</td><td style="text-align: center">2015.10.16</td><td style="text-align: center">起草博客</td><td style="text-align: center">Tarantula-7</td></tr></table>]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DLL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下的静态库和动态库]]></title>
      <url>/2015/10/16/programPearls_Windows%E4%B8%8B%E7%9A%84%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>　　本文旨在指导大家如何创建和使用<strong>Windows下的DLL动态链接库</strong>以及通过<strong>DLL动态链接库导出导入</strong>这一过程介绍一些<strong>编译链接、动态加载</strong>的小知识。本章内容作为本学期项目开发的延伸扩展，目的是让大家对项目中使用的读写器接口函数库由来以及如何在项目中使用该函数库有更深入的理解。在这个过程，大家将会初步接触并了解：<br>　　　　<strong>+1.　</strong> <strong>Windows静态链接库和动态链接库</strong>的一些背景知识;<br>　　　　<strong>+2.　</strong> 如何创建和使用<strong>DLL动态链接库</strong>。<br><a id="more"></a></p>
<h2 id="静态库和动态库的区别"><a href="#静态库和动态库的区别" class="headerlink" title="静态库和动态库的区别"></a><strong>静态库和动态库的区别</strong></h2><p>　　<font color="#FF2400"><strong>@-静态链接库(.lib)</strong></font><br>　　函数和数据被编译进一个二进制文件。在使用静态库编译链接成可执行文件时，链接器从库中复制这些<font color="red"><strong>函数和数据</strong></font>并把它们和应用程序的其他模块组合起来创建.exe可执行程序。</p>
<p>　　<font color="#FF2400"><strong>@-动态链接库(.lib &amp; .dll)</strong></font><br>　　一个引入库(.lib)文件和一个DLL(.dll)文件。<font color="red"><strong>引入库文件只包含该DLL导出的函数和变量的符号名，并没有包含实际代码，只是用来为链接程序提供必要信息，以便在可执行文件中建立动态链接时需要用到的重定位表</strong></font>，而<strong>.dll文件包含该DLL实际的函数和数据</strong>。在使用动态库编译链接成可执行文件时，只链接该DLL的引入库文件，该DLL文件中的函数代码和数据并不复制到可执行文件中，直到可执行程序执行时，才将该DLL映射到进程的地址空间中，然后访问DLL中导出的函数。<br>　　动态链接库包含能被可执行程序或其他DLL调用来完成某项工作的函数<strong> → </strong><font color="red"><strong>动态链接库只有在其他模块调用库中的函数时才发挥作用</strong>。</font></p>
<p>　　<font color="#FF2400"><strong>@-为什么使用动态链接库</strong></font><br>　　<font color="green"><strong>&lt;1. </strong>节省磁盘空间和内存</font><br>　　　如果多个应用程序需要访问同样的功能，可以将该功能以DLL的形式提供，这样在机器上只需要一份该DLL文件就可以了，节省磁盘空间；多个应用程序使用同一个DLL，该DLL的页面只需要放入内存一次，所有的应用程序都可以共享它的页面，内存的使用更加有效。<br>　　<font color="green"><strong>&lt;2. </strong>采用多种语言编写动态链接库</font><br>　　　采用自己熟悉的开发语言编写DLL，然后由其他语言编写的可执行程序来调用这些DLL。<br>　　<font color="green"><strong>&lt;3. </strong>增强产品功能</font><br>　　　更新DLL，替换产品原有的DLL。<br>　　<font color="green"><strong>&lt;4. </strong>提供二次开发平台</font><br>　　　用户利用DLL，调用其中实现的功能，开发业务所需的产品。<br>　　<font color="green"><strong>&lt;5. </strong>简化项目管理</font><br>　　　并行开发，不同功能交由各项目小组以多个DLL的方式实现。</p>
<p>　　<font color="#FF2400"><strong>@-我们可以怎么做</strong></font><br>　　<strong>把完成某种功能的函数放在一个动态链接库中，提供给其他程序调用。</strong></p>
<h2 id="利用VC-创建DLL"><a href="#利用VC-创建DLL" class="headerlink" title="利用VC++创建DLL"></a><strong>利用VC++创建DLL</strong></h2><p>　　<strong>第一步： </strong> <strong>VC++</strong> <strong>→</strong> <strong>File</strong> <strong>→</strong> <strong>New</strong> <strong>→</strong> <strong>Win32 Dynamic-Link Library</strong> <strong>→</strong> <strong>An Empty DLL Project</strong>，创建动态链接库工程；<br>    <center><img src="/img/RFID/01-00-01.png" width="720px"/></center><br>　　<strong>第二步： </strong> <strong>VC++</strong> <strong>→</strong> <strong>File</strong> <strong>→</strong> <strong>New</strong> <strong>→</strong> <strong>C++ Source(Header) File</strong>添加源文件或头文件，编写代码；<br>    <center><img src="/img/RFID/01-00-02.png" width="720px"/></center><br>　　<strong>第三步： </strong> <strong>Build</strong>，便会在工程目录下的<strong> Debug/ </strong>下查看到<strong> 工程名.dll </strong>动态链接库文件以及<strong> 工程名.lib </strong>引入库文件。</p>
<p>　　<font color="red">具体代码如何编写以及生成动态链接库后，如何在我们的应用程序中调用库中的函数实现某种功能将会在下面章节仔细讲述</font>。</p>
<h2 id="从DLL中导出全局函数"><a href="#从DLL中导出全局函数" class="headerlink" title="从DLL中导出全局函数"></a><strong>从DLL中导出全局函数</strong></h2><p>　　为了让DLL导出一些函数，需要在每一个将要被导出的函数前面添加标识符: <strong><code>_declspec(dllexport)</code></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 函数声明 </div><div class="line">_declspec(dllexport) <span class="function">ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>;</div><div class="line"></div><div class="line"><span class="function">ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>&#123;</div><div class="line">　　...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="从DLL中导出C-类"><a href="#从DLL中导出C-类" class="headerlink" title="从DLL中导出C++类"></a><strong>从DLL中导出C++类</strong></h2><p>　　类似的，使用导出标识符: <strong><code>_declspec(dllexport)</code></strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 类指定导出标识 </div><div class="line"><span class="keyword">class</span> _declspec(dllexport) ClassName</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　<span class="function">ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>指定导出标识的类的所有函数都将被导出；否则，只有那些声明了导出标识的类成员函数才会被导出。</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 只有类成员函数指定导出标识 </div><div class="line"><span class="keyword">class</span> ClassName</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　_declspec(dllexport) <span class="function">ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><font color="red">注意：</font></strong><br>　　<strong>导出的成员函数必须具有public访问权限，否则即使被导出，也不能被其他程序访问</strong>。</p>
<h2 id="使用dumpbin命令查看DLL导出导入信息"><a href="#使用dumpbin命令查看DLL导出导入信息" class="headerlink" title="使用dumpbin命令查看DLL导出导入信息"></a><strong>使用dumpbin命令查看DLL导出导入信息</strong></h2><p>　　首先，<strong>DUMPBIN.EXE</strong>程序位于<strong>/Bin/</strong>目录下(中文版则是<strong>/VC98/Bin/</strong>)。为了在<strong>cmd命令行</strong>里面方便使用，我们将其所在的全局路径加入到环境变量<strong>Path</strong>中，如下图(火狐/IE浏览器可以点击查看大图)。<br>    <center><img src="/img/RFID/01-01.png" width="800px"/></center><br>　　右键计算机，属性<strong>→</strong>高级系统配置<strong>→</strong>环境变量<strong>→</strong>双击系统变量中的<strong>Path→</strong>在变量值后面加上<strong>DUMPBIN.EXE</strong>程序所在全局路径。<strong>(<font color="red">注意：添加路径前需要有”；”隔开，因为变量值是通过”；”分隔的</font>)</strong><br>　　接下来我们就可以使用这个工具查看一个<strong>DLL</strong>提供的导出函数：<strong><code>dumpbin -exports xxx.dll</code></strong>(如下左图)。<br>　　其中要注意的<strong>“ordinal列”</strong>列出的信息是导出函数的序号；<strong>“RVA列”</strong>是一些地址值，也就是导出函数在<strong>DLL</strong>模块中的位置，通过该地址值可以在<strong>DLL</strong>中找到相应的函数；<strong>“name列”</strong>是导出函数的名称，使用该<strong>DLL</strong>的客户端程序通过该名称找到所需的<strong>DLL</strong>导出函数。<br>    <center><img src="/img/RFID/01-02.png" width="800px"/></center><br>　　还可以使用这个工具查看一个<strong>可执行模块依赖的动态链接库信息</strong>以及该<strong>动态链接库中被可执行模块调用的函数</strong>：<strong><code>dumpbin -imports xxx.exe</code></strong>。<br>　　<strong>这里需要注意的是：一个可执行模块依赖的库函数名称必须与该动态链接库导出的函数名字相一致，因为可执行模块使用依赖的库函数名称来调用DLL中的函数，只有在二者相一致的情况下，可执行模块才能找到所需的DLL导出函数</strong>。因此客户端程序引用的函数符号名必须与<strong>DLL</strong>中的导出函数名称一致才能成功调用！</p>
<p>　　我们知道，<strong>C++</strong>支持函数重载，对于重载的多个函数来说，依照我们上述的说法，他们的导出函数名理应都是一样的，显然这样的话调用的时候会出问题。为了加以区分，<strong>C++</strong>会按照自己的规则篡改函数的名称，这一过程称为<strong>“名字改编”</strong>。一旦对导出函数名字进行改编，就会造成调用时<strong>可执行模块依赖的库函数名称与动态链接库导出的函数名字不一致</strong>的问题。这就需要在导出时设置导出规则，然后在调用时设置相匹配的调用约定，最终<strong>保证引用的函数名称与动态链接库中导出的函数名字一致</strong>。</p>
<h2 id="DLL导出函数的名字改编问题"><a href="#DLL导出函数的名字改编问题" class="headerlink" title="DLL导出函数的名字改编问题"></a><strong>DLL导出函数的名字改编问题</strong></h2><p>　　接上面所说的，<strong>C++</strong>编译器在生成<strong>DLL</strong>时，会对导出的函数进行名字改编，并且不同的编译器使用的改编规则不一样，因此改编后的名字是不一样的。这样，如果利用不同的编译器分别生成<strong>DLL</strong>和生成访问该<strong>DLL</strong>的客户端程序的话，后者在访问该<strong>DLL</strong>的导出函数时就会因二者函数符号不一致而出现调用失败的问题。<br>　　<font color="#FF2400"><strong>1. extern “C”</strong></font><br>　　利用限定符：<strong>extern “C”</strong>(注意<strong>C要大写</strong>)可以解决C++和C语言之间相互调用时函数命名的问题，使用该限定符，动态链接库文件在编译时，导出函数的名称不会发生改编。下面是一个具体例子，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllExample.cpp</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.18</div><div class="line"> *	Description: 使用extern "C"范例</div><div class="line"> ******************************************************/</span></div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　我们使用<strong>DUMPBIN.EXE命令</strong>来查看生成的<strong>DLL</strong>导出函数信息，如下图：<br>    <center><img src="/img/RFID/01-03.png" width="720px"/></center><br>　　容易看到，导出函数名与函数声明中的函数名是一致的<font color="green">(<strong>= </strong>后面的函数名为一个等价的导出函数名)</font>，这就是<strong>extern “C” </strong>限定符的作用，我们可以把该限定符去掉，对比一下没有使用<strong>extern “C” </strong>限定符该<strong>DLL</strong>的导出信息。<br>　　如下所示，把原先的声明注释掉，改为没有<strong>extern “C” </strong>限定符修饰的普通导出函数声明。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//extern "C" _declspec(dllexport) int add(int a, int b);</span></div><div class="line"><span class="comment">//extern "C" _declspec(dllexport) int subtract(int a, int b);</span></div><div class="line">_declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">_declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　正如上述所说的，没有添加<strong>extern “C” </strong>限定符，<strong>C++</strong>编译器对导出函数进行了名字改编(从下图我们可以看到，改变后的名字加上了<strong>?</strong>作为前缀，<strong>@@…</strong>作为后缀)。<br>    <center><img src="/img/RFID/01-04.png" width="720px"/></center><br>　　但是使用<strong>extern “C” </strong>限定符这种方法有一个缺陷，就是不能用于导出<strong>C++</strong>类(如下图，函数名字仍然发生改编)。<strong>extern “C” </strong>限定符只能用于导出上述的全局函数这种情况。<br>    <center><img src="/img/RFID/01-05.png" width="800px"/></center><br>　　以下这种方式则是不允许的，编译时直接报错！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Point&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">　　<span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">void</span> Point::output(<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</div><div class="line">　　<span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<font color="#FF2400"><strong>2. _stdcall标准调用</strong></font><br>　　上述添加<strong>extern “C” </strong>限定符这种方式保证不对导出函数名字进行改编，这样在引用导出函数时就可以直接通过原始函数名字进行调用，确保<strong>依赖库函数名称与导出的函数名字一致</strong>。<br>　　如果导出函数的调用约定发生了改变，那么即使使用了<strong>extern “C” </strong>限定符，该函数的名字仍会按照调用约定发生相应的改编。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllExample.cpp</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.18</div><div class="line"> *	Description: 使用_stdcall标准调用范例</div><div class="line"> ******************************************************/</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="keyword">int</span> _<span class="function">stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="keyword">int</span> _<span class="function">stdcall <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> _<span class="function">stdcall <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">　　<span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> _<span class="function">stdcall <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">　　<span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　从下图的导出函数信息，我们可以知道：在添加了<strong>_stdcall关键字</strong>之后，导出函数的名字仍发生改编(在原始函数名字前面添加<strong> _ </strong>，后面添加一个<strong>@</strong>，接着是<strong>数字，表示函数参数所占的字节数</strong>，例如<strong>add函数具有两个int类型的参数，占用8个字节，所以add函数该数字为8</strong>)。<br>    <center><img src="/img/RFID/01-06.png" width="720px"/></center><br><strong>总结一下：</strong><br>　　1）上述<strong> 第1.节 </strong>中没有添加<strong>_stdcall关键字</strong>，实际上该函数的调用约定是缺省的<strong>C调用预定</strong>，该约定不对名字进行改编；<br>　　2）添加<strong>_stdcall关键字</strong>后，调用约定变成<strong>标准调用约定</strong>，<strong>标准调用约定</strong>是<strong>WINAPI调用约定</strong>，也就是<strong>pascal调用约定</strong>，显然这种调用约定与<strong>C调用预定</strong>不一样，会对函数名字进行改编，改编方式则按照我们上面描述的规则进行。<br>　　3）因此，我们也可以在导出函数时添加调用约定，然后在引用函数时使用相匹配的调用约定进行调用，这样也能解决因名字改编出现的<strong>依赖库函数名称与导出的函数名字不一致</strong>的问题。</p>
<p>　　<font color="#FF2400"><strong>3. DEF模块定义文件</strong></font><br>　　除了上述两种方式外，我们还可以通过一个称为<strong>模块定义文件(DEF)</strong>的方式，实现动态链接库文件在编译时，导出函数的名称不要发生改编。动态链接库源文件就和我们最开始介绍的普通导出函数源文件一致：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllExample.cpp</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.18</div><div class="line"> *	Description: 使用DEF模块定义文件范例</div><div class="line"> ******************************************************/</span></div><div class="line">_declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line">_declspec(dllexport) <span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　按照添加源文件的方式，我们为工程添加一个模块定义文件，<strong>File→New→Files选项卡→Text File→文件名后缀一定要是.def(文件名建议和工程名一致)</strong>。<br>    <center><img src="/img/RFID/01-07.png" width="720px"/></center><br>　　模块定义文件(<strong>DllExample.def</strong>)内容如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllExample.def</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.18</div><div class="line"> *	Description: 导出函数模块定义文件</div><div class="line"> ******************************************************/</span></div><div class="line">LIBRARY DllExample</div><div class="line">DESCRIPTION 描述一些关于DllExample导出函数信息</div><div class="line"> </div><div class="line">EXPORTS</div><div class="line">add</div><div class="line">subtract</div></pre></td></tr></table></figure></p>
<p>　　<strong> LIBRARY xxx </strong>一行可加可不加，用来指定动态链接库的内部名称，注意<strong>该名称与生成的动态链接库的名称(也就是我们的工程名)一定要匹配</strong>；<br>　　<strong> DESCRIPTION xxx </strong>一行是对该动态链接库的描述，也是可加可不加；<br>　　<strong> EXPORTS </strong>表明<strong>DLL</strong>将要导出的函数以及这些导出函数指定的符号名。当链接器在链接时，会分析<strong>EXPORTS</strong>下面的符号名，假如是上述例子所示的形式，即单独的符号名(<strong>add</strong>或<strong>subtract</strong>)，并且<strong>符号名与源文件中定义的函数名一致</strong>时，就会以该符号名作为相应导出函数的函数名字，这样导出函数的名字便不会发生改编。(或者以另外一种形式：<strong>entryname=internalname(例如：myadd=add)</strong>，其中<strong>entryname</strong>表示导出函数的函数名字，<strong>internalname</strong>则为源文件中定义的函数名，这种形式会对导出函数名字进行改编，<strong>entryname</strong>即为导出函数的函数名字。)</p>
<font color="red"><strong>总结：</strong><br>　　归根结底，名字改编造成<strong>依赖库函数名称与相应导出的函数名字不一致</strong>的问题，通过上述三种方式，最终保证<strong>可执行模块依赖的库函数名称与该动态链接库导出的函数名字相一致</strong>，只有这样指定函数才能成功调用。</font>

<h2 id="加载DLL的两种方式"><a href="#加载DLL的两种方式" class="headerlink" title="加载DLL的两种方式"></a><strong>加载DLL的两种方式</strong></h2><p>　　当我们把一些常用的功能封装成动态链接库之后，接下来就是在我们的应用程序中使用这些功能。首先，经过上述步骤创建好动态链接库，会在<strong> Debug/ </strong>目录下生成<strong>工程名.dll</strong>、<strong>工程名.lib</strong>：<br>　　　<strong>+ 工程名.dll </strong>就是我们所说的<strong>DLL</strong>动态链接库，我们的应用程序会在运行过程中动态加载该库；<br>　　　<strong>+ 工程名.lib </strong>则是文章开头所说的<strong>引入库文件</strong>，保存生成的<strong>DLL</strong>动态链接库中导出的函数和变量的符号名，并没有包含实际代码，只是用来为链接程序提供必要信息，以便在可执行文件中建立动态链接时需要用到的重定位表。<br>　　在程序中，有以下两种方式加载动态链接库：<br>　　　　<strong>@ 隐式链接</strong>；<br>　　　　<strong>@ 显示加载</strong>。</p>
<p>　　<font color="#FF2400"><strong>@-隐式链接方式加载DLL</strong></font><br>　　<strong>第一步： </strong>头文件中添加引入的外部函数声明。<br>　　在应用程序中调用动态链接库的导出函数之前，为了让编译器知道这些函数，需要对其作一个声明，通常前面加上<strong> extern关键字 </strong>表明函数是在外部定义的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> ReturnType <span class="title">FunctionName</span><span class="params">(args...)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　除了使用<strong>extern关键字</strong>表明函数时外部定义的之外，还可以使用<strong> _declspec(dllimport) </strong>标识符来表明函数是从动态链接库中引入的。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_declspec(<span class="name">dllimport</span>) ReturnType FunctionName(<span class="name">args</span>...)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意： </strong>使用<strong> _declspec(dllimport) </strong>标识符声明外部函数，它将告诉编译器该函数是从动态链接库中引入的，因此<strong>编译器可以生成运行效率更高的代码</strong>。故，如果调用的函数来自于动态链接库，应该采用这种方式声明外部函数。<br>　　另外，正如在<strong> DLL导出函数的名字改编问题 </strong>一节中所说的，为了<strong>保证可执行模块依赖的库函数名称与该动态链接库导出的函数名字相一致</strong>，需要在导出时设置导出规则，然后在调用时设置相匹配的调用约定。当导出函数通过<strong> extern “C”限定符 </strong>防止导出的函数名称发生改编，显然单单使用上述的声明会造成<strong>可执行模块依赖的库函数名称与该动态链接库导出的函数名字不一致</strong>，因为普通的外部声明引用的导出函数，其名字是对应于被<strong>C++编译器</strong>进行改编了的，而添加<strong>extern “C”限定符</strong>的导出函数名称并没有发生改编，所以，对应的需要使用如下的外部定义：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extern <span class="string">"C"</span> _declspec(<span class="name">dllimport</span>) ReturnType FunctionName(<span class="name">args</span>...)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>　　经过上述的分析，我们也知道，没有添加<strong> _stdcall关键字 </strong>修饰使用的是<strong> C调用约定 </strong>；那么当导出函数通过添加<strong> _stdcall关键字 </strong>设置为<strong> 标准调用约定 </strong>，则相应的外部定义声明应如下：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extern <span class="string">"C"</span> _declspec(<span class="name">dllimport</span>) ReturnType _stdcall FunctionName(<span class="name">args</span>...)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<font color="red"><strong>总结： </strong>应用程序引用导出函数时需要保证<strong>调用时设置的调用约定与导出时设置的导出规则相匹配</strong>；进而保证<strong>可执行模块依赖的库函数名称与该动态链接库导出的函数名字相一致</strong>，这样<strong>客户端程序才能成功调用DLL中的导出函数</strong>！</font>

<p>　　<strong>第二步： </strong>包含该动态链接库提供的引入库文件。<br>　　添加外部引用函数声明后，我们还需要将<strong>DLL</strong>对应的引入库文件导入到工程中；不然，<strong>即使添加了外部应用声明，源文件能够成功编译，但是当链接器进行链接生成可执行程序时，因为缺少引入库文件，链接器会找不到相应的外部引用函数实现，造成链接失败</strong>！导入引入库文件的作用正是<strong>告诉链接器这些外部引用函数是以动态链接库的形式实现的，在运行时动态加载</strong>，这样就能够解决链接器链接失败的问题。<br>　　具体操作如下： <strong>菜单栏Project→ Settings→ Link选项卡→ 选择Input(输入设置)作为”Category”→ “Object/library modules”输入动态链接库对应的引入库文件；</strong>当引入库文件直接放在工程目录下，<strong>“Additional library path”为空</strong>，当放在其他路径下，则需要添加该路径说明，链接器会按照该路径寻找引入库文件；<font color="red">在我们的项目中，需要调用设备的接口函数，<strong>各个接口函数是以动态链接库的形式提供</strong>，<strong>“ZM124U.lib”</strong>为对应的引入库文件，见下图右侧，<strong>“Additional library path”为”./libs”</strong>，这是因为该引入库文件放置在工程目录下的<strong> libs </strong>文件夹下，其中<strong>“ . “</strong>表示当前路径，也就是工程目录。</font><br>    <center><img src="/img/RFID/01-08.png"/></center><br>　　到这里，我们就完成了通过隐式链接的方式加载动态链接库的所有操作，可以生成<strong>一个需要依赖动态链接库的可执行程序</strong>；最后，因为该可执行程序运行时需要动态加载动态链接库才能执行某种功能，所以我们需要将相应的<strong>DLL</strong>动态链接库文件放在程序能够搜索到的路径下(<a href="#someKeys">关于<strong>动态链接库搜索顺序</strong>可以点击查看<strong> 几点注意的地方 </strong>一节中的<strong>第1)点</strong></a>)。<br>　　<font color="red"><strong>建议： </strong></font>将动态链接库与可执行程序放在同一目录下。</p>
<p>　　<font color="#FF2400"><strong>@-隐式链接方式下动态链接库创建和使用完善方案</strong></font><br>　　<strong>在实际应用中，多采用隐式链接方式加载动态链接库</strong>。通过上述的介绍，相信大家对创建动态链接库以及在应用程序中采用隐式链接方式引用创建好的动态链接库的流程有了比较清晰的认识，我们不妨再回顾一下:<br>　　<strong> 　+. </strong>首先，创建动态链接库工程，其中需要注意的是需要设置好导出函数的导出规则，通过<strong> extern “C” _declspec(dllexport) </strong>进行函数声明；如果采用<strong>标准调用约定</strong>，则需要添加<strong> _stdcall </strong>关键字。<br>　　<strong> 　　+. </strong>在应用程序中调用生成的动态链接库，先是需要添加调用函数的外部定义声明，再将该动态链接库对应的引入库文件导入工程；注意调用约定与导出规则必须相匹配才能成功调用。<br>　　在实际应用中，完善的创建与使用动态链接库的方案是通过一个统一的<strong> 头文件声明 </strong>解决<strong>调用约定与导出规则相匹配</strong>这个问题，我们采用这种标准来完善上述举出的例子。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******************************************************</div><div class="line"> *	File Name: DllDemo.h</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.19</div><div class="line"> *	Description: 动态链接库创建和使用完善方案范例</div><div class="line"> ******************************************************/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DLLDEMO_API</span></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DLLDEMO_API extern <span class="meta-string">"C"</span> _declspec(dllimport)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"> </div><div class="line"><span class="comment">/************************* C调用约定声明如下 *********************/</span></div><div class="line"><span class="function">DLLDEMO_API <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function">DLLDEMO_API <span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="comment">/************************* C调用约定声明 *************************/</span></div><div class="line"> </div><div class="line"><span class="comment">/************************* 标准调用约定声明如下 ******************/</span></div><div class="line"><span class="comment">//DLLDEMO_API int _stdcall add(int a, int b);</span></div><div class="line"><span class="comment">//DLLDEMO_API int _stdcall subtract(int a, int b);</span></div><div class="line"><span class="comment">/************************* 标准调用约定声明 **********************/</span></div></pre></td></tr></table></figure></p>
<p>　　在<strong> DllDemo.h </strong>头文件声明中通过一个预编译宏<code>DLLDEMO_API</code>，当该宏未被定义时，将其定义为<strong> extern “C” _declspec(dllimport) </strong>，是外部定义声明修饰符；所以，我们可以在应用程序中直接通过<strong> #include “DllDemo.h” </strong>声明我们要调用的从动态链接库中导出的函数。<br>　　以上是解决在应用程序中调用的问题，那么这种方式在创建动态链接库时又是怎样进行导出函数声明的呢？<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*</div><div class="line"> *	File Name: DllDemo.cpp</div><div class="line"> *	Creator: Tarantula-7</div><div class="line"> *	Created Time: 2015.10.19</div><div class="line"> *	Description: 动态链接库创建和使用完善方案范例</div><div class="line"> <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>*/</span></span></div><div class="line">#define DLLDEMO_API extern <span class="string">"C"</span> _declspec(dllexport)</div><div class="line">#include <span class="string">"DLLDemo.h"</span></div><div class="line"></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> C调用约定实现如下 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line"><span class="built_in">int</span> add(<span class="built_in">int</span> a, <span class="built_in">int</span> b)&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">int</span> subtract(<span class="built_in">int</span> a, <span class="built_in">int</span> b)&#123;</div><div class="line">  <span class="keyword">return</span> a-b;</div><div class="line">&#125;</div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> C调用约定实现如下 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> 标准调用约定实现如下 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</span></span></div><div class="line"><span class="comment">//int _stdcall add(int a, int b)&#123;</span></div><div class="line"><span class="comment">//	return a+b;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"> </div><div class="line"><span class="comment">//int _stdcall subtract(int a, int b)&#123;</span></div><div class="line"><span class="comment">//	return a-b;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> 标准调用约定实现如下 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>/</span></span></div></pre></td></tr></table></figure></p>
<p>　　相似的，还是需要通过<strong> #include “DllDemo.h” </strong>对函数进行声明，但是，在<strong> #include “DllDemo.h” </strong>之前，对<code>DLLDEMO_API</code>宏进行定义，为<strong> extern “C” _declspec(dllexport) </strong>，是导出函数标识符；这样，当包含头文件时，因为<code>DLLDEMO_API</code>宏已经被定义，<strong> #define DLLDEMO_API extern “C” _declspec(dllimport) </strong>一行不会被执行，从而完成了对相应函数的导出声明。<br>　　通过以上这种方式，使得我们在使用动态链接库提供的接口时，只需要包含一个头文件即可完成对调用函数的外部定义，而该头文件则是开发该动态链接库的程序员提供；另外，通过这种方式，保证了<strong>应用程序调用接口函数采用的调用约定与对应动态链接库的导出规则相匹配</strong>。 (<font color="#9A32CD">我们的设备接口函数就是按照这种方式实现的</font>)</p>
<p>　　<font color="#FF2400"><strong>@-显示加载方式加载DLL</strong></font><br>　　显示加载方式是另外一种加载动态链接库的方式，这里简单介绍一下。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> CDLLtestDlg::OnBtnSubtract() </div><div class="line">&#123;</div><div class="line">　　HINSTANCE hInst = LoadLibrary(<span class="string">"./DLLDemo.dll"</span>);		<span class="comment">// 动态加载DLL</span></div><div class="line"> </div><div class="line">　　<span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> 标准调用预定 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line">　　<span class="comment">//typedef int (_stdcall *SUBTRACTPROC)(int a, int b);	// 定义函数指针类型</span></div><div class="line">　　<span class="comment">//SUBTRACTPROC Subtract = (SUBTRACTPROC)GetProcAddress(hInst, "_subtract@8");	</span></div><div class="line">                <span class="comment">// 通过导出符号名获取DLL的导出函数</span></div><div class="line">                <span class="comment">// GetProcAddress的第二个参数是按照标准调用规则改编后的导出符号名</span></div><div class="line">　　<span class="comment">//SUBTRACTPROC Subtract = (SUBTRACTPROC)GetProcAddress(hInst, MAKEINTRESOURCE(2));	</span></div><div class="line">                <span class="comment">// 也可以通过序号获取DLL的导出函数</span></div><div class="line">　　<span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> 标准调用预定 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line"> </div><div class="line">　　<span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> C调用预定 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line">　　<span class="keyword">typedef</span> <span class="built_in">int</span> (*SUBTRACTPROC)(<span class="built_in">int</span> a, <span class="built_in">int</span> b);</div><div class="line">　　SUBTRACTPROC Subtract = (SUBTRACTPROC)GetProcAddress(hInst, <span class="string">"subtract"</span>);</div><div class="line">　　<span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span> C调用预定 <span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span>/</span></span></div><div class="line"> </div><div class="line">　　<span class="keyword">if</span>(!Subtract)&#123;						<span class="comment">// 函数指针为NULL说明获取DLL导出函数失败</span></div><div class="line">　　　　	MessageBox(<span class="string">"获取函数地址失败!"</span>);</div><div class="line">　　　　	<span class="keyword">return</span>;</div><div class="line">　　&#125;</div><div class="line"> </div><div class="line">　　CString str;</div><div class="line">　　str.Format(<span class="string">"5-3=%d"</span>, Subtract(<span class="number">5</span>, <span class="number">3</span>));			<span class="comment">// 通过Subtract调用DLL中的subtract函数</span></div><div class="line">　　MessageBox(str);</div><div class="line"> </div><div class="line">　　FreeLibrary(hInst);						<span class="comment">// 释放该DLL的引用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意： 1. </strong>不同的调用约定在定义函数指针时是有区别的，如果采用标准调用约定，则需要添加<strong> _stdcall </strong>关键字。<br>　　　 <strong>2. </strong>通过导出函数名获取<strong>DLL</strong>导出函数时(<strong>GetProcAddress</strong>的第二个参数)，要注意是否发生名字改编。使用<strong> extern “C” </strong>同时采用<strong>C调用约定</strong>，导出函数的名字不会发生改编；采用<strong>标准调用约定</strong>，会对函数名字进行改编，改编原则是原始函数名前面添加<strong>“ _ “</strong>，后面添加<strong>“ @数字” </strong>，其中数字为函数参数所占字节数。<br>　　　 <strong>3. </strong>通过序号获取<strong>DLL</strong>导出函数时(<strong> MAKEINTRESOURCE(序号) </strong>)，最好通过<strong>dumpbin命令</strong>从导出信息中获取函数对应的序号(<strong>“ ordinal列 “</strong>信息)；不过由于这种方式<strong>代码可读性不强</strong>，不建议使用。<br>　　　<strong>4. </strong>采用显示加载方式加载<strong>DLL</strong>，在需要访问时调用<strong>LoadLibrary</strong>函数加载该<strong>DLL</strong>；当不需要访问该<strong>DLL</strong>时，调用<strong>FreeLibrary</strong>函数减少对该<strong>DLL</strong>的引用计数，当此计数变为0时，该<strong>DLL模块</strong>将从调用进程的地址空间卸载；调用<strong>FreeLibrary</strong>函数后，<strong> hInst </strong>句柄不再有效。<br>　　　 <strong>5. </strong>采用隐式链接方式访问<strong>DLL</strong>时，在程序启动时也是通过<strong>LoadLibrary</strong>函数加载该进程需要的动态链接库的；如果程序需要访问十多个<strong>DLL</strong>，如果都采用隐式链接方式加载它们的话，那么在改程序启动时，这些<strong>DLL</strong>都需要被加载到内存中，并映射到调用进程的的地址空间，这样将加大程序的启动时间。<br>　　　 <strong>6. </strong>一般来说，程序运行过程中只是在某个条件满足时才需要访问某个<strong>DLL</strong>中的某个函数，这种情况下，就可以采用显式加载的方式访问<strong>DLL</strong>，在<strong>需要时才加载所需的DLL</strong>。</p>
<h2 id="动态链接库搜索顺序"><a href="#动态链接库搜索顺序" class="headerlink" title="动态链接库搜索顺序"></a><span id="someKeys"><strong>动态链接库搜索顺序</strong></span></h2><p>　　当应用程序运行时，系统将会为它分配一个<strong>4GB</strong>(<strong>x86-32架构</strong>)的地址空间，然后加载模块会分析该应用程序的输入信息，从中找到改程序将要访问的动态链接信息，然后在用户机器上搜索这些动态链接库，进而加载它们，搜索的顺序如下：<br>　　　<strong>&lt;1. </strong>程序的执行目录，即<strong>.exe</strong>文件所在目录；<br>　　　<strong>&lt;2. </strong>当前目录<strong>“.”</strong>，也叫当前工作目录，即进行某项操作的目的目录；<br><strong>举例： </strong><font color="green">A居住在珠海，这是执行目录；但是A的工作地点是在广州，这是当前目录</font>。<br>　　　<strong>&lt;3. </strong>系统目录，常见的就是<strong>C:\Windows\System32</strong>、<strong>C:\Windows\System</strong>，64位系统的<strong>C:\Windows\SysWOW64</strong>；<br>　　　<strong>&lt;4. Path环境变量</strong>中所列出的路径。</p>
<h2 id="几点注意的地方"><a href="#几点注意的地方" class="headerlink" title="几点注意的地方"></a><strong>几点注意的地方</strong></h2><p>　　<strong>1）</strong>应用程序不需要调用一个动态链接库的所有导出函数，可以根据需要调用；<br>　　<strong>2）</strong>应用程序需要调用某个动态链接库提供的函数时，在程序链接时只需要包含该动态链接库提供的引入库文件，引入库文件并没有包含实际代码，只是用来为链接程序提供必要信息，以便在可执行文件中建立动态链接时需要用到的重定位表；<br>　　<strong>3）</strong>导出时设置的调用约定必须与引用时匹配，保证引用符号名与动态链接库中的导出符号名一致。
　</p>
<blockquote>
<p>Reference: 　</p>
<ul>
<li>《Win32动态链接库与静态链接库的区别》<br><a href="https://yq.aliyun.com/articles/2740?spm=5176.blog2739.yqblogcon1.8.pJ3E7X">https://yq.aliyun.com/articles/2740?spm=5176.blog2739.yqblogcon1.8.pJ3E7X</a></li>
<li>error C1041: 无法打开程序数据库“x:\projects\hellococo\debug.win32\vc120.pdb”；如果要将多个 CL.EXE 写入同一个 .PDB 文件，请使用 /FS 。<br><a href="http://home.eeworld.com.cn/my/space-uid-291513-blogid-239457.html">http://home.eeworld.com.cn/my/space-uid-291513-blogid-239457.html</a></li>
</ul>
</blockquote>
<h2 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a><strong>Version Control</strong></h2><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse"><br><tr><td style="width: 60px; text-align: center">版本号</td><td style="width: 80px; text-align: center">日期</td><td style="width: 320px; text-align: center">内容</td><td style="width: 100px; text-align: center">作者</td></tr><tr text-align="center"><td style="text-align: center">V0.1</td><td style="text-align: center">2015.10.16</td><td style="text-align: center">起草博客</td><td style="text-align: center">Tarantula-7</td></tr></table>]]></content>
      
        <categories>
            
            <category> 编程珠玑 </category>
            
            <category> 链接 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DLL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MFRC500 射频芯片射频读写模块完整设计]]></title>
      <url>/2015/10/03/graduatedesign_02%20MFRC500-%E5%B0%84%E9%A2%91%E8%8A%AF%E7%89%87%E5%B0%84%E9%A2%91%E8%AF%BB%E5%86%99%E6%A8%A1%E5%9D%97%E5%AE%8C%E6%95%B4%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>　　<strong>本文介绍了使用MFRC500射频芯片搭建射频读写模块的完整设计，其中包括电源部分的设计，PCB天线设计，以及天线电路设计及相关的理论依据，公式计算</strong>。<br><a id="more"></a></p>
<h2 id="电源"><a href="#电源" class="headerlink" title="电源"></a><strong>电源</strong></h2><p>　　<strong>DVDD+DVSS；AVDD+AVSS；TVDD+TVSS</strong>分别为数字部分、模拟部分和天线激励部分提供电源。<br>　　　　1)、数字部分对数字信号进行处理和传输，一般为方波，<font color="#00CCFF"><strong>含有大量的高频谐波信号</strong></font>；<br>　　　　2)、模拟部分对从射频标签传输的微小信号进行处理，容易受到数字信号中的高频分量的干扰；<br>　　　　3)、天线激励部分将调制后的信号进行放大输出，可能会干扰到模拟部分。<br>　　芯片将数字、模拟和天线激励部分的电源分开，<strong>DVSS、AVSS、TVSS数字地和模拟地最好分开</strong>。<br>　　数字部分、模拟部分和天线激励部分的电源均接入了<strong>0.1uF的去耦电容</strong>，减少干扰，保证直流电压的稳定性。<br>    <center><img src="/img/hsw/GraduateDesign/00-01.png" width="700px"/></center><br>　　<strong>+A. </strong>模拟地和数字地的串接可以采用磁珠<strong>(BLM18AG601SNID磁珠)</strong>、电感<strong>(小电感几uH-几十uH)</strong>或最好使用<strong>0欧电阻</strong>的方式。<br>　　<strong>+B. </strong>数字电路中，一般要给每个芯片的电源引脚并联一个<strong>0.1uF的电容</strong>到地，越接近芯片越好；容量约为<strong>0.01uF-0.1uF的陶瓷电容</strong>，<font color="#00CCFF">一方面是蓄能元件，提供和吸收<strong>IC(芯片模块)</strong>开关时的充放电能量，另一方面是旁路高频噪声</font>。<br>　　<strong>+C. </strong>与数字电路相同，模拟器件也需要为电源提供高质量的射频旁路(去耦)，但同时也需要低频电源旁路，因为模拟器件对噪声的干扰更为敏感。<br>　　　　大容量电容(低频旁路)，如铝电解电容和钽电容，呈电感性，电容值取决于PCB板上的瞬态电流要求，一般在<strong>10-470uF</strong>；常使用的小电容为<strong>0.1uF的瓷片电容</strong>，当频率更高时，还可并联更小的电容，例如<strong>几pF，几百pF的</strong>。<br>　　　　多个去耦电容并联，不仅能提供更宽的频谱分布范围，降低电源网络产生的开关噪声，而且能<strong>降低ESL(等效串联电感)的影响</strong>，达到更佳的去耦效果<strong>(并联去耦电容反向放置，使内部电流引起的磁通量相互抵消，进一步降低ESL)</strong>。<br>　　　　<strong>电感是一种蓄能元件，用在LC振荡电路中低频的滤波电路等，其应用频率很少超过50MHz；电源引入高频器件时用磁珠，处理低频噪声，保证电源的稳定；电感在电流脉冲期间电源板和模拟电源管脚之间实现了一个相对的高阻抗路径，加强滤波，有效降低数字电路部分中的高频谐波。</strong></p>
<h2 id="天线接口及其匹配电路设计"><a href="#天线接口及其匹配电路设计" class="headerlink" title="天线接口及其匹配电路设计"></a><strong>天线接口及其匹配电路设计</strong></h2><p>　　<strong>1）两种方式设计天线和匹配电路</strong><br>　　　　a. 直接匹配天线用于读卡器和天线距离较近的小型设备<strong>(&lt;30mm)</strong>;　　　　　　　　　　　　　　　　　<font color="#FF0000"><strong>选择使用的方式</strong></font><br>　　　　b. <strong>50Ω</strong>匹配天线用于读卡器和天线距离较远，需要通过同轴电缆连接的情况<strong>(10m左右)</strong>。　<br>　　<strong>2）副载波负载调制在频域产生两个边频带，高频在14.41MHz，低频的是在12.71MHz</strong>。</p>
<h2 id="EMC低通滤波器"><a href="#EMC低通滤波器" class="headerlink" title="　　+ EMC低通滤波器"></a>　　<font size="5" color="#FF9999"><strong>+ EMC低通滤波器</strong></font></h2><p>　　<strong>石英振荡器</strong>产生<strong>13.56MHz</strong>的工作频率，同时也产生高次谐波；<strong>13.56MHz</strong>中的三次、五次和高次谐波需要被良好地抑制。<strong>13.56MHz</strong>作为载波频率驱动天线，为了满足国际EMC标准规定的辐射能量幅度，需要对输出信号进行滤波。<br>    <center><img src="/img/hsw/GraduateDesign/00-02.png" width="550px"/></center><br>　　如上图所示的<strong>EMC低通滤波电路</strong>。形成两个LC滤波电路；为了获得更好性能，EMC滤波器的谐振频率为<strong>14.41MHz(上述的上边带)</strong>，该频率为发送信号的副载波上边带中心频率 <strong>==&gt;</strong> 增大输出信号的信噪比，改善输出性能，同时，减少传输脉冲的过冲幅度，改善传输信号的质量。<br>    <center><img src="/img/hsw/GraduateDesign/00-03.png" width="580px"/></center><br>　　借助上述的<strong>LC电路分析</strong>，易知EMC滤波器的谐振频率：<br>    <center><img src="/img/hsw/GraduateDesign/00-04.png" width="350px"/></center><br>　　<strong>Lx</strong>的取值<strong>1uH</strong>，则<strong>Cx1||Cx2=122.2pF</strong>。<br>　　<strong>并联电容反向放置，可以进一步降低ESL，加强滤波效果。</strong>故可取<br>　　　　<strong>Cx1=68pF+Cx2=56pF</strong><br>　　　　或者<strong>Cx1=Cx2=68pF(推荐设计)</strong>。<br>　　<strong>另外还需要注意的是，L和C必须放置得很靠近Tx1和Tx2管脚；C的接地线必须很短，而且对TVSS管脚的阻抗非常低。</strong></p>
<h2 id="接收电路"><a href="#接收电路" class="headerlink" title="　　+ 接收电路"></a>　　<font size="5" color="#FF9999"><strong>+ 接收电路</strong></font></h2><p>　　<strong>MFRC500射频芯片</strong>内部的接收电路可以对负载调制信号的副载波的两个边带进行解调，不需要增加外部滤波电路。<br>    <center><img src="/img/hsw/GraduateDesign/00-05.png" width="500px"/></center><br>　　<strong>VMID</strong>一定要有个<strong>0.01uF</strong>的去耦电容，可减少干扰，提供一个稳定的参考电压；<br>　　<strong>VMID引脚</strong>是内部的工作参考电压，为保证芯片正常工作，使用内部产生的<strong>VMID电势</strong>作为<strong>Rx管脚</strong>的输入电势；<br>　　<strong>R1=820Ω</strong>为定值，<strong>R2</strong>一般范围为<strong>820-2.7KΩ</strong>，电阻<strong>R1，R2</strong>作为分压电阻，保证<strong>Rx</strong>的直流工作点电压与<strong>VMID</strong>尽量相同，电压值过高会造成接收失败。<strong>15pF</strong>的电容也是定值，不用修改。</p>
<h2 id="天线线圈"><a href="#天线线圈" class="headerlink" title="　　+ 天线线圈"></a>　　<font size="5" color="#FF9999"><strong>+ 天线线圈</strong></font></h2><p>　　这里的天线线圈采取<strong>PCB环形天线</strong>，形状一般为矩形或圆形。<br>　　<strong>说明：</strong>磁场强度大小<strong>H</strong>与天线线圈上的电流<strong>I</strong>，天线线圈的匝数<strong>N</strong>，天线线圈的半径<strong>R</strong>以及距离天线线圈的垂直距离<strong>x</strong>有关：<br>　　　　　　　　　　　　<img src="/img/hsw/GraduateDesign/00-06.png" width="210px"/><br>　　当<strong>I和x</strong>不便时，当<strong>R=x</strong>时，<strong>H</strong>有最大值，因此读卡器的工作范围和天线线圈的半径大致相等。<br>　　使用读卡器时，标签会紧贴读卡器，<strong>x≈0</strong>，<br>　　　　　　　　<img src="/img/hsw/GraduateDesign/00-07.png" width="200px"/>，天线线圈半径越大，<strong>H</strong>越小。<br>　　<strong>注意，若读卡器的工作范围过大，可能会出现多个读卡器可以同时操作一个标签的情况</strong>。综合考虑上述因素，我们采用如下图的<strong>矩形PCB环形天线</strong>，天线线圈<strong>边长5cm</strong>。<br>    <center><img src="/img/hsw/GraduateDesign/00-08.png" width="600px"/></center><br>　　　　<strong><font size="4">+1. </font></strong> <strong>PCB环形天线</strong>的等效电感值<strong>Lant</strong>可以通过下列公式推算：<br>    <center><img src="/img/hsw/GraduateDesign/00-09.png" width="500px"/></center>　　　　　　其中各参数含义如下：<br>　　　　　　　　　　<strong>l<sub>1</sub>: </strong>一匝导线环的长度<br>　　　　　　　　　　<strong>D<sub>1</sub>: </strong>线圈直径或PCB导线宽度<br>　　　　　　　　　　<strong>K: =1.07</strong>，环形天线；<strong>=1.47</strong>，方形天线<br>　　　　　　　　　　<strong>N<sub>1</sub>: </strong>线圈的匝数<br>　　　　　　　　　　<strong>ln: </strong>自然对数函数<br>　　结合我们设计的方形天线，其等效电感值<strong>L<sub>ant</sub> = 2 x 20 x[ln(20/0.1) - 1.47]x 4<sup>1.8</sup> ≈ 1856.84(nH)</strong><br>　　　　<strong><font size="4">+2. </font></strong>在下一节计算品质因子和天线的调谐时，线圈的等效电容<strong>C<sub>ant</sub>≈0.1pF</strong>可以忽略。<br>　　　　<strong><font size="4">+3. </font></strong>工作频率<strong>13.56MHz</strong>，这个频率下电阻的集肤效应<strong>(skin effect)</strong>不可忽略，不能只是用<strong>DC阻抗</strong>描述天线线圈，可用下面公式估计：<strong>R<sub>ant</sub> = 5 · R<sub>DC</sub></strong><br>　　　　<strong><font size="4">+4. </font></strong>利用<strong>PCB走线电阻在线计算</strong>，通过方块统计的方法，利用铜的电阻和重量的关系，有：<br>　　　　　　　　　　<strong>铜箔厚度(导体厚度)T: 35um</strong><br>　　　　　　　　　　<strong>线宽(导体宽度)W: 35mils</strong><br>　　　　　　　　　　<strong>线长L: =5x4x4=80cm</strong><br>　　　　　　　　　　<strong>计算的R<sub>DC</sub>: 0.44Ω</strong><br>　　　　　　　　　　<strong>R<sub>ant</sub>: 5·0.44=2.2Ω</strong></p>
<h2 id="天线匹配电路"><a href="#天线匹配电路" class="headerlink" title="　　+ 天线匹配电路"></a>　　<font size="5" color="#FF9999"><strong>+ 天线匹配电路</strong></font></h2><p>　　为使得天线工作于<strong>13.56MHz</strong>，可在天线外部并联或者串联一个电容，使电容与天线线圈组成LC谐振电路。<strong>调整并联/串联电容大小使得谐振频率为工作频率的13.56MHz</strong>。此时，通过此谐振电路，读写器可将能量传至射频卡。<br>　　通过天线匹配电路，达到控制天线电路的：<br>　　　　<strong>+1. </strong>品质因数<br>　　　　<strong>+2. </strong>谐振频率<br>　　　　<strong>+3. </strong>阻抗匹配(输入阻抗典型值<strong>700Ω</strong>)<br>　　再次使用LC电路的<strong>汤姆逊公式</strong>，<br>    <center><img src="/img/hsw/GraduateDesign/00-10.png" width="400px"/></center><br>　　其中，<strong>L和C</strong>的取值要参考天线线圈的等效电路。电感取值范围在<strong>0.5~3uH</strong>，电容匹配较容易实现；天线的等效电感通常设计在<strong>1-2uH</strong>左右<strong>(如我们上述就设计为1857nH)</strong>。<br>    <center><img src="/img/hsw/GraduateDesign/00-11.png" width="600px"/></center><br>　　<strong>天线的品质因子，</strong><img src="/img/hsw/GraduateDesign/00-12.png" width="280px"/>，又带宽<strong>B=f<sub>R</sub>/Q</strong>，数据从<strong>RWD</strong>传输到射频卡使用脉宽<strong>T=3us</strong>的<strong>Miller编码</strong>，<strong>B·T ≥ 1</strong>，故<br>　　　　　　　　<strong>Q ≤ f<sub>R</sub>·T ≤ 13.56MHz·3us ≤ 40.68</strong>，<br>　　考虑到元件的容差和对温度的依赖，<strong>Q取35</strong>。<br>　　对于上图中所示的天线匹配电路，等价于两个下图所示的<strong>LC谐振电路</strong>，而右边所示的公式可以根据阻抗匹配经过一系列较为复杂的推导得到。<br>    <center><img src="/img/hsw/GraduateDesign/00-13.png" width="750px"/></center><br>　　到此，我们可以基于上述数据和公式计算<strong>串联/并联的匹配电容容值</strong>以及用于<strong>控制天线Q值的外部电阻R<sub>ext</sub>的阻值</strong>。<br>　　　　<strong><font size="4">+1. </font></strong>外部电阻<strong>R<sub>ext/2</sub> = (w<sub>R</sub>·L<sub>ant</sub>)/2 = (2πf<sub>R</sub>·L<sub>ant</sub>)/2</strong><br>　　　　<strong><font size="4">+2. </font></strong>各参数如下：<br>　　　　　　　　　<strong>工作频率f<sub>R</sub> = 13.56MHz</strong><br>　　　　　　　　　<strong>PCB天线等效电感L<sub>ant</sub> = 1857nH</strong><br>　　　　　　　　　<strong>PCB天线等效电阻R<sub>ant</sub> = 2.2Ω</strong><br>　　　　　　　　　<strong>天线匹配电路输入阻抗Z<sub>in</sub> = 700Ω(典型值)</strong><br>　　　　将上述各参数代入，使用<strong><font color="red">MATLAB</font></strong>进行计算，得到：<br>　　　　　　　　　<strong>串联的匹配电容容值C<sub>s</sub> = 12.7504pF</strong>　　　　<br>　　　　　　　　　<strong>并联的匹配电容容值C<sub>p</sub> = C<sub>p1</sub> || C<sub>p2</sub> = 137.1066pF</strong><br>　　　　　　　　　<strong>控制天线Q值的外部电阻的阻值R<sub>ext/2</sub> = 1.1602Ω</strong><br>　　参照NXP提供的官方计算表<br>　　　　<strong><em>NXP Semiconductors. Directly matched Antenna Excel calculation.xls</em></strong>，最终采用的参考设计是：<strong>R<sub>ext/2</sub> = 0Ω；C<sub>s</sub>=27pF；C<sub>p</sub>=120pF||27pF(尽量让使用的多种元件型号相同，比如电容)</strong>。</p>
<h2 id="最终整个天线接口及其匹配电路设计如下："><a href="#最终整个天线接口及其匹配电路设计如下：" class="headerlink" title="　　最终整个天线接口及其匹配电路设计如下："></a>　　<strong><font size="5" color="blue">最终整个天线接口及其匹配电路设计如下：</font></strong></h2><center><img src="/img/hsw/GraduateDesign/00-14.png" width="750px"/></center>

<h2 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a><strong>Version Control</strong></h2><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse"><br><tr><td style="width: 60px; text-align: center">版本号</td><td style="width: 80px; text-align: center">日期</td><td style="width: 320px; text-align: center">内容</td><td style="width: 100px; text-align: center">作者</td></tr><tr text-align="center"><td style="text-align: center">V0.1</td><td style="text-align: center">2015.10.3</td><td style="text-align: center">起草博客</td><td style="text-align: center">Tarantula-7</td></tr></table>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> RFID </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PCB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MFC TabControl控件实现选项卡功能]]></title>
      <url>/2015/09/28/iotCourse_01%20MFC-TabControl%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%E9%80%89%E9%A1%B9%E5%8D%A1%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>　　本文旨在指导大家如何通过使用<strong>Tab Control控件</strong>实现选项卡功能,构建整个读写器上位机软件的主要框架。在这个过程，大家将会初步接触并了解：<br>　　　　<strong>+1.　</strong> 什么是<strong>基于对话框</strong>的MFC程序;<br>　　　　<strong>+2.　</strong> <strong>Tab Control控件</strong>如何使用;<br>　　　　<strong>+3.　</strong> Windows程序的<strong>消息处理机制</strong>。<br><a id="more"></a></p>
<p>　　首先应该清楚的是，<strong>我们的读写器上位机软件是一个基于对话框的应用程序</strong>，使用VC++开发的MFC应用程序类型有以下三种<strong>单文档、多文档与基于对话框</strong>(摘自<a href="http://blog.csdn.net/shushuidewoniu/article/details/8631721">《MFC应用程序类型：单文档、多文档与基于对话框》</a>)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">单文档：记事本类程序的标准模式，有菜单栏、工具栏等，只能进行一份文档的操作，即不能同时在同一个应用程序中打开两个文件;</div><div class="line"> </div><div class="line">多文档：WORD类或浏览器程序的标准模式，可多个窗口显示不同的信息，进行不同的任务，有过个视图环境，可同时操作多个文件。</div><div class="line">       多个文件共享同一菜单栏、工具栏等;</div><div class="line"> </div><div class="line">对话框：可方便的使用控件，所见即所得的编程，没有菜单栏、工具栏等;</div><div class="line"> </div><div class="line">怎样看出一个MFC应用程序是基于单文档、多文档还是对话框？</div><div class="line"><span class="number">1.</span>运行应用程序观看，对话框一般没有菜单栏、工具栏等，单文档和多文档有;</div><div class="line">                  另外多文档可产生子窗口，会有一个childframe <span class="keyword">class</span>.</div><div class="line"><span class="number">2.</span>从源码中的类观看：</div><div class="line">   基于对话框—&gt;一般含以下<span class="number">3</span>个类：CAboutDlg、程序名App、程序名Dlg;</div><div class="line">   基于单文档—&gt;一般含以下<span class="number">4</span>个类：CMainFrame、程序名App、程序名Doc、程序名View;</div><div class="line">   基于多文档—&gt;一般含以下<span class="number">5</span>个类：CMainFrame、CChildFrame、程序名App、程序名Doc、程序名View.</div></pre></td></tr></table></figure></p>
<h2 id="第1步：-创建基于对话框的应用程序"><a href="#第1步：-创建基于对话框的应用程序" class="headerlink" title="第1步： 创建基于对话框的应用程序"></a><strong>第1步： 创建基于对话框的应用程序</strong></h2><p>　　所以，首先，我们要创建一个基于对话框的MFC应用程序。右上角<strong>File-&gt;New</strong>弹出以下对话框，选择应用程序的类型是<strong>MFC AppWizard(.exe)</strong>，输入工程名，选择工程存放路径，点击OK进入创建向导。最关键的一步是<strong>类型一定要选择Dialog based(基于对话框)</strong>，然后就可以<strong>Finish</strong>或者你也可以<strong>Next</strong>下去看有什么其他信息然后自定义进行修改，最后<strong>Finish</strong>，这样就创建了一个基于对话框的应用程序了。你可以执行一发看看效果。<br>    <center><img src="/img/RFID/00-00.png"/></center><br>　　接下来我们看一下通过上述操作，VC++悄悄帮我们做了哪些不可告人的事情。正如上面所说的，通过上述操作后自动生成了三个类(如下图)，其中<strong>“C工程名App”</strong>可以理解为整个应用程序的主体框架，由她去启动我们的主对话框<strong>“C工程名Dlg”</strong>。<strong>“CAboutDlg”</strong>是帮助对话框，运行程序后弹出主对话框，点击主对话框左上角小图标会弹出一个下拉菜单，点击<strong>“关于….”</strong>后弹出的对话框即是帮助对话框的内容。<strong>这里需要指出的是，MFC的编程惯例是类名都以C开头(ClassView视图查看类信息)，而该类相关的头文件、源文件(FileView视图查看文件信息)文件名则以去掉C之后的部分命名。</strong><br>    <center><img src="/img/RFID/00-01.png"/></center></p>
<h2 id="第2步：-添加TabControl控件"><a href="#第2步：-添加TabControl控件" class="headerlink" title="第2步： 添加TabControl控件"></a><strong>第2步： 添加TabControl控件</strong></h2><p>　　把工具自动生成的控件(下图所示的按钮、静态文本)一一选中后<strong>Delete</strong>掉。然后点击右边工具栏中的<strong>Tab Control控件</strong>将其拖拽到主对话框上。<br>    <center><img src="/img/RFID/00-02.png" width="600px"/></center><br>　　调整<strong>Tab Control控件</strong>大小，使其布满整个主对话框(如下图所示)。<strong>选中Tab Control控件右键-&gt;Properties</strong>可以对控件的属性进行设置，需要注意的属性有：<br>    　　<strong>General</strong>下的<strong>控件ID</strong>(后面需要在代码中通过控件ID绑定控件变量进而达到控制控件的目的)；<br>    　　<strong>Styles</strong>下的<strong>N 对齐</strong>；<br>    　　<strong>More Styles</strong>下的<strong>B 底部</strong>(界面设计第二种参考方案通过修改这个属性达到选项卡切换条在内容区下方的效果)。<br>    <center><img src="/img/RFID/00-03.png" width="600px"/></center></p>
<h2 id="第3步：-为TabControl控件绑定成员变量"><a href="#第3步：-为TabControl控件绑定成员变量" class="headerlink" title="第3步： 为TabControl控件绑定成员变量"></a><strong>第3步： 为TabControl控件绑定成员变量</strong></h2><p>　　<strong>选中控件-&gt;右键-&gt;ClassWizard</strong>弹出类向导对话框(如下图所示)。其中<strong>Messages Maps</strong>用于创建消息响应函数，例如点击某个按钮的响应函数；<strong>Member Variables</strong>则是类成员变量信息，主要是一些控件与其映射的类成员变量信息。我们选中<strong>Member Variables</strong>，选中<strong>IDC_TAB1</strong>(这个ID正是上述<strong>Tab Control控件</strong>对应的ID)，点击<strong>Add Variable…</strong>输入变量名进行添加。注意这里该变量是一个<strong>Control</strong>类别，<strong>CTabCtrl</strong>类型的变量，<strong>这些内容后续控件部分会进一步深入说明</strong>。另外，MFC编程惯例中成员变量要以<strong>m_</strong>开头。<br>    <center><img src="/img/RFID/00-04.png" width="600px"/></center><br>　　最后<strong>OK</strong>确认后，我们看到在主对话框类声明中多了一个<strong>public成员变量</strong>，另外，在该类源文件中的<strong>DoDataExchange函数</strong>里面通过<strong>DDX_Control(pDX, IDC_TAB1, m_xxx)</strong>将变量与控件ID绑定，最终达到通过成员变量来控制控件的目的。为我们后面通过代码控制该控件实现选项卡功能做好准备。<br>    <center><img src="/img/RFID/00-05.png" width="600px"/></center><br>　　<strong>注意：上面我们的控件对应的成员变量名是<code>m_MainFrame</code>，Tab Control控件的ID是<code>IDC_TAB1</code>，这些你都可以进行自定义修改，修改时ID一般字母全部大写，变量名以<code>m_</code>开头，另外请确保变量名具有可辨性。</strong></p>
<h2 id="第4步：-在主对话框的OnInitDialog中初始化选项卡"><a href="#第4步：-在主对话框的OnInitDialog中初始化选项卡" class="headerlink" title="第4步： 在主对话框的OnInitDialog中初始化选项卡"></a><strong>第4步： 在主对话框的OnInitDialog中初始化选项卡</strong></h2><p>　　<strong>OnInitDialog</strong>函数是主对话框在显示之前调用的，用于对主对话框进行初始化设置，所以我们在其中对新添加的<strong>Tab Control控件</strong>进行初始化。想想实现一个选项卡功能，无非要解决以下问题：<br>　　　　<strong>+1.　</strong> 选项卡上面要显示几个标签，也就是几个选项条？<br>　　　　<strong>+2.　</strong> 每个标签怎么和对应的内容关联起来？<br>　　　　<strong>+3.　</strong> 选项卡的切换效果怎么实现的？<br>　　前面2个问题将在<strong>OnInitDialog</strong>函数中解决，最后1个问题将在最后1步中讲述。(<strong>注意，下面代码为了方便显示内容，并不按照C++规范，因此你需要仔细阅读<code>#</code>后面的说明内容，然后再将关键部分代码Copy到你的工程；另外，部分MFC API有做说明，你可以通过MSDN获取更多信息。详细的代码分析会在本节后面内容讲述。</strong>)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#<span class="comment">/********************** SetIcon一行代码之后 **********************/</span>	</div><div class="line"></div><div class="line"># <span class="number">1.</span> 插入Tab选项卡标签</div><div class="line"># m_MainMenu就是上述创建的TabControl控件对应的变量，注意上一步中的变量名是m_MainFrame!</div><div class="line">m_MainMenu.InsertItem(<span class="number">0</span>, <span class="string">"标签名"</span>);			# InsertItem(标签下标，标签名)	</div><div class="line"> </div><div class="line"># <span class="number">2.</span> 关联对话框，将TAB控件设为选项卡对应对话框的父窗口</div><div class="line"># m_MenuDebugger是调试助手对话框对应的变量</div><div class="line"># Create(m_MenuDebugger变量对应的对话框ID, GetDlgItem(Tab Control控件对应ID));</div><div class="line">m_MenuDebugger.Create(IDD_DEBUGGER, GetDlgItem(IDC_TAB));</div><div class="line"></div><div class="line"># <span class="number">3.</span> 获取TAB控件客户区大小，用于调整选项卡对话框在父窗口中的位置</div><div class="line">CRect rect;</div><div class="line">m_MainMenu.GetClientRect(&amp;rect);</div><div class="line"></div><div class="line"># 原点位于左上角，X轴Y轴分别指向右方和下方</div><div class="line"># 可以理解为距离上边框<span class="number">28</span>px;左、右边框<span class="number">5</span>px;下边框<span class="number">5</span>px，具体数值请自己调试、美化!</div><div class="line">rect.top += <span class="number">28</span>;</div><div class="line">rect.right -= <span class="number">5</span>;</div><div class="line">rect.bottom -= <span class="number">5</span>;</div><div class="line">rect.left += <span class="number">5</span>;</div><div class="line"></div><div class="line"># <span class="number">4.</span> 设置子对话框尺寸并移动到指定位置</div><div class="line">m_MenuDebugger.MoveWindow(&amp;rect);</div><div class="line"></div><div class="line"># <span class="number">5.</span> 设置默认选项卡，对选项卡对话框进行隐藏和显示</div><div class="line">m_MenuDebugger.ShowWindow(SW_SHOWNORMAL或SW_HIDE);	# 为SW_SHOWNORMAL设置显示窗口；为SW_HIDE设置隐藏窗口</div><div class="line">m_MainMenu.SetCurSel(<span class="number">0</span>);				# 为Tab Control控件设置显示窗口对应的下标，一般为：<span class="number">0</span></div><div class="line"></div><div class="line">#<span class="comment">/********************** return TRUE返回之前 **********************/</span></div></pre></td></tr></table></figure></p>
<p>　　这里我们将<strong>每个标签对应的内容通过对话框呈现</strong>，这样只要我们<strong>将每个标签对应的对话框设计好，然后通过控制对话款的显示与隐藏对选项卡的切换做出响应</strong>，便能实现选项卡的功能了。不过前提是，我们需要先把每个标签对应的对话框设计好(这个<strong>通过使用基本控件可以实现，下节课将重点介绍</strong>)，并且将其关联到主对话框成员变量上，进而通过关联的成员变量控制对话框。所以在插入上述代码之前，我们需要为我们的每一个标签准备一个对话框。<br>　　<strong>ResourceView-&gt;Dialog右键-&gt;Insert Dialog</strong>插入新的对话框资源。<strong>(对对话框进行界面设计部分我们下一节再介绍)</strong>。新建好对话框之后我们需要对其属性进行设置，使其能达到实现我们功能的目的。<strong>选中对话框右键-&gt;Properties-&gt;弹出下方属性设置弹框</strong>：<br>　　        给对话框起一个容易辨识的ID(这里<strong>IDD_DEBUGGER</strong>是调试助手标签对应对话框的ID)；<br>　　        <strong>Styles</strong>中<strong>Styles改为Child(下层),Border改为None(无)</strong>；<br>　　        另外一个值得关注的属性是<strong>General</strong>下的字体。<br>    <center><img src="/img/RFID/00-06.png" width="600px"/></center><br>　　创建好一个标签对应的对话框后，我们需要为其创建对应的类。<strong>右键对话框-&gt;classWizard-&gt;便会提示您是否新建与该对话框对应的类-&gt;是</strong>之后便出现下面界面。类名建议符合惯例<strong>以C开头</strong>，类名最好能辨识关联的对话框，这里<strong>CDebugger类</strong>对应<strong>调试助手</strong>。另外需要留意的是<strong>Base class</strong>还有<strong>Dialog ID</strong>等信息，这里的基类是<strong>MFC API中的CDialog类</strong>，ID正是我们刚新建对话框的ID。<br>    <center><img src="/img/RFID/00-07.png" width="600px"/></center><br>　　为新建的对话框创建好对应类之后，我们就可以<strong>在主对话框中添加该新建对话框类型的成员变量</strong>了。在<strong>ClassView中选中主对话框类(C工程名Dlg类)-&gt;右键-&gt;Add Member Variables</strong>。注意(见下图)<strong>Variable Type</strong>要与新建的对话框对应类保持一致，变量名最好符合惯例以<strong>m_</strong>开头而且能够辨识，最好是私有成员变量。<br>    <center><img src="/img/RFID/00-08.png" width="550px"/></center><br>　　(这些就是C++的一些知识了，大家可以自己摸索，你也可以直接在主对话框类的头文件中直接添加以下声明，再将<strong>CDebugger类</strong>的头文件声明<strong>Debugger.h</strong>include进来，效果完全一样，通过<strong>Add Member Variables</strong>的方式实际上也只是通过工具自动生成如下声明，完成include操作)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  # 主对话框类其他声明</div><div class="line">  DECLARE_MESSAGE_MAP()</div><div class="line"><span class="keyword">private</span>:</div><div class="line">  CDebugger m_MenuDebugger;</div><div class="line">&#125;;	# 主对话框类声明结束</div></pre></td></tr></table></figure></p>
<p>　　到这里，应该就能弄明白本节开头提供的代码中<strong>m_MenuDebugger.Create(IDD_DEBUGGER, GetDlgItem(IDC_TAB))</strong>一句的作用，即通过<strong>Create</strong>方法(<strong>MFC自带API，可以借助MSDN查找</strong>)，让成员变量与对应的对话框绑定，进而对其进行控制。<br>　　其他内容较为简单，请参见本节开头代码及里面的详细注释，这里不再赘述。</p>
<h2 id="第5步：-主对话框中添加处理选项卡切换的响应函数"><a href="#第5步：-主对话框中添加处理选项卡切换的响应函数" class="headerlink" title="第5步： 主对话框中添加处理选项卡切换的响应函数"></a><strong>第5步： 主对话框中添加处理选项卡切换的响应函数</strong></h2><p>　　到这一步，我们已经完成选项卡的大部分功能，只是当选项卡切换时，其标签对应的内容并没有切换。这一块的实现需要涉及<strong>MFC程序的消息机制</strong>，这里就先举个例子给大家介绍一下，更为深入的内容后续课程会向大家讲解。比如我们<strong>点击界面上某个按钮，操作系统能够监听到我们鼠标的行为，会产生一个点击事件，并且将该事件与被点击的按钮绑定起来，然后将这个消息放入一个系统维护的消息队列中；有消息的产生必然需要对消息进行处理，应用程序会通过一个消息循环不断地从消息队列中取出消息，并做出响应</strong>。<br>　　在实际的MFC程序中，已经将上述过程的绝大部分进行封装，我们开发需要做的只是<strong>确定消息类型并为该消息编写响应函数</strong>即可(这一块后续也会进一步讲解)。<br>　　选中<strong>Tab Control控件</strong>右键-&gt;<strong>Class Wizard</strong>-&gt;选中该控件ID(这里是<strong>IDC_TAB1</strong>)，消息类型选择<strong>TCN_SELCHANGE</strong>(也就是控件标签改变事件)，然后<strong>Add Function</strong>添加消息响应函数<strong>OnSelchangeTab</strong>，然后<strong>Edit Code</strong>编辑该响应函数。<br>    <center><img src="/img/RFID/00-09.png" /></center><br>　　这样一来，当我们通过鼠标点击切换选项卡内容时，响应函数就会被调用，我们只要在其中完成<strong>响应标签对话框的显示与隐藏</strong>即能实现选项卡切换的效果。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"># <span class="number">6.</span> 处理选项卡切换</div><div class="line"><span class="keyword">void</span> CxxxDlg::OnSelchangeTab(NMHDR* pNMHDR, LRESULT* pResult) </div><div class="line">&#123;</div><div class="line">  *pResult = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">int</span> cursel = m_MainMenu.GetCurSel();			#  获取当前点击选项卡标签下标</div><div class="line">                          #  根据下标将相应的对话框显示，其余隐藏</div><div class="line">  <span class="keyword">switch</span>(cursel)</div><div class="line">  &#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">    m_MenuDebugger.ShowWindow(SW_SHOWNORMAL);	#  调试助手对应对话框显示，其余隐藏</div><div class="line">                          #  m_MenuAppDev是应用开发对话框对应的变量</div><div class="line">    m_MenuAppDev.ShowWindow(SW_HIDE);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    m_MenuDebugger.ShowWindow(SW_HIDE);			#  应用开发对应对话框显示，其余隐藏</div><div class="line">    m_MenuAppDev.ShowWindow(SW_SHOWNORMAL);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　到这里，我们已经能够实现选项卡的功能，整个流程也已经给大家详细介绍了。最后还想和大家分享的是，通过上述方式添加<strong>TCN_SELCHANGE</strong>消息响应函数<strong>OnSelchangeTab</strong>后，工具自动生成的代码主要有两部分(见下)。<br>　　　第一，类声明中增加了以<strong>afx_msg</strong>修饰的保护类型的响应函数声明；<br>　　　第二，源文件中，在<strong>BEGIN_MESSAGE_MAP</strong>和<strong>END_MESSAGE_MAP</strong>之间通过<strong>ON_NOTIFY</strong>(自带API)将消息，控件ID，响应函数关联起来。<br><strong>CxxxDlg.h头文件</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#  主对话框其他声明....</div><div class="line"> </div><div class="line"><span class="comment">// Implementation</span></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">  HICON m_hIcon;</div><div class="line"> </div><div class="line">  <span class="comment">// Generated message map functions</span></div><div class="line">  <span class="comment">//&#123;&#123;AFX_MSG(CxxxDlg)</span></div><div class="line">  <span class="function">afx_msg <span class="keyword">void</span> <span class="title">OnSelchangeTab</span><span class="params">(NMHDR* pNMHDR, LRESULT* pResult)</span></span>;</div><div class="line">  <span class="comment">//&#125;&#125;AFX_MSG</span></div><div class="line">  DECLARE_MESSAGE_MAP()</div><div class="line"> </div><div class="line">#  主对话框其他声明....</div></pre></td></tr></table></figure></p>
<p><strong>CxxxDlg.cpp源文件</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">BEGIN_MESSAGE_MAP(CxxxDlg, CDialog)</div><div class="line">  <span class="comment">//&#123;&#123;AFX_MSG_MAP(CxxxDlg)</span></div><div class="line">  ON_NOTIFY(TCN_SELCHANGE, IDC_TAB, OnSelchangeTab)</div><div class="line">  <span class="comment">//&#125;&#125;AFX_MSG_MAP</span></div><div class="line">END_MESSAGE_MAP()</div></pre></td></tr></table></figure></p>
<h2 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a><strong>Version Control</strong></h2><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:18px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse"><br><tr><td style="width: 60px; text-align: center">版本号</td><td style="width: 80px; text-align: center">日期</td><td style="width: 320px; text-align: center">内容</td><td style="width: 100px; text-align: center">作者</td></tr><tr text-align="center"><td style="text-align: center">V0.1</td><td style="text-align: center">2015.9.29</td><td style="text-align: center">起草博客</td><td style="text-align: center">Tarantula-7</td></tr><tr align="center"><td style="text-align: center">V0.7</td><td style="text-align: center">2015.10.2</td><td style="text-align: center">添加Create等API说明；强调几处易混淆点</td><td style="text-align: center">Tarantula-7</td></tr></table>]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[快速搭建Android ADT开发环境(基于Win7&Win8.1(both 64-bit),其他仅供参考)]]></title>
      <url>/2015/07/15/Android_%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAAndroid-ADT%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-%E5%9F%BA%E4%BA%8EWin7-Win8-1-%E5%85%B6%E4%BB%96%E4%BB%85%E4%BE%9B%E5%8F%82%E8%80%83/</url>
      <content type="html"><![CDATA[<p>　　本教程将教你如何快速搭建起Android开发环境，其中结合了诸多网上经典教程的亮点，希望能够尽可能详细地描述环境搭建原理，同时，让你最方便快速的搭建起开发环境，进行后续更为重点的Android开发。<br>　　本教程在64位Win8.1下搭建，并在64位Win7虚拟机下亲测有效。<br><a id="more"></a> </p>
<p>　　首先，从这里获取<a href="http://yunpan.cn/ccuDBGzGwhp4i">安装所需的所有文件</a>(点击获取 访问密码 <strong>8b5e</strong>)，其中:<br>　　　　<strong>+ </strong>Android-ADT Bundle.rar: Android Eclipse以及SDKbundle包.<br>　　　　<strong>+ </strong>HelloAndroid.rar: 用于测试的Eclipse Project.<br>　　　　<strong>+ </strong>jdk-6u35-windows-x64.exe: JDK1.6安装程序.</p>
<h2 id="第一步，安装和配置JDK"><a href="#第一步，安装和配置JDK" class="headerlink" title="第一步，安装和配置JDK"></a><span id="part1"><strong>第一步，安装和配置JDK</strong></span></h2><ol>
<li>双击jdk-6u35-windows-x64.exe安装64位jdk1.6.0_35, 记住安装路径，这里为<strong>C:\Program Files\JAVA\jdk1.6.0_35</strong>；</li>
<li>JDK安装后会自动进入对应的JRE安装，这里安装到到<strong>C:\Program Files\JAVA\jre6</strong>；<br>　　<strong>(jdk1.6.0_35/也存在jre，可以无需另外安装JRE)</strong></li>
<li>安装后需要配置环境变量。<br>　　<strong>+ JAVA_HOME: </strong>我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量，在系统变量中新建JAVA_HOME 变量值为　<strong>C:\Program Files\JAVA\jdk1.6.0_35</strong>，上述JDK的安装路径。 创建好后则可以利用<strong>%JAVA_HOME%(Linux下则通过$JAVA_HOME)</strong>作为JDK安装目录的统一引用路径。<br><center><img src="/img/Android/1.3.1.png" width="400px"/></center><br>　　<strong>+ CLASSPATH: </strong>新建变量CLASSPATH, 值为<br>　　　　　<strong>.;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\bin;</strong><br>　　　注意变量值字符串前面有一个<strong>“.”</strong>表示当前目录，设置CLASSPATH 的目的，在于告诉Java执行环境，在哪些目录下可以找到您所要执行的Java程序所需要的类或者包。<br><center><img src="/img/Android/1.3.2.png" width="400px"/></center><br>　　　dt.jar和tools.jar是两个java最基本的包，里面包含了java中最重要的lang包到各种高级功能如可视化的swing包，是java必不可少的。</li>
</ol>
<p><table border="3" cellpadding="4px" style="font-family: verdana,arial,sans-serif; font-size:14px; color:#333333; background-color:#c3dde0; margin: 0; border-color: #333333; border-collapse:collapse"><tr><td style="width: 100px; text-align: center"><strong>jar包</strong></td><td style="width: 250px; text-align: center"><strong>类别</strong></td><td style="width: 400px; text-align: center"><strong>备注说明</strong></td></tr><tr><td style="text-align: center">tools.jar</td><td style="text-align: center">工具类库，编译和运行需要其中的类<strong>sun.tools.java.*，sun.tools.javac.*</strong></td><td style="text-align: center">一般只在javac时用到，<strong>java XXX.java </strong>等价于<strong>java –classpath=%java_home%/lib/tools.jar XX.XXX.main XXX.java</strong>，javac是对上述命令的封装，因此不用加到classpath中。应用服务器编译JSP文件，会自己加载，不需要自己设置。</td></tr><tr><td style="text-align: center">rt.jar</td><td style="text-align: center">java基础类库</td><td style="text-align: center">默认在根classloader的加载路径里面，无需添加至classpath，同样<strong>jre/lib下的大部分jar</strong>都在这个路径中；检测方法：删去classpath中的rt.jar，用<strong>java –verbose</strong>命令检测。</td></tr><tr><td style="text-align: center">dt.jar</td><td style="text-align: center">运行环境的类库，主要是swing包</td><td style="text-align: center">用到swing时最好加上，Eclipse开发环境默认是JRE，所以需要设置。</td></tr></table><br>  　　<strong>+ Path: </strong>修改系统变量Path，在前面添加　<strong>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</strong><br>    <center><img src="/img/Android/1.3.3.png" width = "400px"/></center><br>  然后一路确定保存设置，然后<strong>WIN+R</strong>打开CMD命令行输入<strong>java -version</strong> 或 <strong>javac -version</strong>进行配置验证。<br>    <center><img src="/img/Android/1.3.4.png" width = "600px"/></center><br>　　<strong>%JAVA_HOME%/bin/</strong>目录如下图，<br>    <center><img src="/img/Android/1.3.5.png" width = "600px"/></center><br>　　JDK包含的基本工具主要有：<br>　　　<strong>+ jar：</strong>打包工具，将相关的类文件打包成一个文件。<br>　　　<strong>+ java：</strong>运行编译后的java程序。<br>　　　<strong>+ javac：</strong>Java编译器，将源代码转成字节码。<br>　　　<strong>+ javadoc：</strong>文档生成器，从源码注释中提取文档。<br>　　　<strong>+ javaw：</strong>javaw.exe是相似的和java.exe，是一个win32的GUI应用，应用提供自己的GUI窗口，不启用控制台。<br>　　　<strong>+ jdb：</strong>debugger，调试查错工具。</p>
<h2 id="第二步，安装和配置Eclipse-ADT和Android-SDK"><a href="#第二步，安装和配置Eclipse-ADT和Android-SDK" class="headerlink" title="第二步，安装和配置Eclipse-ADT和Android SDK"></a><span id="part2"><strong>第二步，安装和配置Eclipse-ADT和Android SDK</strong></span></h2><p>　　1. 将<strong>Android-ADT Bundle.rar</strong>解压到本地。<br>     　　  记住路径，这里为<strong> C:\Program Files\Android-ADT</strong>。与上述步骤一样，新建系统变量ANDROID_SDK_HOME，值为 <strong>C:\Program Files\Android-ADT\sdk</strong>，指向该解压目录下的Android SDK。<br>     <center><img src="/img/Android/2.1.png" width = "400px"/></center><br>　　2. 修改　<strong>解压目录/eclipse/eclipse.ini</strong>。<br>     　　　-vm参数用于设置虚拟机，让其指向<strong>上述安装JDK下的bin/javaw.exe</strong><br>     <center><img src="/img/Android/2.2.png" width = "600px"/></center></p>
<h2 id="第三步，开发环境初识"><a href="#第三步，开发环境初识" class="headerlink" title="第三步，开发环境初识"></a><span id="part3"><strong>第三步，开发环境初识</strong></span></h2><p>　　1. 双击 <strong>解压目录/eclipse/eclipse.exe</strong>运行Android-ADT(可以通过右键创建快捷方式),首次运行需要设置workspace。 这里设置为<strong>C:\Chen\AndroidWorkspace</strong>。<br>     <center><img src="/img/Android/3.1.png" width = "600px"/></center><br>　　2. 首次运行进入主界面后关闭welcome页面进入工作界面。<br>     <center><img src="/img/Android/3.2.png"/></center><br>     　　　<strong>+ 1: </strong>启动Android SDK Manager，进行Android SDK的下载和更新；<br>     　　　<strong>+ 2: </strong>启动Android Virtual Device Manager, 创建并启动用于测试的模拟器；<br>     　　　<strong>+ 3: </strong>项目导航，点击项目展开整个项目工程，右键项目进行该相关设置；<br>     　　　<strong>+ 4: </strong>代码区，编写代码或文件。下面是用于代码区的一些常用快捷键：<strong>a) CTRL+D 删除整行；b) CTRL+ALT+DOWN(UP) 复制整行代码下移(上移)；c) ALT+DOWN(UP) 整行代码下移(上移)；d)  ALT+/ 快速查找</strong>。 更多快捷键可以通过网上查找，也能通过菜单栏<strong>Window-&gt;Preferences-&gt;General-&gt;Keys</strong>查看和自定义设置；<br>     　　　<strong>+ 5: </strong>用于快速切换不同的视图；<br>     　　　<strong>+ 6: </strong>Console查看运行结果，错误信息等。<br>　　3. 设置Android SDK路径。　<strong>Window-&gt;Preferences-&gt;Android</strong>，通过Browser浏览并设置SDK Location，选择你解压目录下的sdk，实际上与上述所说的ANDROID_SDK_HOME的值一致。<br>     <center><img src="/img/Android/3.3.1.png" width = "600px"/></center><br>     　　Apply进行设置，设置成功后，可以查看到目前Bundle包下配置有3个版本的Android，2.3.3；4.3；4.4.2，一般选择版本建议选择一个较低版本，一个最常用版本，还有一个最新版，因此这三个版本是能满足长期的开发的。遗憾的是，Google已经停止对Eclipse-ADT的更新支持了，所以，这里的最新版本并不是目前最新的Android版本。但是，作为初学者，这些配置已经能够满足一段较长时间的学习开发。<br>     <center><img src="/img/Android/3.3.2.png" width = "600px"/></center><br>　　4. 关于Android SDK Manager的一些设置。<br>     　　如果上述的SDK并能满足你的要求或者你想在其他Android版本上测试，可以点击菜单栏中的Android SDK Manager打开SDK配置，这里需要强调的一点是，出于某种原因(天朝的防火墙，你懂的）Android SDK Manager也无法更新，下载了。这里通过下面的代理解决这个问题，相关设置Bundle已经帮你设置好了。<br>     <center><img src="/img/Android/3.4.png" width = "600px"/></center><br>     　　通过<strong>Tool-&gt;Options</strong>打开代理设置，设置后<strong>Close</strong>，然后通过<strong>Package-&gt;Reload</strong>进行重新检测。经过代理设置后终于可以下载了，虽然速度还是很慢。<br>　　5. 关于Android Virtual Device Manager的一些操作和设置。<br>     　　Bundle包已经提供了一个本人用于测试的模拟器。点击Android Virtual Device Manager启动模拟器，便能看到已经配置好的Tarantula-7模拟器。<br>     <center><img src="/img/Android/3.5.png" width="600px"/></center><br>     　　选中Tarantula-7，点击Start即可以开启模拟器(需要耐心等待);Details可以查看模拟器的配置，主要有模拟器的Android版本，屏幕，RAM，SD Card等配置等；Edit可以进行如下相关配置；Delete删除该模拟器; New则可以新建模拟器并进行相关设置。<br>     <center><img src="/img/Android/3.5.1.png" height="380px"/></center></p>
<h2 id="第四步，Hello-Android"><a href="#第四步，Hello-Android" class="headerlink" title="第四步，Hello Android"></a><span id="part4"><strong>第四步，Hello Android</strong></span></h2><p>　　1. 将HelloAndroid.rar解压到上述workspace下，然后在Ecipse-CDT菜单栏<strong>File-&gt;Import-&gt;General-&gt;Existing Project into workspace-&gt;Next-&gt;Browser</strong>选中workspace下的HelloAndroid工程，Finish即可完成导入；<br>　　2. AVD打开模拟器管理，选中Tarantula-7点击start运行该模拟器，等待2分钟左右后模拟器就绪；<br>     <center><img src="/img/Android/4.1.png" height="380px"/></center><br>　　3. 右键项目 HelloAndroid，<strong>Run As-&gt; Android Application </strong>即可将项目生成apk下载到模拟器并自动安装运行；<br>     <center><img src="/img/Android/4.2.png" height="380px"/></center><br>     　　当出现上面所示界面，说明程序下载并成功安装运行。至此，整个开发环境搭建并验证成功。<br>     　　<strong>接下来你可以在Eclipse-ADT中通过新建项目开始开发你的Android项目，然后在模拟器上运行。如果有需要，你可以通过Android SDK Manager下载其他Android版本用于测试；你还可以通过Android Virtual Device Manager配置自己需要的模拟器。</strong></p>
<h2 id="第五步，连接你的Android手机"><a href="#第五步，连接你的Android手机" class="headerlink" title="第五步，连接你的Android手机"></a><span id="part5"><strong>第五步，连接你的Android手机</strong></span></h2><p>　　上面已经介绍如何把项目下载安装到模拟器上运行测试，但是有的时候，我们需要直接在自己的Android手机上进行测试。<br>　　1. 首先需要安装驱动程序用于连接你的手机。<br>     　　　　这里建议安装360手机助手，就能够自动安装连接各种手机需要的驱动，比较方便。<br>　　2. 通过adb验证。<br>     　　　　通过USB插上手机，在手机上启动USB调试(不同手机的启动方式不同，请自行Baidu/Google之)。<br>     <center><img src="/img/Android/5.1.png" width="720px"/></center><br>     　　　　adb.exe存放在sdk下的platform-tools下，打开命令行，cd切换到该目录下，然后通过<strong>adb devices</strong>检测连接的设备。这里显示<strong>“K7W…”</strong>即为本人的Android手机。当然，你可以通过<strong>adb shell</strong>进入设备shell，进行一些基本的shell命令操作，如ls等。<br>　　3. 设置Run Configuration。<br>     <center><img src="/img/Android/5.2.png" width="720px"/></center><br>     　　　　<strong>右键项目-&gt;Run As-&gt;Run Configuration</strong>打开配置，选中项目，点击Target选项卡，选择<strong>Always prompt to pick device</strong>总是询问选择进行设备选择即可。<br>　　4. 经过上述设置，当你手机成功连接到PC后，通过<strong>右键项目-&gt;Run As-&gt;Android Application</strong>即会自动检测出你的Android手机，你只需选中该设备，OK即可将项目下载安装到手机上并自动运行。<strong>注意，下载前需要保证你的手机出于解锁状态，手机也许会询问是否允许，请允许该操作。</strong><br>     <center><img src="/img/Android/5.3.png" width="720px"/></center></p>
<p>　　<strong>到这里，你已经搭建好Android开发所需的所有环境了，还在等什么，赶快找个视频教程，开始Android开发之旅吧！</strong></p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[(一) 搭建STM32开发环境]]></title>
      <url>/2015/07/09/graduatedesign_01%20STM32_%E4%B8%80-%E6%90%AD%E5%BB%BASTM32%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>　　在正式开展STM32开发之前，我们需要花1-3天搭建开发环境和熟悉开发流程。本文为整个博客系列的第一篇，将带你按照以下几个步骤完成开发环境的搭建的测试，下一篇将为你介绍如何创建项目，通过这两讲熟悉开发流程，为后面的开发打下基础：<br>　　1. 安装JLink驱动，用于下载程序到开发板上；<br>　　2. 安装MDK-KEIL，用于开发程序；<br>　　3. 破解MDK-KEIL；<br>　　4. 使用开发板标准测试测试开发环境。<br>所有安装程序均可以从这里下载获取 <a href="http://yunpan.cn/ccKyYhhC56rGg">http://yunpan.cn/ccKyYhhC56rGg</a> 访问密码 <strong>eb4f</strong><br><a id="more"></a></p>
<h2 id="安装Jlink驱动"><a href="#安装Jlink驱动" class="headerlink" title="安装Jlink驱动"></a><strong>安装Jlink驱动</strong></h2><p>　　双击<strong>Setup_JLinkARM_V458a.exe</strong>即可开始安装，安装过程和一般安装程序相同，安装成功后将JLINK通过USB插接到电脑上，即可在设备管理器–&gt;通用串行总线控制器看到J-Link driver，将JLINK拔出电脑后，该J-Link driver消失，说明驱动安装成功。</p>
<h2 id="安装MDK-KEIL"><a href="#安装MDK-KEIL" class="headerlink" title="安装MDK-KEIL"></a><strong>安装MDK-KEIL</strong></h2><p>　　双击mdk472_a.exe开始安装，安装过程和一般软件也差不错，同意协议后基本上一路NEXT。期间可以更改安装路径；要求填写个人信息的时候可以随便写(First Name和E-mail可以不填)。填写完个人信息后开始正式安装，安装过程比较漫长，请耐心等候。最终NEXT下去FINISH即可完成安装。接下来需要对其进行破解以获取软件的完整功能。</p>
<h2 id="破解MDK-KEIL"><a href="#破解MDK-KEIL" class="headerlink" title="破解MDK-KEIL"></a><strong>破解MDK-KEIL</strong></h2><p>　　1. 获取软件的CID序列号。运行软件(Win8用户最好右键–&gt;以管理员方式运行)–&gt;菜单栏File–&gt;License Management–&gt;Computer ID–&gt;CID，复制该序列号。<br>　　2. 获取License序列号。双击KEIL_Lic.exe运行破解机(Win8用户最好右键–&gt;以管理员方式运行)，在CID中输入上述CID序列号，Target记住选择ARM！然后点击Generate即可在下方方框中获取License破解码，复制该破解码。<br>　　3. 粘贴到New License ID Code，Add Lic即可进行破解，下方的文本域会显示破解结果。<br>　　4. 破解出错一般是Target没有选中ARM或者CID或者破解码复制粘贴出现错误。Win8用户最后以管理员身份运行程序，避免出现破解不成功。<br>    <center><img src="/img/STM32/MDK01.png"/></center></p>
<h2 id="测试开发环境"><a href="#测试开发环境" class="headerlink" title="测试开发环境"></a><strong>测试开发环境</strong></h2><p>　　1. 解压TestDemo.rar到本地，双击<strong>“TestDemo/Project/RVMDK（uv4）/iSO-STM32.uvproj”</strong>用KEIL打开该工程。</p>
<p><center><img src="/img/STM32/MDK02.png"/></center><br>　　<strong>留意上图指示的菜单栏下的三个按钮，点击Build快速编译工程；点击TargetOptions进行编译、下载等配置；点击load快速下载程序到开发板。</strong><br>　　2. Build编译工程。<br>　　3. TargetOptions进行下载配置。相关配置参数如下图所示，包括Utilities还有Debug配置。并通过Debug–&gt;Settings–&gt;Flash Download配置下载目标Flash。记得勾选Reset and Run还有通过Add添加STM32F10x 512k Flash(与我们使用的开发板一致)<br>    <center><img src="/img/STM32/MDK03.png"/></center><br>　　4. 完成上述配置后便可以Load进行下载，再通过板上触摸屏依次进行整板测试。</p>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> MCU </category>
            
        </categories>
        
        
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数媒HW4参考资料]]></title>
      <url>/2015/06/16/opengl_%E6%95%B0%E5%AA%92HW4%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</url>
      <content type="html"><![CDATA[<p>(同学说整理，顺道POST出来咯….)<br>整体思路:<br>首先通过HW3我们已经能够完成3D Pipeline，但是我们最后的模型绘制只是将每个面的顶点依次用线段连接起来，这一次我们需要对每个面进行绘制，其实就是对每个面进行颜色填充。那么问题来了，怎么填充？填充什么颜色？<br><a id="more"></a><br>怎么填充每个面，这里使用的是边相关扫描线算法，思路均参考给的链接；<br>颜色怎么获取呢？光照模型用于计算每个面的每个顶点的颜色，Shading则用于通过顶点获取面中其他像素点的颜色，到这里我们就能给每个面fill正确的颜色(具体的光照模型 明暗绘制请参考下面链接)；<br>还没完，因为还要处理我们填充好的面是否可见的问题，这里就需要用到Z-Buffer了。思路是，Z-Buffer维护两个缓存，帧缓存(存放指定位置颜色值)，深度缓存(存放指定位置深度)，这两个缓存对应于我们整个window窗口，缓存中每个位置对应于窗口中的每个像素。所以我们在用边相关扫描填充每个面的时候，就转化成对Z-Buffer进行处理。对于需要填充面的每个像素，得到颜色还有z，如果z比Z-Buffer的深度缓存中的z小(说明更接近人眼)，就更新深度缓存和帧缓存。完成所有面之后，我们只需要遍历整个帧缓存，一直用该缓存中对应位置的颜色值drawDot就能完成绘制了(详细参考Z-Buffer和边相关扫描线算法链接)。</p>
<h2 id="光照模型"><a href="#光照模型" class="headerlink" title="光照模型"></a><strong>光照模型</strong></h2><ol>
<li>粗读这两篇了解一些基本思路<br> <a href="http://blog.csdn.net/pleasecallmewhy/article/details/8377944">http://blog.csdn.net/pleasecallmewhy/article/details/8377944</a><br> <a href="http://www.ownself.org/blog/2010/guang-zhao.html">http://www.ownself.org/blog/2010/guang-zhao.html</a></li>
<li>这一篇建议同时参考笔记学习<br> <a href="http://www.cnblogs.com/mavaL/archive/2010/11/01/1866451.html">http://www.cnblogs.com/mavaL/archive/2010/11/01/1866451.html</a></li>
</ol>
<h2 id="明暗绘制"><a href="#明暗绘制" class="headerlink" title="明暗绘制"></a><strong>明暗绘制</strong></h2><p>明暗绘制这一块建议还是参考笔记，明白主体思路。<br>这一篇讲Gouraud Shading和Phong Shading的思路<br>    <a href="http://jwc.neau.edu.cn/eol/data/res/jsjtxx/Chapter4/CG_Txt_4_021.htm">http://jwc.neau.edu.cn/eol/data/res/jsjtxx/Chapter4/CG_Txt_4_021.htm</a></p>
<h2 id="Z-Buffer"><a href="#Z-Buffer" class="headerlink" title="Z-Buffer"></a><strong>Z-Buffer</strong></h2><p>建议IE打开<br>    <a href="http://course.cug.edu.cn/cugThird/CGOL_NET/CLASS/course/8-4-a.htm">http://course.cug.edu.cn/cugThird/CGOL_NET/CLASS/course/8-4-a.htm</a></p>
<h2 id="边相关扫描线算法"><a href="#边相关扫描线算法" class="headerlink" title="边相关扫描线算法"></a><strong>边相关扫描线算法</strong></h2><p>建议IE打开<br>    <a href="http://course.cug.edu.cn/cugFirst/computer_graphics/class/course/2-3-1-a.htm">http://course.cug.edu.cn/cugFirst/computer_graphics/class/course/2-3-1-a.htm</a>    </p>
<ul>
<li>初识OpenGL与开发环境配置<blockquote>
<p><a href="http://blog.csdn.net/crayondeng/article/details/15494061">http://blog.csdn.net/crayondeng/article/details/15494061</a></p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[写两个星期OpenCL先(1)]]></title>
      <url>/2015/05/24/opencl_%E5%86%99%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9FOpenCL%E5%85%88-1/</url>
      <content type="html"><![CDATA[<p>　　本文基于对有关资料的理解，同时通过代码测试验证，为大家讲述OpenCL入门时几个比较重要但又令人困惑的小知识点，包括：<br>　　1. <a href="#part1">NDRange如何设置(work-item&amp;work-group)?</a><br>　　2. <a href="#part2">如何获取kernel执行时间?</a><br>　　3. <a href="#part3">如何获取kernel编译信息?</a><br><a id="more"></a></p>
<h2 id="一-NDRange如何设置"><a href="#一-NDRange如何设置" class="headerlink" title="(一)NDRange如何设置?"></a><span id="part1"><strong>(一)NDRange如何设置?</strong></span></h2><center><img src="/img/cl/work-item&work-group.png" width="600px"/></center><center><strong>Figure from 《<em>Introduction to OpenCL</em>》 Nivida，2010</strong></center>

<ul>
<li>结合上图我们分析一下下面设置NDRange(Global Dimemsion Index Ranges)部分的代码。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Set number of work-items in a work-group */</span></div><div class="line"><span class="keyword">size_t</span> localWorkSize[<span class="number">1</span>] = &#123; <span class="number">8</span> &#125;;</div><div class="line"><span class="keyword">int</span> numWorkGroups = (N + localWorkSize - <span class="number">1</span>) / localWorkSize; <span class="comment">// round up, N==16 here.</span></div><div class="line"><span class="keyword">size_t</span> globalWorkSize[<span class="number">1</span>] = &#123; numWorkGroups * localWorkSize &#125;; <span class="comment">// must be evenly divisible by localWorkSize.</span></div><div class="line">cl_event ev;</div><div class="line">clEnqueueNDRangeKernel(cmd_queue, kernel, <span class="number">1</span>, <span class="literal">NULL</span>, globalWorkSize, localWorkSize, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;ev);</div></pre></td></tr></table></figure>
<ul>
<li>首先，我们参考《The OpenCL Specification》，函数 <code>clEnqueueNDRangeKernel</code> 的官方规范如下：</li>
<li>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">cl_int <span class="title">clEnqueueNDRangeKernel</span> <span class="params">( cl_command_queue command_queue,</div><div class="line">        cl_kernel kernel,</div><div class="line">        cl_uint work_dim,</div><div class="line">        <span class="keyword">const</span> <span class="keyword">size_t</span> *global_work_offset,</div><div class="line">        <span class="keyword">const</span> <span class="keyword">size_t</span> *global_work_size,</div><div class="line">        <span class="keyword">const</span> <span class="keyword">size_t</span> *local_work_size,</div><div class="line">        cl_uint num_events_in_wait_list,</div><div class="line">        <span class="keyword">const</span> cl_event *event_wait_list,</div><div class="line">        cl_event *event)</span></span></div></pre></td></tr></table></figure>
<ul>
<li>其中，需要注意的是，<code>work_dim</code> 指定 <strong>NDRange</strong> 的维数，目前暂支持1-3分别表示X、Y、Z三个维度；<code>global_work_offset</code> 当前必须为 <strong>NULL</strong>，暂时不理他；<code>num_events_in_wait_list</code> 指明函数 <strong>clEnqueueNDRangeKernel</strong> 执行之前需要等待完成的事件数目，<code>event_wait_list</code> 则是与之对应的事件列表(这里暂时不理他，后续课程会进一步介绍事件对象 <code>cl_event</code>)；最后一个参数 <code>event</code> 则是函数执行完成会触发的事件，后面获取 kernel 执行时间部分将会用到，这里也可以暂不考虑；重点在于 <code>global_work_size</code> 和 <code>local_work_size</code> 两个 <strong>size_t</strong> 数组，数组大小与设置的维度 <code>work_dim</code> 保持一致。其中 <strong>global_work_size[0]、[1]、[2]</strong> 分别对应X、Y、Z三个维度（<code>local_work_size</code> 相似)。在每一个维度上，<code>local_work_size</code> 用于设置一个 work-group 中 work-item 的数目，<code>global_work_size</code> 则是对应维度上总共的 work-item 数目，所以，对应维度上 work-group 的数目自然就是 $\frac{(global\_work\_size + local\_work\_size-1)}{local\_work\_size}$。</li>
<li>此外，OpenCL 要求各个维度中 work-group 数目能够整除 NDRange 索引空间各个维度的大小 <code>global_work_size</code>，这样可以保证所有工作组都是满的而且大小相同，均为 <code>local_work_size</code>。</li>
<li>结合代码，这里设置的 NDRange 只有X维度，<strong>localWorksize[1] = {8}</strong>表明该维度上每个 work-group 有8个 work-items，而该维度上总共的 work-items 为16个，所以计算出来的 numWorkGroups 为2，表示X维度上总共有2个 work-groups。为了保证满足整除的要求，我们最后通过 <strong>globalWorkSize[1] = { numWorkGroups * localWorkSize }</strong> 设置X维度的大小。</li>
<li>因此，在上图中，<strong>get_work_dim()</strong> 返回 NDRange 索引空间的维度自然为1(只有X维度)；<strong>get_global_size(0)</strong>,下标0表示返回X维度上的大小(下标若为1、2则表示Y、Z维度)，为16；<strong>get_num_groups(0)</strong> 返回X维度上 work-group 的数目，为2；而对于X(其他维度类似)维度上的每个 work-group，通过<strong>get_group_id(0)</strong>，(下标0指X维度)可以获取当前group的ID，而通过 <strong>get_local_size(0)</strong> 可以获取当前 group 里的 work-items 数目。所以，对于总大小为16的一维内存对象，分成的两个<strong>local_work_size为8</strong>的work-group分别是下标0-7和下标8-15，前者group-id为0，后者为1。此外，对于维度上的一个work-item，通过<strong>get_global_id(0)</strong>可以获取其在该维度(下标0表示X维度，1、2为Y、Z)上的ID，<strong>get_local_id(0)</strong>则得到其在group中的ID。所以，对于上图中用黄色标记的work-item，为整个一维内存对象的第12个元素，为第二个work-group中的第4个元素，故其全局id和组内id分别为11和3<strong>(这里与普遍的C规范一致，下标从0开始计数)</strong>。</li>
</ul>
</li>
<li>下面我们举一个NDRange为二维的例子(<strong>参考 《<em>OpenCL Programming Guide</em>》 P8-P10</strong>)。<center><img src="/img/cl/NDRange_indexspace.png" width="600px"/></center><center><strong>Figure from 《<em>OpenCL Programming Guide</em>》</strong></center></li>
<li>该图表示一个二维的NDRange，其中每个维度的大小均为12。每个小方格表示一个work-item，12个小方格组成的中方格表示一个group，最外层由9个中方格组成的大方格则是整个NDRange空间。Gx=12 Gy=12指明全局空间大小，每个维度均为12； Wx=3 Wy=3指明组索引空间，每个维度都是3个组(上图红圈标识的地方有错，觉得应该是3)； Lx=4 Ly=4则指明组内空间大小，每个group每个维度上大小均为4(这也是Wy应为3的原因，整个Y上有12个work-item，每个组Y上大小为4，所以Y维度上应该有3个group)。下面是实现上述NDRange空间的代码：</li>
<li>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> Lx=<span class="number">4</span>, Ly=<span class="number">4</span>;</div><div class="line"><span class="keyword">int</span> Wx=<span class="number">3</span>, Wy=<span class="number">3</span>;</div><div class="line"><span class="keyword">size_t</span> localWorkSize[<span class="number">2</span>] = &#123;Lx, Ly&#125;;	</div><div class="line"><span class="keyword">size_t</span> globalWorkSize[<span class="number">2</span>] = &#123;Wx*Lx,  Wy*Ly&#125;; </div><div class="line">cl_event ev;</div><div class="line">clEnqueueNDRangeKernel(cmd_queue, kernel, <span class="number">2</span>, <span class="literal">NULL</span>, globalWorkSize, localWorkSize, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;ev);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　代码实现与上述一维空间基本一致，不同的主要是，这里 <strong>clEnqueueNDRangeKernel()</strong> 第三个参数是2，表示2维空间，而且 <code>localWorkSize</code> 和<code>globalWorkSize</code> 的大小都变成2，与该参数保持一致。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get global position in X direction</span></div><div class="line"><span class="keyword">int</span> gx = get_global_id(<span class="number">0</span>);</div><div class="line"><span class="comment">// Get global position in Y direction</span></div><div class="line"><span class="keyword">int</span> gy = get_global_id(<span class="number">1</span>);</div><div class="line"> </div><div class="line"><span class="comment">// Get group position in X direction</span></div><div class="line"><span class="keyword">int</span> wx = get_group_id(<span class="number">0</span>);</div><div class="line"><span class="comment">// Get group position in Y direction</span></div><div class="line"><span class="keyword">int</span> wy = get_group_id(<span class="number">1</span>);</div><div class="line"> </div><div class="line"><span class="comment">// Get local position in X direction</span></div><div class="line"><span class="keyword">int</span> gx = get_local_id(<span class="number">0</span>);</div><div class="line"><span class="comment">// Get local position in Y direction</span></div><div class="line"><span class="keyword">int</span> gy = get_local_id(<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>　　对于上图中的黑色小方格表示的work-item，get_global_id得到他X、Y上的全局ID应为(6，5)，从左往右数第7个，从上往下数第6个嘛。get_group_id得到他所在组的group-id也应该为(1，1)，从左往右数第2个，从上往下数第2个。至于其在所在组的组内ID则是(2，1)，从左往右数第3个，从上往下数第2个。</p>
<p>　　通过上面的讲解，现在你应该对所谓的NDRange有比较清楚的认识了。如果还存有疑惑，建议您参考一下<strong>《<em>OpenCL Programming Guide</em>》</strong>第8到10页内容。<br>　　这里，还需要指出的是，上面的二维空间的例子，两个维度上的local_work_size是一样的，那么是不是一定要保持一致呢？为了验证这个想法，我试着修改一下之前做过的一个矩阵乘法的例子关键代码如下：<br><figure class="highlight cpp"><figcaption><span>*.cpp文件</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">3</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6</span>;</div><div class="line"> </div><div class="line"><span class="comment">//....</span></div><div class="line"> </div><div class="line"><span class="comment">/* Execute OpenCL Kernel */</span></div><div class="line"><span class="keyword">size_t</span> globalWorkSize[<span class="number">2</span>] = &#123;N, P&#125;; <span class="comment">// size_t globalWorkSize[2] = &#123;N, P&#125;;</span></div><div class="line"><span class="keyword">size_t</span> localWorkSize[<span class="number">2</span>] = &#123;N, P&#125;;  <span class="comment">// size_t localWorkSize[2] = &#123;3, 3&#125;;</span></div><div class="line"> </div><div class="line">cl_event ev;</div><div class="line">err = clEnqueueNDRangeKernel(command_queue, kernel, <span class="number">2</span>, <span class="literal">NULL</span>, globalWorkSize, localWorkSize, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;ev);</div><div class="line"> </div><div class="line"><span class="comment">//....</span></div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><figcaption><span>main.cl文件</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">__<span class="function">kernel <span class="keyword">void</span> <span class="title">vmultiply</span><span class="params">(__global <span class="keyword">float</span>* result, __global <span class="keyword">const</span> <span class="keyword">float</span>* m_a, __global <span class="keyword">const</span> <span class="keyword">float</span>* m_b,</div><div class="line">        <span class="keyword">const</span> <span class="keyword">int</span> P, <span class="keyword">const</span> <span class="keyword">int</span> M, <span class="keyword">const</span> <span class="keyword">int</span> N)</span></span>&#123;</div><div class="line">  <span class="comment">/*</div><div class="line">   *	m_a ia a PxM matrix</div><div class="line">   *	m_b is a MxN matrix</div><div class="line">   *	result = m_b * m_b</div><div class="line">   */</span></div><div class="line">  <span class="comment">// Get global position in X direction</span></div><div class="line">  <span class="keyword">int</span> col = get_global_id(<span class="number">0</span>);</div><div class="line">  <span class="comment">// Get global position in Y direction</span></div><div class="line">  <span class="keyword">int</span> row = get_global_id(<span class="number">1</span>);</div><div class="line"> </div><div class="line">  <span class="comment">// calculate the result of one element result[row][col]</span></div><div class="line">  <span class="keyword">float</span> sum = <span class="number">0.0f</span>;</div><div class="line">  <span class="keyword">if</span>((row&gt;=<span class="number">0</span>) &amp;&amp; (row&lt;P) &amp;&amp; (col&gt;=<span class="number">0</span>) &amp;&amp; (col&lt;N))&#123; </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; ++i)&#123; </div><div class="line">      sum += m_a[row*M+i] * m_b[i*N+col];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  result[row*N+col] = sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这里是一个3x5的矩阵和一个5x6的矩阵的乘法，我们知道其结果为一个3x6的矩阵，所以我的思路是构建一个二维NDRange空间，X、Y维度上的总大小分别为6和3，这里可以想象成一个3行6列的矩阵。因为结果矩阵中每个元素的计算都是独立的，因此可以对每个元素的计算进行并发，kernel函数就是按照这种思路写的。<br>　　我们关注NDRange是如何设置的。两个维度上的glbal_work_size显然为6和3；一开始将每个维度上的local_work_size也设置为6和3。联想我们上面介绍的，这样的话，每个维度上都只有一个group，那么计算矩阵乘法的所有work-item就在同一个group了。这里也验证了，不同维度上的local_work_size是可以不同这一说法。<br>　　又将每个维度上的local_work_size均设置为3，这样的话，Y维度上只有一个group，X维度上就有6/3=2个group，这样计算矩阵乘法的所有work-item被分在两个group了，get_global_id(0)在0-2的为一个group，在3-5的为另一个group。这里也可以推测出，对于不同维度上group的数目是可以不同的。<br>　　此外，上面的例子对于矩阵(二维数组)传递到内核函数是以内存对象引用的形式实现的，那么对于当前的work-item对应的X维度上的rol，Y维度上的row，我们需要将其映射到该内存对象引用上，映射的形式实际上和二维数组映射到一维数组相似，[row*Width+col]&lt;==&gt;[row][col]。<br>　　最后，还有一个地方需要注意的，我们通过<strong>numGroup = (N + localWorkSize - 1) / localWorkSize</strong>这种方式来计算已经设定了localWorkSize的维度上，满足N个work-item需要的work-group数目numGroup，再将numGroup*localWorkSize得到的global_work_size作为NDRange设置的参数以满足上述整除的要求。假如N能够整除localWorkSize还好，这种情况下N和global_work_size一样，而且每个group里面不会有多余的work-item。但是，假如N不能够整除localWorkSize，尾端就会存在一个group，这个group末尾的某些work-item只是我们为了满足整除的要求而添加进去，是多余的，应该排除掉的。这就是上述main.cl中<strong>if((row&gt;=0) &amp;&amp; (row<P) && (col>=0) &amp;&amp; (col&lt;N))</strong>的作用，建议大家都能这么使用，以防止某些错误。有时觉得考虑上面提到的这些情况比较麻烦，建议干脆让每个维度上的local_work_size和global_work_size相等算了，当然，这是在不涉及<strong>private memory、local memory、global memory</strong>这些问题的情况下。<br>　　上述例子参考代码如下，VS2013 工程可以<a href="http://pan.baidu.com/s/1midXmys">点击获取</a> <strong>访问密码 sefv</strong>。最终的测试结果如下:</p>
<p><center><img src="/img/cl/MatrixMulTest.png" width="600px"/></center><br><figure class="highlight cpp"><figcaption><span>vmultiply.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// vmultiply.cpp : 定义控制台应用程序的入口点。</span></div><div class="line"><span class="comment">//</span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;CL/cl.h&gt;</span>  </span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>( disable : 4996 )</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib, <span class="meta-string">"OpenCL.lib"</span>)</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SOURCE_SIZE (0x100000)  </span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">3</span>;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">5</span>;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6</span>;</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"---------------------- OpenCL Matrix Multiply Test ----------------------\n"</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Starting......\n"</span>);</div><div class="line">  <span class="comment">// Get Platform and Devices infos.</span></div><div class="line">  cl_uint num_platforms;</div><div class="line">  cl_int err = clGetPlatformIDs(<span class="number">0</span>, <span class="literal">NULL</span>, &amp;num_platforms);</div><div class="line">  cl_platform_id platform_id;</div><div class="line">  err |= clGetPlatformIDs(<span class="number">1</span>, &amp;platform_id, <span class="literal">NULL</span>);</div><div class="line">  <span class="keyword">if</span> (err != CL_SUCCESS)&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to Get Platform.\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  cl_device_id device_id;</div><div class="line">  err = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_GPU, <span class="number">1</span>, &amp;device_id, <span class="literal">NULL</span>);</div><div class="line">  <span class="keyword">if</span> (err != CL_SUCCESS)&#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to Get Device.\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/* Create OpenCL context */</span></div><div class="line">  cl_context context = clCreateContext(<span class="literal">NULL</span>, <span class="number">1</span>, &amp;device_id, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;err);</div><div class="line"> </div><div class="line">  <span class="comment">/* Create Command Queue */</span></div><div class="line">  cl_command_queue command_queue = clCreateCommandQueue(context, device_id, CL_QUEUE_PROFILING_ENABLE, &amp;err);</div><div class="line"> </div><div class="line">  <span class="comment">/* Create Memory Buffer */</span></div><div class="line">  <span class="keyword">float</span> *buf1 = <span class="keyword">new</span> <span class="keyword">float</span>[P*M];</div><div class="line">  <span class="keyword">float</span> *buf2 = <span class="keyword">new</span> <span class="keyword">float</span>[M*N];</div><div class="line">  <span class="keyword">float</span> *result = <span class="keyword">new</span> <span class="keyword">float</span>[P*N];</div><div class="line">  <span class="keyword">float</span> *std_result = <span class="keyword">new</span> <span class="keyword">float</span>[P*N];</div><div class="line"> </div><div class="line">  srand((<span class="keyword">unsigned</span> <span class="keyword">int</span>)time(<span class="literal">NULL</span>));</div><div class="line">  <span class="comment">// constrcuting A matrix</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; P; ++x)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; M; ++y)&#123;</div><div class="line">      buf1[x*M + y] = (rand() % <span class="number">128</span>)*<span class="number">0.11</span> + (rand() % <span class="number">256</span>)*<span class="number">0.1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// constrcuting B matrix</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; M; ++x)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; N; ++y)&#123;</div><div class="line">      buf2[x*N + y] = (rand() % <span class="number">128</span>)*<span class="number">0.11</span> + (rand() % <span class="number">256</span>)*<span class="number">0.1</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// calculating standard result C = A*B</span></div><div class="line">  <span class="keyword">float</span> sum;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; P; ++x)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; N; ++y)&#123;</div><div class="line">      sum = <span class="number">0.0f</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; ++i)&#123;</div><div class="line">        sum += buf1[x*M + i] * buf2[i*N + y];</div><div class="line">      &#125;</div><div class="line">      std_result[x*N + y] = sum;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  cl_mem cl_buf1 = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, P*M * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), buf1, &amp;err);</div><div class="line">  cl_mem cl_buf2 = clCreateBuffer(context, CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR, M*N * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), buf2, &amp;err);</div><div class="line">  cl_mem cl_buf = clCreateBuffer(context, CL_MEM_WRITE_ONLY, P*N * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), <span class="literal">NULL</span>, &amp;err);</div><div class="line"> </div><div class="line">  <span class="comment">/* Load the source code containing the kernel*/</span></div><div class="line">  FILE *fp;</div><div class="line">  <span class="keyword">char</span> fileName[] = <span class="string">"./vmultiply.cl"</span>;</div><div class="line">  <span class="keyword">char</span> *source_str = <span class="keyword">new</span> <span class="keyword">char</span>[MAX_SOURCE_SIZE];</div><div class="line">  <span class="keyword">size_t</span> source_size;</div><div class="line"> </div><div class="line">  fp = fopen(fileName, <span class="string">"r"</span>);</div><div class="line">  <span class="keyword">if</span> (!fp) &#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to load kernel.\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  source_size = fread(source_str, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), MAX_SOURCE_SIZE, fp);</div><div class="line">  fclose(fp);</div><div class="line"> </div><div class="line">  <span class="comment">/* Create Kernel Program from the source */</span></div><div class="line">  cl_program program = clCreateProgramWithSource(context, <span class="number">1</span>, (<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;source_str, (<span class="keyword">const</span> <span class="keyword">size_t</span> *)&amp;source_size, &amp;err);</div><div class="line">  <span class="comment">/* Build Kernel Program */</span></div><div class="line">  <span class="keyword">const</span> <span class="keyword">unsigned</span> MAX_INFO_SIZE = <span class="number">0x10000</span>;</div><div class="line">  err = clBuildProgram(program, <span class="number">1</span>, &amp;device_id, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">  <span class="keyword">if</span> (err != CL_SUCCESS)</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"clBuild failed:%d\n"</span>, err);</div><div class="line">    <span class="keyword">char</span> info_buf[MAX_INFO_SIZE];</div><div class="line">    clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, MAX_INFO_SIZE, info_buf, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%s\n"</span>, info_buf);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">char</span> info_buf[MAX_INFO_SIZE];</div><div class="line">    clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, MAX_INFO_SIZE, info_buf, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Kernel Build Success\n%s\n"</span>, info_buf);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/* Create OpenCL Kernel */</span></div><div class="line">  cl_kernel kernel = clCreateKernel(program, <span class="string">"vmultiply"</span>, &amp;err);</div><div class="line"> </div><div class="line">  <span class="comment">/* Set OpenCL Kernel Parameters */</span></div><div class="line">  err |= clSetKernelArg(kernel, <span class="number">0</span>, <span class="keyword">sizeof</span>(cl_mem), (<span class="keyword">void</span> *)&amp;cl_buf);</div><div class="line">  err |= clSetKernelArg(kernel, <span class="number">1</span>, <span class="keyword">sizeof</span>(cl_mem), (<span class="keyword">void</span> *)&amp;cl_buf1);</div><div class="line">  err |= clSetKernelArg(kernel, <span class="number">2</span>, <span class="keyword">sizeof</span>(cl_mem), (<span class="keyword">void</span> *)&amp;cl_buf2);</div><div class="line"> </div><div class="line">  err |= clSetKernelArg(kernel, <span class="number">3</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), (<span class="keyword">void</span> *)&amp;P);</div><div class="line">  err |= clSetKernelArg(kernel, <span class="number">4</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), (<span class="keyword">void</span> *)&amp;M);</div><div class="line">  err |= clSetKernelArg(kernel, <span class="number">5</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), (<span class="keyword">void</span> *)&amp;N);</div><div class="line"> </div><div class="line">  <span class="comment">/* Execute OpenCL Kernel */</span></div><div class="line">  <span class="keyword">size_t</span> globalWorkSize[<span class="number">2</span>] = &#123;N, P&#125;;</div><div class="line">  <span class="keyword">size_t</span> localWorkSize[<span class="number">2</span>] = &#123;N, P&#125;;</div><div class="line"> </div><div class="line">  cl_event ev;</div><div class="line">  err = clEnqueueNDRangeKernel(command_queue, kernel, <span class="number">2</span>, <span class="literal">NULL</span>, globalWorkSize, localWorkSize, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;ev);</div><div class="line"> </div><div class="line">  err = clFlush(command_queue);</div><div class="line">  err = clFinish(command_queue);</div><div class="line"> </div><div class="line">  <span class="comment">//计算kerenl执行时间</span></div><div class="line">  cl_ulong startTime = <span class="number">0</span>, endTime = <span class="number">0</span>;</div><div class="line">  clGetEventProfilingInfo(ev, CL_PROFILING_COMMAND_START,</div><div class="line">    <span class="keyword">sizeof</span>(cl_ulong), &amp;startTime, <span class="literal">NULL</span>);</div><div class="line">  clGetEventProfilingInfo(ev, CL_PROFILING_COMMAND_END,</div><div class="line">    <span class="keyword">sizeof</span>(cl_ulong), &amp;endTime, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">  cl_ulong kernelExecTimeNs = endTime - startTime;</div><div class="line"> </div><div class="line">  <span class="comment">/* Copy results from the memory buffer */</span></div><div class="line">  err = clEnqueueReadBuffer(command_queue, cl_buf, CL_TRUE, <span class="number">0</span>, P*N * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), result, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">  <span class="comment">//result = (float *)clEnqueueMapBuffer(command_queue, cl_buf, CL_TRUE, CL_MAP_READ, 0, P*N*sizeof(float), 0, NULL, NULL, NULL);</span></div><div class="line"> </div><div class="line">  <span class="comment">/* Finalization */</span></div><div class="line">  err = clReleaseKernel(kernel);</div><div class="line">  err = clReleaseProgram(program);</div><div class="line">  err = clReleaseMemObject(cl_buf);</div><div class="line">  err = clReleaseMemObject(cl_buf1);</div><div class="line">  err = clReleaseMemObject(cl_buf2);</div><div class="line">  err = clReleaseCommandQueue(command_queue);</div><div class="line">  err = clReleaseContext(context);</div><div class="line"> </div><div class="line">  <span class="comment">// Display the result</span></div><div class="line">  <span class="keyword">bool</span> success = <span class="literal">true</span>;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"A = \n"</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; P; ++x)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; M; ++y)&#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%8.2f "</span>, buf1[x*M + y]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nB = \n"</span>);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; M; ++x)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; N; ++y)&#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%8.2f "</span>, buf2[x*N + y]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nC = \n"</span>);</div><div class="line">  <span class="keyword">float</span> bias;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; P; ++x)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; N; ++y)&#123;</div><div class="line">      bias = std_result[x*N + y] - result[x*N + y];</div><div class="line">      <span class="keyword">if</span> (bias &gt; <span class="number">0.0001</span> || bias &lt; <span class="number">-0.0001</span>)&#123;</div><div class="line">        success = <span class="literal">false</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"error here!\n"</span>);</div><div class="line">        <span class="keyword">goto</span> label_end;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//printf("%8.2f ", std_result[x*N + y]);</span></div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%8.2f "</span>, result[x*N + y]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">  &#125;</div><div class="line">label_end: </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</div><div class="line">  <span class="keyword">if</span> (success)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Result: All test successed!\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Result: Some test failed!\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"kernel exec time :%8.6f ms\n"</span>, kernelExecTimeNs*<span class="number">1e-6</span>);</div><div class="line"> </div><div class="line">  <span class="keyword">delete</span> []source_str;</div><div class="line">  <span class="keyword">delete</span> []buf1;</div><div class="line">  <span class="keyword">delete</span> []buf2;</div><div class="line">  <span class="keyword">delete</span>[]std_result;</div><div class="line">  <span class="keyword">delete</span>[]result;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Finished......\n"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><figcaption><span>vmultiply.cl</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">__<span class="function">kernel <span class="keyword">void</span> <span class="title">vmultiply</span><span class="params">(__global <span class="keyword">float</span>* result, __global <span class="keyword">const</span> <span class="keyword">float</span>* m_a, __global <span class="keyword">const</span> <span class="keyword">float</span>* m_b,</div><div class="line">            <span class="keyword">const</span> <span class="keyword">int</span> P, <span class="keyword">const</span> <span class="keyword">int</span> M, <span class="keyword">const</span> <span class="keyword">int</span> N)</span></span>&#123;</div><div class="line">  <span class="comment">/*</div><div class="line">    m_a ia a PxM matrix</div><div class="line">    m_b is a MxN matrix</div><div class="line">    result = m_b * m_b</div><div class="line">  */</span></div><div class="line">  <span class="comment">// Get global position in X direction</span></div><div class="line">  <span class="keyword">int</span> col = get_global_id(<span class="number">0</span>);</div><div class="line">  <span class="comment">// Get global position in Y direction</span></div><div class="line">  <span class="keyword">int</span> row = get_global_id(<span class="number">1</span>);</div><div class="line"> </div><div class="line">  <span class="comment">// calculate the result of one element result[row][col]</span></div><div class="line">  <span class="keyword">float</span> sum = <span class="number">0.0f</span>;</div><div class="line">  <span class="keyword">if</span>((row&gt;=<span class="number">0</span>) &amp;&amp; (row&lt;P) &amp;&amp; (col&gt;=<span class="number">0</span>) &amp;&amp; (col&lt;N))&#123; </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;M; ++i)&#123; </div><div class="line">      sum += m_a[row*M+i] * m_b[i*N+col];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  result[row*N+col] = sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二-如何获取kernel执行时间"><a href="#二-如何获取kernel执行时间" class="headerlink" title="(二)如何获取kernel执行时间?"></a><span id="part2"><strong>(二)如何获取kernel执行时间?</strong></span></h2><p>　　解决了最麻烦的 NDRange，我们终于可以轻松地干点其他了。一个比较棘手的问题就是，我们有时想分析一下内核函数的执行效率，获取其执行时间不失为一个好方法。如上图所示，在程序执行结束前，不凡将内核执行时间打印，通过对内核执行时间进行比较，我们可以对内核效率做出分析。例如在不同 NDRange 设置下比较内核函数执行时间等。那么怎么获取到内核函数执行时间呢？OpenCL 提供了一套有效的API。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Create Command Queue */</span></div><div class="line">cl_command_queue command_queue = clCreateCommandQueue(context, device_id, CL_QUEUE_PROFILING_ENABLE, &amp;err);</div><div class="line"> </div><div class="line"><span class="comment">//...</span></div><div class="line"> </div><div class="line">cl_event ev;</div><div class="line">err = clEnqueueNDRangeKernel(command_queue, kernel, <span class="number">2</span>, <span class="literal">NULL</span>, globalWorkSize, localWorkSize, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;ev);</div><div class="line"> </div><div class="line">err = clFlush(command_queue);</div><div class="line">err = clFinish(command_queue);</div><div class="line"> </div><div class="line"><span class="comment">//...</span></div><div class="line"> </div><div class="line"><span class="comment">// 计算kerenl执行时间</span></div><div class="line">cl_ulong startTime = <span class="number">0</span>, endTime = <span class="number">0</span>;</div><div class="line">clGetEventProfilingInfo(ev, CL_PROFILING_COMMAND_START,</div><div class="line">  <span class="keyword">sizeof</span>(cl_ulong), &amp;startTime, <span class="literal">NULL</span>);</div><div class="line">clGetEventProfilingInfo(ev, CL_PROFILING_COMMAND_END,</div><div class="line">  <span class="keyword">sizeof</span>(cl_ulong), &amp;endTime, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">cl_ulong kernelExecTimeNs = endTime - startTime;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"kernel exec time :%8.6f ms\n"</span>, kernelExecTimeNs*<span class="number">1e-6</span>);</div></pre></td></tr></table></figure></p>
<p>　　首先，上面已经说过，执行完 <strong>clEnqueueNDRangeKernel()</strong> 会触发一个事件，我们通过 <code>ev</code> 获取。之后通过 <strong>clGetEventProfilingInfo()</strong> 便能得到内核函数开始执行的时刻 <strong>startTime</strong> 以及执行结束的时刻 <strong>endTime</strong>，这样便能够得到整个内核函数执行的时间(单位：ns)。需要注意的是，为了能够获取事件信息，需要在 <code>clCreateCommandQueue</code> 创建命令队列的时候通过 <strong>CL_QUEUE_PROFILING_ENABLE</strong> 参数设置队列为可配置的，这样才能够保证通过 <strong>clGetEventProfilingInfo()</strong> 能够获取到执行信息。<br>　　此外，如果按照上述步骤做了，还是不能够正确获取到执行时间，建议检查一下 <strong>clEnqueueNDRangeKernel()</strong> 这一部分，之前因为将 <code>localWorkSize</code> 设置为 NULL 导致获取的执行时间出错。使用 <code>clEnqueueTask</code> 似乎也不行，希望你用到的时候注意一下，如果出现问题，可以按照上述给出的参考代码进行修改。</p>
<h2 id="三-如何获取kernel编译信息"><a href="#三-如何获取kernel编译信息" class="headerlink" title="(三)如何获取kernel编译信息?"></a><span id="part3"><strong>(三)如何获取kernel编译信息?</strong></span></h2><p>　　另一个个人觉得比较实用的就是，kernel 函数是通过程序在运行的时候进行编译的，那么，如果能够在编译出错的情况下获取到错误信息，对我们修改 kernel 函数会有很大的帮助。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SOURCE_SIZE (0x100000)</span></div><div class="line">  </div><div class="line"><span class="comment">// ...</span></div><div class="line">  </div><div class="line"><span class="comment">/* Load the source code containing the kernel*/</span></div><div class="line">FILE *fp;</div><div class="line"><span class="keyword">char</span> fileName[] = <span class="string">"./main.cl"</span>;</div><div class="line"><span class="keyword">char</span> *source_str = <span class="keyword">new</span> <span class="keyword">char</span>[MAX_SOURCE_SIZE];</div><div class="line"><span class="keyword">size_t</span> source_size;</div><div class="line"> </div><div class="line">fp = fopen(fileName, <span class="string">"r"</span>);</div><div class="line"><span class="keyword">if</span> (!fp) &#123;</div><div class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to load kernel.\n"</span>);</div><div class="line">  <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line">source_size = fread(source_str, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), MAX_SOURCE_SIZE, fp);</div><div class="line">fclose(fp);</div><div class="line"> </div><div class="line"><span class="comment">/* Create Kernel Program from the source */</span></div><div class="line">cl_program program = clCreateProgramWithSource(context, <span class="number">1</span>, </div><div class="line">        (<span class="keyword">const</span> <span class="keyword">char</span> **)&amp;source_str, (<span class="keyword">const</span> <span class="keyword">size_t</span> *)&amp;source_size, &amp;err);</div><div class="line"><span class="comment">/* Build Kernel Program */</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> MAX_INFO_SIZE = <span class="number">0x10000</span>;</div><div class="line"><span class="keyword">char</span> info_buf[MAX_INFO_SIZE];</div><div class="line">err = clBuildProgram(program, <span class="number">1</span>, &amp;device_id, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="keyword">if</span> (err != CL_SUCCESS)</div><div class="line">&#123;</div><div class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"clBuild failed:%d\n"</span>, err);</div><div class="line">  clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, MAX_INFO_SIZE, info_buf, <span class="literal">NULL</span>);</div><div class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\n%s\n"</span>, info_buf);</div><div class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">  clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, MAX_INFO_SIZE, info_buf, <span class="literal">NULL</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Kernel Build Success\n%s\n"</span>, info_buf);</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">/* Create OpenCL Kernel */</span></div><div class="line">cl_kernel kernel = clCreateKernel(program, <span class="string">"main"</span>, &amp;err);</div></pre></td></tr></table></figure></p>
<p>　　程序运行时通过 <strong>clBuildProgram()</strong> 函数编译内核，编译成功函数会返回 <code>CL_SUCCESS</code>；当编译出错，我们可以通过 <strong>clGetProgramBuildInfo()</strong> 获取错误信息，进而对内核函数进行修改。如下图，因为上述代码的存在，使得 <strong>少了个;</strong> 这种低级但不易被发现的问题能够快速定位。</p>
<p><center><img src="/img/cl/buildError.png" width="600px"/></center><br>　　看到这里，是不是有种豁然开朗的感觉呢？不过还不够，建议您参考上述关于获取内核执行时间以及获取内核编译信息部分的代码，在自己的工程中也实现一下，看看能否顺利运行?运行效果如何?如果您没有现成的工程，可以使用上面提供的 <strong>VectorMultiply参考源代码(VS2013工程)</strong> 进行测试和修改。如果需要，也可以参考<a href="http://durant35.github.io/2015/05/24/opencl_win7-64%E4%BD%8D%E4%B8%8BVS%E6%90%AD%E5%BB%BAOpenCL%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-Intel%E6%98%BE%E5%8D%A1/">《win7 64位下VS2012搭建OpenCL开发环境(Intel显卡)/win8.1下VS2013亲测同样可行》</a>，该教程可以指导您在win7或者win8.1下面搭建 VS 的 OpenCL 开发环境，有提供相关的 Intel OpenCL SDK。</p>
<h2 id="参考书"><a href="#参考书" class="headerlink" title="参考书"></a><span id="part4"><strong>参考书</strong></span></h2><blockquote>
<p><a href="http://pan.baidu.com/s/1gfqYEAZ">点击获取所有参考书</a> 　<strong>访问密码 s6w9</strong></p>
</blockquote>
<ul>
<li><strong>《<em>Introduction to OpenCL</em>》 Nivida，2010</strong> 演讲课件</li>
<li><strong>《<em>Heterogeneous Computing with OpenCL</em>》</strong> (中英文版)</li>
<li><strong>《<em>OpenCL Programming Guide</em>》</strong> (中英文版)</li>
<li><strong>《<em>The OpenCL Specification</em>》</strong> (中英文版)</li>
</ul>
<font size="5">上述只是本人学习上的一点经验总结，如有错误疏漏的地方，非常欢迎您通过下方评论提出，感谢!</font>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> OpenCL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[win7 64位下VS2012搭建OpenCL开发环境(Intel显卡)[win8.1下VS2013亲测同样可行]]]></title>
      <url>/2015/05/24/opencl_win7-64%E4%BD%8D%E4%B8%8BVS%E6%90%AD%E5%BB%BAOpenCL%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-Intel%E6%98%BE%E5%8D%A1/</url>
      <content type="html"><![CDATA[<ol>
<li><p>下载配置所需的所有文件(<strong>内含Intel OpenCL的SDK(Win7及Win8.1)</strong>)<br><a href="http://yunpan.cn/cVfMshDNjNBS5">点击获取</a> 访问密码<code>e085</code>（<font color="red">因网盘失效及版本过久，建议自行前往<a href="https://software.intel.com/en-us/intel-opencl/download">官网</a>下载</font>）;</p>
</li>
<li><p>解压<strong>intel_sdk_for_ocl_applications_2013.64050.zip</strong>到本地，双击setup.exe开始安装(安装后可将整个文件夹删除)，记住安装路径(可以自定义安装)。win8.1直接双击<strong>intel_sdk_for_ocl_applications_2014_x64_setup.msi</strong>进行安装;</p>
<a id="more"></a></li>
<li>打开<strong>VS2012-&gt;文件-&gt;Visual C++-&gt;Win32-&gt;Win32 控制台应用程序-&gt;输入工程名，选择工程存放路径-&gt;确定-&gt;下一步-&gt;完成</strong>，这样就成功新建一个VS控制台程序工程;</li>
<li>按照以下步骤配置工程，搭建OpenCL开发环境(主要是导入库文件和链入动态库);<br>　　- 项目名-&gt;右键属性进入设置窗口。<br>　　- <strong>C/C++ -&gt; 常规 -&gt; 选中附加包含目录 -&gt; 点击右测下拉框 编辑 -&gt; 通过(插入新行-&gt;选择文件夹)把安装目录下与bin同级目录的include文件夹的路径添加进去</strong>。<br>　　- 类似的，链接器-&gt;常规-&gt;附加库目录，把<strong>lib/x86目录</strong>也加进去(64位系统也选择x86文件夹)。链接器-&gt;输入-&gt;附加依赖项，输入<strong>OpenCL.lib(存放在lib/x86目录下)</strong>。<br>　　- 最后，就可以：应用-&gt;确定保存设置;<br><strong>此处还需要注意的是后面helloWorld程序调用到fopen函数，但编译时会产生<code>vs2012 error c4996: This functionor variable may be unsafe</code>对于这个错误，需要按照上述方式在C/C++ -&gt; 预处理器-&gt;预处理器定义中加入<code>_CRT_SECURE_NO_WARNINGS</code>(其他选项之后处加入)。</strong> </li>
<li><p>拷贝以下内容，覆盖整个工程.cpp文件，保存后CTRL+F5编译运行，便可以查看到电脑中<strong>支持OpenCL的硬件nvidia或intel或AMD等信息</strong>。如果发生错误，请按照上述步骤检查，重新进行配置;</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// </span></div><div class="line"><span class="comment">// 本程序是读取电脑中的支持OpenCL的硬件nvidia或intel或AMD等信息，然后显示在屏幕上</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;CL/cl.h&gt;</span> </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="comment">//根据参数，判断设备类别。是CPU、GPU、ACCELERATOR或其他设备</span></div><div class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">GetDeviceType</span><span class="params">(cl_device_type it)</span></div><div class="line"></span>&#123;</div><div class="line">  <span class="keyword">if</span> (it == CL_DEVICE_TYPE_CPU)</div><div class="line">    <span class="keyword">return</span> <span class="string">"CPU"</span>;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (it == CL_DEVICE_TYPE_GPU)</div><div class="line">    <span class="keyword">return</span> <span class="string">"GPU"</span>;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (it == CL_DEVICE_TYPE_ACCELERATOR)</div><div class="line">    <span class="keyword">return</span> <span class="string">"ACCELERATOR"</span>;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"DEFAULT"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">  <span class="keyword">char</span> dname[<span class="number">512</span>];</div><div class="line">  cl_device_id devices[<span class="number">20</span>];</div><div class="line">  cl_platform_id* platform_id = <span class="literal">NULL</span>;</div><div class="line">  cl_uint num_devices;</div><div class="line">  cl_device_type int_type;</div><div class="line">  cl_ulong long_entries;</div><div class="line">  cl_uint num_platform;</div><div class="line">  cl_int err;</div><div class="line"> </div><div class="line">  <span class="comment">//查询系统上可用的计算平台，可以理解为初始化</span></div><div class="line">  err = clGetPlatformIDs(<span class="number">0</span>, <span class="literal">NULL</span>, &amp;num_platform);</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (err != CL_SUCCESS)</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"clGetPlatformIDs error"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"PlatForm num:"</span> &lt;&lt; num_platform &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> st = <span class="number">0</span>;</div><div class="line"> </div><div class="line">  platform_id = <span class="keyword">new</span> cl_platform_id[num_platform];</div><div class="line"> </div><div class="line">  err = clGetPlatformIDs(num_platform, platform_id, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">  <span class="keyword">if</span> (err != CL_SUCCESS)</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"clGetPlatformIDs error"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// 检查系统上可用平台</span></div><div class="line">  <span class="keyword">for</span> (st = <span class="number">0</span>; st&lt;num_platform; st++)</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"----------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Platform "</span> &lt;&lt; st + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">    <span class="comment">//获取可用计算平台的名称</span></div><div class="line">    clGetPlatformInfo(platform_id[st], CL_PLATFORM_NAME, <span class="number">512</span>, dname, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CL_PLATFORM_NAME:"</span> &lt;&lt; dname &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">    <span class="comment">//获取可用计算平台的版本号,即OpenCL的版本号</span></div><div class="line">    clGetPlatformInfo(platform_id[st], CL_PLATFORM_VENDOR, <span class="number">512</span>, dname, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"CL_PLATFORM_VERSION:"</span> &lt;&lt; dname &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">    <span class="comment">//获取可用计算平台的设备数目</span></div><div class="line">    clGetDeviceIDs(platform_id[st], CL_DEVICE_TYPE_ALL, <span class="number">20</span>, devices, &amp;num_devices);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device num:"</span> &lt;&lt; num_devices &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">0</span>;</div><div class="line"> </div><div class="line">    <span class="comment">//检测当前平台下所有设备的属性</span></div><div class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; n&lt;num_devices; ++n)</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"Device "</span> &lt;&lt; n + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">      <span class="comment">//获取设备名称</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_NAME, <span class="number">512</span>, dname, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device :"</span> &lt;&lt; dname &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//获取设备类别</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_TYPE, <span class="keyword">sizeof</span>(cl_device_type), &amp;int_type, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device Type:"</span> &lt;&lt; GetDeviceType(int_type) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//获取设备版本号</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DRIVER_VERSION, <span class="number">512</span>, dname, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device version:"</span> &lt;&lt; dname &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//获取设备全局内存大小</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_GLOBAL_MEM_SIZE, <span class="keyword">sizeof</span>(cl_ulong), &amp;long_entries, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device global mem(MB):"</span> &lt;&lt; long_entries / <span class="number">1024</span> / <span class="number">1024</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//获取设备CACHE内存大小</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_GLOBAL_MEM_CACHE_SIZE, <span class="keyword">sizeof</span>(cl_ulong), &amp;long_entries, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device global mem cache(KB):"</span> &lt;&lt; long_entries / <span class="number">1024</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//获取本地内存大小</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_LOCAL_MEM_SIZE, <span class="keyword">sizeof</span>(cl_ulong), &amp;long_entries, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device Locale mem(KB) :"</span> &lt;&lt; long_entries / <span class="number">1024</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//获取设备频率</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_MAX_CLOCK_FREQUENCY, <span class="keyword">sizeof</span>(cl_ulong), &amp;long_entries, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device Max clock(MHz) :"</span> &lt;&lt; long_entries &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//获取最大工作组数</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_MAX_WORK_GROUP_SIZE, <span class="keyword">sizeof</span>(cl_ulong), &amp;long_entries, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device Max Group size :"</span> &lt;&lt; long_entries &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//获取最大计算核心数</span></div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_MAX_COMPUTE_UNITS, <span class="keyword">sizeof</span>(cl_ulong), &amp;long_entries, <span class="literal">NULL</span>);</div><div class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Device Max parallel cores:"</span> &lt;&lt; long_entries &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"> </div><div class="line">      <span class="comment">//	获取扩展信息</span></div><div class="line">      cl_uint addr_data;</div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_ADDRESS_BITS, <span class="keyword">sizeof</span>(addr_data), &amp;addr_data, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">      <span class="keyword">char</span> ext_data[<span class="number">4096</span>];</div><div class="line">      clGetDeviceInfo(devices[n], CL_DEVICE_EXTENSIONS, <span class="keyword">sizeof</span>(ext_data), ext_data, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">      <span class="built_in">printf</span>(<span class="string">"ADDRESS_WIDTH: %u\nEXTENSIONS: %s\n\n"</span>, addr_data, ext_data);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>以后新建OpenCL工程时，需要遵照步骤4进行设置;</p>
</li>
<li>新建工程，工程名为helloWorld ，并进行相应配置。拷贝以下内容，覆盖整个helloWorld.cpp文件，新建main.cl文件到工程目录下的/helloWorld下，内容如下，保存后CTRL+F5编译运行，即可看到Hello World!字样。</li>
</ol>
<figure class="highlight cpp"><figcaption><span>helloWorld.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdlib.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;CL/cl.h&gt;</span>  </span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>( disable : 4996 )</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MEM_SIZE (128)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SOURCE_SIZE (0x100000)</span></div><div class="line"> </div><div class="line"><span class="comment">/**</div><div class="line">opencl编码流程(摘自opencl异构计算):</div><div class="line">（1）初始化opencl 平台(调用两次clGetPlatformIDs函数）</div><div class="line">第一次获取可用的平台数量，第二次获取一个可用的平台。</div><div class="line">（2）选择设备(调用两次clGetDeviceIDs函数）</div><div class="line">第一次获取可用的设备数量，第二次获取一个可用的设备。</div><div class="line">（3）创建上下文(调用clCreateContext函数）</div><div class="line">Context：环境上下文，一个Context包含几个device（单个Cpu或GPU），</div><div class="line">一个Context就是这些device的一个联系纽带，</div><div class="line">只有在一个Context上的那些Device才能彼此交流工作，</div><div class="line">你的机器上可以同时存在很多Context。</div><div class="line">你可以用一个CPU创建context，也可以用一个CPU和一个GPU创建一个。</div><div class="line">（4）创建命令队列(调用clCreateCommandQueue函数）</div><div class="line">（5）创建数据缓冲区(调用clCreateBuffer函数）</div><div class="line">（6）将host数据写进设备缓冲区(调用clEnqueueWriteBuffer函数）</div><div class="line">（7）创建程序对象(调用clCreateProgramWithSource函数）</div><div class="line">并编译内核源码（调用clBuildProgram函数,</div><div class="line">如果编译成功，则把编译代码存储在程序对象中）</div><div class="line">（8）创建kernel(调用clCreateKernel函数）</div><div class="line">（9）设置内核参数(调用clSetKernelArg函数）</div><div class="line">（10）Configure the work-item structure(设置worksize）</div><div class="line">//只在分组的时候用到，只调用全局id的时候不要设置</div><div class="line">（11）内核入队执行(调用clEnqueueNDRangeKernel函数）</div><div class="line">（12）取回计算结果。(调用clEnqueueReadBuffer函数）	\</div><div class="line">（13）Release OpenCL resources（至此结束整个运行过程）</div><div class="line">*/</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></div><div class="line"></span>&#123;</div><div class="line">  cl_device_id device_id = <span class="literal">NULL</span>;</div><div class="line">  cl_context context = <span class="literal">NULL</span>;</div><div class="line">  cl_command_queue command_queue = <span class="literal">NULL</span>;</div><div class="line">  cl_mem memobj = <span class="literal">NULL</span>;</div><div class="line">  cl_program program = <span class="literal">NULL</span>;</div><div class="line">  cl_kernel kernel = <span class="literal">NULL</span>;</div><div class="line">  cl_platform_id platform_id = <span class="literal">NULL</span>;</div><div class="line">  cl_uint ret_num_devices;</div><div class="line">  cl_uint ret_num_platforms;</div><div class="line">  cl_int ret;</div><div class="line"> </div><div class="line">  <span class="keyword">char</span> <span class="built_in">string</span>[MEM_SIZE];</div><div class="line"> </div><div class="line">  FILE *fp;</div><div class="line">  <span class="keyword">char</span> fileName[] = <span class="string">"main.ir"</span>;</div><div class="line">  <span class="keyword">char</span> *source_str;</div><div class="line">  <span class="keyword">size_t</span> source_size;</div><div class="line"> </div><div class="line">  <span class="comment">/* Load the source code containing the kernel*/</span></div><div class="line">  fp = fopen(fileName, <span class="string">"r"</span>);</div><div class="line">  <span class="keyword">if</span> (!fp) &#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to load kernel.\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  source_str = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(MAX_SOURCE_SIZE);</div><div class="line">  source_size = fread(source_str, <span class="number">1</span>, MAX_SOURCE_SIZE, fp);</div><div class="line">  fclose(fp);</div><div class="line"> </div><div class="line">  <span class="comment">/* Get Platform and Device Info 初始化opencl 平台(调用两次clGetPlatformIDs函数） */</span></div><div class="line">  ret = clGetPlatformIDs(<span class="number">1</span>, &amp;platform_id, &amp;ret_num_platforms);</div><div class="line">  ret = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_GPU, <span class="number">1</span>, &amp;device_id, &amp;ret_num_devices);</div><div class="line"> </div><div class="line">  <span class="comment">/* Create OpenCL context 创建上下文(调用clCreateContext函数） */</span></div><div class="line">  context = clCreateContext(<span class="literal">NULL</span>, <span class="number">1</span>, &amp;device_id, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;ret);</div><div class="line"> </div><div class="line">  <span class="comment">/* Create Command Queue 创建命令队列(调用clCreateCommandQueue函数） */</span></div><div class="line">  command_queue = clCreateCommandQueue(context, device_id, <span class="number">0</span>, &amp;ret);</div><div class="line"> </div><div class="line">  <span class="comment">/* Create Memory Buffer 创建数据缓冲区(调用clCreateBuffer函数） */</span></div><div class="line">  memobj = clCreateBuffer(context, CL_MEM_READ_WRITE, MEM_SIZE * <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="literal">NULL</span>, &amp;ret);</div><div class="line">  <span class="comment">/* Create Kernel Program from the source 创建程序对象(调用clCreateProgramWithSource函数） */</span></div><div class="line">  <span class="comment">//program = clCreateProgramWithSource(context, 1, (const char **)&amp;source_str, (const size_t *)&amp;source_size, &amp;ret);</span></div><div class="line">  cl_int binary_status;</div><div class="line">  program = </div><div class="line">    clCreateProgramWithBinary(context, <span class="number">1</span>, &amp;device_id, (<span class="keyword">const</span> <span class="keyword">size_t</span> *)&amp;source_size, (<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> **)&amp;source_str, &amp;binary_status, &amp;ret);</div><div class="line"> </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"binary_status = %d\n"</span>, binary_status);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"binary_status = %d\n"</span>, CL_INVALID_BINARY);</div><div class="line">  <span class="comment">/* Build Kernel Program 编译内核源码（调用clBuildProgram函数,如果编译成功，则把编译代码存储在程序对象中） */</span></div><div class="line">  ret = clBuildProgram(program, <span class="number">1</span>, &amp;device_id, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">  <span class="keyword">const</span> <span class="keyword">int</span> MAX_INFO_SIZE = (<span class="number">0x10000</span>);</div><div class="line">  <span class="keyword">if</span> (ret != CL_SUCCESS)</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"clBuild failed:%d\n"</span>, ret);</div><div class="line">    <span class="keyword">char</span> info_buf[MAX_INFO_SIZE];</div><div class="line">    clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, MAX_INFO_SIZE, info_buf, <span class="literal">NULL</span>);</div><div class="line">    <span class="comment">//fprintf(stderr, "\n%s\n", info_buf);</span></div><div class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">char</span> info_buf[MAX_INFO_SIZE];</div><div class="line">    clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, MAX_INFO_SIZE, info_buf, <span class="literal">NULL</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Kernel Build Success\n%s\n"</span>, info_buf);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">/* Create OpenCL Kernel 创建kernel(调用clCreateKernel函数） */</span></div><div class="line">  kernel = clCreateKernel(program, <span class="string">"hello"</span>, &amp;ret);</div><div class="line"> </div><div class="line">  <span class="comment">/* Set OpenCL Kernel Parameters 设置内核参数(调用clSetKernelArg函数）*/</span></div><div class="line">  ret = clSetKernelArg(kernel, <span class="number">0</span>, <span class="keyword">sizeof</span>(cl_mem), (<span class="keyword">void</span> *)&amp;memobj);</div><div class="line"> </div><div class="line">  <span class="comment">/* Execute OpenCL Kernel 内核入队执行(调用clEnqueueNDRangeKernel函数） */</span></div><div class="line">  ret = clEnqueueTask(command_queue, kernel, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">  <span class="comment">/* Copy results from the memory buffer 取回计算结果。Read the output buffer back to the host(调用clEnqueueReadBuffer函数） */</span></div><div class="line">  ret = clEnqueueReadBuffer(command_queue, memobj, CL_TRUE, <span class="number">0</span>, MEM_SIZE * <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="built_in">string</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line"> </div><div class="line">  <span class="comment">/* Display Result */</span></div><div class="line">  <span class="comment">//puts(string);</span></div><div class="line"> </div><div class="line">  <span class="comment">/* Finalization */</span></div><div class="line">  ret = clFlush(command_queue);</div><div class="line">  ret = clFinish(command_queue);</div><div class="line">  ret = clReleaseKernel(kernel);</div><div class="line">  ret = clReleaseProgram(program);</div><div class="line">  ret = clReleaseMemObject(memobj);</div><div class="line">  ret = clReleaseCommandQueue(command_queue);</div><div class="line">  ret = clReleaseContext(context);</div><div class="line"> </div><div class="line">  <span class="comment">/* Release OpenCL resources（至此结束整个运行过程） */</span></div><div class="line">  <span class="built_in">free</span>(source_str);</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>main.cl</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// kernel function</span></div><div class="line"> </div><div class="line">__<span class="function">kernel <span class="keyword">void</span> <span class="title">hello</span><span class="params">(__global <span class="keyword">char</span>* <span class="built_in">string</span>)</span></div><div class="line"></span>&#123;</div><div class="line">    <span class="built_in">string</span>[<span class="number">0</span>] = <span class="string">'H'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">1</span>] = <span class="string">'e'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">2</span>] = <span class="string">'l'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">3</span>] = <span class="string">'l'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">4</span>] = <span class="string">'o'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">5</span>] = <span class="string">','</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">6</span>] = <span class="string">' '</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">7</span>] = <span class="string">'T'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">8</span>] = <span class="string">'a'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">9</span>] = <span class="string">'r'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">10</span>] = <span class="string">'a'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">11</span>] = <span class="string">'n'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">12</span>] = <span class="string">'t'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">13</span>] = <span class="string">'u'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">14</span>] = <span class="string">'l'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">15</span>] = <span class="string">'a'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">16</span>] = <span class="string">'!'</span>;</div><div class="line">    <span class="built_in">string</span>[<span class="number">17</span>] = <span class="string">'\0'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>win8.1 下 VS2013 搭建 OpenCL 开发环境只需改变安装的 SDK 即可；</li>
<li>此外还需要注意的是，由于该SDK使用的是OpenCL 2.0规范，某些函数在cl.h里被声明为弃用，需要在<code>#include &lt;CL/cl.h&gt;</code>包含头文件之后添加<strong>#pragma warning( disable : 4996)</strong>启用这些函数，这样才能继续使用OpenCL 1.2的函数)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 软硬兼施 </category>
            
            <category> OpenCL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP考勤系统(二) JDBC连接MySQL数据库]]></title>
      <url>/2015/05/16/JSP%E8%80%83%E5%8B%A4%E7%B3%BB%E7%BB%9F-%E4%BA%8C-JDBC%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>　　在前面的MFC程序那一块，我们已经介绍了基于ODBC和ADO技术如何操作MySQL数据库，这一部分我们介绍另外一种更加方便快捷的，能够实现相同功能的方式，那就是通过JDBC访问数据库。相比之下，这种方式要比之前的ADO方便得多，较之前面难度也有所下降。</p>
<h2 id="ODBC-vs-JDBC"><a href="#ODBC-vs-JDBC" class="headerlink" title="ODBC vs JDBC"></a><strong>ODBC vs JDBC</strong></h2><p>　　这两种方式都是访问数据库的常用的编程接口，<strong>ODBC(Open Database Connection)</strong>是”微””软”的东西，只能在其操作系统上跑，移植性可想而知；<strong>JDBC(Java Database Connection)</strong>则是Oracle的东西，是Java大家庭的一员。大家都知道，Java正式可移植性的典范，所以，JDBC的可移植性是显然的。至于为什么，通过下面的实现流程，你应该会有所体会。此外，可以通过比较ADO的实现来窥见其便捷性。<br><a id="more"></a></p>
<h2 id="JDBC操作数据库流程"><a href="#JDBC操作数据库流程" class="headerlink" title="JDBC操作数据库流程"></a><strong>JDBC操作数据库流程</strong></h2><p><img src="/img/JDBC_overview.png" /><br>　　上述是项目中有关数据库操作的类示图。其中<strong>system.entity</strong>中的两个类为两个实体对象，<strong>UserInfo</strong>用于记录用户信息(如下)，目前只保存用户的用户名、密码以及邮箱。其数据来自于用户通过注册存入数据库的用户信息数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> *	用户个人信息实体类</div><div class="line"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String username;</div><div class="line">  <span class="keyword">private</span> String password;</div><div class="line">  <span class="keyword">private</span> String email;</div><div class="line">  .....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　另外一个是用户信息实体类<strong>RFIDCard</strong>(如下)，用于存放用户个人信息以及包括UID、卡片类型、创建时间等卡片信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> *	用户信息实体类，包括用户个人信息以及卡片信息</div><div class="line"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RFIDCard</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String cardId;</div><div class="line">  <span class="keyword">private</span> String type;</div><div class="line">  <span class="keyword">private</span> UserInfo user;</div><div class="line">  <span class="keyword">private</span> Date createTime;</div><div class="line">  .....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　通过将数据封装成实体类，将有利于数据的传递。本文给出的只是一个参考，读者可以根据功能需求自行实现。<br>　　<strong>system.database</strong>包中，则定义了一套对数据库操作的接口(如下图)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line"> * 数据库辅助类CURD接口定义</div><div class="line"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DBHelper</span> </span>&#123;	</div><div class="line">  <span class="comment">/**</div><div class="line">   * 插入新用户</div><div class="line">   * <span class="doctag">@return</span> 是否插入成功</div><div class="line">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">saveRFIDCard</span><span class="params">(RFIDCard card)</span></span>;</div><div class="line"> </div><div class="line">  <span class="comment">/**</div><div class="line">   * 根据cardId删除用户</div><div class="line">   * <span class="doctag">@return</span> 删除的记录数</div><div class="line">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">deleteRFIDCardByCardId</span><span class="params">(String cardId)</span></span>;</div><div class="line"> </div><div class="line">  <span class="comment">/**</div><div class="line">   * 更新用户信息 通过card.cardId进行唯一标识</div><div class="line">   * <span class="doctag">@return</span> 是否更新成功</div><div class="line">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">updateRFIDCard</span><span class="params">(RFIDCard card)</span></span>;</div><div class="line">   </div><div class="line">  <span class="comment">/**</div><div class="line">   * 根据卡号获取用户信息 包括卡片信息及用户个人信息</div><div class="line">   * <span class="doctag">@return</span> 用户信息</div><div class="line">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> RFIDCard <span class="title">SearchRFIDCardByCardId</span><span class="params">(String CardId)</span></span>;</div><div class="line"> </div><div class="line">  <span class="comment">/**</div><div class="line">   * 获取所有的用户信息 包括卡片信息及用户个人信息</div><div class="line">   * <span class="doctag">@return</span> RFIDCard信息列表</div><div class="line">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;RFIDCard&gt; <span class="title">getAllRFIDCards</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　包括对数据库的增删改查操作。另外则是具体实现了上述一套接口的<strong>RFIDCardDBHelper</strong>数据库辅助类，按照JDBC访问数据库的流程对上述接口进行实现。在讲到具体每个接口的实现之前，我们有必要先看看目前的数据库状况。下面是创建该数据库的ddl。注意的一点是，这里保存的password为经过MD5加密后的密码字符串，为char(32)。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_RFIDCard(</div><div class="line">  CardId <span class="built_in">varchar</span>(<span class="number">20</span>) primary <span class="keyword">key</span>,</div><div class="line">  username <span class="built_in">varchar</span>(<span class="number">20</span>),</div><div class="line">  <span class="keyword">password</span> <span class="built_in">char</span>(<span class="number">32</span>),</div><div class="line">  createTime datetime,</div><div class="line">  CardType <span class="built_in">varchar</span>(<span class="number">20</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>　　JDBC访问数据库主要有以下5个步骤:</p>
<pre><code>1. 注册驱动
2. 通过驱动管理器获取连接
3. 获得语句对象
4. 传递语句对象，执行并获取结果
5. 关闭结果集或语句对象或连接等资源
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RFIDCardDBHelper</span> <span class="keyword">implements</span> <span class="title">DBHelper</span> </span>&#123;</div><div class="line">  <span class="comment">// 驱动全局类名字符串</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>; </div><div class="line">  <span class="comment">// 数据库名</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DBNAME = <span class="string">"rfid"</span>; </div><div class="line">  <span class="comment">// 表名</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TBNAME = <span class="string">"tb_rfidcard"</span>; </div><div class="line">  <span class="comment">// JDBC-MySQL连接字符串</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNSTR = <span class="string">"jdbc:mysql://localhost:3306/"</span> + DBNAME;</div><div class="line">   </div><div class="line">  <span class="keyword">private</span> Connection conn = <span class="keyword">null</span>;</div><div class="line">   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RFIDCardDBHelper</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// 注册驱动</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Class.forName(DRIVER);</div><div class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 通过驱动管理器获取连接</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">this</span>.conn = DriverManager.getConnection(CONNSTR, <span class="string">"root"</span>, <span class="string">"chenshj35"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  ...</div><div class="line">  <span class="comment">// 垃圾回收前释放连接</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.conn)</div><div class="line">      <span class="keyword">this</span>.conn.close();</div><div class="line">    <span class="keyword">super</span>.finalize();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　在<strong>RFIDCardDBHelper</strong>辅助类的实现中，我们定义一个私有的连接对象，在构造函数中完成驱动注册，并获取到连接对象。最后，因为数据库连接的数目是有限的，我们必须在对象回收释放前将连接关闭。至于驱动字符串和连接字符串，则是按照规范设置。<br><strong>注意：</strong> 在使用JDBC驱动之前，我们需要把提供这一系列API的第三方库导入到工程中(<a href="http://yunpan.cn/cjzIIcxYw2KmQ">点击获取</a> 访问密码 <code>2395</code>)。右键工程-&gt;Build Path-&gt;Configure Build Path，在弹出窗口中Java Build Path-&gt;Libraries-&gt;Add External JARs把下载的<strong>mysql-connector-java-5.1.26-bin.jar</strong>包导入即可。<br>　　获取连接之后，我们就可以进行有关增删该查的相关操作，<strong>saveRFIDCard(RFIDCard card)</strong>把传递过来的用户信息插入数据库，并返回插入成功与否信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveRFIDCard</span><span class="params">(RFIDCard card)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.conn)&#123;</div><div class="line">    PreparedStatement prestmt = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 获取语句对象 MD5()函数对密码进行加密</span></div><div class="line">      String sql = <span class="string">"insert into "</span>+ TBNAME + </div><div class="line">        <span class="string">"(CardId, username, password, createTime, CardType) values(?, ?, MD5(?), ?, ?)"</span>;</div><div class="line">      prestmt = <span class="keyword">this</span>.conn.prepareStatement(sql);</div><div class="line">       </div><div class="line">      prestmt.setString(<span class="number">1</span>, card.getCardId());</div><div class="line">      prestmt.setString(<span class="number">2</span>, card.getUser().getUsername());</div><div class="line">      prestmt.setString(<span class="number">3</span>, card.getUser().getPassword());</div><div class="line">      prestmt.setDate(<span class="number">4</span>, (java.sql.Date) card.getCreateTime());</div><div class="line">      prestmt.setString(<span class="number">5</span>, card.getType());</div><div class="line">       </div><div class="line">      <span class="comment">// 传递语句对象，并返回结果</span></div><div class="line">      count = prestmt.executeUpdate();</div><div class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> != prestmt)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          prestmt.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> (count == <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　由于insert操作传递的参数较多，我们采用PreparedStatement语句对象。首先根据insert语句创建sql语句，用<code>?</code>进行占位，并在后续通过语句对象的setString(index，value)设置参数。在设置参数之前，我们通过prepareStatement(sql)创建与sql语句对应的语句对象。<strong>需要注意的一点是，有关mysql这个包的函数，他们的index是从1开始计算的，这与我们常识里的从0开始有点冲突</strong>。<br>　　创建好语句对象后，我们就可以执行该语句以获取结果。插入操作属于DML语句，调用executeUpdate方法执行<strong>(Update并不表示值使用与update操作，对于delete、insert等DML语句同样适用)</strong>。在下面例子我们会看到，对应dql查询语句，我们是通过executeQuery函数来执行。二者的返回结果也不一样，dml语句返回受影响的函数，dql则返回查询结果集。<br>　　<strong>此外，还需要对可能发生的异常进行捕获，通过finally在退出函数前保证语句对象得到释放</strong>。通过这个函数的介绍，我们已经能够实现其他功能的函数，基本的流程都是上述提及的5个步骤，关键点在于判断sql语句是dml语句还是dql语句，从而对返回值进行区别。同时，注意此过程中异常的处理以及资源的释放问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteRFIDCardByCardId</span><span class="params">(String cardId)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.conn)&#123;</div><div class="line">    Statement stmt = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 获取语句对象</span></div><div class="line">      String sql = <span class="string">"delete from "</span>+ TBNAME + </div><div class="line">        <span class="string">"where CardId="</span> + cardId;</div><div class="line">      stmt = <span class="keyword">this</span>.conn.createStatement();</div><div class="line">      </div><div class="line">      <span class="comment">// 传递语句对象，并返回结果</span></div><div class="line">      count = stmt.executeUpdate(sql);</div><div class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> != stmt)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          stmt.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> (count==<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　接下来是<strong>deleteRFIDCardByCardId(String cardId)</strong>删除操作函数，和增加操作相似，都是dml语句，实现上有点不同的是，这里使用普通的Statement语句对象，需要注意的就是这次是通过<strong>createStatement</strong>获取语句对象，而不是PreparedStatement使用的<strong>prepareStatement函数</strong>，这一点需要大家注意。<br>　　那么问题来了，这两个语句对象有什么区别？怎么用呢？<strong>PreparedStatement</strong>对sql语句进行预编译，前提是多条sql语句除了数据有区别外，结果完全一致，这样的话，对于批量操作就很有优势。<strong>PreparedStatement</strong>通过预编译，虽然在创建语句对象的时候耗时更多，但是，其在后续的一系列相同结构的sql语句的耗时上则是大幅减少，这样的话，对于批量操作，总的耗时就会比普通的<strong>Statement</strong>少得多。另外一个使用<strong>PreparedStatement</strong>的情况就是有点类似这里的情况，需要设置的参数比较多，那么通过<strong>?</strong>这个占位符，使得参数的传递更加方便快捷直观。修改操作函数<strong>updateRFIDCard(RFIDCard card)</strong>的实现几乎与删除函数完全一致(如下)。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateRFIDCard</span><span class="params">(RFIDCard card)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.conn)&#123;</div><div class="line">    PreparedStatement prestmt = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 获取语句对象</span></div><div class="line">      String sql = <span class="string">"update "</span>+ TBNAME + </div><div class="line">        <span class="string">" set username=?, password=MD5(?), createTime=?, CardType=?"</span>;</div><div class="line">      prestmt = <span class="keyword">this</span>.conn.prepareStatement(sql);</div><div class="line">       </div><div class="line">      prestmt.setString(<span class="number">1</span>, card.getUser().getUsername());</div><div class="line">      prestmt.setString(<span class="number">2</span>, card.getUser().getPassword());</div><div class="line">      prestmt.setDate(<span class="number">3</span>, (java.sql.Date) card.getCreateTime());</div><div class="line">      prestmt.setString(<span class="number">4</span>, card.getType());</div><div class="line">       </div><div class="line">      <span class="comment">// 传递语句对象，并返回结果</span></div><div class="line">      count = prestmt.executeUpdate();</div><div class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> != prestmt)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          prestmt.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> (count &gt;= <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　最后，便是查询操作，属于另外一种dql范畴。因为功能需求，这里定义了两种查询操作，一种是根据UID获取用户信息<strong>SearchRFIDCardByCardId(String cardId)</strong>，另一种则是遍历整个数据库，获取当前数据库的所有记录<strong>List<RFIDCard> getAllRFIDCards()</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> RFIDCard <span class="title">SearchRFIDCardByCardId</span><span class="params">(String cardId)</span> </span>&#123;</div><div class="line">  RFIDCard card = <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.conn)&#123;</div><div class="line">    Statement stmt = <span class="keyword">null</span>;</div><div class="line">    ResultSet result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 获取语句对象</span></div><div class="line">      stmt = <span class="keyword">this</span>.conn.createStatement();</div><div class="line">      String sql = <span class="string">"select * from "</span>+ TBNAME + <span class="string">" where CardId="</span> + cardId;</div><div class="line">       </div><div class="line">      <span class="comment">// 传递语句对象，并返回结果</span></div><div class="line">      result = stmt.executeQuery(sql);</div><div class="line">      <span class="keyword">if</span>(result.next())&#123;</div><div class="line">        String CardType = result.getString(<span class="string">"CardType"</span>);</div><div class="line">        String username = result.getString(<span class="string">"username"</span>);</div><div class="line">        String password = result.getString(<span class="string">"password"</span>);</div><div class="line">        String email = <span class="string">""</span>;</div><div class="line">        Date createTime = result.getDate(<span class="string">"createTime"</span>);</div><div class="line">         </div><div class="line">        card = <span class="keyword">new</span> RFIDCard(cardId, CardType, </div><div class="line">            username, password, email, createTime);</div><div class="line">      &#125;</div><div class="line">       </div><div class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> != stmt)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          stmt.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">       </div><div class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> != result)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          result.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> card;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　这里引入了结果集<strong>ResultSet</strong>保存执行结果。可以看到上述提及dql语句与dml语句的区别，是通过executeQuery(sql)执行sql语句，返回值是一个指向结果集开头的游标，我们需要通过next方法将其移到第一条记录上。假如不存在下一跳记录，next函数会返回假。将游标移到记录行上之后，我们便可以通过getString(“字段名”)或者getString(index)获取记录中不同字段的数据。<strong>同样的，index还是从1开始计数</strong>。这里使用前一种方法，也建议大家使用第一种方法，因为通过index获取数据，当表的结果发生变化时(插入新字段)，下标便需要进行改变，前者则不需要。<br>　　<strong>另外，需要注意的是，除了释放语句对象，结果集同样需要进行资源释放</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;RFIDCard&gt; <span class="title">getAllRFIDCards</span><span class="params">()</span> </span>&#123;</div><div class="line">  List&lt;RFIDCard&gt; cards = <span class="keyword">null</span>;</div><div class="line">   </div><div class="line">  <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">this</span>.conn)&#123;</div><div class="line">    Statement stmt = <span class="keyword">null</span>;</div><div class="line">    ResultSet result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 获取语句对象</span></div><div class="line">      stmt = <span class="keyword">this</span>.conn.createStatement();</div><div class="line">      String sql = <span class="string">"select * from "</span>+ TBNAME;</div><div class="line">       </div><div class="line">      <span class="comment">// 传递语句对象，并返回结果</span></div><div class="line">      result = stmt.executeQuery(sql);</div><div class="line">      <span class="keyword">boolean</span> first = <span class="keyword">true</span>;</div><div class="line">      RFIDCard card = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">while</span>(result.next())&#123;</div><div class="line">        <span class="keyword">if</span>(first)&#123;</div><div class="line">          cards = <span class="keyword">new</span> ArrayList&lt;RFIDCard&gt;();</div><div class="line">        &#125;</div><div class="line">        first = <span class="keyword">false</span>;</div><div class="line">         </div><div class="line">        String cardId = result.getString(<span class="string">"CardId"</span>);</div><div class="line">        String CardType = result.getString(<span class="string">"CardType"</span>);</div><div class="line">        String username = result.getString(<span class="string">"username"</span>);</div><div class="line">        String password = result.getString(<span class="string">"password"</span>);</div><div class="line">        String email = <span class="string">""</span>;</div><div class="line">        Date createTime = result.getDate(<span class="string">"createTime"</span>);</div><div class="line">         </div><div class="line">        card = <span class="keyword">new</span> RFIDCard(cardId, CardType, </div><div class="line">            username, password, email, createTime);</div><div class="line">        cards.add(card);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span>&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> != stmt)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          stmt.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">       </div><div class="line">      <span class="keyword">if</span>(<span class="keyword">null</span> != result)&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          result.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"> 		</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cards;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>List<RFIDCard> getAllRFIDCards()</strong>借鉴<strong>SearchRFIDCardByCardId(String cardId)</strong>，修改的地方主要是通过while循环，将结果集的每条记录依次插入到保存所有记录的列表中。我们需要考虑到的是，当我们的数据库记录数足够大，我们不可能在一个页面中把所有记录显示出来的时候，我们就需要考虑分页。所有，<strong>List<RFIDCard> getAllRFIDCards()</strong>可以进一步改进，改进成<strong>List<RFIDCard> getAllRFIDCards(int from, int to)</strong>来获取数据库查询所有记录中从from到to这个边界内的记录，方便后面View显示界面实现分页。这时候sql查询语句应该变成<strong>“select * from “+ TBNAME + “ limit ”+ from +”, “ + to</strong>;<br>　　最后，也许有的时候你会不知不觉在sql语句字符串后面加了个”;”，因为我们在MySQL命令行里都是这么干的，打完一条语句，都需要加上”;”。其实，不管在ADO还是本文介绍的JDBC，这个”;”都是没必要的。因为正如你觉得，这个”;”只是MySQL命令行里作为结束符的东西，真正执行的sql语句也只是”;”前面那部分命令。有时，还可能因为加上这个”;”而导致执行出错。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>　　希望通过本文的介绍，可以让你对如何实现JDBC访问数据库以及这部分内容在我们整个项目中的位置有更清晰的认识。跟ADO一样，我们将一系列的数据库操作放到一个辅助类中，这样，我们在需要的时候，只需要将辅助类实例化，然后便能调用提供的接口实现我们需要的功能。<br>　　看到这里，是不是觉得流程清晰了呢？那么就开始动手吧，把这部分功能的实现也在自己的项目中实现跑通，动手做一做，也许你收获的更多。</p>
<font size="5">[如对本文有什么建议或者错漏的地方，非常欢迎您通过评论指出，衷心感谢!]</font>]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP考勤系统(一) 站点框架介绍与入门]]></title>
      <url>/2015/05/15/JSP%E8%80%83%E5%8B%A4%E7%B3%BB%E7%BB%9F-%E4%B8%80-%E7%AB%99%E7%82%B9%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>　　本文只是本人对当前完成进度的一个总结，如有缺漏或误点，非常欢迎您通过下方评论指出。<strong>感谢开路人ansen，提供了很多参考信息。</strong>开发环境是MyEclipse8.0(Win8.1下)。<a href="http://yunpan.cn/cjDdh4HCCAI6Y">点击获取</a>安装包(<strong>内有MyEclipse8.0安装包及如何破解提示；同时有mysql-5.5.19-32位安装程序</strong>)，访问密码<code>a690</code>。<br>　　基于当前的考勤系统网站点的实现，跟大家介绍一下(1)大概的MVC设计模式，以及可以如何遵照这种模式搭建自己的考勤系统网站；此外，会介绍一下(2)站点下如何指定路径引用资源(包括最主要的jsp文件以及少部分的image和css文件)；通过(3)几种跳转方式的实现引入Get/Post请求方式的介绍；最后，通过(4)分析web.xml配置文件来介绍有关通过url来制定Servlet控制器进行处理的匹配问题。<br><a id="more"></a></p>
<h2 id="MVC与网站框架-部分参考百度百科"><a href="#MVC与网站框架-部分参考百度百科" class="headerlink" title="MVC与网站框架(部分参考百度百科)"></a><strong>MVC与网站框架</strong>(部分参考<a href="http://baike.baidu.com/link?url=aLp34njTqTxnzy3VhkL4BDdwmXZ8qSypz1x81mIcIPHClkzId3FgdnQfTK4PcycpsJ_AGL-oikl1LlSEcRusqC-VAXQxi0HgCANIEBuTs1zuECvMgoOiRcZai_JdIqIk">百度百科</a>)</h2><p>　　<img src="/img/MVC.png" align="center"/><br>　　上述图片显示了整个工程框架信息：<br>　　1. Model(模型)表示应用程序核心，包括一系列的java类，有system.database包中与数据库操作相关的数据库辅助类；system.entity中的数据实体类，主要是将数据库中的记录封装成实体(RFIDCard保存数据库单条记录，方便数据传送)；以及system.util中需要使用的工具类(MD5Util用于对密码进行MD5的加密)。Model是应用中用于处理应用程序数据逻辑的部分，这里主要就是与数据库操作相关的java类。<br>　　2. View(视图)用来显示数据，这里强调的是数据库记录，所有的jsp文件均属于这个范畴。工程中主要就涉及table的数据展示，表单内容的设计；辅佐上CSS对页面布局进行控制，JavaScript对表单内容进行验证或者响应某些外部事件(如鼠标点击等)。View是应用中处理数据显示的部分。WebRoot是整个网站的根目录，css目录中保存站点使用的外部样式文件，images则保存需要用到的图片文件。<br>　　3. Controller(控制器)用于处理输入，包括对数据库记录的增删改查，进一步进行相关的表单验证任务，包括登陆身份的验证，根据验证结果进行转发，实现页面间跳转。Controller是应用中处理用户交互的部分，负责从视图读取数据，调用模型里的功能函数，验证用户输入。这里的两个Servlet，LoginProcessServlet处理login.jsp登陆界面提交的表单数据，通过查询数据库，验证用户身份，从而决定转发到主界面还是退回到登录界面重新登陆；RegistProcessServlet则处理regist.jsp注册界面传送的数据，往数据库中插入注册信息，根据插入结果返回注册成功与否的提示信息。<br>　　小结一下，使用MVC分层主要是有助于管理复杂一点的应用，因为您可以在一个时间内专门关注一个方面(例如，您可以在不依赖业务逻辑的情况下专注于视图设计)。MVC分层同时也简化了分组开发，不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。<br>　　假如，您还没有搭建好自己的框架，或者觉得自己的框架有点混乱，建议您可以按照这种思路开始或者进行二次修改。</p>
<h2 id="资源路径怎么写"><a href="#资源路径怎么写" class="headerlink" title="资源路径怎么写"></a><strong>资源路径怎么写</strong></h2><p>　　当你需要插入一张图片，你把指定的图片放在了工程目录下，但是你却为src要怎么写犯困了，调整了很久，预览界面却还是一个碎了的图片，心都碎了。当你需要为表单填写一个action，你想让当前页面跳转到指定页面，却发现怎么也跳不过去…这些，都涉及到我们站点中的资源路径如何正确书写的问题。承接上文对WebRoot网站根目录文件系统的分析，我们根据上图给出的工程框架来进一步介绍一下有关资源路径书写的问题。<br><img src="/img/loginView.png" /><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;td align="center"&gt;</div><div class="line">  &lt;img alt="注册会员" src="./images/login/regist.jpg" width="72px"; onclick="register();"&gt; </div><div class="line">&lt;/td&gt;</div></pre></td></tr></table></figure></p>
<p>　　上述代码实现在login.jsp登陆界面中显示images/login/regist.jpg图片(如上图)。login.jsp文件与images文件夹在均在WebRoot网站根目录的一层目录下。属于同层目录，所以，我们通过 <strong>./</strong>表示login.jsp所在的当前目录，然后通过./images进入我们站点存放所有图片的文件夹。因为我们的注册会员图标存放在该文件夹下的login/登陆使用的图片目录下，所有最终通过./images/login/regist.jpg获取到指定的图片。<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link type=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"./css/mystyle.css"</span> &gt;</div></pre></td></tr></table></figure></p>
<p>　　同样的，在login.jsp文件，我们可以通过<strong>./css</strong>访问保存在css目录下的mystyle.css样式表。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;a href="./about.jsp" &gt;相关服务条款&lt;/a&gt;和</div><div class="line">&lt;a href="./privace.jsp" &gt;隐私政策&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>　　类似的，我们在jsp文件中要访问其他的jsp文件，比如超链接，只需要通过./xxxx.jsp即可访问。<br>　　也许你已经发现了，这里把所有的jsp文件放在站点根目录下，与images以及css文件夹同层，这样的话，jsp文件中的资源路径就比较容易书写。这里说的容易，主要是避免复杂的路径跳转。比如，如果你需要访问当前jsp文件上层目录下的images文件夹下的图片资源，这样要怎么办呢？<br><img src="/img/loginTest.png" /><br>　　我们在WebRoot站点根目录先新建一个test文件夹，把login.jsp登录界面扔到test/下，显然，这时候如果按照原先的路径肯定无法正确引用。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;link type="text/css" rel="stylesheet" href="../css/mystyle.css" &gt;</div><div class="line"> </div><div class="line">&lt;td align="center"&gt;</div><div class="line">  &lt;img alt="注册会员" src="../images/login/regist.jpg" width="72px"; onclick="register();"&gt; </div><div class="line">&lt;/td&gt;</div><div class="line"> </div><div class="line">&lt;a href="../about.jsp" &gt;相关服务条款&lt;/a&gt;和</div><div class="line">&lt;a href="../privace.jsp" &gt;隐私政策&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>　　这个时候，就需要按照上述的方式进行引用了，通过<strong>../</strong>退回到父目录，及test所在的目录，跟其他jsp文件、images文件夹还有css文件夹同级，这样，就可以按照上面提到的方式进行引用。<br>　　设想一下更复杂的情况，假如要退两层回到根目录呢？还是洗洗睡了，没必要折腾这个，只会让自己没事找事。所以，如何部署我们的站点，尽量让自己在资源引用上省事还是挺重要的。建议尽量不要出现超过一层的回退情况，只要放置资源的时候注意一下，就能轻松解决这个问题。</p>
<h2 id="页面跳转与Get-Post请求方式"><a href="#页面跳转与Get-Post请求方式" class="headerlink" title="页面跳转与Get/Post请求方式"></a><strong>页面跳转与Get/Post请求方式</strong></h2><p>　　首先，介绍一下几种常见的跳转方式(这一块还涉及转发与重定向的区别，作为入门可以不深入理解，有兴趣的同学可以上网搜一下)。<br>　　<strong>1. 超链接</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href="./about.jsp" &gt;相关服务条款&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>href属性指定超链接跳转页面的url。</p>
<p>　　<strong>2. 表单提交</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;form id="form" action="./regist.do" method="post"&gt;</div><div class="line">  ......</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>通过action指定表单提交对象，method可以指定Get或者Post两种提交方式。</p>
<p>　　<strong>3. JSP forward</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;jsp:forward page="main.jsp?cardId=12353022&amp;username=Durant35" &gt;&lt;/jsp:forward&gt;</div></pre></td></tr></table></figure></p>
<p>page属性指定跳转页面url。</p>
<p>　　<strong>4. Javascript location.href</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    location.href = <span class="string">"main.jsp?cardId=&lt;%= cardId %&gt;&amp;username=&lt;%= username %&gt;"</span>;</div><div class="line">  &#125;, <span class="number">1500</span>);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>loation.href设置跳转页面url，通过<strong>url?key1=value1&amp;key2=value2….</strong>附上传递的参数，这种方式属于get请求方式。此外，这里通过setTimeout实现延时跳转，延时时间为1500ms。</p>
<p>　　<strong>5. Servlet的forward</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></div><div class="line">      <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">  ....</div><div class="line">  request.setAttribute(<span class="string">"username"</span>, username);</div><div class="line">  request.setAttribute(<span class="string">"cardId"</span>, cardId);</div><div class="line">  request.getRequestDispatcher(<span class="string">"./login.jsp"</span>).forward(request, response);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Servlet中可以通过上述方式进行转发，比如根据条件满足情况跳转到不同的页面。另外，可以通过setAttribute(key, value)以键值对的方式把数据传递到目标界面，在目标界面中可以通过getAttribute(key)获取参数值。<br>　　上述就是几种常见的页面跳转的方式，足够应付本项目的功能需求。接下来介绍一下Get/Post两种请求方式的一些注意点。首先要从http协议的请求数据包说起(大致如下)。<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">请求行: 请求方式(GET/POST) 请求资源url 版本号HTTP <span class="number">1.0</span>/<span class="number">1.1</span></div><div class="line">若干消息头: </div><div class="line">Cookies:xxx</div><div class="line">Content-type:xxx</div><div class="line">.....</div><div class="line">空行:</div><div class="line">实体内容:</div><div class="line">.....</div></pre></td></tr></table></figure></p>
<p>　　常见的Get方式有表单默认的提交方式；在浏览器地址栏直接输入网址回车后的提交方式；通过超链接访问的提交方式。Post方式则主要只有设置表单<strong>method=”post”</strong>后表单的提交方式。二者的主要区别在于Get方式会在地址栏显示请求数据参数，浏览器会缓存Get数据，相比之下，Post方式请求参数不会再地址栏显示，参数存放在实体内容中，可以向服务器提交较大数据量的参数，而且安全性比Get高，Get方式主要用于向服务器获取资源。</p>
<h2 id="读懂web-xml配置文件"><a href="#读懂web-xml配置文件" class="headerlink" title="读懂web.xml配置文件"></a><strong>读懂web.xml配置文件</strong></h2><p>　　到这里，基本上可以开始搭建项目要求的网站，不过，这里还需要强调一点web.xml站点配置文件的内容。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> </div><div class="line">  <span class="attr">version</span>=<span class="string">"2.4"</span> </div><div class="line">  <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span> </div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee </div><div class="line">  http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span> &gt;</span></div><div class="line">   </div><div class="line">  <span class="comment">&lt;!-- 默认home page --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">   </div><div class="line">  <span class="comment">&lt;!-- 配置Servlet与其匹配的URL --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginProcess<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>system.login.LoginProcessServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginProcess<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegistProcess<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>system.regist.RegistProcessServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"> </div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RegistProcess<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/regist.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">location</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></div><div class="line">   </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　<code>&lt;welcome-file-list&gt;</code>配置的是站点的默认主页，也就是<strong><a href="http://IP:port/AppName/">http://IP:port/AppName/</a></strong>对应的网页。其中AppName一般与你的工程名称一致，默认的主页都是index.jsp，这是MyEclipse为您自动生成的，我这里修改为login.jsp登录界面。<br>　　另外一个就是<code>&lt;error-page&gt;</code>错误页面配置，根据不同的error-code错误码，匹配相应的页面。这里通过配置404错误页面，当url标识的请求资源不存在时就会显示error.jsp页面。错误码这一块在http协议中提及，除了404，像常见的405禁止访问，500服务器崩溃等，都可以指定一个自定义的页面，这样就可以在错误发生的时候控制显示给用户的页面信息，而不是未知的系统提供的一大堆错误信息。404公益主要就是这方面的应用。<br>　　最后，要讲的一个也是比较重要的，就是关于url与我们Servlet控制器如何对应的问题。当服务器得到一个请求资源url的时候，她首先查看WebRoot目录下有没有对应的资源，如果没有找到对应项，接着通过web.xml配置文件中<servlet-mapping>下的<url-pattern>，寻找是否有对应项，假如有，便通过这个对应项的<servlet-name>找到与之对应的，<servlet-name>相同的<servlet>，然后交给该<servlet>的<servlet-class>指定的Servlet控制器处理。举个例子，如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;form id="form_login" action="./login.do" method="post"&gt;</div><div class="line">  ...</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<p>　　在登录界面，当用户填写完登陆信息，准备登陆时，我们需要将表单数据提交给LoginProcessServlet这个处理器进行处理，确定用户是否能够登陆我们的主界面(具体信息可以参见第一部分网站框架的介绍)。这里的ation=”./login.do”其实就是<code>http://IP:port/AppName/login.do</code>，AppName后的url部分就是请求资源url。然后，服务器通过寻找login.do这个url-pattern对应的<servlet-mapping>最终准确找到system.login.LoginProcessServlet这个类来处理。<br><strong>注意： </strong><code>&lt;servlet-class&gt;</code>必须是完整的包名.类名。<code>&lt;url-pattern&gt;</code>一般为精确匹配，前面带/表示前缀匹配，没有/则表示后缀匹配；也可以通过通配符<code>*</code>实现模糊匹配，类似于<code>*.do</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>　　本文主要介绍了一些基本的，项目中会用到的一些东西，大到如框架，小到如web.xml配置文件。希望通过本文，能够让你对整个项目框架以及各部分轮廓有更加清晰的认识。那么，接下来，您需要做的就是，照着心里面的想法，遵从功能要求，开始搭建自己的框架；按照MVC的设计模式，逐个击破；然后让各部分跳转自然。最后阶段便是各部分的细节优化。<br>　　按照这种方式，也许能够有效提高效率，搭建出更加完善的站点。</p>
<font size="5">[如对本文有什么建议或者错漏的地方，非常欢迎您通过评论指出，衷心感谢!]</font>]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[考勤系统(四) MFC UI控件之ListCtrl]]></title>
      <url>/2015/05/11/%E8%80%83%E5%8B%A4%E7%B3%BB%E7%BB%9F-%E5%9B%9B-MFC-UI%E6%8E%A7%E4%BB%B6%E4%B9%8BListCtrl/</url>
      <content type="html"><![CDATA[<p>To Be Done…<br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[考勤系统(三) MFC UI控件之ComboBox]]></title>
      <url>/2015/05/11/%E8%80%83%E5%8B%A4%E7%B3%BB%E7%BB%9F-%E4%B8%89-MFC-UI%E6%8E%A7%E4%BB%B6%E4%B9%8BComboBox/</url>
      <content type="html"><![CDATA[<p>To Be Done…</p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[考勤系统(一) 搭建起项目需要的开发环境]]></title>
      <url>/2015/05/06/%E8%80%83%E5%8B%A4%E7%B3%BB%E7%BB%9F-%E4%B8%80-%E6%90%AD%E5%BB%BA%E8%B5%B7%E9%A1%B9%E7%9B%AE%E9%9C%80%E8%A6%81%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<ul>
<li>从这里获取配置需要的安装文件<a href="http://yunpan.cn/cjqxCLtCfLNvW">点击获取</a>访问密码 <strong>a89b</strong></li>
<li>安装MySQL数据库（按照一般的软件安装进行安装）</li>
<li>安装MySQL ODBC驱动并进行数据源的配置(参见共享中的pdf教程)</li>
<li>安装VC6.0++进行开发(win7以上的请参考.txt文件)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[考勤系统(二) MFC ADO连接MySQL数据库]]></title>
      <url>/2015/04/30/%E8%80%83%E5%8B%A4%E7%B3%BB%E7%BB%9F-%E4%BA%8C-MFC-ADO%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<ol>
<li><a href="#step01">引入ADO库定义文件</a>； </li>
<li><a href="#step02">声明AdoMysqlHelper辅助类</a>； </li>
<li><a href="#step03">实现AdoMysqlHelper辅助类</a>； </li>
<li><a href="#step04">小结一下</a>.<br>　　我的本本是<strong>win7-64位</strong>的，<strong>MySQL是5.6.21</strong>的，需要安装MySQL驱动的可以从这里下载安装，里面的.pdf文档有本教程需要的驱动环境的配置教程<a href="http://yunpan.cn/cjqxCLtCfLNvW">点击获取</a>访问密码 <strong>a89b</strong>(从这里也可以获取VC++6.0安装包以及32位的MySQL数据库安装包)。</li>
</ol>
<a id="more"></a>
<p><img src="/img/03frame.png"/><br><img src="/img/03HelperClass.png"/><br>　　上面是整个项目的类截图，以及数据库辅助类的方法截图。本章主要介绍如何构建自己的数据库辅助类(类名可以任意)。在按照之前的教程创建单文档项目后，会自动生成入口函数所在的….<strong>App类</strong>以及<strong>stdafx.h头文件</strong>(下面会讲到)。这一步只是让你对项目框架以及我们需要修改或者创建的文件在哪里有个大概的了解。接下来，我们开始动手连接操作MySQL数据库。</p>
<h2 id="第一步，引入ADO库定义文件。"><a href="#第一步，引入ADO库定义文件。" class="headerlink" title="第一步，引入ADO库定义文件。"></a><strong><span id="step01">第一步，引入ADO库定义文件。</span></strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入ado动态链接库 并将EOF重命名为adoEOF, BOF重命名为adoBOF防止命名冲突</span></div><div class="line"><span class="meta">#import <span class="meta-string">"c:/program files/common files/system/ado/msado15.dll"</span> no_namespace rename (<span class="meta-string">"EOF"</span>,<span class="meta-string">"adoEOF"</span>) rename(<span class="meta-string">"BOF"</span>,<span class="meta-string">"adoBOF"</span>)`</span></div></pre></td></tr></table></figure>
<p><strong>注意： </strong>import ado动态链接库时，为了防止命名冲突，将<strong>动态库中的EOF重命名为adoEOF, BOF重命名为adoBOF</strong>。<br>　　安装完MySQL驱动之后，在C盘的c:/program files/common files/system/ado/下会有ado所需库文件(可能不同系统略有差异，但大致都在类似路径下，按照相似路径可以大概找到msado15.dll所在路径)，通过import将其导入我们的MFC程序。为了方便，我们直接在stdafx.h文件中添加上述代码实现导入。</p>
<h2 id="第二步，声明AdoMysqlHelper辅助类。"><a href="#第二步，声明AdoMysqlHelper辅助类。" class="headerlink" title="第二步，声明AdoMysqlHelper辅助类。"></a><strong><span id="step02">第二步，声明AdoMysqlHelper辅助类。</span></strong></h2><p>　　VC++6.0 -&gt;File(文件) -&gt;New(新建) -&gt;C/C++ Header File来创建AdoMysqlHelper.h头文件，内容如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 通过ADO操作MySQL数据库辅助类 */</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(ADO_MYSQL_HELPER_H)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ADO_MYSQL_HELPER_H</span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER &gt; 1000</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _MSC_VER &gt; 1000</span></span></div><div class="line"> </div><div class="line"><span class="keyword">struct</span> Record&#123;</div><div class="line">   CString UID;</div><div class="line">   CString name;</div><div class="line"> &#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> records&#123;</div><div class="line">   CString UID;</div><div class="line">   CString name;</div><div class="line">   <span class="keyword">struct</span> records* next;</div><div class="line">&#125; Records;</div><div class="line"><span class="keyword">class</span> AdoMysqlHelper&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line"> <span class="comment">//连接数据库</span></div><div class="line"> _<span class="function">ConnectionPtr <span class="title">mySQL_connect</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line"> <span class="comment">//关闭数据库</span></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">mySQL_close</span><span class="params">(_ConnectionPtr&amp; m_pConnection)</span></span>;</div><div class="line"> </div><div class="line"> <span class="comment">//对数据库进行添加操作</span></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">mySQL_add</span><span class="params">(<span class="keyword">struct</span> Record record)</span></span>;</div><div class="line"> </div><div class="line"> <span class="comment">//对数据库进行删除操作</span></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">mySQL_delete</span><span class="params">(CString uid)</span></span>;</div><div class="line"> </div><div class="line"> <span class="comment">//对数据库进行更新操作</span></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">mySQL_update</span><span class="params">(CString uid, <span class="keyword">struct</span> Record record)</span></span>;</div><div class="line"> </div><div class="line"> <span class="comment">//对数据库进行查询操作</span></div><div class="line"> <span class="function"><span class="keyword">struct</span> Record <span class="title">mySQL_query</span><span class="params">(CString cond)</span></span>;</div><div class="line"> </div><div class="line"> <span class="comment">//获取数据库中所有记录</span></div><div class="line"> <span class="function">Records* <span class="title">mySQL_fetchAll</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !defined(ADO_MYSQL_HELPER_H)</span></span></div></pre></td></tr></table></figure></p>
<p>　　主要功能包括打开、关闭数据库；本项目使用到的数据库的增删改查。下面在实现AdoMysqlHelper辅助类中逐一介绍。</p>
<h2 id="第三步，-实现AdoMysqlHelper辅助类。"><a href="#第三步，-实现AdoMysqlHelper辅助类。" class="headerlink" title="第三步， 实现AdoMysqlHelper辅助类。"></a><strong><span id="step03">第三步， 实现AdoMysqlHelper辅助类。</span></strong></h2><p>　　VC++6.0 -&gt;File(文件) -&gt;New(新建) -&gt;C++ Source File来创建AdoMysqlHelper.cpp源文件，实现上述函数，内容会在下面逐一描述。<br><strong>1. 创建连接与关闭连接。</strong><br>　　初始化COM组件：在使用ADO之前，需要初始化COM组件，这里介绍实现过程中使用的两种可行的方法。第一种是直接在InitInstance()函数中加入下面代码，通过AfxOleInit()函数进行初始化。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化COM运行环境</span></div><div class="line"> <span class="keyword">if</span>(!AfxOleInit())&#123;</div><div class="line">  AfxMessageBox(<span class="string">"初始化COM控件失败"</span>);</div><div class="line">  <span class="keyword">return</span> FALSE;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>　　另外一种就是每次在打开数据库连接的前调用CoInitialize函数，在关闭连接之后调用。CoUninitialize函数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  CoInitialize(<span class="literal">NULL</span>); <span class="comment">// 打开数据之前</span></div><div class="line">​  CoUninitialize();   <span class="comment">// 关闭数据库之后</span></div></pre></td></tr></table></figure></p>
<p>　　这里推荐第一种，只需执行初始化，MFC会自动释放，比较方便，而且也不需要像第二种一样每次连接就调用。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">_ConnectionPtr AdoMysqlHelper::mySQL_connect()&#123;</div><div class="line">   <span class="comment">// 打开数据库，获取连接</span></div><div class="line">   _ConnectionPtr m_pConnection;</div><div class="line">   <span class="comment">// CoInitialize(NULL);  // 使用第二种初始化COM组件</span></div><div class="line">   m_pConnection.CreateInstance(__uuidof(Connection)); <span class="comment">// 实例化智能指针</span></div><div class="line">   m_pConnection-&gt;ConnectionTimeout = <span class="number">5</span>; <span class="comment">//设置连接超时时间</span></div><div class="line">   <span class="keyword">try</span> &#123;  </div><div class="line">     <span class="comment">//打开数据库连接  </span></div><div class="line">    HRESULT hr = m_pConnection-&gt;Open(<span class="string">"DSN=MySqlODBC;server=localhost;database=数据库名称"</span>,<span class="string">"用户名"</span>,<span class="string">"密码"</span>,adModeUnknown);  </div><div class="line">   &#125; <span class="keyword">catch</span>(_com_error &amp;e)&#123;</div><div class="line">    AfxMessageBox(e.Description()); </div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">  &#125; </div><div class="line">  <span class="keyword">return</span> m_pConnection;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　mySQL_connect函数用于获取_ConnectionPtr智能指针，m_pConnection-&gt;Open函数的第一个参数为连接字串, DSN/database的值根据ODBC数据源中的设置决定，server一般为localhost。第二个参数为数据库登陆用户名，第三个参数为登陆密码，第四个参数指定Connection对象对数据库的更新许可权,adModeUnknown缺省,当前的许可权未设置,adModeRead只读,adModeWrite只写,adModeReadWrite可以读写。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> AdoMysqlHelper::mySQL_close(_ConnectionPtr&amp; m_pConnection)&#123;</div><div class="line">    <span class="comment">// 关闭一个库连接</span></div><div class="line">    <span class="keyword">if</span>(m_pConnection-&gt;State)&#123;</div><div class="line">        m_pConnection-&gt;Close();</div><div class="line">    &#125;</div><div class="line">    m_pConnection= <span class="literal">NULL</span>;</div><div class="line">    <span class="comment">//CoUninitialize(); // 取消com初始化，线程结束</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　关闭数据库连接则要简单地多，通过State判断连接状态，假如连接存在，则将其Close同时将连接置空。最后，如果是通过上述第二种方法进行COM的初始化的，关闭连接之后需要调用CoUninitialize取消COM初始化<strong>(下图是本教程使用的users表的结构)</strong><br>　　<img src="/img/03table.png"/></p>
<p><strong>2. 查询记录。</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Record AdoMysqlHelper::mySQL_query(CString cond)&#123;</div><div class="line">    <span class="comment">// 首先需要获取连接</span></div><div class="line">    _ConnectionPtr m_pConnection;</div><div class="line">    m_pConnection = <span class="keyword">this</span>-&gt;mySQL_connect(); </div><div class="line">    <span class="keyword">struct</span> Record record;</div><div class="line"> </div><div class="line">    <span class="comment">// 打开数据表</span></div><div class="line">    _RecordsetPtr m_pRecordset;</div><div class="line">    m_pRecordset.CreateInstance(__uuidof(Recordset)); <span class="comment">// 创建一个实例的智能指针</span></div><div class="line">    <span class="keyword">_variant_t</span> sql = <span class="string">"SELECT * FROM users where "</span> + cond;</div><div class="line"> </div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        m_pRecordset-&gt;Open(sql, <span class="comment">// Source</span></div><div class="line">                           <span class="keyword">_variant_t</span>((IDispatch*)m_pConnection, <span class="literal">true</span>),</div><div class="line">                           adOpenStatic, <span class="comment">// 游标类型</span></div><div class="line">                           adLockReadOnly, <span class="comment">// 表示数据库的锁定类型</span></div><div class="line">                           adCmdText); <span class="comment">// Source的类型</span></div><div class="line">    &#125;<span class="keyword">catch</span>(_com_error e)&#123;</div><div class="line">        <span class="comment">// Open函数需要放在try中进行异常处理</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!m_pRecordset-&gt;adoEOF)&#123;</div><div class="line">            m_pRecordset-&gt;MoveFirst();</div><div class="line">            <span class="comment">// 通过GetCollect获取数据集中数据的方法</span></div><div class="line">            <span class="comment">//_variant_t  UID = m_pRecordset-&gt;GetCollect("UID");</span></div><div class="line">            <span class="comment">//_variant_t  name = m_pRecordset-&gt;GetCollect("name");</span></div><div class="line"> </div><div class="line">            <span class="comment">// 通过GetValue获取数据集中数据的方法</span></div><div class="line">            <span class="keyword">_variant_t</span>  UID = m_pRecordset-&gt;Fields-&gt;GetItem(<span class="string">"UID"</span>)-&gt;GetValue();</div><div class="line">            <span class="keyword">_variant_t</span>  name = m_pRecordset-&gt;Fields-&gt;GetItem(<span class="string">"name"</span>)-&gt;GetValue();</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(UID.vt != VT_NULL)&#123;</div><div class="line">                record.UID = (LPCSTR)<span class="keyword">_bstr_t</span>(UID);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(name.vt != VT_NULL)&#123;</div><div class="line">                record.name = (LPCSTR)<span class="keyword">_bstr_t</span>(name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            record.UID = <span class="string">""</span>;    </div><div class="line">            record.name = <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>(_com_error *e)</div><div class="line">    &#123;</div><div class="line">        AfxMessageBox(e-&gt;ErrorMessage());</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">this</span>-&gt;mySQL_close(m_pConnection);</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> record;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　cond为类似”UID=xxx”的查询条件字符串，可用于根据任一字段查询数据表中的数据。<br>　　首先需要创建一个数据集的智能指针m_pRecordset，通过该智能指针的Open方法打开数据表，第一个参数为数据源，可以是sql语句或者表名，最后一个参数与此对应，如果Source是SQL语句，则是adCmdText,如果Source是表名，则是adCmdTable。第二个参数关联的数据库连接，通过connect函数获取的连接智能指针。第三个参数是游标类型,adOpenForwardOnly静态只能向前滚(默认值)打开仅向前类型游标;adOpenStatic打开静态类型游标(双向);adOpenDynamic动态类型,可以看到所有的操作;adOpenKeyset动态游标,但是无法看到记录被删除的操作,只能看到更新的。对此不太熟悉的，建议使用这里推荐的adOpenStatic。第四个参数是记录锁定类型。adLockReadOnly只读;adLockPessimistic保守式锁定(逐个)悲观,修改即加锁,较占用资源;adLockOptimistic开放式锁(逐个)乐观,仅在Update时才加锁;adLockBatchOptimistic批量处理。这里建议在查询操作是选择adLockReadOnly只读，在增删改操作时选择adLockOptimistic开放式锁。<br><strong>注意： </strong>打开操作操作需要放在try-catch中进行异常处理。<br>　　获取数据集之后，我们需要通过一些属性来判断数据集的情况。可以通过m_pRecordset-&gt;adoBOF判断游标是否在开始的位置，如是，则返回true;通过m_pRecordset-&gt;adoEOF判断游标是否在最后一条记录的位置;<br><strong>注意：</strong>此处的adoEOF必须与第一步导入ADO动态库中rename (“EOF”,”adoEOF”)重命名动态库中的EOF为adoEOF保持一致。<br>　　此处的adoEOF、adoBOF为上述我们import库文件是通过rename修改的m_pRecordset智能指针的属性名。或者通过LONG nCount = m_pRecordset-&gt;GetRecordCount();获取记录总数，不过GetRecordCount返回的是数据表曾经移动到的最大记录号，返回值可能会一直为-1。建议使用m_pRecordset-&gt;adoEOF。<br>　　为了获取数据，有时需要移动游标进行遍历:m_pRecordset-&gt;MoveFirst()移动到第一条;m_pRecordset-&gt;MoveLast()移动到最后一条;m_pRecordset-&gt;MovePrevious()移动到前一条;m_pRecordset-&gt;MoveNext()移动到下一条;如下面的fetchAll函数通过下面方式遍历数据集中的所有数据：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">m_pRecordset-&gt;MoveFirst();</div><div class="line"><span class="keyword">while</span>(!m_pRecordset-&gt;adoEOF)&#123;</div><div class="line">    ....;</div><div class="line">    m_pRecordset-&gt;MoveNext();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来介绍如何通过游标从数据集中获取各字段的数据。<br>　　通过m_pRecordset-&gt;GetCollect(“字段名”)的方法；<br>　　通过m_pRecordset-&gt;Fields-&gt;GetItem(“字段名”)-&gt;GetValue()的方法。<br>这两个函数的返回值类型都是_variant_t,通过其”.vt”判断字段值是否为空,不为空则通过(LPCSTR)_bstr_t(“_variant_t字段值”)转换为字符串。<br>下面的fetchAll函数通过控制游标，获取users表中的所有数据，通过链表的方式存放起来并返回。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">Records* AdoMysqlHelper::mySQL_fetchAll()&#123;</div><div class="line">    Records* records = <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line">    _ConnectionPtr m_pConnection;</div><div class="line">    m_pConnection = <span class="keyword">this</span>-&gt;mySQL_connect();</div><div class="line"> </div><div class="line">    _RecordsetPtr m_pRecordset;</div><div class="line">    m_pRecordset.CreateInstance(__uuidof(Recordset));</div><div class="line">    <span class="keyword">_variant_t</span> sql = <span class="string">"SELECT * FROM users order by UID DESC"</span>; <span class="comment">// 排序方便查看</span></div><div class="line"> </div><div class="line">    m_pRecordset-&gt;Open( sql,</div><div class="line">                        <span class="keyword">_variant_t</span>((IDispatch*)m_pConnection,<span class="literal">true</span>),</div><div class="line">                        adOpenStatic,</div><div class="line">                        adLockReadOnly,</div><div class="line">                        adCmdText);</div><div class="line"> </div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!m_pRecordset-&gt;adoEOF)&#123;</div><div class="line">            records = <span class="keyword">new</span> Records; <span class="comment">// 使用malloc报错...</span></div><div class="line">            m_pRecordset-&gt;MoveFirst();</div><div class="line">            <span class="keyword">_variant_t</span>  UID = m_pRecordset-&gt;GetCollect(<span class="string">"UID"</span>);</div><div class="line">            <span class="keyword">_variant_t</span>  name = m_pRecordset-&gt;GetCollect(<span class="string">"name"</span>);</div><div class="line">            <span class="keyword">if</span>(UID.vt != VT_NULL)&#123;</div><div class="line">                records-&gt;UID = (LPCSTR)<span class="keyword">_bstr_t</span>(UID);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(name.vt != VT_NULL)&#123;</div><div class="line">                records-&gt;name = (LPCSTR)<span class="keyword">_bstr_t</span>(name);</div><div class="line">            &#125;</div><div class="line">            records-&gt;next = <span class="literal">NULL</span>;</div><div class="line"> </div><div class="line">            m_pRecordset-&gt;MoveNext();</div><div class="line"> </div><div class="line">            <span class="keyword">while</span>(!m_pRecordset-&gt;adoEOF)&#123;</div><div class="line">                Records* tmp = <span class="keyword">new</span> Records;</div><div class="line">                <span class="keyword">_variant_t</span>  UID = m_pRecordset-&gt;GetCollect(<span class="string">"UID"</span>);</div><div class="line">                <span class="keyword">_variant_t</span>  name = m_pRecordset-&gt;GetCollect(<span class="string">"name"</span>);</div><div class="line">                <span class="keyword">if</span>(UID.vt != VT_NULL)&#123;</div><div class="line">                    tmp-&gt;UID = (LPCSTR)<span class="keyword">_bstr_t</span>(UID);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(name.vt != VT_NULL)&#123;</div><div class="line">                    tmp-&gt;name = (LPCSTR)<span class="keyword">_bstr_t</span>(name);</div><div class="line">                &#125;</div><div class="line">                tmp-&gt;next = records;</div><div class="line">                records = tmp;</div><div class="line">                m_pRecordset-&gt;MoveNext();</div><div class="line">            &#125;</div><div class="line">        &#125;    </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>(_com_error *e)</div><div class="line">    &#123;</div><div class="line">        AfxMessageBox(e-&gt;ErrorMessage());</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="keyword">this</span>-&gt;mySQL_close(m_pConnection);</div><div class="line">    <span class="keyword">return</span> records;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意： </strong>在所有操作之后，记得调用close函数关闭数据库！<br><strong>3. 增加记录。</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> AdoMysqlHelper::mySQL_add(<span class="keyword">struct</span> Record record)&#123;</div><div class="line">    _ConnectionPtr m_pConnection;</div><div class="line">    m_pConnection = <span class="keyword">this</span>-&gt;mySQL_connect();</div><div class="line"> </div><div class="line">    _RecordsetPtr m_pRecordset;</div><div class="line">    <span class="comment">// 创建一个实例的智能指针</span></div><div class="line">    m_pRecordset.CreateInstance(__uuidof(Recordset));</div><div class="line">    <span class="comment">// 打开数据表 </span></div><div class="line">    <span class="comment">/* 如果Source是SQL语句，则是adCmdText,如果Source是表名，则是adCmdTable */</span></div><div class="line">    m_pRecordset-&gt;Open(<span class="string">"SELECT * FROM users"</span>, <span class="comment">// Source</span></div><div class="line">                        <span class="keyword">_variant_t</span>((IDispatch*)m_pConnection, <span class="literal">true</span>),</div><div class="line">                        adOpenStatic, <span class="comment">// 游标类型</span></div><div class="line">                        adLockOptimistic, <span class="comment">// 表示数据库的锁定类型</span></div><div class="line">                        adCmdText); <span class="comment">// Source的类型</span></div><div class="line">    <span class="comment">// 判断能否进行数据插入</span></div><div class="line">    <span class="comment">/*</div><div class="line">    if(!(m_pRecordset-&gt;Supports(adAddNew)))&#123;</div><div class="line">        return;</div><div class="line">    &#125;*/</span></div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 插入新的一行</span></div><div class="line">        m_pRecordset-&gt;AddNew();</div><div class="line">        <span class="comment">// 写入各字段值</span></div><div class="line">        m_pRecordset-&gt;PutCollect(<span class="string">"UID"</span>, <span class="keyword">_variant_t</span>(record.UID));</div><div class="line">        m_pRecordset-&gt;PutCollect(<span class="string">"name"</span>, <span class="keyword">_variant_t</span>(record.name));</div><div class="line">        <span class="comment">// 插入之后必须调用Update进行修改</span></div><div class="line">        m_pRecordset-&gt;Update();</div><div class="line">        AfxMessageBox(<span class="string">"插入成功!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>(_com_error *e)</div><div class="line">    &#123;</div><div class="line">        AfxMessageBox(e-&gt;ErrorMessage());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>-&gt;mySQL_close(m_pConnection);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　插入记录按照之前讲述的方式打开数据库，获取数据集。之后可以通过调用m_pRecordset-&gt;Supports(adAddNew)来判断能否进行插入操作，这里还是推荐直接放在try-catch里面进行操作就行了。类似的通过Supports也可以检测能否进行修改(adUpdate)、删除(adDelete)等。<br>　　插入记录的流程是，通过m_pRecordset-&gt;AddNew()插入新一行，然后通过m_pRecordset-&gt;PutCollect(“字段名”, _variant_t(‘字段值’))插入各个字段的值，最后必须调用m_pRecordset-&gt;Update()才能生效！<br><strong>4. 修改记录。</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> AdoMysqlHelper::mySQL_update(CString uid, <span class="keyword">struct</span> Record record)&#123;</div><div class="line">    _ConnectionPtr m_pConnection;</div><div class="line">    m_pConnection = <span class="keyword">this</span>-&gt;mySQL_connect();</div><div class="line"> </div><div class="line">    _RecordsetPtr m_pRecordset;</div><div class="line">    m_pRecordset.CreateInstance(__uuidof(Recordset));</div><div class="line">    <span class="keyword">_variant_t</span> sql = <span class="string">"SELECT * FROM users where UID=\'"</span> + uid + <span class="string">"\'"</span>;</div><div class="line">    m_pRecordset-&gt;Open( sql,</div><div class="line">                        <span class="keyword">_variant_t</span>((IDispatch*)m_pConnection,<span class="literal">true</span>),</div><div class="line">                        adOpenStatic,</div><div class="line">                        adLockOptimistic,</div><div class="line">                        adCmdText);</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        m_pRecordset-&gt;MoveFirst();</div><div class="line">        <span class="comment">//m_pRecordset-&gt;PutCollect("name", _variant_t(record.name));</span></div><div class="line">        <span class="comment">// 另外一种</span></div><div class="line">        m_pRecordset-&gt;Fields-&gt;GetItem(<span class="string">"name"</span>)-&gt;Value = <span class="keyword">_variant_t</span>(record.name);</div><div class="line"></div><div class="line">        m_pRecordset-&gt;Update();</div><div class="line">        AfxMessageBox(<span class="string">"修改成功!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>(_com_error *e)</div><div class="line">    &#123;</div><div class="line">        AfxMessageBox(e-&gt;ErrorMessage());</div><div class="line">    &#125; </div><div class="line">    <span class="keyword">this</span>-&gt;mySQL_close(m_pConnection);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述的修改函数，通过指定uid找到对应的数据集，然后可以通过下面两种不同方式进行字段值的修改：<br>　　m_pRecordset-&gt;PutCollect(“修改字段名”, _variant_t(修改后的字段值));<br>　　m_pRecordset-&gt;Fields-&gt;GetItem(“修改字段名”)-&gt;Value = _variant_t(修改后的字段值);<br>最后，同样的需要调用Update让更新生效。<br><strong>5. 删除记录。</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> AdoMysqlHelper::mySQL_delete(CString uid)&#123;</div><div class="line">    _ConnectionPtr m_pConnection;</div><div class="line">    m_pConnection = <span class="keyword">this</span>-&gt;mySQL_connect();</div><div class="line"> </div><div class="line">    <span class="comment">/* 创建_CommandPtr智能指针实例 */</span></div><div class="line">    _CommandPtr m_pCommand;</div><div class="line">    m_pCommand.CreateInstance(<span class="string">"ADODB.Command"</span>);</div><div class="line"> </div><div class="line">    <span class="comment">// 设置命令的相关参数</span></div><div class="line">    <span class="keyword">_variant_t</span> vNULL;</div><div class="line">    vNULL.vt = VT_ERROR;</div><div class="line">    vNULL.scode = DISP_E_PARAMNOTFOUND;    <span class="comment">//定义为无参数</span></div><div class="line">    m_pCommand-&gt;ActiveConnection = m_pConnection;    <span class="comment">//非常关键的一句，将建立的连接赋值给它</span></div><div class="line">    m_pCommand-&gt;CommandText = <span class="string">"delete FROM users where UID=\'"</span>+ ((<span class="keyword">_bstr_t</span>)uid) +<span class="string">"\'"</span>;    <span class="comment">//命令字串</span></div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        m_pCommand-&gt;Execute(&amp;vNULL, &amp;vNULL, adCmdText);    <span class="comment">//执行删除命令</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>(_com_error *e)</div><div class="line">    &#123;</div><div class="line">        AfxMessageBox(e-&gt;ErrorMessage());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>-&gt;mySQL_close(m_pConnection);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　上述方式通过_CommandPtr命令智能指针执行删除指定uid记录的SQL语句实现删除功能。首先需要获取连接智能指针以及命令智能指针；接着，对命令智能指针进行相关参数的设置，包括m_pCommand-&gt;ActiveConnection将指定连接与命令相关联，然后通过m_pCommand-&gt;CommandText设置我们要执行的SQL语句，最后通过m_pCommand-&gt;Execute执行SQL语句，完成删除功能。<br>　　也可以通过下面的方法，直接调用m_pRecordset-&gt;Delete方法，按照上述的方式通过uid进行查询获取数据集，然后删除当前行(adAffectCurrent)或者删除整个查询得到的数据集(adAffectAll)进行数据的删除，但是这种方式的问题是对于按照中文进行查询获取的数据集，似乎没办法进行删除。所以，这里推荐使用上面的第一种方式。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">_RecordsetPtr m_pRecordset;</div><div class="line"><span class="comment">// 创建一个实例的智能指针</span></div><div class="line">m_pRecordset.CreateInstance(__uuidof(Recordset));</div><div class="line"><span class="comment">// 打开数据表</span></div><div class="line">m_pRecordset-&gt;Open(<span class="keyword">_variant_t</span>(<span class="string">"SELECT * FROM users where UID=\'"</span>+uid+<span class="string">"\'"</span>), <span class="comment">// Source</span></div><div class="line">                <span class="keyword">_variant_t</span>((IDispatch*)m_pConnection, <span class="literal">true</span>),</div><div class="line">                adOpenStatic, <span class="comment">// 游标类型</span></div><div class="line">                adLockOptimistic, <span class="comment">// 表示数据库的锁定类型</span></div><div class="line">                adCmdText); <span class="comment">// Source的类型</span></div><div class="line"><span class="comment">// 判断能否删除？</span></div><div class="line"><span class="keyword">if</span>(!(m_pRecordset-&gt;Supports(adDelete)))&#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//m_pRecordset-&gt;Delete(adAffectAll);</span></div><div class="line">    m_pRecordset-&gt;Delete(adAffectCurrent);</div><div class="line">    AfxMessageBox(<span class="string">"删除成功!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(_com_error *e)</div><div class="line">&#123;</div><div class="line">    AfxMessageBox(e-&gt;ErrorMessage());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="最后，小结一下。"><a href="#最后，小结一下。" class="headerlink" title="最后，小结一下。"></a><strong><span id="step04">最后，小结一下。</span></strong></h2><p>　　到这里，我们基本上讲完我们MFC项目中如何通过ADO访问MySQL数据库，进而实现我们需要的功能。我们将对数据库的所有操作封装在一个Helper数据库辅助类中，实现如何获取数据库连接以及如何将连接关闭。以及如何实现对数据库的增、删、改、查操作。其中也涉及了<strong>如何引入ADO动态链接库</strong>，以及与之相关的<strong>连接(_ConnectionPtr)、数据集(_RecordsetPtr)、命令(_CommandPtr)三种智能指针的一些操作</strong>。按照上述想法，应该可以成功实现对数据库的基本操作，赶紧试一下吧。 </p>
<p>　　下一讲，将会介绍一下这次项目中使用的几种UI功能实现，包括弹出自定义对话款、满足需求的信息框、列表框等。</p>
]]></content>
      
        <categories>
            
            <category> TA Cources </category>
            
            <category> IoT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MFC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[win搭建hexo]]></title>
      <url>/2015/04/30/hexo_win%E6%90%AD%E5%BB%BAhexo/</url>
      <content type="html"><![CDATA[<p>[转发教程]<br>　　hexo系列教程：（一）<a href="http://zipperary.com/2013/05/28/hexo-guide-1/">hexo介绍</a> (<a href="http://amwdh8qe3u.l57.yunpan.cn/lk/cVZ72aHDvW5Nz">获取安装文件</a> 访问密码 <strong>2f87</strong>)。 可以通过阅读共享中的.txt笔记进行快速入门;<br>    <center><img src="/img/hexo/hexo_get_started.png" width="640px"/></center></p>
<a id="more"></a>
<p>　　hexo系列教程：（二）<a href="http://zipperary.com/2013/05/28/hexo-guide-2/">搭建hexo博客</a>;<br>　　hexo系列教程：（三）<a href="http://zipperary.com/2013/05/29/hexo-guide-3/">hexo博客的配置、使用</a>;<br>　　hexo系列教程：（四）<a href="http://zipperary.com/2013/05/30/hexo-guide-4/">hexo博客的优化技巧</a>;<br>　　hexo系列教程：（五）<a href="http://zipperary.com/2013/06/02/hexo-guide-5/">hexo博客的优化技巧续</a> <strong>(介绍到如何插入本地图片)</strong>;<br>　　更多: 　　　　　<a href="http://ibruce.info/2013/11/22/hexo-your-blog">hexo你的博客</a>;<br>　　      　　　　　      <a href="http://blog.xiaohansong.com/2015/06/17/%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/">用hexo搭建github博客</a>.</p>
<p>　　Markdown快速入门: <a href="http://lutaf.com/markdown-simple-usage.htm">Markdown 简明语法</a>. </p>
<p>  安装过程中如遇到问题，可以参考 <a href="https://hexo.io/docs/">https://hexo.io/docs/</a>  </p>
]]></content>
      
        <categories>
            
            <category> 技术留档 </category>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
